Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
7.1.3 Block tags
Any of the standard "block tags" that are used appear in the order `@param` , `@return` , `@throws` , `@deprecated` , and these four types never appear with an empty description. When a block tag doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the `@` .

CheckStyle Rules:
[Rule]
SingleLineJavadoc
[Description]
Checks that a Javadoc block can fit in a single-line and doesn't
contain block tags. Javadoc comment that contains at least one block tag
should be formatted in a few lines.
[Rule]
JavadocTagContinuationIndentation
[Description]
Checks the indentation of the continuation lines in block tags.
That is whether the
continued description of at clauses should be indented or not. If the text is not properly
indented it throws a violation. A continuation line is when the description starts/spans
past the line with the tag. Default indentation required is at least 4, but this can be
changed with the help of properties below.
[Rule]
NonEmptyAtclauseDescription
[Description]
Checks that the block tag is followed by description.
[Rule]
JavadocBlockTagLocation
[Description]
Checks that a

javadoc block tag appears only at the beginning of a line, ignoring
leading asterisks and white space. A block tag is a token that starts
with @ symbol and is preceded by a whitespace. This check
ignores block tags in comments and inside inline tags {@code } and
{@literal }.


Rationale: according to

the specification all javadoc block tags should be placed at the
beginning of a line. Tags that are not placed at the beginning are treated
as plain text. To recognize intentional tag placement to text area
it is better to escape the @ symbol, and all non-escaped
tags should be located at the beginning of the line. See NOTE section
for details on how to escape.
[Rule]
RequireEmptyLineBeforeBlockTagGroup
[Description]
Checks that one blank line before the block tag if it is present in Javadoc.
[Rule]
AtclauseOrder
[Description]
Checks the order of

javadoc block-tags or javadoc tags.


Note: Google used the term "at-clauses" for block tags in their guide till 2017-02-28.
[Rule]
WriteTag
[Description]
Requires user defined Javadoc tag to be present in Javadoc comment with
defined format. To define the format for a tag, set property tagFormat to a regular
expression. Property tagSeverity is used for severity of events when the tag exists.
[Rule]
InvalidJavadocPosition
[Description]
Checks that Javadocs are located at the correct position.
As specified at

Documentation Comment Specification for the Standard Doclet,
Javadocs are recognized only when placed immediately before module, package, class,
interface, constructor, method, or field declarations. Any other position, like
in the body of a method, will be ignored by the javadoc tool and is considered
invalid by this check.
[Rule]
AvoidNestedBlocks
[Description]
Finds nested blocks (blocks that are used freely in the code).


Rationale: Nested blocks are often leftovers from the
debugging process, they confuse the reader.


For example, this check finds the obsolete braces in



public void guessTheOutput()
{
int whichIsWhich = 0;
{
whichIsWhich = 2;
}
System.out.println("value = " + whichIsWhich);
}

and debugging / refactoring leftovers such as


// if (conditionThatIsNotUsedAnyLonger)
{
System.out.println("unconditional");
}


A case in a switch statement does not implicitly form a block.
Thus, to be able to introduce local variables that have case
scope it is necessary to open a nested block. This is
supported, set the allowInSwitchCase property to true and
include all statements of the case in the block.
[Rule]
RightCurly
[Description]
Checks the placement of right curly braces ('}') for code blocks.
This check supports if-else, try-catch-finally blocks, switch statements, switch cases,
while-loops, for-loops, method definitions, class definitions, constructor definitions,
instance, static initialization blocks, annotation definitions and enum definitions.
For right curly brace of expression blocks of arrays, lambdas and class instances
please follow issue
#5945.
For right curly brace of enum constant please follow issue
#7519.

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
