[
    {
        "title": "\n    About\n   ",
        "belongs to": "\n    About\n   ",
        "cases": [
            {
                "description": "\n    This file documents\n    \n     guidance about how to best apply the Go Style Guide\n    \n    .\nThis guidance is intended for common situations that arise frequently, but may\nnot apply in every circumstance. Where possible, multiple alternative approaches\nare discussed along with the considerations that go into the decision about when\nand when not to apply them.\n   \n    See\n    \n     the overview\n    \n    for the full set of Style Guide documents.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Naming\n   ",
        "belongs to": "\n    Naming\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Function and method names\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Avoid repetition\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Avoid repetition\n   ",
        "cases": [
            {
                "description": "\n    When choosing the name for a function or method, consider the context in which\nthe name will be read. Consider the following recommendations to avoid excess\n    \n     repetition\n    \n    at the call site:\n   \n\n\n      The following can generally be omitted from function and method names:\n     \n\n\n       The types of the inputs and outputs (when there is no collision)\n      \n\n       The type of a method’s receiver\n      \n\n       Whether an input or output is a pointer\n      \n\n\n\n\n      For functions, do not\n      \n       repeat the name of the package\n      \n      .\n     \n\n\n// Bad:\npackage yamlconfig\n\nfunc ParseYAMLConfig(input string) (*Config, error)\n\n\n\n\n\n// Good:\npackage yamlconfig\n\nfunc Parse(input string) (*Config, error)\n\n\n\n\n\n\n      For methods, do not repeat the name of the method receiver.\n     \n\n\n// Bad:\nfunc (c *Config) WriteConfigTo(w io.Writer) (int64, error)\n\n\n\n\n\n// Good:\nfunc (c *Config) WriteTo(w io.Writer) (int64, error)\n\n\n\n\n\n\n      Do not repeat the names of variables passed as parameters.\n     \n\n\n// Bad:\nfunc OverrideFirstWithSecond(dest, source *Config) error\n\n\n\n\n\n// Good:\nfunc Override(dest, source *Config) error\n\n\n\n\n\n\n      Do not repeat the names and types of the return values.\n     \n\n\n// Bad:\nfunc TransformYAMLToJSON(input *Config) *jsonconfig.Config\n\n\n\n\n\n// Good:\nfunc Transform(input *Config) *jsonconfig.Config\n\n\n\n\n\n    When it is necessary to disambiguate functions of a similar name, it is\nacceptable to include extra information.\n   \n\n// Good:\nfunc (c *Config) WriteTextTo(w io.Writer) (int64, error)\nfunc (c *Config) WriteBinaryTo(w io.Writer) (int64, error)\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Naming conventions\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Naming conventions\n   ",
        "cases": [
            {
                "description": "\n    There are some other common conventions when choosing names for functions and\nmethods:\n   \n\n\n      Functions that return something are given noun-like names.\n     \n\n\n// Good:\nfunc (c *Config) JobName(key string) (value string, ok bool)\n\n\n\n\n      A corollary of this is that function and method names should\n      \n       avoid the prefix\n       \n        Get\n       \n\n      .\n     \n\n\n// Bad:\nfunc (c *Config) GetJobName(key string) (value string, ok bool)\n\n\n\n\n\n\n      Functions that do something are given verb-like names.\n     \n\n\n// Good:\nfunc (c *Config) WriteDetail(w io.Writer) (int64, error)\n\n\n\n\n\n\n      Identical functions that differ only by the types involved include the name\nof the type at the end of the name.\n     \n\n\n// Good:\nfunc ParseInt(input string) (int, error)\nfunc ParseInt64(input string) (int64, error)\nfunc AppendInt(buf []byte, value int) []byte\nfunc AppendInt64(buf []byte, value int64) []byte\n\n\n\n\n      If there is a clear “primary” version, the type can be omitted from the name\nfor that version:\n     \n\n\n// Good:\nfunc (c *Config) Marshal() ([]byte, error)\nfunc (c *Config) MarshalText() (string, error)\n\n\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Test double packages and types\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   ",
        "cases": [
            {
                "description": "\n    There are several disciplines you can apply to\n    \n     naming\n    \n    packages and types that\nprovide test helpers and especially\n    \n     test doubles\n    \n    . A test double could be a\nstub, fake, mock, or spy.\n   \n    These examples mostly use stubs. Update your names accordingly if your code uses\nfakes or another kind of test double.\n   \n    Suppose you have a well-focused package providing production code similar to\nthis:\n   \n\npackage creditcard\n\nimport (\n    \"errors\"\n\n    \"path/to/money\"\n)\n\n// ErrDeclined indicates that the issuer declines the charge.\nvar ErrDeclined = errors.New(\"creditcard: declined\")\n\n// Card contains information about a credit card, such as its issuer,\n// expiration, and limit.\ntype Card struct {\n    // omitted\n}\n\n// Service allows you to perform operations with credit cards against external\n// payment processor vendors like charge, authorize, reimburse, and subscribe.\ntype Service struct {\n    // omitted\n}\n\nfunc (s *Service) Charge(c *Card, amount money.Money) error { /* omitted */ }\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Creating test helper packages\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Creating test helper packages\n   ",
        "cases": [
            {
                "description": "\n    Suppose you want to create a package that contains test doubles for another.\nWe’ll use\n    \n     package creditcard\n    \n    (from above) for this example:\n   ",
                "example": [
                    "\n    One approach is to introduce a new Go package based on the production one for\ntesting. A safe choice is to append the word\n    \n     test\n    \n    to the original package name\n(“creditcard” + “test”):\n   "
                ]
            },
            {
                "description": "\n\n// Good:\npackage creditcardtest\n\n\n\n    Unless stated explicitly otherwise, all examples in the sections below are in\n    \n     package creditcardtest\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Simple case\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Simple case\n   ",
        "cases": [
            {
                "description": "\n    You want to add a set of test doubles for\n    \n     Service\n    \n    . Because\n    \n     Card\n    \n    is\neffectively a dumb data type, similar to a Protocol Buffer message, it needs no\nspecial treatment in tests, so no double is required. If you anticipate only\ntest doubles for one type (like\n    \n     Service\n    \n    ), you can take a concise approach to\nnaming the doubles:\n   \n\n// Good:\nimport (\n    \"path/to/creditcard\"\n    \"path/to/money\"\n)\n\n// Stub stubs creditcard.Service and provides no behavior of its own.\ntype Stub struct{}\n\nfunc (Stub) Charge(*creditcard.Card, money.Money) error { return nil }\n\n\n\n    This is strictly preferable to a naming choice like\n    \n     StubService\n    \n    or the very\npoor\n    \n     StubCreditCardService\n    \n    , because the base package name and its domain types\nimply what\n    \n     creditcardtest.Stub\n    \n    is.\n   \n    Finally, if the package is built with Bazel, make sure the new\n    \n     go_library\n    \n    rule\nfor the package is marked as\n    \n     testonly\n    \n    :\n   ",
                "example": [
                    "# Good:\ngo_library(\n    name = \"creditcardtest\",\n    srcs = [\"creditcardtest.go\"],\n    deps = [\n        \":creditcard\",\n        \":money\",\n    ],\n    testonly = True,\n)\n"
                ]
            },
            {
                "description": "\n    The approach above is conventional and will be reasonably well understood by\nother engineers.\n   \n    See also:\n   \n\n\n      Go Tip #42: Authoring a Stub for Testing\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Multiple test double behaviors\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Multiple test double behaviors\n   ",
        "cases": [
            {
                "description": "\n    When one kind of stub is not enough (for example, you also need one that always\nfails), we recommend naming the stubs according to the behavior they emulate.\nHere we rename\n    \n     Stub\n    \n    to\n    \n     AlwaysCharges\n    \n    and introduce a new stub called\n    \n     AlwaysDeclines\n    \n    :\n   \n\n// Good:\n// AlwaysCharges stubs creditcard.Service and simulates success.\ntype AlwaysCharges struct{}\n\nfunc (AlwaysCharges) Charge(*creditcard.Card, money.Money) error { return nil }\n\n// AlwaysDeclines stubs creditcard.Service and simulates declined charges.\ntype AlwaysDeclines struct{}\n\nfunc (AlwaysDeclines) Charge(*creditcard.Card, money.Money) error {\n    return creditcard.ErrDeclined\n}\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Multiple doubles for multiple types\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Multiple doubles for multiple types\n   ",
        "cases": [
            {
                "description": "\n    But now suppose that\n    \n     package creditcard\n    \n    contains multiple types worth creating\ndoubles for, as seen below with\n    \n     Service\n    \n    and\n    \n     StoredValue\n    \n    :\n   \n\npackage creditcard\n\ntype Service struct {\n    // omitted\n}\n\ntype Card struct {\n    // omitted\n}\n\n// StoredValue manages customer credit balances.  This applies when returned\n// merchandise is credited to a customer's local account instead of processed\n// by the credit issuer.  For this reason, it is implemented as a separate\n// service.\ntype StoredValue struct {\n    // omitted\n}\n\nfunc (s *StoredValue) Credit(c *Card, amount money.Money) error { /* omitted */ }\n\n\n\n    In this case, more explicit test double naming is sensible:\n   \n\n// Good:\ntype StubService struct{}\n\nfunc (StubService) Charge(*creditcard.Card, money.Money) error { return nil }\n\ntype StubStoredValue struct{}\n\nfunc (StubStoredValue) Credit(*creditcard.Card, money.Money) error { return nil }\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Local variables in tests\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Local variables in tests\n   ",
        "cases": [
            {
                "description": "\n    When variables in your tests refer to doubles, choose a name that most clearly\ndifferentiates the double from other production types based on context. Consider\nsome production code you want to test:\n   \n\npackage payment\n\nimport (\n    \"path/to/creditcard\"\n    \"path/to/money\"\n)\n\ntype CreditCard interface {\n    Charge(*creditcard.Card, money.Money) error\n}\n\ntype Processor struct {\n    CC CreditCard\n}\n\nvar ErrBadInstrument = errors.New(\"payment: instrument is invalid or expired\")\n\nfunc (p *Processor) Process(c *creditcard.Card, amount money.Money) error {\n    if c.Expired() {\n        return ErrBadInstrument\n    }\n    return p.CC.Charge(c, amount)\n}\n\n\n\n    In the tests, a test double called a “spy” for\n    \n     CreditCard\n    \n    is juxtaposed\nagainst production types, so prefixing the name may improve clarity.\n   \n\n// Good:\npackage payment\n\nimport \"path/to/creditcardtest\"\n\nfunc TestProcessor(t *testing.T) {\n    var spyCC creditcardtest.Spy\n\n    proc := &Processor{CC: spyCC}\n\n    // declarations omitted: card and amount\n    if err := proc.Process(card, amount); err != nil {\n        t.Errorf(\"proc.Process(card, amount) = %v, want %v\", got, want)\n    }\n\n    charges := []creditcardtest.Charge{\n        {Card: card, Amount: amount},\n    }\n\n    if got, want := spyCC.Charges, charges; !cmp.Equal(got, want) {\n        t.Errorf(\"spyCC.Charges = %v, want %v\", got, want)\n    }\n}\n\n\n\n    This is clearer than when the name is not prefixed.\n   \n\n// Bad:\npackage payment\n\nimport \"path/to/creditcardtest\"\n\nfunc TestProcessor(t *testing.T) {\n    var cc creditcardtest.Spy\n\n    proc := &Processor{CC: cc}\n\n    // declarations omitted: card and amount\n    if err := proc.Process(card, amount); err != nil {\n        t.Errorf(\"proc.Process(card, amount) = %v, want %v\", got, want)\n    }\n\n    charges := []creditcardtest.Charge{\n        {Card: card, Amount: amount},\n    }\n\n    if got, want := cc.Charges, charges; !cmp.Equal(got, want) {\n        t.Errorf(\"cc.Charges = %v, want %v\", got, want)\n    }\n}\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Shadowing\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Shadowing\n   ",
        "cases": [
            {
                "description": "\n\n     Note:\n    \n    This explanation uses two informal terms,\n    \n     stomping\n    \n    and\n    \n     shadowing\n    \n    .\nThey are not official concepts in the Go language spec.\n   \n    Like many programming languages, Go has mutable variables: assigning to a\nvariable changes its value.\n   \n\n// Good:\nfunc abs(i int) int {\n    if i < 0 {\n        i *= -1\n    }\n    return i\n}\n\n\n\n    When using\n    \n     short variable declarations\n    \n    with the\n    \n     :=\n    \n    operator, in some cases a\nnew variable is not created. We can call this\n    \n     stomping\n    \n    . It’s OK to do this\nwhen the original value is no longer needed.\n   \n\n// Good:\n// innerHandler is a helper for some request handler, which itself issues\n// requests to other backends.\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    // Unconditionally cap the deadline for this part of request handling.\n    ctx, cancel := context.WithTimeout(ctx, 3*time.Second)\n    defer cancel()\n    ctxlog.Info(ctx, \"Capped deadline in inner request\")\n\n    // Code here no longer has access to the original context.\n    // This is good style if when first writing this, you anticipate\n    // that even as the code grows, no operation legitimately should\n    // use the (possibly unbounded) original context that the caller provided.\n\n    // ...\n}\n\n\n\n    Be careful using short variable declarations in a new scope, though: that\nintroduces a new variable. We can call this\n    \n     shadowing\n    \n    the original variable.\nCode after the end of the block refers to the original. Here is a buggy attempt\nto shorten the deadline conditionally:\n   \n\n// Bad:\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    // Attempt to conditionally cap the deadline.\n    if *shortenDeadlines {\n        ctx, cancel := context.WithTimeout(ctx, 3*time.Second)\n        defer cancel()\n        ctxlog.Info(ctx, \"Capped deadline in inner request\")\n    }\n\n    // BUG: \"ctx\" here again means the context that the caller provided.\n    // The above buggy code compiled because both ctx and cancel\n    // were used inside the if statement.\n\n    // ...\n}\n\n\n\n    A correct version of the code might be:\n   \n\n// Good:\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    if *shortenDeadlines {\n        var cancel func()\n        // Note the use of simple assignment, = and not :=.\n        ctx, cancel = context.WithTimeout(ctx, 3*time.Second)\n        defer cancel()\n        ctxlog.Info(ctx, \"Capped deadline in inner request\")\n    }\n    // ...\n}\n\n\n\n    In the case we called stomping, because there’s no new variable, the type being\nassigned must match that of the original variable. With shadowing, an entirely\nnew entity is introduced so it can have a different type. Intentional shadowing\ncan be a useful practice, but you can always use a new name if it improves\n    \n     clarity\n    \n    .\n   \n    It is not a good idea to use variables with the same name as standard packages\nother than very small scopes, because that renders free functions and values\nfrom that package inaccessible. Conversely, when picking a name for your\npackage, avoid names that are likely to require\n    \n     import renaming\n    \n    or cause shadowing of otherwise\ngood variable names at the client side.\n   \n\n// Bad:\nfunc LongFunction() {\n    url := \"https://example.com/\"\n    // Oops, now we can't use net/url in code below.\n}\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Util packages\n   ",
        "belongs to": "\n    Naming\n   /\n    Function and method names\n   /\n    Test double packages and types\n   /\n    Util packages\n   ",
        "cases": [
            {
                "description": "\n    Go packages have a name specified on the\n    \n     package\n    \n    declaration, separate from\nthe import path. The package name matters more for readability than the path.\n   \n    Go package names should be\n    \n     related to what the package provides\n    \n    . Naming a\npackage just\n    \n     util\n    \n    ,\n    \n     helper\n    \n    ,\n    \n     common\n    \n    or similar is usually a poor choice (it\ncan be used as\n    \n     part\n    \n    of the name though). Uninformative names make the code\nharder to read, and if used too broadly they are liable to cause needless\n    \n     import conflicts\n    \n    .\n   \n    Instead, consider what the callsite will look like.\n   \n\n// Good:\ndb := spannertest.NewDatabaseFromFile(...)\n\n_, err := f.Seek(0, io.SeekStart)\n\nb := elliptic.Marshal(curve, x, y)\n\n\n\n    You can tell roughly what each of these do even without knowing the imports list\n(\n    \n     cloud.google.com/go/spanner/spannertest\n    \n    ,\n    \n     io\n    \n    , and\n    \n     crypto/elliptic\n    \n    ). With\nless focused names, these might read:\n   \n\n// Bad:\ndb := test.NewDatabaseFromFile(...)\n\n_, err := f.Seek(0, common.SeekStart)\n\nb := helper.Marshal(curve, x, y)\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Package size\n   ",
        "belongs to": "\n    Package size\n   ",
        "cases": [
            {
                "description": "\n    If you’re asking yourself how big your Go packages should be and whether to\nplace related types in the same package or split them into different ones, a\ngood place to start is the\n    \n     Go blog post about package names\n    \n    .\nDespite the post title, it’s not solely about naming. It contains some helpful\nhints and cites several useful articles and talks.\n   \n    Here are some other considerations and notes.\n   \n    Users see\n    \n     godoc\n    \n    for the package in one page, and any methods exported by types\nsupplied by the package are grouped by their type. Godoc also group constructors\nalong with the types they return. If\n    \n     client code\n    \n    is likely to need two values\nof different type to interact with each other, it may be convenient for the user\nto have them in the same package.\n   \n    Code within a package can access unexported identifiers in the package. If you\nhave a few related types whose\n    \n     implementation\n    \n    is tightly coupled, placing them\nin the same package lets you achieve this coupling without polluting the public\nAPI with these details. A good test for this coupling is to imagine a\nhypothetical user of two packages, where the packages cover closely related\ntopics: if the user must import both packages in order to use either in any\nmeaningful way, combining them together is usually the right thing to do. The\nstandard library generally demonstrates this kind of scoping and layering well.\n   \n    All of that being said, putting your entire project in a single package would\nlikely make that package too large. When something is conceptually distinct,\ngiving it its own small package can make it easier to use. The short name of the\npackage as known to clients together with the exported type name work together\nto make a meaningful identifier: e.g.\n    \n     bytes.Buffer\n    \n    ,\n    \n     ring.New\n    \n    . The\n    \n     blog post\n    \n    has more examples.\n   \n    Go style is flexible about file size, because maintainers can move code within a\npackage from one file to another without affecting callers. But as a general\nguideline: it is usually not a good idea to have a single file with many\nthousands of lines in it, or having many tiny files. There is no “one type, one\nfile” convention as in some other languages. As a rule of thumb, files should be\nfocused enough that a maintainer can tell which file contains something, and the\nfiles should be small enough that it will be easy to find once there. The\nstandard library often splits large packages to several source files, grouping\nrelated code by file. The source for\n    \n     package\n     \n      bytes\n     \n\n    is a good example.\nPackages with long package documentation may choose to dedicate one file called\n    \n     doc.go\n    \n    that has the\n    \n     package documentation\n    \n    , a\npackage declaration, and nothing else, but this is not required.\n   \n    Within the Google codebase and in projects using Bazel, directory layout for Go\ncode is different than it is in open source Go projects: you can have multiple\n    \n     go_library\n    \n    targets in a single directory. A good reason to give each package\nits own directory is if you expect to open source your project in the future.\n   \n    See also:\n   \n\n\n      Test double packages\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Imports\n   ",
        "belongs to": "\n    Imports\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Protos and stubs\n   ",
        "belongs to": "\n    Imports\n   /\n    Protos and stubs\n   ",
        "cases": [
            {
                "description": "\n    Proto library imports are treated differently than standard Go imports due to\ntheir cross-language nature. The convention for renamed proto imports are based\non the rule that generated the package:\n   \n\n     The\n     \n      pb\n     \n     suffix is generally used for\n     \n      go_proto_library\n     \n     rules.\n    \n\n     The\n     \n      grpc\n     \n     suffix is generally used for\n     \n      go_grpc_library\n     \n     rules.\n    \n\n    Generally, a short one- or two-letter prefix is used:\n   \n\n// Good:\nimport (\n    fspb \"path/to/package/foo_service_go_proto\"\n    fsgrpc \"path/to/package/foo_service_go_grpc\"\n)\n\n\n\n    If there is only a single proto used by a package or the package is tied closely\nto that proto, the prefix can be omitted:\n   \n    import ( pb “path/to/package/foo_service_go_proto” grpc\n“path/to/package/foo_service_go_grpc” )\n   \n    If the symbols in the proto are generic or are not very self-descriptive, or if\nshortening the package name with an acronym is unclear, a short word can suffice\nas the prefix:\n   \n\n// Good:\nimport (\n    mapspb \"path/to/package/maps_go_proto\"\n)\n\n\n\n    In this case\n    \n     mapspb.Address\n    \n    might be clearer than\n    \n     mpb.Address\n    \n    if the code in\nquestion is not already clearly related to maps.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Import ordering\n   ",
        "belongs to": "\n    Imports\n   /\n    Import ordering\n   ",
        "cases": [
            {
                "description": "\n    Imports are typically grouped into the following two (or more) blocks, in order:\n   \n\n     Standard library imports (e.g.,\n     \n      \"fmt\"\n     \n     )\n    \n\n     imports (e.g., “/path/to/somelib”)\n    \n\n     (optional) Protobuf imports (e.g.,\n     \n      fpb \"path/to/foo_go_proto\"\n     \n     )\n    \n\n     (optional) Side-effect imports (e.g.,\n     \n      _ \"path/to/package\"\n     \n     )\n    \n\n    If a file does not have a group for one of the optional categories above, the\nrelevant imports are included in the project import group.\n   \n    Any import grouping that is clear and easy to understand is generally fine. For\nexample, a team may choose to group gRPC imports separately from protobuf\nimports.\n   \n\n\n      Note:\n     \n     For code maintaining only the two mandatory groups (one group for\nthe standard library and one for all other imports), the\n     \n      goimports\n     \n     tool\nproduces output consistent with this guidance.\n    \n\n     However,\n     \n      goimports\n     \n     has no knowledge of groups beyond the mandatory ones; the\noptional groups are prone to invalidation by the tool. When optional groups\nare used, attention on the part of both authors and reviewers is required to\nensure that groupings remain compliant.\n    \n\n     Either approach is fine, but do not leave the imports section in an\ninconsistent, partially grouped state.\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Error handling\n   ",
        "belongs to": "\n    Error handling\n   ",
        "cases": [
            {
                "description": "\n    In Go,\n    \n     errors are values\n    \n    ; they are created by code and consumed by code.\nErrors can be:\n   \n\n     Converted into diagnostic information for display to humans\n    \n\n     Used by the maintainer\n    \n\n     Interpreted by an end user\n    \n\n    Error messages also show up across a variety of different surfaces including log\nmessages, error dumps, and rendered UIs.\n   \n    Code that processes (produces or consumes) errors should do so deliberately. It\ncan be tempting to ignore or blindly propagate an error return value. However,\nit is always worth considering whether the current function in the call frame is\npositioned to handle the error most effectively. This is a large topic and it is\nhard to give categorical advice. Use your judgment, but keep the following\nconsiderations in mind:\n   \n\n     When creating an error value, decide whether to give it any\n     \n      structure\n     \n     .\n    \n\n     When handling an error, consider\n     \n      adding information\n     \n     that you have but that the caller and/or callee might not.\n    \n\n     See also guidance on\n     \n      error logging\n     \n     .\n    \n\n    While it is usually not appropriate to ignore an error, a reasonable exception\nto this is when orchestrating related operations, where often only the first\nerror is useful. Package\n    \n\n      errgroup\n     \n\n    provides a convenient abstraction for a\ngroup of operations that can all fail or be canceled as a group.\n   \n    See also:\n   \n\n\n      Effective Go on errors\n     \n\n\n\n      A post by the Go Blog on errors\n     \n\n\n\n      Package\n      \n       errors\n      \n\n\n\n\n      Package\n      \n       upspin.io/errors\n      \n\n\n\n\n      GoTip #89: When to Use Canonical Status Codes as Errors\n     \n\n\n\n      GoTip #48: Error Sentinel Values\n     \n\n\n\n      GoTip #13: Designing Errors for Checking\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Error structure\n   ",
        "belongs to": "\n    Error handling\n   /\n    Error structure\n   ",
        "cases": [
            {
                "description": "\n    If callers need to interrogate the error (e.g., distinguish different error\nconditions), give the error value structure so that this can be done\nprogrammatically rather than having the caller perform string matching. This\nadvice applies to production code as well as to tests that care about different\nerror conditions.\n   \n    The simplest structured errors are unparameterized global values.\n   \n\ntype Animal string\n\nvar (\n    // ErrDuplicate occurs if this animal has already been seen.\n    ErrDuplicate = errors.New(\"duplicate\")\n\n    // ErrMarsupial occurs because we're allergic to marsupials outside Australia.\n    // Sorry.\n    ErrMarsupial = errors.New(\"marsupials are not supported\")\n)\n\nfunc process(animal Animal) error {\n    switch {\n    case seen[animal]:\n        return ErrDuplicate\n    case marsupial(animal):\n        return ErrMarsupial\n    }\n    seen[animal] = true\n    // ...\n    return nil\n}\n\n\n\n    The caller can simply compare the returned error value of the function with one\nof the known error values:\n   \n\n// Good:\nfunc handlePet(...) {\n    switch err := process(an); err {\n    case ErrDuplicate:\n        return fmt.Errorf(\"feed %q: %v\", an, err)\n    case ErrMarsupial:\n        // Try to recover with a friend instead.\n        alternate = an.BackupAnimal()\n        return handlePet(..., alternate, ...)\n    }\n}\n\n\n\n    The above uses sentinel values, where the error must be equal (in the sense of\n    \n     ==\n    \n    ) to the expected value. That is perfectly adequate in many cases. If\n    \n     process\n    \n    returns wrapped errors (discussed below), you can use\n    \n\n      errors.Is\n     \n\n    .\n   \n\n// Good:\nfunc handlePet(...) {\n    switch err := process(an); {\n    case errors.Is(err, ErrDuplicate):\n        return fmt.Errorf(\"feed %q: %v\", an, err)\n    case errors.Is(err, ErrMarsupial):\n        // ...\n    }\n}\n\n\n\n    Do not attempt to distinguish errors based on their string form. (See\n    \n     Go Tip #13: Designing Errors for Checking\n    \n    for more.)\n   \n\n// Bad:\nfunc handlePet(...) {\n    err := process(an)\n    if regexp.MatchString(`duplicate`, err.Error()) {...}\n    if regexp.MatchString(`marsupial`, err.Error()) {...}\n}\n\n\n\n    If there is extra information in the error that the caller needs\nprogrammatically, it should ideally be presented structurally. For example, the\n    \n\n      os.PathError\n     \n\n    type is documented to place the pathname of the failing\noperation in a struct field which the caller can easily access.\n   \n    Other error structures can be used as appropriate, for example a project struct\ncontaining an error code and detail string.\n    \n     Package\n     \n      status\n     \n\n    is a\ncommon encapsulation; if you choose this approach (which you are not obligated\nto do), use\n    \n     canonical codes\n    \n    . See\n    \n     Go Tip #89: When to Use Canonical Status Codes as Errors\n    \n    to know if using status codes is the right choice.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Adding information to errors\n   ",
        "belongs to": "\n    Error handling\n   /\n    Adding information to errors\n   ",
        "cases": [
            {
                "description": "\n    Any function returning an error should strive to make the error value useful.\nOften, the function is in the middle of a callchain and is merely propagating an\nerror from some other function that it called (maybe even from another package).\nHere there is an opportunity to annotate the error with extra information, but\nthe programmer should ensure there’s sufficient information in the error without\nadding duplicate or irrelevant detail. If you’re unsure, try triggering the\nerror condition during development: that’s a good way to assess what the\nobservers of the error (either humans or code) will end up with.\n   \n    Convention and good documentation help. For example, the standard package\n    \n     os\n    \n    advertises that its errors contain path information when it is available. This\nis a useful style, because callers getting back an error don’t need to annotate\nit with information that they had already provided the failing function.\n   \n\n// Good:\nif err := os.Open(\"settings.txt\"); err != nil {\n    return err\n}\n\n// Output:\n//\n// open settings.txt: no such file or directory\n\n\n\n    If there is something interesting to say about the\n    \n     meaning\n    \n    of the error, of\ncourse it can be added. Just consider which level of the callchain is best\npositioned to understand this meaning.\n   \n\n// Good:\nif err := os.Open(\"settings.txt\"); err != nil {\n    // We convey the significance of this error to us. Note that the current\n    // function might perform more than one file operation that can fail, so\n    // these annotations can also serve to disambiguate to the caller what went\n    // wrong.\n    return fmt.Errorf(\"launch codes unavailable: %v\", err)\n}\n\n// Output:\n//\n// launch codes unavailable: open settings.txt: no such file or directory\n\n\n\n    Contrast with the redundant information here:\n   \n\n// Bad:\nif err := os.Open(\"settings.txt\"); err != nil {\n    return fmt.Errorf(\"could not open settings.txt: %w\", err)\n}\n\n// Output:\n//\n// could not open settings.txt: open settings.txt: no such file or directory\n\n\n\n    When adding information to a propagated error, you can either wrap the error or\npresent a fresh error. Wrapping the error with the\n    \n     %w\n    \n    verb in\n    \n     fmt.Errorf\n    \n    allows callers to access data from the original error. This can be very useful\nat times, but in other cases these details are misleading or uninteresting to\nthe caller. See the\n    \n     blog post on error wrapping\n    \n    for more\ninformation. Wrapping errors also expands the API surface of your package in a\nnon-obvious way, and this can cause breakages if you change the implementation\ndetails of your package.\n   \n    It is best to avoid using\n    \n     %w\n    \n    unless you also document (and have tests that\nvalidate) the underlying errors that you expose. If you do not expect your\ncaller to call\n    \n     errors.Unwrap\n    \n    ,\n    \n     errors.Is\n    \n    and so on, don’t bother with\n    \n     %w\n    \n    .\n   \n    The same concept applies to\n    \n     structured errors\n    \n    like\n    \n\n      *status.Status\n     \n\n    (see\n    \n     canonical codes\n    \n    ). For example, if your server\nsends malformed requests to a backend and receives an\n    \n     InvalidArgument\n    \n    code,\nthis code should\n    \n     not\n    \n    be propagated to the client, assuming that the client has\ndone nothing wrong. Instead, return an\n    \n     Internal\n    \n    canonical code to the client.\n   \n    However, annotating errors helps automated logging systems preserve the status\npayload of an error. For example, annotating the error is appropriate in an\ninternal function:\n   \n\n// Good:\nfunc (s *Server) internalFunction(ctx context.Context) error {\n    // ...\n    if err != nil {\n        return fmt.Errorf(\"couldn't find remote file: %w\", err)\n    }\n}\n\n\n\n    Code directly at system boundaries (typically RPC, IPC, storage, and similar)\nshould report errors using the canonical error space. It is the responsibility\nof code here to handle domain-specific errors and represent them canonically.\nFor example:\n   ",
                "example": [
                    "\n\n// Bad:\nfunc (*FortuneTeller) SuggestFortune(context.Context, *pb.SuggestionRequest) (*pb.SuggestionResponse, error) {\n    // ...\n    if err != nil {\n        return nil, fmt.Errorf(\"couldn't find remote file: %w\", err)\n    }\n}\n\n\n"
                ]
            },
            {
                "description": "\n\n// Good:\nimport (\n    \"google.golang.org/grpc/codes\"\n    \"google.golang.org/grpc/status\"\n)\nfunc (*FortuneTeller) SuggestFortune(context.Context, *pb.SuggestionRequest) (*pb.SuggestionResponse, error) {\n    // ...\n    if err != nil {\n        // Or use fmt.Errorf with the %w verb if deliberately wrapping an\n        // error which the caller is meant to unwrap.\n        return nil, status.Errorf(codes.Internal, \"couldn't find fortune database\", status.ErrInternal)\n    }\n}\n\n\n\n    See also:\n   \n\n\n      Error Documentation Conventions\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Placement of %w in errors\n   ",
        "belongs to": "\n    Error handling\n   /\n    Placement of %w in errors\n   ",
        "cases": [
            {
                "description": "\n    Prefer to place\n    \n     %w\n    \n    at the end of an error string.\n   \n    Errors can be wrapped with\n    \n     the\n     \n      %w\n     \n     verb\n    \n    , or by placing them in a\n    \n     structured error\n    \n    that\nimplements\n    \n     Unwrap() error\n    \n    (ex:\n    \n\n      fs.PathError\n     \n\n    ).\n   \n    Wrapped errors form error chains: each new layer of wrapping adds a new entry to\nthe front of the error chain. The error chain can be traversed with the\n    \n     Unwrap() error\n    \n    method. For example:\n   ",
                "example": [
                    "\n\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2: %w\", err1)\nerr3 := fmt.Errorf(\"err3: %w\", err2)\n\n\n"
                ]
            },
            {
                "description": "\n    This forms an error chain of the form,\n   ",
                "example": [
                    "flowchart LR\n  err3 == err3 wraps err2 ==> err2;\n  err2 == err2 wraps err1 ==> err1;\n"
                ]
            },
            {
                "description": "\n    Regardless of where the\n    \n     %w\n    \n    verb is placed, the error returned always\nrepresents the front of the error chain, and the\n    \n     %w\n    \n    is the next child.\nSimilarly,\n    \n     Unwrap() error\n    \n    always traverses the error chain from newest to\noldest error.\n   \n    Placement of the\n    \n     %w\n    \n    verb does, however, affect whether the error chain is\nprinted newest to oldest, oldest to newest, or neither:\n   \n\n// Good:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2: %w\", err1)\nerr3 := fmt.Errorf(\"err3: %w\", err2)\nfmt.Println(err3) // err3: err2: err1\n// err3 is a newest-to-oldest error chain, that prints newest-to-oldest.\n\n\n\n\n// Bad:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"%w: err2\", err1)\nerr3 := fmt.Errorf(\"%w: err3\", err2)\nfmt.Println(err3) // err1: err2: err3\n// err3 is a newest-to-oldest error chain, that prints oldest-to-newest.\n\n\n\n\n// Bad:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2-1 %w err2-2\", err1)\nerr3 := fmt.Errorf(\"err3-1 %w err3-2\", err2)\nfmt.Println(err3) // err3-1 err2-1 err1 err2-2 err3-2\n// err3 is a newest-to-oldest error chain, that neither prints newest-to-oldest\n// nor oldest-to-newest.\n\n\n\n    Therefore, in order for error text to mirror error chain structure, prefer\nplacing the\n    \n     %w\n    \n    verb at the end with the form\n    \n     [...]: %w\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Logging errors\n   ",
        "belongs to": "\n    Error handling\n   /\n    Logging errors\n   ",
        "cases": [
            {
                "description": "\n    Functions sometimes need to tell an external system about an error without\npropagating it to their callers. Logging is an obvious choice here; but be\nconscious of what and how you log errors.\n   \n\n\n      Like\n      \n       good test failure messages\n      \n      , log messages should clearly express what\nwent wrong and help the maintainer by including relevant information to\ndiagnose the problem.\n     \n\n\n\n      Avoid duplication. If you return an error, it’s usually better not to log it\nyourself but rather let the caller handle it. The caller can choose to log\nthe error, or perhaps rate-limit logging using\n      \n\n        rate.Sometimes\n       \n\n      . Other\noptions include attempting recovery or even\n      \n       stopping the program\n      \n      . In any\ncase, giving the caller control helps avoid logspam.\n     \n\n      The downside to this approach, however, is that any logging is written using\nthe caller’s line coordinates.\n     \n\n\n\n      Be careful with\n      \n       PII\n      \n      . Many log sinks are not appropriate destinations for\nsensitive end-user information.\n     \n\n\n\n      Use\n      \n       log.Error\n      \n      sparingly. ERROR level logging causes a flush and is more\nexpensive than lower logging levels. This can have serious performance\nimpact on your code. When deciding between error and warning levels,\nconsider the best practice that messages at the error level should be\nactionable rather than “more serious” than a warning.\n     \n\n\n\n      Inside Google, we have monitoring systems that can be set up for more\neffective alerting than writing to a log file and hoping someone notices it.\nThis is similar but not identical to the standard library\n      \n       package\n       \n        expvar\n       \n\n      .\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Custom verbosity levels\n   ",
        "belongs to": "\n    Error handling\n   /\n    Logging errors\n   /\n    Custom verbosity levels\n   ",
        "cases": [
            {
                "description": "\n    Use verbose logging (\n    \n\n      log.V\n     \n\n    ) to your advantage. Verbose logging can be useful\nfor development and tracing. Establishing a convention around verbosity levels\ncan be helpful. For example:\n   ",
                "example": [
                    "\n\n     Write a small amount of extra information at\n     \n      V(1)\n     \n\n\n     Trace more information in\n     \n      V(2)\n     \n\n\n     Dump large internal states in\n     \n      V(3)\n     \n\n"
                ]
            },
            {
                "description": "\n    To minimize the cost of verbose logging, you should ensure not to accidentally\ncall expensive functions even when\n    \n     log.V\n    \n    is turned off.\n    \n     log.V\n    \n    offers two\nAPIs. The more convenient one carries the risk of this accidental expense. When\nin doubt, use the slightly more verbose style.\n   \n\n// Good:\nfor _, sql := range queries {\n  log.V(1).Infof(\"Handling %v\", sql)\n  if log.V(2) {\n    log.Infof(\"Handling %v\", sql.Explain())\n  }\n  sql.Run(...)\n}\n\n\n\n\n// Bad:\n// sql.Explain called even when this log is not printed.\nlog.V(2).Infof(\"Handling %v\", sql.Explain())\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Program initialization\n   ",
        "belongs to": "\n    Error handling\n   /\n    Logging errors\n   /\n    Program initialization\n   ",
        "cases": [
            {
                "description": "\n    Program initialization errors (such as bad flags and configuration) should be\npropagated upward to\n    \n     main\n    \n    , which should call\n    \n     log.Exit\n    \n    with an error that\nexplains how to fix the error. In these cases,\n    \n     log.Fatal\n    \n    should not generally\nbe used, because a stack trace that points at the check is not likely to be as\nuseful as a human-generated, actionable message.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Program checks and panics\n   ",
        "belongs to": "\n    Error handling\n   /\n    Logging errors\n   /\n    Program checks and panics\n   ",
        "cases": [
            {
                "description": "\n    As stated in the\n    \n     decision against panics\n    \n    , standard error handling should be\nstructured around error return values. Libraries should prefer returning an\nerror to the caller rather than aborting the program, especially for transient\nerrors.\n   \n    It is occasionally necessary to perform consistency checks on an invariant and\nterminate the program if it is violated. In general, this is only done when a\nfailure of the invariant check means that the internal state has become\nunrecoverable. The most reliable way to do this in the Google codebase is to\ncall\n    \n     log.Fatal\n    \n    . Using\n    \n     panic\n    \n    in these cases is not reliable, because it is\npossible for deferred functions to deadlock or further corrupt internal or\nexternal state.\n   \n    Similarly, resist the temptation to recover panics to avoid crashes, as doing so\ncan result in propagating a corrupted state. The further you are from the panic,\nthe less you know about the state of the program, which could be holding locks\nor other resources. The program can then develop other unexpected failure modes\nthat can make the problem even more difficult to diagnose. Instead of trying to\nhandle unexpected panics in code, use monitoring tools to surface unexpected\nfailures and fix related bugs with a high priority.\n   \n\n     Note:\n    \n    The standard\n    \n\n      net/http\n     \n     server\n    \n    violates this advice and recovers\npanics from request handlers. Consensus among experienced Go engineers is that\nthis was a historical mistake. If you sample server logs from application\nservers in other languages, it is common to find large stacktraces that are left\nunhandled. Avoid this pitfall in your servers.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    When to panic\n   ",
        "belongs to": "\n    Error handling\n   /\n    Logging errors\n   /\n    When to panic\n   ",
        "cases": [
            {
                "description": "\n    The standard library panics on API misuse. For example,\n    \n\n      reflect\n     \n\n    issues a\npanic in many cases where a value is accessed in a way that suggests it was\nmisinterpreted. This is analogous to the panics on core language bugs such as\naccessing an element of a slice that is out of bounds. Code review and tests\nshould discover such bugs, which are not expected to appear in production code.\nThese panics act as invariant checks that do not depend on a library, as the\nstandard library does not have access to the\n    \n     levelled\n     \n      log\n     \n\n    package that the\nGoogle codebase uses.\n   \n    Another case in which panics can be useful, though uncommon, is as an internal\nimplementation detail of a package which always has a matching recover in the\ncallchain. Parsers and similar deeply nested, tightly coupled internal function\ngroups can benefit from this design, where plumbing error returns adds\ncomplexity without value. The key attribute of this design is that these panics\nare never allowed to escape across package boundaries and do not form part of\nthe package’s API. This is typically accomplished with a top-level deferred\nrecover that translates a propagating panic into a returned error at the public\nAPI surfaces.\n   \n    Panic is also used when the compiler cannot identify unreachable code, for\nexample when using a function like\n    \n     log.Fatal\n    \n    that will not return:\n   \n\n// Good:\nfunc answer(i int) string {\n    switch i {\n    case 42:\n        return \"yup\"\n    case 54:\n        return \"base 13, huh\"\n    default:\n        log.Fatalf(\"Sorry, %d is not the answer.\", i)\n        panic(\"unreachable\")\n    }\n}\n\n\n\n\n     Do not call\n     \n      log\n     \n     functions before flags have been parsed.\n    \n    If you must die in an\n    \n     init\n    \n    func, a panic is acceptable in place of the logging\ncall.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Documentation\n   ",
        "belongs to": "\n    Documentation\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Conventions\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   ",
        "cases": [
            {
                "description": "\n    This section augments the decisions document’s\n    \n     commentary\n    \n    section.\n   \n    Go code that is documented in familiar style is easier to read and less likely\nto be misused than something misdocumented or not documented at all. Runnable\n    \n     examples\n    \n    show up in Godoc and Code Search and are an excellent way of\nexplaining how to use your code.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Parameters and configuration\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Parameters and configuration\n   ",
        "cases": [
            {
                "description": "\n    Not every parameter must be enumerated in the documentation. This applies to:\n   \n\n     function and method parameters\n    \n\n     struct fields\n    \n\n     APIs for options\n    \n\n    Document the error-prone or non-obvious fields and parameters by saying why they\nare interesting.\n   \n    In the following snippet, the highlighted commentary adds little useful\ninformation to the reader:\n   \n\n// Bad:\n// Sprintf formats according to a format specifier and returns the resulting\n// string.\n//\n// format is the format, and data is the interpolation data.\nfunc Sprintf(format string, data ...any) string\n\n\n\n    However, this snippet demonstrates a code scenario similar to the previous where\nthe commentary instead states something non-obvious or materially helpful to the\nreader:\n   \n\n// Good:\n// Sprintf formats according to a format specifier and returns the resulting\n// string.\n//\n// The provided data is used to interpolate the format string. If the data does\n// not match the expected format verbs or the amount of data does not satisfy\n// the format specification, the function will inline warnings about formatting\n// errors into the output string as described by the Format errors section\n// above.\nfunc Sprintf(format string, data ...any) string\n\n\n\n    Consider your likely audience in choosing what to document and at what depth.\nMaintainers, newcomers to the team, external users, and even yourself six months\nin the future may appreciate slightly different information from what is on your\nmind when you first come to write your docs.\n   \n    See also:\n   \n\n\n      GoTip #41: Identify Function Call Parameters\n     \n\n\n\n      GoTip #51: Patterns for Configuration\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Contexts\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Contexts\n   ",
        "cases": [
            {
                "description": "\n    It is implied that the cancellation of a context argument interrupts the\nfunction it is provided to. If the function can return an error, conventionally\nit is\n    \n     ctx.Err()\n    \n    .\n   \n    This fact does not need to be restated:\n   \n\n// Bad:\n// Run executes the worker's run loop.\n//\n// The method will process work until the context is cancelled and accordingly\n// returns an error.\nfunc (Worker) Run(ctx context.Context) error\n\n\n\n    Because that is implied, the following is better:\n   \n\n// Good:\n// Run executes the worker's run loop.\nfunc (Worker) Run(ctx context.Context) error\n\n\n\n    Where context behavior is different or non-obvious, it should be expressly\ndocumented if any of the following are true.\n   \n\n\n      The function returns an error other than\n      \n       ctx.Err()\n      \n      when the context is\ncancelled:\n     \n\n\n// Good:\n// Run executes the worker's run loop.\n//\n// If the context is cancelled, Run returns a nil error.\nfunc (Worker) Run(ctx context.Context) error\n\n\n\n\n\n\n      The function has other mechanisms that may interrupt it or affect lifetime:\n     \n\n\n// Good:\n// Run executes the worker's run loop.\n//\n// Run processes work until the context is cancelled or Stop is called.\n// Context cancellation is handled asynchronously internally: run may return\n// before all work has stopped. The Stop method is synchronous and waits\n// until all operations from the run loop finish. Use Stop for graceful\n// shutdown.\nfunc (Worker) Run(ctx context.Context) error\n\nfunc (Worker) Stop()\n\n\n\n\n\n\n      The function has special expectations about context lifetime, lineage, or\nattached values:\n     \n\n\n// Good:\n// NewReceiver starts receiving messages sent to the specified queue.\n// The context should not have a deadline.\nfunc NewReceiver(ctx context.Context) *Receiver\n\n// Principal returns a human-readable name of the party who made the call.\n// The context must have a value attached to it from security.NewContext.\nfunc Principal(ctx context.Context) (name string, ok bool)\n\n\n\n\n\n       Warning:\n      \n      Avoid designing APIs that make such demands (like contexts not\nhaving deadlines) from their callers. The above is only an example of how to\ndocument this if it cannot be avoided, not an endorsement of the pattern.\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Concurrency\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Concurrency\n   ",
        "cases": [
            {
                "description": "\n    Go users assume that conceptually read-only operations are safe for concurrent\nuse and do not require extra synchronization.\n   \n    The extra remark about concurrency can safely be removed in this Godoc:\n   \n\n// Len returns the number of bytes of the unread portion of the buffer;\n// b.Len() == len(b.Bytes()).\n//\n// It is safe to be called concurrently by multiple goroutines.\nfunc (*Buffer) Len() int\n\n\n\n    Mutating operations, however, are not assumed to be safe for concurrent use and\nrequire the user to consider synchronization.\n   \n    Similarly, the extra remark about concurrency can safely be removed here:\n   \n\n// Grow grows the buffer's capacity.\n//\n// It is not safe to be called concurrently by multiple goroutines.\nfunc (*Buffer) Grow(n int)\n\n\n\n    Documentation is strongly encouraged if any of the following are true.\n   \n\n\n      It is unclear whether the operation is read-only or mutating:\n     \n\n\n// Good:\npackage lrucache\n\n// Lookup returns the data associated with the key from the cache.\n//\n// This operation is not safe for concurrent use.\nfunc (*Cache) Lookup(key string) (data []byte, ok bool)\n\n\n\n\n      Why? A cache hit when looking up the key mutate a LRU cache internally. How\nthis is implemented may not be obvious to all readers.\n     \n\n\n\n      Synchronization is provided by the API:\n     \n\n\n// Good:\npackage fortune_go_proto\n\n// NewFortuneTellerClient returns an *rpc.Client for the FortuneTeller service.\n// It is safe for simultaneous use by multiple goroutines.\nfunc NewFortuneTellerClient(cc *rpc.ClientConn) *FortuneTellerClient\n\n\n\n\n      Why? Stubby provides synchronization.\n     \n\n\n       Note:\n      \n      If the API is a type and the API provides synchronization in\nentirety, conventionally only the type definition documents the semantics.\n     \n\n\n\n      The API consumes user-implemented types of interfaces, and the interface’s\nconsumer has particular concurrency requirements:\n     \n\n\n// Good:\npackage health\n\n// A Watcher reports the health of some entity (usually a backend service).\n//\n// Watcher methods are safe for simultaneous use by multiple goroutines.\ntype Watcher interface {\n    // Watch sends true on the passed-in channel when the Watcher's\n    // status has changed.\n    Watch(changed chan<- bool) (unwatch func())\n\n    // Health returns nil if the entity being watched is healthy, or a\n    // non-nil error explaining why the entity is not healthy.\n    Health() error\n}\n\n\n\n\n      Why? Whether an API is safe for use by multiple goroutines is part of its\ncontract.\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Cleanup\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Cleanup\n   ",
        "cases": [
            {
                "description": "\n    Document any explicit cleanup requirements that the API has. Otherwise, callers\nwon’t use the API correctly, leading to resource leaks and other possible bugs.\n   \n    Call out cleanups that are up to the caller:\n   \n\n// Good:\n// NewTicker returns a new Ticker containing a channel that will send the\n// current time on the channel after each tick.\n//\n// Call Stop to release the Ticker's associated resources when done.\nfunc NewTicker(d Duration) *Ticker\n\nfunc (*Ticker) Stop()\n\n\n\n    If it is potentially unclear how to clean up the resources, explain how:\n   \n\n// Good:\n// Get issues a GET to the specified URL.\n//\n// When err is nil, resp always contains a non-nil resp.Body.\n// Caller should close resp.Body when done reading from it.\n//\n//    resp, err := http.Get(\"http://example.com/\")\n//    if err != nil {\n//        // handle error\n//    }\n//    defer resp.Body.Close()\n//    body, err := io.ReadAll(resp.Body)\nfunc (c *Client) Get(url string) (resp *Response, err error)\n\n\n\n    See also:\n   \n\n\n      GoTip #110: Don’t Mix Exit With Defer\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Errors\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Errors\n   ",
        "cases": [
            {
                "description": "\n    Document significant error sentinel values or error types that your functions\nreturn to callers so that callers can anticipate what types of conditions they\ncan handle in their code.\n   \n\n// Good:\npackage os\n\n// Read reads up to len(b) bytes from the File and stores them in b. It returns\n// the number of bytes read and any error encountered.\n//\n// At end of file, Read returns 0, io.EOF.\nfunc (*File) Read(b []byte) (n int, err error) {\n\n\n\n    When a function returns a specific error type, correctly note whether the error\nis a pointer receiver or not:\n   \n\n// Good:\npackage os\n\ntype PathError struct {\n    Op   string\n    Path string\n    Err  error\n}\n\n// Chdir changes the current working directory to the named directory.\n//\n// If there is an error, it will be of type *PathError.\nfunc Chdir(dir string) error {\n\n\n\n    Documenting whether the values returned are pointer receivers enables callers to\ncorrectly compare the errors using\n    \n\n      errors.Is\n     \n\n    ,\n    \n\n      errors.As\n     \n\n    , and\n    \n\n      package cmp\n     \n\n    . This is because a non-pointer value is not equivalent to a\npointer value.\n   \n\n     Note:\n    \n    In the\n    \n     Chdir\n    \n    example, the return type is written as\n    \n     error\n    \n    rather\nthan\n    \n     *PathError\n    \n    due to\n    \n     how nil interface values work\n    \n    .\n   \n    Document overall error conventions in the\n    \n     package’s documentation\n    \n    when the behavior is\napplicable to most errors found in the package:\n   \n\n// Good:\n// Package os provides a platform-independent interface to operating system\n// functionality.\n//\n// Often, more information is available within the error. For example, if a\n// call that takes a file name fails, such as Open or Stat, the error will\n// include the failing file name when printed and will be of type *PathError,\n// which may be unpacked for more information.\npackage os\n\n\n\n    Thoughtful application of these approaches can add\n    \n     extra information to errors\n    \n    without much effort and help\ncallers avoid adding redundant annotations.\n   \n    See also:\n   \n\n\n      Go Tip #106: Error Naming Conventions\n     \n\n\n\n      Go Tip #89: When to Use Canonical Status Codes as Errors\n     \n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Preview\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Preview\n   ",
        "cases": [
            {
                "description": "\n    Go features a\n    \n     documentation server\n    \n    . It\nis recommended to preview the documentation your code produces both before and\nduring the code review process. This helps to validate that the\n    \n     godoc formatting\n    \n    is rendered correctly.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Godoc formatting\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Godoc formatting\n   ",
        "cases": [
            {
                "description": "\n\n     Godoc\n    \n    provides some specific syntax to\n    \n     format documentation\n    \n    .\n   \n\n\n      A blank line is required to separate paragraphs:\n     \n\n\n// Good:\n// LoadConfig reads a configuration out of the named file.\n//\n// See some/shortlink for config file format details.\n\n\n\n\n\n\n      Test files can contain\n      \n       runnable examples\n      \n      that appear attached to the\ncorresponding documentation in godoc:\n     \n\n\n// Good:\nfunc ExampleConfig_WriteTo() {\n  cfg := &Config{\n    Name: \"example\",\n  }\n  if err := cfg.WriteTo(os.Stdout); err != nil {\n    log.Exitf(\"Failed to write config: %s\", err)\n  }\n  // Output:\n  // {\n  //   \"name\": \"example\"\n  // }\n}\n\n\n\n\n\n\n      Indenting lines by an additional two spaces formats them verbatim:\n     \n\n\n// Good:\n// Update runs the function in an atomic transaction.\n//\n// This is typically used with an anonymous TransactionFunc:\n//\n//   if err := db.Update(func(state *State) { state.Foo = bar }); err != nil {\n//     //...\n//   }\n\n\n\n\n      Note, however, that it can often be more appropriate to put code in a\nrunnable example instead of including it in a comment.\n     \n\n      This verbatim formatting can be leveraged for formatting that is not native\nto godoc, such as lists and tables:\n     \n\n\n// Good:\n// LoadConfig reads a configuration out of the named file.\n//\n// LoadConfig treats the following keys in special ways:\n//   \"import\" will make this configuration inherit from the named file.\n//   \"env\" if present will be populated with the system environment.\n\n\n\n\n\n\n      A single line that begins with a capital letter, contains no punctuation\nexcept parentheses and commas, and is followed by another paragraph, is\nformatted as a header:\n     \n\n\n// Good:\n// The following line is formatted as a heading.\n//\n// Using headings\n//\n// Headings come with autogenerated anchor tags for easy linking.\n\n\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Signal boosting\n   ",
        "belongs to": "\n    Documentation\n   /\n    Conventions\n   /\n    Signal boosting\n   ",
        "cases": [
            {
                "description": "\n    Sometimes a line of code looks like something common, but actually isn’t. One of\nthe best examples of this is an\n    \n     err == nil\n    \n    check (since\n    \n     err != nil\n    \n    is much\nmore common). The following two conditional checks are hard to distinguish:\n   \n\n// Good:\nif err := doSomething(); err != nil {\n    // ...\n}\n\n\n\n\n// Bad:\nif err := doSomething(); err == nil {\n    // ...\n}\n\n\n\n    You can instead “boost” the signal of the conditional by adding a comment:\n   \n\n// Good:\nif err := doSomething(); err == nil { // if NO error\n    // ...\n}\n\n\n\n    The comment draws attention to the difference in the conditional.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Variable declarations\n   ",
        "belongs to": "\n    Variable declarations\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Initialization\n   ",
        "belongs to": "\n    Variable declarations\n   /\n    Initialization\n   ",
        "cases": [
            {
                "description": "\n    For consistency, prefer\n    \n     :=\n    \n    over\n    \n     var\n    \n    when initializing a new variable with a\nnon-zero value.\n   \n\n// Good:\ni := 42\n\n\n\n\n// Bad:\nvar i = 42\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Non-pointer zero values\n   ",
        "belongs to": "\n    Variable declarations\n   /\n    Non-pointer zero values\n   ",
        "cases": [
            {
                "description": "\n    The following declarations use the\n    \n     zero value\n    \n    :\n   \n\n// Good:\nvar (\n    coords Point\n    magic  [4]byte\n    primes []int\n)\n\n\n\n    You should declare values using the zero value when you want to convey an empty\nvalue that\n    \n     is ready for later use\n    \n    . Using composite literals with explicit\ninitialization can be clunky:\n   \n\n// Bad:\nvar (\n    coords = Point{X: 0, Y: 0}\n    magic  = [4]byte{0, 0, 0, 0}\n    primes = []int(nil)\n)\n\n\n\n    A common application of zero value declaration is when using a variable as the\noutput when unmarshalling:\n   \n\n// Good:\nvar coords Point\nif err := json.Unmarshal(data, &coords); err != nil {\n\n\n\n    If you need a lock or other field that\n    \n     must not be copied\n    \n    in your struct, you can make it a value type to take advantage of zero value\ninitialization. It does mean that the containing type must now be passed via a\npointer and not a value. Methods on the type must take pointer receivers.\n   \n\n// Good:\ntype Counter struct {\n    // This field does not have to be \"*sync.Mutex\". However,\n    // users must now pass *Counter objects between themselves, not Counter.\n    mu   sync.Mutex\n    data map[string]int64\n}\n\n// Note this must be a pointer receiver to prevent copying.\nfunc (c *Counter) IncrementBy(name string, n int64)\n\n\n\n    It’s acceptable to use value types for local variables of composites (such as\nstructs and arrays) even if they contain such uncopyable fields. However, if the\ncomposite is returned by the function, or if all accesses to it end up needing\nto take an address anyway, prefer declaring the variable as a pointer type at\nthe outset. Similarly, protobufs should be declared as pointer types.\n   \n\n// Good:\nfunc NewCounter(name string) *Counter {\n    c := new(Counter) // \"&Counter{}\" is also fine.\n    registerCounter(name, c)\n    return c\n}\n\nvar myMsg = new(pb.Bar) // or \"&pb.Bar{}\".\n\n\n\n    This is because\n    \n     *pb.Something\n    \n    satisfies\n    \n\n      proto.Message\n     \n\n    while\n    \n     pb.Something\n    \n    does not.\n   \n\n// Bad:\nfunc NewCounter(name string) *Counter {\n    var c Counter\n    registerCounter(name, &c)\n    return &c\n}\n\nvar myMsg = pb.Bar{}\n\n\n\n\n\n      Important:\n     \n     Map types must be explicitly initialized before they can be\nmodified. However, reading from zero-value maps is perfectly fine.\n    \n\n     For map and slice types, if the code is particularly performance sensitive and\nif you know the sizes in advance, see the\n     \n      size hints\n     \n     section.\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Composite literals\n   ",
        "belongs to": "\n    Variable declarations\n   /\n    Composite literals\n   ",
        "cases": [
            {
                "description": "\n    The following are\n    \n     composite literal\n    \n    declarations:\n   \n\n// Good:\nvar (\n    coords   = Point{X: x, Y: y}\n    magic    = [4]byte{'I', 'W', 'A', 'D'}\n    primes   = []int{2, 3, 5, 7, 11}\n    captains = map[string]string{\"Kirk\": \"James Tiberius\", \"Picard\": \"Jean-Luc\"}\n)\n\n\n\n    You should declare a value using a composite literal when you know initial\nelements or members.\n   \n    In contrast, using composite literals to declare empty or memberless values can\nbe visually noisy compared to\n    \n     zero-value initialization\n    \n    .\n   \n    When you need a pointer to a zero value, you have two options: empty composite\nliterals and\n    \n     new\n    \n    . Both are fine, but the\n    \n     new\n    \n    keyword can serve to remind the\nreader that if a non-zero value were needed, a composite literal wouldn’t work:\n   \n\n// Good:\nvar (\n  buf = new(bytes.Buffer) // non-empty Buffers are initialized with constructors.\n  msg = new(pb.Message) // non-empty proto messages are initialized with builders or by setting fields one by one.\n)\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Size hints\n   ",
        "belongs to": "\n    Variable declarations\n   /\n    Size hints\n   ",
        "cases": [
            {
                "description": "\n    The following are declarations that take advantage of size hints in order to\npreallocate capacity:\n   \n\n// Good:\nvar (\n    // Preferred buffer size for target filesystem: st_blksize.\n    buf = make([]byte, 131072)\n    // Typically process up to 8-10 elements per run (16 is a safe assumption).\n    q = make([]Node, 0, 16)\n    // Each shard processes shardSize (typically 32000+) elements.\n    seen = make(map[string]bool, shardSize)\n)\n\n\n\n    Size hints and preallocation are important steps\n    \n     when combined with empirical\nanalysis of the code and its integrations\n    \n    , to create performance-sensitive and\nresource-efficient code.\n   \n    Most code does not need a size hint or preallocation, and can allow the runtime\nto grow the slice or map as necessary. It is acceptable to preallocate when the\nfinal size is known (e.g. when converting between a map and a slice) but this is\nnot a readability requirement, and may not be worth the clutter in small cases.\n   \n\n     Warning:\n    \n    Preallocating more memory than you need can waste memory in the\nfleet or even harm performance. When in doubt, see\n    \n     GoTip #3: Benchmarking Go Code\n    \n    and default to a\n    \n     zero initialization\n    \n    or a\n    \n     composite literal declaration\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Channel direction\n   ",
        "belongs to": "\n    Variable declarations\n   /\n    Channel direction\n   ",
        "cases": [
            {
                "description": "\n    Specify\n    \n     channel direction\n    \n    where possible.\n   \n\n// Good:\n// sum computes the sum of all of the values. It reads from the channel until\n// the channel is closed.\nfunc sum(values <-chan int) int {\n    // ...\n}\n\n\n\n    This prevents casual programming errors that are possible without specification:\n   \n\n// Bad:\nfunc sum(values chan int) (out int) {\n    for v := range values {\n        out += v\n    }\n    // values must already be closed for this code to be reachable, which means\n    // a second close triggers a panic.\n    close(values)\n}\n\n\n\n    When the direction is specified, the compiler catches simple errors like this.\nIt also helps to convey a measure of ownership to the type.\n   \n    See also Bryan Mills’ talk “Rethinking Classical Concurrency Patterns”:\n    \n     slides\n    \n\n     video\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Function argument lists\n   ",
        "belongs to": "\n    Function argument lists\n   ",
        "cases": [
            {
                "description": "\n    Don’t let the signature of a function get too long. As more parameters are added\nto a function, the role of individual parameters becomes less clear, and\nadjacent parameters of the same type become easier to confuse. Functions with\nlarge numbers of arguments are less memorable and more difficult to read at the\ncall-site.\n   \n    When designing an API, consider splitting a highly configurable function whose\nsignature is growing complex into several simpler ones. These can share an\n(unexported) implementation if necessary.\n   \n    Where a function requires many inputs, consider introducing an\n    \n     option struct\n    \n    for some of the arguments or employing the more advanced\n    \n     variadic options\n    \n    technique. The primary consideration for which strategy to choose should be how\nthe function call looks across all expected use cases.\n   \n    The recommendations below primarily apply to exported APIs, which are held to a\nhigher standard than unexported ones. These techniques may be unnecessary for\nyour use case. Use your judgment, and balance the principles of\n    \n     clarity\n    \n    and\n    \n     least mechanism\n    \n    .\n   \n    See also:\n    \n     Go Tip #24: Use Case-Specific Constructions\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Option structure\n   ",
        "belongs to": "\n    Function argument lists\n   /\n    Option structure\n   ",
        "cases": [
            {
                "description": "\n    An option structure is a struct type that collects some or all of the arguments\nof a function or method, that is then passed as the last argument to the\nfunction or method. (The struct should be exported only if it is used in an\nexported function.)\n   \n    Using an option structure has a number of benefits:\n   \n\n     The struct literal includes both fields and values for each argument, which\nmakes them self-documenting and harder to swap.\n    \n\n     Irrelevant or “default” fields can be omitted.\n    \n\n     Callers can share the options struct and write helpers to operate on it.\n    \n\n     Structs provide cleaner per-field documentation than function arguments.\n    \n\n     Option structs can grow over time without impacting call-sites.\n    \n\n    Here is an example of a function that could be improved:\n   \n\n// Bad:\nfunc EnableReplication(ctx context.Context, config *replicator.Config, primaryRegions, readonlyRegions []string, replicateExisting, overwritePolicies bool, replicationInterval time.Duration, copyWorkers int, healthWatcher health.Watcher) {\n    // ...\n}\n\n\n\n    The function above could be rewritten with an option structure as follows:\n   \n\n// Good:\ntype ReplicationOptions struct {\n    Config              *replicator.Config\n    PrimaryRegions      []string\n    ReadonlyRegions     []string\n    ReplicateExisting   bool\n    OverwritePolicies   bool\n    ReplicationInterval time.Duration\n    CopyWorkers         int\n    HealthWatcher       health.Watcher\n}\n\nfunc EnableReplication(ctx context.Context, opts ReplicationOptions) {\n    // ...\n}\n\n\n\n    The function can then be called in a different package:\n   \n\n// Good:\nfunc foo(ctx context.Context) {\n    // Complex call:\n    storage.EnableReplication(ctx, storage.ReplicationOptions{\n        Config:              config,\n        PrimaryRegions:      []string{\"us-east1\", \"us-central2\", \"us-west3\"},\n        ReadonlyRegions:     []string{\"us-east5\", \"us-central6\"},\n        OverwritePolicies:   true,\n        ReplicationInterval: 1 * time.Hour,\n        CopyWorkers:         100,\n        HealthWatcher:       watcher,\n    })\n\n    // Simple call:\n    storage.EnableReplication(ctx, storage.ReplicationOptions{\n        Config:         config,\n        PrimaryRegions: []string{\"us-east1\", \"us-central2\", \"us-west3\"},\n    })\n}\n\n\n\n\n     Note:\n    \n\n     Contexts are never included in option structs\n    \n    .\n   \n    This option is often preferred when some of the following apply:\n   \n\n     All callers need to specify one or more of the options.\n    \n\n     A large number of callers need to provide many options.\n    \n\n     The options are shared between multiple functions that the user will call.\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Variadic options\n   ",
        "belongs to": "\n    Function argument lists\n   /\n    Variadic options\n   ",
        "cases": [
            {
                "description": "\n    Using variadic options, exported functions are created which return closures\nthat can be passed to the\n    \n     variadic (\n     \n      ...\n     \n     ) parameter\n    \n    of a function. The\nfunction takes as its parameters the values of the option (if any), and the\nreturned closure accepts a mutable reference (usually a pointer to a struct\ntype) that will be updated based on the inputs.\n   \n    Using variadic options can provide a number of benefits:\n   \n\n     Options take no space at a call-site when no configuration is needed.\n    \n\n     Options are still values, so callers can share them, write helpers, and\naccumulate them.\n    \n\n     Options can accept multiple parameters (e.g.\n     \n      cartesian.Translate(dx, dy\nint) TransformOption\n     \n     ).\n    \n\n     The option functions can return a named type to group options together in\ngodoc.\n    \n\n     Packages can allow (or prevent) third-party packages to define (or from\ndefining) their own options.\n    \n\n\n     Note:\n    \n    Using variadic options requires a substantial amount of additional\ncode (see the following example), so it should only be used when the advantages\noutweigh the overhead.\n   \n    Here is an example of a function that could be improved:\n   \n\n// Bad:\nfunc EnableReplication(ctx context.Context, config *placer.Config, primaryCells, readonlyCells []string, replicateExisting, overwritePolicies bool, replicationInterval time.Duration, copyWorkers int, healthWatcher health.Watcher) {\n  ...\n}\n\n\n\n    The example above could be rewritten with variadic options as follows:\n   \n\n// Good:\ntype replicationOptions struct {\n    readonlyCells       []string\n    replicateExisting   bool\n    overwritePolicies   bool\n    replicationInterval time.Duration\n    copyWorkers         int\n    healthWatcher       health.Watcher\n}\n\n// A ReplicationOption configures EnableReplication.\ntype ReplicationOption func(*replicationOptions)\n\n// ReadonlyCells adds additional cells that should additionally\n// contain read-only replicas of the data.\n//\n// Passing this option multiple times will add additional\n// read-only cells.\n//\n// Default: none\nfunc ReadonlyCells(cells ...string) ReplicationOption {\n    return func(opts *replicationOptions) {\n        opts.readonlyCells = append(opts.readonlyCells, cells...)\n    }\n}\n\n// ReplicateExisting controls whether files that already exist in the\n// primary cells will be replicated.  Otherwise, only newly-added\n// files will be candidates for replication.\n//\n// Passing this option again will overwrite earlier values.\n//\n// Default: false\nfunc ReplicateExisting(enabled bool) ReplicationOption {\n    return func(opts *replicationOptions) {\n        opts.replicateExisting = enabled\n    }\n}\n\n// ... other options ...\n\n// DefaultReplicationOptions control the default values before\n// applying options passed to EnableReplication.\nvar DefaultReplicationOptions = []ReplicationOption{\n    OverwritePolicies(true),\n    ReplicationInterval(12 * time.Hour),\n    CopyWorkers(10),\n}\n\nfunc EnableReplication(ctx context.Context, config *placer.Config, primaryCells []string, opts ...ReplicationOption) {\n    var options replicationOptions\n    for _, opt := range DefaultReplicationOptions {\n        opt(&options)\n    }\n    for _, opt := range opts {\n        opt(&options)\n    }\n}\n\n\n\n    The function can then be called in a different package:\n   \n\n// Good:\nfunc foo(ctx context.Context) {\n    // Complex call:\n    storage.EnableReplication(ctx, config, []string{\"po\", \"is\", \"ea\"},\n        storage.ReadonlyCells(\"ix\", \"gg\"),\n        storage.OverwritePolicies(true),\n        storage.ReplicationInterval(1*time.Hour),\n        storage.CopyWorkers(100),\n        storage.HealthWatcher(watcher),\n    )\n\n    // Simple call:\n    storage.EnableReplication(ctx, config, []string{\"po\", \"is\", \"ea\"})\n}\n\n\n\n    Prefer this option when many of the following apply:\n   \n\n     Most callers will not need to specify any options.\n    \n\n     Most options are used infrequently.\n    \n\n     There are a large number of options.\n    \n\n     Options require arguments.\n    \n\n     Options could fail or be set incorrectly (in which case the option function\nreturns an\n     \n      error\n     \n     ).\n    \n\n     Options require a lot of documentation that can be hard to fit in a struct.\n    \n\n     Users or other packages can provide custom options.\n    \n\n    Options in this style should accept parameters rather than using presence to\nsignal their value; the latter can make dynamic composition of arguments much\nmore difficult. For example, binary settings should accept a boolean (e.g.\n    \n     rpc.FailFast(enable bool)\n    \n    is preferable to\n    \n     rpc.EnableFailFast()\n    \n    ). An\nenumerated option should accept an enumerated constant (e.g.\n    \n     log.Format(log.Capacitor)\n    \n    is preferable to\n    \n     log.CapacitorFormat()\n    \n    ). The\nalternative makes it much more difficult for users who must programmatically\nchoose which options to pass; such users are forced to change the actual\ncomposition of the parameters rather than simply changing the arguments to the\noptions. Don’t assume that all users will know the full set of options\nstatically.\n   \n    In general, options should be processed in order. If there is a conflict or if a\nnon-cumulative option is passed multiple times, the last argument should win.\n   \n    The parameter to the option function is generally unexported in this pattern, to\nrestrict the options to being defined only within the package itself. This is a\ngood default, though there may be times when it is appropriate to allow other\npackages to define options.\n   \n    See\n    \n     Rob Pike’s original blog post\n    \n    and\n    \n     Dave Cheney’s talk\n    \n    for a more in-depth\nlook at how these options can be used.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Complex command-line interfaces\n   ",
        "belongs to": "\n    Complex command-line interfaces\n   ",
        "cases": [
            {
                "description": "\n    Some programs wish to present users with a rich command-line interface that\nincludes sub-commands. For example,\n    \n     kubectl create\n    \n    ,\n    \n     kubectl run\n    \n    , and many\nother sub-commands are all provided by the program\n    \n     kubectl\n    \n    . There are at least\nthe following libraries in common use for achieving this.\n   \n    If you don’t have a preference or other considerations are equal,\n    \n     subcommands\n    \n    is recommended, since it is the simplest and is easy to use correctly. However,\nif you need different features that it doesn’t provide, pick one of the other\noptions.\n   \n\n\n\n\n        cobra\n       \n\n\n\n\n       Flag convention: getopt\n      \n\n       Common outside the Google codebase.\n      \n\n       Many extra features.\n      \n\n       Pitfalls in usage (see below).\n      \n\n\n\n\n\n\n        subcommands\n       \n\n\n\n\n       Flag convention: Go\n      \n\n       Simple and easy to use correctly.\n      \n\n       Recommended if you don’t need extra features.\n      \n\n\n\n\n     Warning\n    \n    : cobra command functions should use\n    \n     cmd.Context()\n    \n    to obtain a\ncontext rather than creating their own root context with\n    \n     context.Background\n    \n    .\nCode that uses the subcommands package already receives the correct context as a\nfunction parameter.\n   \n    You are not required to place each subcommand in a separate package, and it is\noften not necessary to do so. Apply the same considerations about package\nboundaries as in any Go codebase. If your code can be used both as a library and\nas a binary, it is usually beneficial to separate the CLI code and the library,\nmaking the CLI just one more of its clients. (This is not specific to CLIs that\nhave subcommands, but is mentioned here because it is a common place where it\ncomes up.)\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Tests\n   ",
        "belongs to": "\n    Tests\n   ",
        "cases": [
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Leave testing to the\n    \n     Test\n    \n    function\n   ",
        "belongs to": "\n    Tests\n   /\n    Leave testing to the\n    \n     Test\n    \n    function\n   ",
        "cases": [
            {
                "description": "\n    Go distinguishes between “test helpers” and “assertion helpers”:\n   \n\n\n\n       Test helpers\n      \n      are functions that do setup or cleanup tasks. All failures\nthat occur in test helpers are expected to be failures of the environment\n(not from the code under test) — for example when a test database cannot be\nstarted because there are no more free ports on this machine. For functions\nlike these, calling\n      \n       t.Helper\n      \n      is often appropriate to\n      \n       mark them as a test helper\n      \n      . See\n      \n       error handling in test helpers\n      \n      for more\ndetails.\n     \n\n\n\n\n       Assertion helpers\n      \n      are functions that check the correctness of a system\nand fail the test if an expectation is not met. Assertion helpers are\n      \n       not considered idiomatic\n      \n      in Go.\n     \n\n\n    The purpose of a test is to report pass/fail conditions of the code under test.\nThe ideal place to fail a test is within the\n    \n     Test\n    \n    function itself, as that\nensures that\n    \n     failure messages\n    \n    and the test logic are clear.\n   \n    As your testing code grows, it may become necessary to factor out some\nfunctionality to separate functions. Standard software engineering\nconsiderations still apply, as\n    \n     test code is still code\n    \n    . If the functionality\ndoes not interact with the testing framework, then all of the usual rules apply.\nWhen the common code interacts with the framework, however, some care must be\ntaken to avoid common pitfalls that can lead to uninformative failure messages\nand unmaintainable tests.\n   \n    If many separate test cases require the same validation logic, arrange the test\nin one of the following ways instead of using assertion helpers or complex\nvalidation functions:\n   \n\n     Inline the logic (both the validation and the failure) in the\n     \n      Test\n     \n     function, even if it is repetitive. This works best in simple cases.\n    \n\n     If inputs are similar, consider unifying them into a\n     \n      table-driven test\n     \n     while keeping the logic inlined in the loop. This helps to avoid repetition\nwhile keeping the validation and failure in the\n     \n      Test\n     \n     .\n    \n\n     If there are multiple callers who need the same validation function but\ntable tests are not suitable (typically because the inputs are not simple\nenough or the validation is required as part of a sequence of operations),\narrange the validation function so that it returns a value (typically an\n     \n      error\n     \n     ) rather than taking a\n     \n      testing.T\n     \n     parameter and using it to fail the\ntest. Use logic within the\n     \n      Test\n     \n     to decide whether to fail, and to provide\n     \n      useful test failures\n     \n     . You can also create test helpers to factor out\ncommon boilerplate setup code.\n    \n\n    The design outlined in the last point maintains orthogonality. For example,\n    \n     package\n     \n      cmp\n     \n\n    is not designed to fail tests, but rather to compare (and to\ndiff) values. It therefore does not need to know about the context in which the\ncomparison was made, since the caller can supply that. If your common testing\ncode provides a\n    \n     cmp.Transformer\n    \n    for your data type, that can often be the\nsimplest design. For other validations, consider returning an\n    \n     error\n    \n    value.\n   \n\n// Good:\n// polygonCmp returns a cmp.Option that equates s2 geometry objects up to\n// some small floating-point error.\nfunc polygonCmp() cmp.Option {\n    return cmp.Options{\n        cmp.Transformer(\"polygon\", func(p *s2.Polygon) []*s2.Loop { return p.Loops() }),\n        cmp.Transformer(\"loop\", func(l *s2.Loop) []s2.Point { return l.Vertices() }),\n        cmpopts.EquateApprox(0.00000001, 0),\n        cmpopts.EquateEmpty(),\n    }\n}\n\nfunc TestFenceposts(t *testing.T) {\n    // This is a test for a fictional function, Fenceposts, which draws a fence\n    // around some Place object. The details are not important, except that\n    // the result is some object that has s2 geometry (github.com/golang/geo/s2)\n    got := Fencepost(tomsDiner, 1*meter)\n    if diff := cmp.Diff(want, got, polygonCmp()); diff != \"\" {\n        t.Errorf(\"Fencepost(tomsDiner, 1m) returned unexpected diff (-want+got):\\n%v\", diff)\n    }\n}\n\nfunc FuzzFencepost(f *testing.F) {\n    // Fuzz test (https://go.dev/doc/fuzz) for the same.\n\n    f.Add(tomsDiner, 1*meter)\n    f.Add(school, 3*meter)\n\n    f.Fuzz(func(t *testing.T, geo Place, padding Length) {\n        got := Fencepost(geo, padding)\n        // Simple reference implementation: not used in prod, but easy to\n        // reason about and therefore useful to check against in random tests.\n        reference := slowFencepost(geo, padding)\n\n        // In the fuzz test, inputs and outputs can be large so don't\n        // bother with printing a diff. cmp.Equal is enough.\n        if !cmp.Equal(got, reference, polygonCmp()) {\n            t.Errorf(\"Fencepost returned wrong placement\")\n        }\n    })\n}\n\n\n\n    The\n    \n     polygonCmp\n    \n    function is agnostic about how it’s called; it doesn’t take a\nconcrete input type nor does it police what to do in case two objects don’t\nmatch. Therefore, more callers can make use of it.\n   \n\n     Note:\n    \n    There is an analogy between test helpers and plain library code. Code\nin libraries should usually\n    \n     not panic\n    \n    except in rare circumstances; code\ncalled from a test should not stop the test unless there is\n    \n     no point in proceeding\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Designing extensible validation APIs\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   ",
        "cases": [
            {
                "description": "\n    Most of the advice about testing in the style guide is about testing your own\ncode. This section is about how to provide facilities for other people to test\nthe code they write to ensure that it conforms to your library’s requirements.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Acceptance testing\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Acceptance testing\n   ",
        "cases": [
            {
                "description": "\n    Such testing is referred to as\n    \n     acceptance testing\n    \n    . The premise of this kind of\ntesting is that the person using the test does not know every last detail of\nwhat goes on in the test; they just hand the inputs over to the testing facility\nto do the work. This can be thought of as a form of\n    \n     inversion of control\n    \n    .\n   \n    In a typical Go test, the test function controls the program flow, and the\n    \n     no assert\n    \n    and\n    \n     test functions\n    \n    guidance\nencourages you to keep it that way. This section explains how to author support\nfor these tests in a way that is consistent with Go style.\n   \n    Before diving into how, consider an example from\n    \n\n      io/fs\n     \n\n    , excerpted below:\n   \n\ntype FS interface {\n    Open(name string) (File, error)\n}\n\n\n\n    While there exist well-known implementations of\n    \n     fs.FS\n    \n    , a Go developer may be\nexpected to author one. To help validate the user-implemented\n    \n     fs.FS\n    \n    is\ncorrect, a generic library has been provided in\n    \n\n      testing/fstest\n     \n\n    called\n    \n\n      fstest.TestFS\n     \n\n    . This API treats the implementation as a blackbox to make sure\nit upholds the most basic parts of the\n    \n     io/fs\n    \n    contract.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Writing an acceptance test\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Writing an acceptance test\n   ",
        "cases": [
            {
                "description": "\n    Now that we know what an acceptance test is and why you might use one, let’s\nexplore building an acceptance test for\n    \n     package chess\n    \n    , a package used to\nsimulate chess games. Users of\n    \n     chess\n    \n    are expected to implement the\n    \n     chess.Player\n    \n    interface. These implementations are the primary thing we will\nvalidate. Our acceptance test concerns itself with whether the player\nimplementation makes legal moves, not whether the moves are smart.\n   \n\n\n      Create a new package for the validation behavior,\n      \n       customarily named\n      \n      by appending the word\n      \n       test\n      \n      to the package name (for example,\n      \n       chesstest\n      \n      ).\n     \n\n\n\n      Create the function that performs the validation by accepting the\nimplementation under test as an argument and exercises it:\n     \n\n\n// ExercisePlayer tests a Player implementation in a single turn on a board.\n// The board itself is spot checked for sensibility and correctness.\n//\n// It returns a nil error if the player makes a correct move in the context\n// of the provided board. Otherwise ExercisePlayer returns one of this\n// package's errors to indicate how and why the player failed the\n// validation.\nfunc ExercisePlayer(b *chess.Board, p chess.Player) error\n\n\n\n\n      The test should note which invariants are broken and how. Your design can\nchoose between two disciplines for failure reporting:\n     \n\n\n\n\n         Fail fast\n        \n        : return an error as soon as the implementation violates an\ninvariant.\n       \n\n        This is the simplest approach, and it works well if the acceptance test\nis expected to execute quickly. Simple error\n        \n         sentinels\n        \n        and\n        \n         custom types\n        \n        can be used easily here, which conversely makes testing\nthe acceptance test easy.\n       \n\n\nfor color, army := range b.Armies {\n    // The king should never leave the board, because the game ends at\n    // checkmate.\n    if army.King == nil {\n        return &MissingPieceError{Color: color, Piece: chess.King}\n    }\n}\n\n\n\n\n\n\n\n         Aggregate all failures\n        \n        : collect all failures, and report them all.\n       \n\n        This approach resembles the\n        \n         keep going\n        \n        guidance\nin feel and may be preferable if the acceptance test is expected to\nexecute slowly.\n       \n\n        How you aggregate the failures should be dictated by whether you want to\ngive users the ability or yourself the ability to interrogate individual\nfailures (for example, for you to test your acceptance test). Below\ndemonstrates using a\n        \n         custom error type\n        \n        that\n        \n         aggregates errors\n        \n        :\n       \n\n\nvar badMoves []error\n\nmove := p.Move()\nif putsOwnKingIntoCheck(b, move) {\n    badMoves = append(badMoves, PutsSelfIntoCheckError{Move: move})\n}\n\nif len(badMoves) > 0 {\n    return SimulationError{BadMoves: badMoves}\n}\nreturn nil\n\n\n\n\n\n\n\n    The acceptance test should honor the\n    \n     keep going\n    \n    guidance\nby not calling\n    \n     t.Fatal\n    \n    unless the test detects a broken invariant in the\nsystem being exercised.\n   \n    For example,\n    \n     t.Fatal\n    \n    should be reserved for exceptional cases such as\n    \n     setup failure\n    \n    as usual:\n   \n\nfunc ExerciseGame(t *testing.T, cfg *Config, p chess.Player) error {\n    t.Helper()\n\n    if cfg.Simulation == Modem {\n        conn, err := modempool.Allocate()\n        if err != nil {\n            t.Fatalf(\"No modem for the opponent could be provisioned: %v\", err)\n        }\n        t.Cleanup(func() { modempool.Return(conn) })\n    }\n    // Run acceptance test (a whole game).\n}\n\n\n\n    This technique can help you create concise, canonical validations. But do not\nattempt to use it to bypass the\n    \n     guidance on assertions\n    \n    .\n   \n    The final product should be in a form similar to this for end users:\n   \n\n// Good:\npackage deepblue_test\n\nimport (\n    \"chesstest\"\n    \"deepblue\"\n)\n\nfunc TestAcceptance(t *testing.T) {\n    player := deepblue.New()\n    err := chesstest.ExerciseGame(t, chesstest.SimpleGame, player)\n    if err != nil {\n        t.Errorf(\"Deep Blue player failed acceptance test: %v\", err)\n    }\n}\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Use real transports\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Use real transports\n   ",
        "cases": [
            {
                "description": "\n    When testing component integrations, especially where HTTP or RPC are used as\nthe underlying transport between the components, prefer using the real\nunderlying transport to connect to the test version of the backend.\n   \n    For example, suppose the code you want to test (sometimes referred to as “system\nunder test” or SUT) interacts with a backend that implements the\n    \n     long running operations\n    \n    API. To test your SUT, use a real\n    \n     OperationsClient\n    \n    that is connected to a\n    \n     test double\n    \n    (e.g., a mock, stub, or fake) of the\n    \n     OperationsServer\n    \n    .\n   \n    This is recommended over hand-implementing the client, due to the complexity of\nimitating client behavior correctly. By using the production client with a\ntest-specific server, you ensure your test is using as much of the real code as\npossible.\n   \n\n     Tip:\n    \n    Where possible, use a testing library provided by the authors of the\nservice under test.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n\n     t.Error\n    \n    vs.\n    \n     t.Fatal\n    \n",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n\n     t.Error\n    \n    vs.\n    \n     t.Fatal\n    \n",
        "cases": [
            {
                "description": "\n    As discussed in\n    \n     decisions\n    \n    , tests should generally not\nabort at the first encountered problem.\n   \n    However, some situations require that the test not proceed. Calling\n    \n     t.Fatal\n    \n    is\nappropriate when some piece of test setup fails, especially in\n    \n     test setup helpers\n    \n    , without which you cannot run the rest of the test. In a\ntable-driven test,\n    \n     t.Fatal\n    \n    is appropriate for failures that set up the whole\ntest function before the test loop. Failures that affect a single entry in the\ntest table, which make it impossible to continue with that entry, should be\nreported as follows:\n   \n\n     If you’re not using\n     \n      t.Run\n     \n     subtests, use\n     \n      t.Error\n     \n     followed by a\n     \n      continue\n     \n     statement to move on to the next table entry.\n    \n\n     If you’re using subtests (and you’re inside a call to\n     \n      t.Run\n     \n     ), use\n     \n      t.Fatal\n     \n     , which ends the current subtest and allows your test case to\nprogress to the next subtest.\n    \n\n\n     Warning:\n    \n    It is not always safe to call\n    \n     t.Fatal\n    \n    and similar functions.\n    \n     More details here\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Error handling in test helpers\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Error handling in test helpers\n   ",
        "cases": [
            {
                "description": "\n\n     Note:\n    \n    This section discusses\n    \n     test helpers\n    \n    in the sense Go uses the term:\nfunctions that perform test setup and cleanup, not common assertion facilities.\nSee the\n    \n     test functions\n    \n    section for more discussion.\n   \n    Operations performed by a test helper sometimes fail. For example, setting up a\ndirectory with files involves I/O, which can fail. When test helpers fail, their\nfailure often signifies that the test cannot continue, since a setup\nprecondition failed. When this happens, prefer calling one of the\n    \n     Fatal\n    \n    functions in the helper:\n   \n\n// Good:\nfunc mustAddGameAssets(t *testing.T, dir string) {\n    t.Helper()\n    if err := os.WriteFile(path.Join(dir, \"pak0.pak\"), pak0, 0644); err != nil {\n        t.Fatalf(\"Setup failed: could not write pak0 asset: %v\", err)\n    }\n    if err := os.WriteFile(path.Join(dir, \"pak1.pak\"), pak1, 0644); err != nil {\n        t.Fatalf(\"Setup failed: could not write pak1 asset: %v\", err)\n    }\n}\n\n\n\n    This keeps the calling side cleaner than if the helper were to return the error\nto the test itself:\n   \n\n// Bad:\nfunc addGameAssets(t *testing.T, dir string) error {\n    t.Helper()\n    if err := os.WriteFile(path.Join(d, \"pak0.pak\"), pak0, 0644); err != nil {\n        return err\n    }\n    if err := os.WriteFile(path.Join(d, \"pak1.pak\"), pak1, 0644); err != nil {\n        return err\n    }\n    return nil\n}\n\n\n\n\n     Warning:\n    \n    It is not always safe to call\n    \n     t.Fatal\n    \n    and similar functions.\n    \n     More details\n    \n    here.\n   \n    The failure message should include a description of what happened. This is\nimportant, as you may be providing a testing API to many users, especially as\nthe number of error-producing steps in the helper increases. When the test\nfails, the user should know where, and why.\n   \n\n     Tip:\n    \n    Go 1.14 introduced a\n    \n\n      t.Cleanup\n     \n\n    function that can be used to\nregister cleanup functions that run when your test completes. The function also\nworks with test helpers. See\n    \n     GoTip #4: Cleaning Up Your Tests\n    \n    for guidance on simplifying test helpers.\n   \n    The snippet below in a fictional file called\n    \n     paint_test.go\n    \n    demonstrates how\n    \n     (*testing.T).Helper\n    \n    influences failure reporting in a Go test:\n   \n\npackage paint_test\n\nimport (\n    \"fmt\"\n    \"testing\"\n)\n\nfunc paint(color string) error {\n    return fmt.Errorf(\"no %q paint today\", color)\n}\n\nfunc badSetup(t *testing.T) {\n    // This should call t.Helper, but doesn't.\n    if err := paint(\"taupe\"); err != nil {\n        t.Fatalf(\"Could not paint the house under test: %v\", err) // line 15\n    }\n}\n\nfunc mustGoodSetup(t *testing.T) {\n    t.Helper()\n    if err := paint(\"lilac\"); err != nil {\n        t.Fatalf(\"Could not paint the house under test: %v\", err)\n    }\n}\n\nfunc TestBad(t *testing.T) {\n    badSetup(t)\n    // ...\n}\n\nfunc TestGood(t *testing.T) {\n    mustGoodSetup(t) // line 32\n    // ...\n}\n\n\n\n    Here is an example of this output when run. Note the highlighted text and how it\ndiffers:\n   \n\n=== RUN   TestBad\n    paint_test.go:15: Could not paint the house under test: no \"taupe\" paint today\n--- FAIL: TestBad (0.00s)\n=== RUN   TestGood\n    paint_test.go:32: Could not paint the house under test: no \"lilac\" paint today\n--- FAIL: TestGood (0.00s)\nFAIL\n\n\n\n    The error with\n    \n     paint_test.go:15\n    \n    refers to the line of the setup function that\nfailed in\n    \n     badSetup\n    \n    :\n   \n\n     t.Fatalf(\"Could not paint the house under test: %v\", err)\n    \n\n    Whereas\n    \n     paint_test.go:32\n    \n    refers to the line of the test that failed in\n    \n     TestGood\n    \n    :\n   \n\n     goodSetup(t)\n    \n\n    Correctly using\n    \n     (*testing.T).Helper\n    \n    attributes the location of the failure\nmuch better when:\n   \n\n     the helper functions grow\n    \n\n     the helper functions call other helpers\n    \n\n     the amount of helper usage in the test functions grow\n    \n\n\n     Tip:\n    \n    If a helper calls\n    \n     (*testing.T).Error\n    \n    or\n    \n     (*testing.T).Fatal\n    \n    , provide\nsome context in the format string to help determine what went wrong and why.\n   \n\n     Tip:\n    \n    If nothing a helper does can cause a test to fail, it doesn’t need to\ncall\n    \n     t.Helper\n    \n    . Simplify its signature by removing\n    \n     t\n    \n    from the function\nparameter list.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Don’t call\n    \n     t.Fatal\n    \n    from separate goroutines\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Don’t call\n    \n     t.Fatal\n    \n    from separate goroutines\n   ",
        "cases": [
            {
                "description": "\n    As\n    \n     documented in package testing\n    \n    , it is\nincorrect to call\n    \n     t.FailNow\n    \n    ,\n    \n     t.Fatal\n    \n    , etc. from any goroutine but the one\nrunning the Test function (or the subtest). If your test starts new goroutines,\nthey must not call these functions from inside these goroutines.\n   \n\n     Test helpers\n    \n    usually don’t signal failure from new\ngoroutines, and therefore it is all right for them to use\n    \n     t.Fatal\n    \n    . If in\ndoubt, call\n    \n     t.Error\n    \n    and return instead.\n   \n\n// Good:\nfunc TestRevEngine(t *testing.T) {\n    engine, err := Start()\n    if err != nil {\n        t.Fatalf(\"Engine failed to start: %v\", err)\n    }\n\n    num := 11\n    var wg sync.WaitGroup\n    wg.Add(num)\n    for i := 0; i < num; i++ {\n        go func() {\n            defer wg.Done()\n            if err := engine.Vroom(); err != nil {\n                // This cannot be t.Fatalf.\n                t.Errorf(\"No vroom left on engine: %v\", err)\n                return\n            }\n            if rpm := engine.Tachometer(); rpm > 1e6 {\n                t.Errorf(\"Inconceivable engine rate: %d\", rpm)\n            }\n        }()\n    }\n    wg.Wait()\n\n    if seen := engine.NumVrooms(); seen != num {\n        t.Errorf(\"engine.NumVrooms() = %d, want %d\", seen, num)\n    }\n}\n\n\n\n    Adding\n    \n     t.Parallel\n    \n    to a test or subtest does not make it unsafe to call\n    \n     t.Fatal\n    \n    .\n   \n    When all calls to the\n    \n     testing\n    \n    API are in the\n    \n     test function\n    \n    ,\nit is usually easy to spot incorrect usage because the\n    \n     go\n    \n    keyword is plain to\nsee. Passing\n    \n     testing.T\n    \n    arguments around makes tracking such usage harder.\nTypically, the reason for passing these arguments is to introduce a test helper,\nand those should not depend on the system under test. Therefore, if a test\nhelper\n    \n     registers a fatal test failure\n    \n    , it can and\nshould do so from the test’s goroutine.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Use field names in struct literals\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Use field names in struct literals\n   ",
        "cases": [
            {
                "description": "\n\n\n\n    In table-driven tests, prefer to specify field names when initializing test case\nstruct literals. This is helpful when the test cases cover a large amount of\nvertical space (e.g. more than 20-30 lines), when there are adjacent fields with\nthe same type, and also when you wish to omit fields which have the zero value.\nFor example:\n   ",
                "example": [
                    "\n\n// Good:\nfunc TestStrJoin(t *testing.T) {\n    tests := []struct {\n        slice     []string\n        separator string\n        skipEmpty bool\n        want      string\n    }{\n        {\n            slice:     []string{\"a\", \"b\", \"\"},\n            separator: \",\",\n            want:      \"a,b,\",\n        },\n        {\n            slice:     []string{\"a\", \"b\", \"\"},\n            separator: \",\",\n            skipEmpty: true,\n            want:      \"a,b\",\n        },\n        // ...\n    }\n    // ...\n}\n\n\n"
                ]
            },
            {
                "description": "\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Keep setup code scoped to specific tests\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Keep setup code scoped to specific tests\n   ",
        "cases": [
            {
                "description": "\n    Where possible, setup of resources and dependencies should be as closely scoped\nto specific test cases as possible. For example, given a setup function:\n   \n\n// mustLoadDataSet loads a data set for the tests.\n//\n// This example is very simple and easy to read. Often realistic setup is more\n// complex, error-prone, and potentially slow.\nfunc mustLoadDataset(t *testing.T) []byte {\n    t.Helper()\n    data, err := os.ReadFile(\"path/to/your/project/testdata/dataset\")\n\n    if err != nil {\n        t.Fatalf(\"Could not load dataset: %v\", err)\n    }\n    return data\n}\n\n\n\n    Call\n    \n     mustLoadDataset\n    \n    explicitly in test functions that need it:\n   \n\n// Good:\nfunc TestParseData(t *testing.T) {\n    data := mustLoadDataset(t)\n    parsed, err := ParseData(data)\n    if err != nil {\n        t.Fatalf(\"Unexpected error parsing data: %v\", err)\n    }\n    want := &DataTable{ /* ... */ }\n    if got := parsed; !cmp.Equal(got, want) {\n        t.Errorf(\"ParseData(data) = %v, want %v\", got, want)\n    }\n}\n\nfunc TestListContents(t *testing.T) {\n    data := mustLoadDataset(t)\n    contents, err := ListContents(data)\n    if err != nil {\n        t.Fatalf(\"Unexpected error listing contents: %v\", err)\n    }\n    want := []string{ /* ... */ }\n    if got := contents; !cmp.Equal(got, want) {\n        t.Errorf(\"ListContents(data) = %v, want %v\", got, want)\n    }\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n\n\n\n    The test function\n    \n     TestRegression682831\n    \n    does not use the data set and therefore\ndoes not call\n    \n     mustLoadDataset\n    \n    , which could be slow and failure-prone:\n   \n\n// Bad:\nvar dataset []byte\n\nfunc TestParseData(t *testing.T) {\n    // As documented above without calling mustLoadDataset directly.\n}\n\nfunc TestListContents(t *testing.T) {\n    // As documented above without calling mustLoadDataset directly.\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n\nfunc init() {\n    dataset = mustLoadDataset()\n}\n\n\n\n    A user may wish to run a function in isolation of the others and should not be\npenalized by these factors:\n   \n\n# No reason for this to perform the expensive initialization.\n$ go test -run TestRegression682831\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    When to use a custom\n    \n     TestMain\n    \n    entrypoint\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Keep setup code scoped to specific tests\n   /\n    When to use a custom\n    \n     TestMain\n    \n    entrypoint\n   ",
        "cases": [
            {
                "description": "\n    If\n    \n     all tests in the package\n    \n    require common setup and the\n    \n     setup requires\nteardown\n    \n    , you can use a\n    \n     custom testmain entrypoint\n    \n    . This can happen if the\nresource the test cases require is especially expensive to setup, and the cost\nshould be amortized. Typically you have extracted any unrelated tests from the\ntest suite at that point. It is typically only used for\n    \n     functional tests\n    \n    .\n   \n    Using a custom\n    \n     TestMain\n    \n\n     should not be your first choice\n    \n    due the amount of\ncare that should be taken for correct use. Consider first whether the solution\nin the\n    \n\n      amortizing common test setup\n     \n\n    section or an ordinary\n    \n     test helper\n    \n    is\nsufficient for your needs.\n   \n\n// Good:\nvar db *sql.DB\n\nfunc TestInsert(t *testing.T) { /* omitted */ }\n\nfunc TestSelect(t *testing.T) { /* omitted */ }\n\nfunc TestUpdate(t *testing.T) { /* omitted */ }\n\nfunc TestDelete(t *testing.T) { /* omitted */ }\n\n// runMain sets up the test dependencies and eventually executes the tests.\n// It is defined as a separate function to enable the setup stages to clearly\n// defer their teardown steps.\nfunc runMain(ctx context.Context, m *testing.M) (code int, err error) {\n    ctx, cancel := context.WithCancel(ctx)\n    defer cancel()\n\n    d, err := setupDatabase(ctx)\n    if err != nil {\n        return 0, err\n    }\n    defer d.Close() // Expressly clean up database.\n    db = d          // db is defined as a package-level variable.\n\n    // m.Run() executes the regular, user-defined test functions.\n    // Any defer statements that have been made will be run after m.Run()\n    // completes.\n    return m.Run(), nil\n}\n\nfunc TestMain(m *testing.M) {\n    code, err := runMain(context.Background(), m)\n    if err != nil {\n        // Failure messages should be written to STDERR, which log.Fatal uses.\n        log.Fatal(err)\n    }\n    // NOTE: defer statements do not run past here due to os.Exit\n    //       terminating the process.\n    os.Exit(code)\n}\n\n\n\n    Ideally a test case is hermetic between invocations of itself and between other\ntest cases.\n   \n    At the very least, ensure that individual test cases reset any global state they\nhave modified if they have done so (for instance, if the tests are working with\nan external database).\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Amortizing common test setup\n   ",
        "belongs to": "\n    Tests\n   /\n    Designing extensible validation APIs\n   /\n    Keep setup code scoped to specific tests\n   /\n    Amortizing common test setup\n   ",
        "cases": [
            {
                "description": "\n    Using a\n    \n     sync.Once\n    \n    may be appropriate, though not required, if all of the\nfollowing are true about the common setup:\n   \n\n     It is expensive.\n    \n\n     It only applies to some tests.\n    \n\n     It does not require teardown.\n    \n\n\n// Good:\nvar dataset struct {\n    once sync.Once\n    data []byte\n    err  error\n}\n\nfunc mustLoadDataset(t *testing.T) []byte {\n    t.Helper()\n    dataset.once.Do(func() {\n        data, err := os.ReadFile(\"path/to/your/project/testdata/dataset\")\n        // dataset is defined as a package-level variable.\n        dataset.data = data\n        dataset.err = err\n    })\n    if err := dataset.err; err != nil {\n        t.Fatalf(\"Could not load dataset: %v\", err)\n    }\n    return dataset.data\n}\n\n\n\n    When\n    \n     mustLoadDataset\n    \n    is used in multiple test functions, its cost is\namortized:\n   \n\n// Good:\nfunc TestParseData(t *testing.T) {\n    data := mustLoadDataset(t)\n\n    // As documented above.\n}\n\nfunc TestListContents(t *testing.T) {\n    data := mustLoadDataset(t)\n\n    // As documented above.\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n\n\n\n    The reason that common teardown is tricky is there is no uniform place to\nregister cleanup routines. If the setup function (in this case\n    \n     loadDataset\n    \n    )\nrelies on a context,\n    \n     sync.Once\n    \n    may be problematic. This is because the second\nof two racing calls to the setup function would need to wait for the first call\nto finish before returning. This period of waiting cannot be easily made to\nrespect the context’s cancellation.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    String concatenation\n   ",
        "belongs to": "\n    String concatenation\n   ",
        "cases": [
            {
                "description": "\n    There are several ways to concatenate strings in Go. Some examples include:\n   \n\n     The “+” operator\n    \n\n\n      fmt.Sprintf\n     \n\n\n\n      strings.Builder\n     \n\n\n\n      text/template\n     \n\n\n\n      safehtml/template\n     \n\n\n    Though there is no one-size-fits-all rule for which to choose, the following\nguidance outlines when each method is preferred.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Prefer “+” for simple cases\n   ",
        "belongs to": "\n    String concatenation\n   /\n    Prefer “+” for simple cases\n   ",
        "cases": [
            {
                "description": "\n    Prefer using “+” when concatenating few strings. This method is syntactically\nthe simplest and requires no import.\n   \n\n// Good:\nkey := \"projectid: \" + p\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Prefer\n    \n     fmt.Sprintf\n    \n    when formatting\n   ",
        "belongs to": "\n    String concatenation\n   /\n    Prefer\n    \n     fmt.Sprintf\n    \n    when formatting\n   ",
        "cases": [
            {
                "description": "\n    Prefer using\n    \n     fmt.Sprintf\n    \n    when building a complex string with formatting. Using\nmany “+” operators may obscure the end result.\n   \n\n// Good:\nstr := fmt.Sprintf(\"%s [%s:%d]-> %s\", src, qos, mtu, dst)\n\n\n\n\n// Bad:\nbad := src.String() + \" [\" + qos.String() + \":\" + strconv.Itoa(mtu) + \"]-> \" + dst.String()\n\n\n\n\n     Best Practice:\n    \n    When the output of the string-building operation is an\n    \n     io.Writer\n    \n    , don’t construct a temporary string with\n    \n     fmt.Sprintf\n    \n    just to send\nit to the Writer. Instead, use\n    \n     fmt.Fprintf\n    \n    to emit to the Writer directly.\n   \n    When the formatting is even more complex, prefer\n    \n\n      text/template\n     \n\n    or\n    \n\n      safehtml/template\n     \n\n    as appropriate.\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Prefer\n    \n     strings.Builder\n    \n    for constructing a string piecemeal\n   ",
        "belongs to": "\n    String concatenation\n   /\n    Prefer\n    \n     strings.Builder\n    \n    for constructing a string piecemeal\n   ",
        "cases": [
            {
                "description": "\n    Prefer using\n    \n     strings.Builder\n    \n    when building a string bit-by-bit.\n    \n     strings.Builder\n    \n    takes amortized linear time, whereas “+” and\n    \n     fmt.Sprintf\n    \n    take quadratic time when called sequentially to form a larger string.\n   \n\n// Good:\nb := new(strings.Builder)\nfor i, d := range digitsOfPi {\n    fmt.Fprintf(b, \"the %d digit of pi is: %d\\n\", i, d)\n}\nstr := b.String()\n\n\n\n\n     Note:\n    \n    For more discussion, see\n    \n     GoTip #29: Building Strings Efficiently\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Constant strings\n   ",
        "belongs to": "\n    String concatenation\n   /\n    Constant strings\n   ",
        "cases": [
            {
                "description": "\n    Prefer to use backticks (`) when constructing constant, multi-line string\nliterals.\n   \n\n// Good:\nusage := `Usage:\n\ncustom_tool [args]`\n\n\n\n\n// Bad:\nusage := \"\" +\n  \"Usage:\\n\" +\n  \"\\n\" +\n  \"custom_tool [args]\"\n\n\n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Global state\n   ",
        "belongs to": "\n    Global state\n   ",
        "cases": [
            {
                "description": "\n    Libraries should not force their clients to use APIs that rely on\n    \n     global state\n    \n    . They are advised\nnot to expose APIs or export\n    \n     package level\n    \n    variables that control\nbehavior for all clients as parts of their API. The rest of the section uses\n“global” and “package level state” synonymously.\n   \n    Instead, if your functionality maintains state, allow your clients to create and\nuse instance values.\n   \n\n     Important:\n    \n    While this guidance is applicable to all developers, it is most\ncritical for infrastructure providers who offer libraries, integrations, and\nservices to other teams.\n   \n\n// Good:\n// Package sidecar manages subprocesses that provide features for applications.\npackage sidecar\n\ntype Registry struct { plugins map[string]*Plugin }\n\nfunc New() *Registry { return &Registry{plugins: make(map[string]*Plugin)} }\n\nfunc (r *Registry) Register(name string, p *Plugin) error { ... }\n\n\n\n    Your users will instantiate the data they need (a\n    \n     *sidecar.Registry\n    \n    ) and then\npass it as an explicit dependency:\n   \n\n// Good:\npackage main\n\nfunc main() {\n  sidecars := sidecar.New()\n  if err := sidecars.Register(\"Cloud Logger\", cloudlogger.New()); err != nil {\n    log.Exitf(\"could not setup cloud logger: %v\", err)\n  }\n  cfg := &myapp.Config{Sidecars: sidecars}\n  myapp.Run(context.Background(), cfg)\n}\n\n\n\n    There are different approaches to migrating existing code to support dependency\npassing. The main one you will use is passing dependencies as parameters to\nconstructors, functions, methods, or struct fields on the call chain.\n   \n    See also:\n   \n\n\n      Go Tip #5: Slimming Your Client Libraries\n     \n\n\n\n      Go Tip #24: Use Case-Specific Constructions\n     \n\n\n\n      Go Tip #40: Improving Time Testability with Function Parameters\n     \n\n\n\n      Go Tip #41: Identify Function Call Parameters\n     \n\n\n\n      Go Tip #44: Improving Time Testability with Struct Fields\n     \n\n\n\n      Go Tip #80: Dependency Injection Principles\n     \n\n\n    APIs that do not support explicit dependency passing become fragile as the\nnumber of clients increases:\n   \n\n// Bad:\npackage sidecar\n\nvar registry = make(map[string]*Plugin)\n\nfunc Register(name string, p *Plugin) error { /* registers plugin in registry */ }\n\n\n\n    Consider what happens in the case of tests exercising code that transitively\nrelies on a sidecar for cloud logging.\n   \n\n// Bad:\npackage app\n\nimport (\n  \"cloudlogger\"\n  \"sidecar\"\n  \"testing\"\n)\n\nfunc TestEndToEnd(t *testing.T) {\n  // The system under test (SUT) relies on a sidecar for a production cloud\n  // logger already being registered.\n  ... // Exercise SUT and check invariants.\n}\n\nfunc TestRegression_NetworkUnavailability(t *testing.T) {\n  // We had an outage because of a network partition that rendered the cloud\n  // logger inoperative, so we added a regression test to exercise the SUT with\n  // a test double that simulates network unavailability with the logger.\n  sidecar.Register(\"cloudlogger\", cloudloggertest.UnavailableLogger)\n  ... // Exercise SUT and check invariants.\n}\n\nfunc TestRegression_InvalidUser(t *testing.T) {\n  // The system under test (SUT) relies on a sidecar for a production cloud\n  // logger already being registered.\n  //\n  // Oops. cloudloggertest.UnavailableLogger is still registered from the\n  // previous test.\n  ... // Exercise SUT and check invariants.\n}\n\n\n\n    Go tests are executed sequentially by default, so the tests above run as:\n   \n\n\n      TestEndToEnd\n     \n\n\n\n      TestRegression_NetworkUnavailability\n     \n     , which overrides the default value of\ncloudlogger\n    \n\n\n      TestRegression_InvalidUser\n     \n     , which requires the default value of\ncloudlogger registered in\n     \n      package sidecar\n     \n\n\n    This creates an order-dependent test case, which breaks running with test\nfilters, and prevents tests from running in parallel or being sharded.\n   \n    Using global state poses problems that lack easy answers for you and the API’s\nclients:\n   \n\n\n      What happens if a client needs to use different and separately operating\nsets of\n      \n       Plugin\n      \n      s (for example, to support multiple servers) in the same\nprocess space?\n     \n\n\n\n      What happens if a client wants to replace a registered\n      \n       Plugin\n      \n      with an\nalternative implementation in a test, like a\n      \n       test double\n      \n      ?\n     \n\n      What happens if a client’s tests require hermeticity between instances of a\n      \n       Plugin\n      \n      , or between all of the plugins registered?\n     \n\n\n\n      What happens if multiple clients\n      \n       Register\n      \n      a\n      \n       Plugin\n      \n      under the same name?\nWhich one wins, if any?\n     \n\n      How should errors be\n      \n       handled\n      \n      ? If the code panics\nor calls\n      \n       log.Fatal\n      \n      , will that always be\n      \n       appropriate for all places in which API would be called\n      \n      ?\nCan a client verify it doesn’t do something bad before doing so?\n     \n\n\n\n      Are there certain stages in a program’s startup phases or lifetime during\nwhich\n      \n       Register\n      \n      can be called and when it can’t?\n     \n\n      What happens if\n      \n       Register\n      \n      is called at the wrong time? A client could call\n      \n       Register\n      \n      in\n      \n\n        func init\n       \n\n      ,\nbefore flags are parsed, or after\n      \n       main\n      \n      . The stage at which a function is\ncalled affects error handling. If the author of an API assumes the API is\n      \n       only\n      \n      called during program initialization without the requirement that it\nis, the assumption may nudge the author to design error handling to\n      \n       abort the program\n      \n      by modeling the API as a\n      \n       Must\n      \n      -like function. Aborting is not appropriate for general-purpose\nlibrary functions that can be used at any stage.\n     \n\n\n\n      What if the client’s and the designer’s concurrency needs are mismatched?\n     \n\n\n    See also:\n   \n\n\n      Go Tip #36: Enclosing Package-Level State\n     \n\n\n\n      Go Tip #71: Reducing Parallel Test Flakiness\n     \n\n\n\n      Go Tip #80: Dependency Injection Principles\n     \n\n\n     Error Handling:\n     \n      Look Before You Leap\n     \n     versus\n     \n      Easier to Ask for Forgiveness than Permission\n     \n\n\n\n      Unit Testing Practices on Public APIs\n     \n\n\n    Global state has cascading effects on the\n    \n     health of the Google codebase\n    \n    . Global state should\nbe approached with\n    \n     extreme scrutiny\n    \n    .\n   \n\n     Global state comes in several forms\n    \n    , and you can use a few\n    \n     litmus tests to identify when it is safe\n    \n    .\n   \n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Major forms of package state APIs\n   ",
        "belongs to": "\n    Global state\n   /\n    Major forms of package state APIs\n   ",
        "cases": [
            {
                "description": "\n    Several of the most common problematic API forms are enumerated below:\n   \n\n\n      Top-level variables irrespective of whether they are exported.\n     \n\n\n// Bad:\npackage logger\n\n// Sinks manages the default output sources for this package's logging API.  This\n// variable should be set at package initialization time and never thereafter.\nvar Sinks []Sink\n\n\n\n\n      See the\n      \n       litmus tests\n      \n      to know when these are safe.\n     \n\n\n\n      The\n      \n       service locator pattern\n      \n      .\nSee the\n      \n       first example\n      \n      . The service locator pattern itself is not\nproblematic, rather the locator being defined as global.\n     \n\n\n\n      Registries for\n      \n       callbacks\n      \n      and similar behaviors.\n     \n\n\n// Bad:\npackage health\n\nvar unhealthyFuncs []func\n\nfunc OnUnhealthy(f func()) {\n  unhealthyFuncs = append(unhealthyFuncs, f)\n}\n\n\n\n\n\n\n      Thick-Client singletons for things like backends, storage, data access\nlayers, and other system resources. These often pose additional problems\nwith service reliability.\n     \n\n\n// Bad:\npackage useradmin\n\nvar client pb.UserAdminServiceClientInterface\n\nfunc Client() *pb.UserAdminServiceClient {\n    if client == nil {\n        client = ...  // Set up client.\n    }\n    return client\n}\n\n\n\n\n\n\n\n      Note:\n     \n     Many legacy APIs in the Google codebase do not follow this guidance;\nin fact, some Go standard libraries allow for configuration via global values.\nNevertheless, the legacy API’s contravention of this guidance\n     \n\n       should not be used as precedent\n      \n\n     for continuing\nthe pattern.\n    \n\n     It is better to invest in proper API design today than pay for redesigning\nlater.\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Litmus tests\n   ",
        "belongs to": "\n    Global state\n   /\n    Litmus tests\n   ",
        "cases": [
            {
                "description": "\n\n     APIs using the patterns above\n    \n    are unsafe when:\n   \n\n     Multiple functions interact via global state when executed in the same\nprogram, despite being otherwise independent (for example, authored by\ndifferent authors in vastly different directories).\n    \n\n     Independent test cases interact with each other through global state.\n    \n\n     Users of the API are tempted to swap or replace global state for testing\npurposes, particularly to replace any part of the state with a\n     \n      test double\n     \n     , like a stub, fake, spy, or mock.\n    \n\n     Users have to consider special ordering requirements when interacting with\nglobal state:\n     \n      func init\n     \n     , whether flags are parsed yet, etc.\n    \n\n    Provided the conditions above are avoided, there are a\n    \n     few limited\ncircumstances under which these APIs are safe\n    \n    , namely when any of the\nfollowing is true:\n   \n\n     The global state is logically constant\n(\n     \n      example\n     \n     ).\n    \n\n     The package’s observable behavior is stateless. For example, a public\nfunction may use a private global variable as a cache, but so long as the\ncaller can’t distinguish cache hits from misses, the function is stateless.\n    \n\n     The global state does not bleed into things that are external to the\nprogram, like sidecar processes or files on a shared filesystem.\n    \n\n     There is no expectation of predictable behavior\n(\n     \n      example\n     \n     ).\n    \n\n\n\n      Note:\n     \n\n      Sidecar processes\n     \n     may\n     \n      not\n     \n     strictly be process-local. They can and often are shared with more\nthan one application process. Moreover, these sidecars often interact with\nexternal distributed systems.\n    \n\n     Further, the same stateless, idempotent, and local rules in addition to the\nbase considerations above would apply to the code of the sidecar process\nitself!\n    \n\n    An example of one of these safe situations is\n    \n\n      package image\n     \n\n    with its\n    \n\n      image.RegisterFormat\n     \n\n    function.\nConsider the litmus tests from above applied to a typical decoder, like the one\nfor handling the\n    \n     PNG\n    \n    format:\n   \n\n     Multiple calls to\n     \n      package image\n     \n     ’s APIs that use the registered decoders\n(for example,\n     \n      image.Decode\n     \n     ) cannot interfere with one another, similarly\nfor tests. The only exception is\n     \n      image.RegisterFormat\n     \n     , but that is\nmitigated by the points below.\n    \n\n     It is extremely unlikely that a user would want to replace a decoder with a\n     \n      test double\n     \n     , as the PNG decoder exemplifies a case in which our codebase’s\npreference for real objects applies. However, a user would be more likely to\nreplace a decoder with a test double if the decoder statefully interacted\nwith operating system resources (for example, the network).\n    \n\n     Collisions in registration are conceivable, though they are probably rare in\npractice.\n    \n\n     The decoders are stateless, idempotent, and pure.\n    \n\n\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Providing a default instance\n   ",
        "belongs to": "\n    Global state\n   /\n    Providing a default instance\n   ",
        "cases": [
            {
                "description": "\n    While not recommended, it is acceptable to provide a simplified API that uses\npackage level state if you need to maximize convenience for the user.\n   \n    Follow the\n    \n     litmus tests\n    \n    with these guidelines in such\ncases:\n   \n\n     The package must offer clients the ability to create isolated instances of\npackage types as\n     \n      described above\n     \n     .\n    \n\n     The public APIs that use global state must be a thin proxy to the previous\nAPI. A good example of this is\n     \n\n       http.Handle\n      \n\n     internally calling\n     \n\n       (*http.ServeMux).Handle\n      \n\n     on\nthe package variable\n     \n\n       http.DefaultServeMux\n      \n\n     .\n    \n\n\n      This package-level API must only be used by\n      \n       binary build targets\n      \n      , not\n      \n       libraries\n      \n      , unless the libraries are undertaking a refactoring to support\ndependency passing. Infrastructure libraries that can be imported by other\npackages must not rely on package-level state of the packages they import.\n     \n\n      For example, an infrastructure provider implementing a sidecar that is to be\nshared with other teams using the API from the top should offer an API to\naccommodate this:\n     \n\n\n// Good:\npackage cloudlogger\n\nfunc New() *Logger { ... }\n\nfunc Register(r *sidecar.Registry, l *Logger) {\n  r.Register(\"Cloud Logging\", l)\n}\n\n\n\n\n\n     This package-level API must\n     \n      document\n     \n     and\nenforce its invariants (for example, at which stage in the program’s life it\ncan be called, whether it can be used concurrently). Further, it must\nprovide an API to reset global state to a known-good default (for example,\nto facilitate testing).\n    \n\n    See also:\n   \n\n\n      Go Tip #36: Enclosing Package-Level State\n     \n\n\n\n      Go Tip #80: Dependency Injection Principles\n     \n\n\n    This site is open source.\n    \n     Improve this page\n    \n    .\n   ",
                "example": []
            }
        ]
    }
]