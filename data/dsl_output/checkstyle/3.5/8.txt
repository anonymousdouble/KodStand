Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

1. Analyze whether each sentence of Description of CheckStyle Rule is a rule and then classify it as mandatory or optional. If the rule is same as an option, do not need to parse it as a rule. If the rule is subjective, do not classify it as a rule. 
2. Analyze whether each option is a rule. If option is a configurable term, using {{OptionName}} to represent the term. If the option is to configure violation messages or reporting granularity, do not classify it as a rule. If the option is a rule, parse rule for each value of the option.
3. When parsing a rule using the given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. 

CheckStyle Rule:
Rulename
JavadocTagContinuationIndentation
Description

Checks the indentation of the continuation lines in block tags.
That is whether the
continued description of at clauses should be indented or not. If the text is not properly
indented it throws a violation. A continuation line is when the description starts/spans
past the line with the tag. Default indentation required is at least 4, but this can be
changed with the help of properties below.
Options
Properties



name
description
type
default value
since


offset
Specify how many spaces to use for new indentation level.
int
4
6.0


violateExecutionOnNonTightHtml
Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
boolean
false
8.3

Grammar:
RuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups
Rule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means if Rule1 then Rule2
ExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule # means rules not applied to TermList | Rule
Operator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'
TermList ::= Term [, Term]*
Modifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...
Term :: = JavaTerm | Modifier* Term | Term of Term
JavaTerm means the formal expression using such format [XXX] "XXX" represent a JavaTerm


For Example, Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

CheckStyle Rule:
Rulename:
NeedBraces

Description
Checks for braces around code blocks.

Options:
allowEmptyLoopBody, Allow loops with empty bodies., boolean, false
allowSingleLineStatement, Allow single-line statements without braces., boolean, false
tokens, tokens to check, subset of tokens

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
,
LITERAL_CASE
,
LITERAL_DEFAULT
,
LAMBDA
.
,

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
.

Final RuleSet Representation:
Basic Rule:
{{tokens}} has [Brace] 

Option Rule:
allowEmptyLoopBody option:
False: Mandatory: [body] of {{tokens}} is not [Null]
True: Optional: [body] of {{tokens}} is [Null]

allowSingleLineStatement option:
False: Mandatory: Number of [statement] of [body] of [tokens] is 1 -> [tokens] has [Brace] 
True: Optional: Number of [statement] of [body] of [tokens] is 1 -> [tokens] not has [Brace]

=======================================================
CheckStyle Rule:
Rulename: JavadocTagContinuationIndentation
Description:
- Rule: Mandatory: Checks the indentation of the continuation lines in block tags.
- Rule: Mandatory: The continued description of at clauses should be indented properly.
- Rule: Mandatory: A continuation line is when the description starts/spans past the line with the tag.
- Rule: Mandatory: Default indentation required is at least 4 spaces.
- Rule: Optional: The indentation level can be changed with the 'offset' property.
- Rule: Mandatory: Throws a violation if the text is not properly indented.

Options:
- Option: offset
  - Rule: Optional: Specify how many spaces to use for new indentation level.
  - Type: int
  - Default Value: 4
  - Since: 6.0
- Option: violateExecutionOnNonTightHtml
  - Rule: Optional: Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at Tight-HTML Rules.
  - Type: boolean
  - Default Value: false
  - Since: 8.3

Final RuleSet Representation:
- Basic Rule: N/A
- Option Rule: N/A

The JavadocTagContinuationIndentation rule checks the indentation of continuation lines in block tags, ensuring proper formatting. The 'offset' option allows customization of the indentation level, and 'violateExecutionOnNonTightHtml' controls when to print violations for non-compliant Javadoc.