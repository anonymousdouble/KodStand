url,iden,name,msg,state,fix,description,suggestion,codeExamples,options,other
https://docs.astral.sh/ruff/rules/unused-import/,F401,unused-import,<code>{name}</code> imported but unused; consider using <code>importlib.util.find_spec</code> to test for availability,Rule is stable,Automatic fix available,"What it does#
Checks for unused imports.
","Why is this bad?#
Unused imports add a performance overhead at runtime, and risk creating
import cycles. They also increase the cognitive load of reading the code.
If an import statement is used to check for the availability or existence
of a module, consider using importlib.util.find_spec instead.
If an import statement is used to re-export a symbol as part of a module's
public interface, consider using a ""redundant"" import alias, which
instructs Ruff (and other tools) to respect the re-export, and avoid
marking it as unused, as in:
from module import member as member

Fix safety#
When ignore_init_module_imports is disabled, fixes can remove for unused imports in __init__ files.
These fixes are considered unsafe because they can change the public interface.
","----neg----:
import numpy as np  # unused import


def area(radius):
    return 3.14 * radius**2
----pos----:
def area(radius):
    return 3.14 * radius**2
----other----:
To check the availability of a module, use importlib.util.find_spec:
from importlib.util import find_spec

if find_spec(""numpy"") is not None:
    print(""numpy is installed"")
else:
    print(""numpy is not installed"")

","https://docs.astral.sh/ruff/settings/#lint_ignore-init-module-imports
lint.ignore-init-module-imports
None","
<h1 id=""unused-import-f401"">unused-import (F401)<a class=""headerlink"" href=""#unused-import-f401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-import-statement"">Python documentation: <code>import</code></a></li>
<li><a href=""https://docs.python.org/3/library/importlib.html#importlib.util.find_spec"">Python documentation: <code>importlib.util.find_spec</code></a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/libraries.html#library-interface-public-and-private-symbols"">Typing documentation: interface conventions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/import-shadowed-by-loop-var/,F402,import-shadowed-by-loop-var,Import <code>{name}</code> from {row} shadowed by loop variable,Rule is stable,Automatic fix not available,"What it does#
Checks for import bindings that are shadowed by loop variables.
","Why is this bad?#
Shadowing an import with loop variables makes the code harder to read and
reason about, as the identify of the imported binding is no longer clear.
It's also often indicative of a mistake, as it's unlikely that the loop
variable is intended to be used as the imported binding.
Consider using a different name for the loop variable.
","----neg----:
from os import path

for path in files:
    print(path)
----pos----:
from os import path


for filename in files:
    print(filename)
",,"
<h1 id=""import-shadowed-by-loop-var-f402"">import-shadowed-by-loop-var (F402)<a class=""headerlink"" href=""#import-shadowed-by-loop-var-f402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/undefined-local-with-import-star/,F403,undefined-local-with-import-star,<code>from {name} import *</code> used; unable to detect undefined names,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of wildcard imports.
","Why is this bad?#
Wildcard imports (e.g., from module import *) make it hard to determine
which symbols are available in the current namespace, and from which module
they were imported. They're also discouraged by PEP 8.
","----neg----:
from math import *


def area(radius):
    return pi * radius**2
----pos----:
from math import pi


def area(radius):
    return pi * radius**2
",,"
<h1 id=""undefined-local-with-import-star-f403"">undefined-local-with-import-star (F403)<a class=""headerlink"" href=""#undefined-local-with-import-star-f403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/late-future-import/,F404,late-future-import,<code>from __future__</code> imports must occur at the beginning of the file,Rule is stable,Automatic fix not available,"What it does#
Checks for __future__ imports that are not located at the beginning of a
file.
","Why is this bad?#
Imports from __future__ must be placed the beginning of the file, before any
other statements (apart from docstrings). The use of __future__ imports
elsewhere is invalid and will result in a SyntaxError.
","----neg----:
from pathlib import Path

from __future__ import annotations
----pos----:
from __future__ import annotations

from pathlib import Path
",,"
<h1 id=""late-future-import-f404"">late-future-import (F404)<a class=""headerlink"" href=""#late-future-import-f404"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#future"">Python documentation: Future statements</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undefined-local-with-import-star-usage/,F405,undefined-local-with-import-star-usage,"<code>{name}</code> may be undefined, or defined from star imports",Rule is stable,Automatic fix not available,"What it does#
Checks for names that might be undefined, but may also be defined in a
wildcard import.
","Why is this bad?#
Wildcard imports (e.g., from module import *) make it hard to determine
which symbols are available in the current namespace. If a module contains
a wildcard import, and a name in the current namespace has not been
explicitly defined or imported, then it's unclear whether the name is
undefined or was imported by the wildcard import.
If the name is defined in via a wildcard import, that member should be
imported explicitly to avoid confusion.
If the name is not defined in a wildcard import, it should be defined or
imported.
","----neg----:
from math import *


def area(radius):
    return pi * radius**2
----pos----:
from math import pi


def area(radius):
    return pi * radius**2
",,"
<h1 id=""undefined-local-with-import-star-usage-f405"">undefined-local-with-import-star-usage (F405)<a class=""headerlink"" href=""#undefined-local-with-import-star-usage-f405"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/undefined-local-with-nested-import-star-usage/,F406,undefined-local-with-nested-import-star-usage,<code>from {name} import *</code> only allowed at module level,Rule is stable,Automatic fix not available,"What it does#
Check for the use of wildcard imports outside of the module namespace.
","Why is this bad?#
The use of wildcard imports outside of the module namespace (e.g., within
functions) can lead to confusion, as the import can shadow local variables.
Though wildcard imports are discouraged by PEP 8, when necessary, they
should be placed in the module namespace (i.e., at the top-level of a
module).
","----neg----:
def foo():
    from math import *
----pos----:
from math import *


def foo():
    ...
",,"
<h1 id=""undefined-local-with-nested-import-star-usage-f406"">undefined-local-with-nested-import-star-usage (F406)<a class=""headerlink"" href=""#undefined-local-with-nested-import-star-usage-f406"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/future-feature-not-defined/,F407,future-feature-not-defined,Future feature <code>{name}</code> is not defined,Rule is stable,Automatic fix not available,"What it does#
Checks for __future__ imports that are not defined in the current Python
version.
","Why is this bad?#
Importing undefined or unsupported members from the __future__ module is
a SyntaxError.
",,,"
<h1 id=""future-feature-not-defined-f407"">future-feature-not-defined (F407)<a class=""headerlink"" href=""#future-feature-not-defined-f407"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/__future__.html"">Python documentation: <code>__future__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-invalid-format/,F501,percent-format-invalid-format,<code>%</code>-format string has invalid format string: {message},Rule is stable,Automatic fix not available,"What it does#
Checks for invalid printf-style format strings.
","Why is this bad?#
Conversion specifiers are required for printf-style format strings. These
specifiers must contain a % character followed by a conversion type.
","----neg----:
""Hello, %"" % ""world""
----pos----:
""Hello, %s"" % ""world""
",,"
<h1 id=""percent-format-invalid-format-f501"">percent-format-invalid-format (F501)<a class=""headerlink"" href=""#percent-format-invalid-format-f501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-expected-mapping/,F502,percent-format-expected-mapping,<code>%</code>-format string expected mapping but got sequence,Rule is stable,Automatic fix not available,"What it does#
Checks for named placeholders in printf-style format strings without
mapping-type values.
","Why is this bad?#
When using named placeholders in printf-style format strings, the values
must be a map type (such as a dictionary). Otherwise, the expression will
raise a TypeError.
","----neg----:
""%(greeting)s, %(name)s"" % (""Hello"", ""World"")
----pos----:
""%(greeting)s, %(name)s"" % {""greeting"": ""Hello"", ""name"": ""World""}
----other----:
Or:
""%s, %s"" % (""Hello"", ""World"")

",,"
<h1 id=""percent-format-expected-mapping-f502"">percent-format-expected-mapping (F502)<a class=""headerlink"" href=""#percent-format-expected-mapping-f502"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-expected-sequence/,F503,percent-format-expected-sequence,<code>%</code>-format string expected sequence but got mapping,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of mapping-type values in printf-style format strings
without named placeholders.
","Why is this bad?#
When using mapping-type values (such as dict) in printf-style format
strings, the keys must be named. Otherwise, the expression will raise a
TypeError.
","----neg----:
""%s, %s"" % {""greeting"": ""Hello"", ""name"": ""World""}
----pos----:
""%(greeting)s, %(name)s"" % {""greeting"": ""Hello"", ""name"": ""World""}
----other----:
Or:
""%s, %s"" % (""Hello"", ""World"")

",,"
<h1 id=""percent-format-expected-sequence-f503"">percent-format-expected-sequence (F503)<a class=""headerlink"" href=""#percent-format-expected-sequence-f503"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-extra-named-arguments/,F504,percent-format-extra-named-arguments,<code>%</code>-format string has unused named argument(s): {message},Rule is stable,Automatic fix available,"What it does#
Checks for unused mapping keys in printf-style format strings.
","Why is this bad?#
Unused named placeholders in printf-style format strings are unnecessary,
and likely indicative of a mistake. They should be removed.
","----neg----:
""Hello, %(name)s"" % {""greeting"": ""Hello"", ""name"": ""World""}
----pos----:
""Hello, %(name)s"" % {""name"": ""World""}
",,"
<h1 id=""percent-format-extra-named-arguments-f504"">percent-format-extra-named-arguments (F504)<a class=""headerlink"" href=""#percent-format-extra-named-arguments-f504"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-missing-argument/,F505,percent-format-missing-argument,<code>%</code>-format string is missing argument(s) for placeholder(s): {message},Rule is stable,Automatic fix not available,"What it does#
Checks for named placeholders in printf-style format strings that are not
present in the provided mapping.
","Why is this bad?#
Named placeholders that lack a corresponding value in the provided mapping
will raise a KeyError.
","----neg----:
""%(greeting)s, %(name)s"" % {""name"": ""world""}
----pos----:
""Hello, %(name)s"" % {""name"": ""world""}
",,"
<h1 id=""percent-format-missing-argument-f505"">percent-format-missing-argument (F505)<a class=""headerlink"" href=""#percent-format-missing-argument-f505"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-mixed-positional-and-named/,F506,percent-format-mixed-positional-and-named,<code>%</code>-format string has mixed positional and named placeholders,Rule is stable,Automatic fix not available,"What it does#
Checks for printf-style format strings that have mixed positional and
named placeholders.
","Why is this bad?#
Python does not support mixing positional and named placeholders in
printf-style format strings. The use of mixed placeholders will raise a
TypeError at runtime.
","----neg----:
""%s, %(name)s"" % (""Hello"", {""name"": ""World""})
----pos----:
""%s, %s"" % (""Hello"", ""World"")
----other----:
Or:
""%(greeting)s, %(name)s"" % {""greeting"": ""Hello"", ""name"": ""World""}

",,"
<h1 id=""percent-format-mixed-positional-and-named-f506"">percent-format-mixed-positional-and-named (F506)<a class=""headerlink"" href=""#percent-format-mixed-positional-and-named-f506"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-positional-count-mismatch/,F507,percent-format-positional-count-mismatch,<code>%</code>-format string has {wanted} placeholder(s) but {got} substitution(s),Rule is stable,Automatic fix not available,"What it does#
Checks for printf-style format strings that have a mismatch between the
number of positional placeholders and the number of substitution values.
","Why is this bad?#
When a printf-style format string is provided with too many or too few
substitution values, it will raise a TypeError at runtime.
","----neg----:
""%s, %s"" % (""Hello"", ""world"", ""!"")
----pos----:
""%s, %s"" % (""Hello"", ""world"")
",,"
<h1 id=""percent-format-positional-count-mismatch-f507"">percent-format-positional-count-mismatch (F507)<a class=""headerlink"" href=""#percent-format-positional-count-mismatch-f507"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-star-requires-sequence/,F508,percent-format-star-requires-sequence,<code>%</code>-format string <code>*</code> specifier requires sequence,Rule is stable,Automatic fix not available,"What it does#
Checks for printf-style format strings that use the * specifier with
non-tuple values.
","Why is this bad?#
The use of the * specifier with non-tuple values will raise a
TypeError at runtime.
","----neg----:
from math import pi

""%(n).*f"" % {""n"": (2, pi)}
----pos----:
from math import pi

""%.*f"" % (2, pi)  # 3.14
",,"
<h1 id=""percent-format-star-requires-sequence-f508"">percent-format-star-requires-sequence (F508)<a class=""headerlink"" href=""#percent-format-star-requires-sequence-f508"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/percent-format-unsupported-format-character/,F509,percent-format-unsupported-format-character,<code>%</code>-format string has unsupported format character <code>{char}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for printf-style format strings with invalid format characters.
","Why is this bad?#
In printf-style format strings, the % character is used to indicate
placeholders. If a % character is not followed by a valid format
character, it will raise a ValueError at runtime.
","----neg----:
""Hello, %S"" % ""world""
----pos----:
""Hello, %s"" % ""world""
",,"
<h1 id=""percent-format-unsupported-format-character-f509"">percent-format-unsupported-format-character (F509)<a class=""headerlink"" href=""#percent-format-unsupported-format-character-f509"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/string-dot-format-invalid-format/,F521,string-dot-format-invalid-format,<code>.format</code> call has invalid format string: {message},Rule is stable,Automatic fix not available,"What it does#
Checks for str.format calls with invalid format strings.
","Why is this bad?#
Invalid format strings will raise a ValueError.
","----neg----:
""{"".format(foo)
----pos----:
""{}"".format(foo)
",,"
<h1 id=""string-dot-format-invalid-format-f521"">string-dot-format-invalid-format (F521)<a class=""headerlink"" href=""#string-dot-format-invalid-format-f521"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/string-dot-format-extra-named-arguments/,F522,string-dot-format-extra-named-arguments,<code>.format</code> call has unused named argument(s): {message},Rule is stable,Automatic fix available,"What it does#
Checks for str.format calls with unused keyword arguments.
","Why is this bad?#
Unused keyword arguments are redundant, and often indicative of a mistake.
They should be removed.
","----neg----:
""Hello, {name}"".format(greeting=""Hello"", name=""World"")
----pos----:
""Hello, {name}"".format(name=""World"")
",,"
<h1 id=""string-dot-format-extra-named-arguments-f522"">string-dot-format-extra-named-arguments (F522)<a class=""headerlink"" href=""#string-dot-format-extra-named-arguments-f522"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/string-dot-format-extra-positional-arguments/,F523,string-dot-format-extra-positional-arguments,<code>.format</code> call has unused arguments at position(s): {message},Rule is stable,Automatic fix available,"What it does#
Checks for str.format calls with unused positional arguments.
","Why is this bad?#
Unused positional arguments are redundant, and often indicative of a mistake.
They should be removed.
","----neg----:
""Hello, {0}"".format(""world"", ""!"")
----pos----:
""Hello, {0}"".format(""world"")
",,"
<h1 id=""string-dot-format-extra-positional-arguments-f523"">string-dot-format-extra-positional-arguments (F523)<a class=""headerlink"" href=""#string-dot-format-extra-positional-arguments-f523"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/string-dot-format-missing-arguments/,F524,string-dot-format-missing-arguments,<code>.format</code> call is missing argument(s) for placeholder(s): {message},Rule is stable,Automatic fix not available,"What it does#
Checks for str.format calls with placeholders that are missing arguments.
","Why is this bad?#
In str.format calls, omitting arguments for placeholders will raise a
KeyError at runtime.
","----neg----:
""{greeting}, {name}"".format(name=""World"")
----pos----:
""{greeting}, {name}"".format(greeting=""Hello"", name=""World"")
",,"
<h1 id=""string-dot-format-missing-arguments-f524"">string-dot-format-missing-arguments (F524)<a class=""headerlink"" href=""#string-dot-format-missing-arguments-f524"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/string-dot-format-mixing-automatic/,F525,string-dot-format-mixing-automatic,<code>.format</code> string mixes automatic and manual numbering,Rule is stable,Automatic fix not available,"What it does#
Checks for str.format calls that mix automatic and manual numbering.
","Why is this bad?#
In str.format calls, mixing automatic and manual numbering will raise a
ValueError at runtime.
","----neg----:
""{0}, {}"".format(""Hello"", ""World"")
----pos----:
""{0}, {1}"".format(""Hello"", ""World"")
----other----:
Or:
""{}, {}"".format(""Hello"", ""World"")

",,"
<h1 id=""string-dot-format-mixing-automatic-f525"">string-dot-format-mixing-automatic (F525)<a class=""headerlink"" href=""#string-dot-format-mixing-automatic-f525"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/f-string-missing-placeholders/,F541,f-string-missing-placeholders,f-string without any placeholders,Rule is stable,Automatic fix available,"What it does#
Checks for f-strings that do not contain any placeholder expressions.
","Why is this bad?#
f-strings are a convenient way to format strings, but they are not
necessary if there are no placeholder expressions to format. In this
case, a regular string should be used instead, as an f-string without
placeholders can be confusing for readers, who may expect such a
placeholder to be present.
An f-string without any placeholders could also indicate that the
author forgot to add a placeholder expression.
","----neg----:
f""Hello, world!""
----pos----:
""Hello, world!""
",,"
<h1 id=""f-string-missing-placeholders-f541"">f-string-missing-placeholders (F541)<a class=""headerlink"" href=""#f-string-missing-placeholders-f541"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.python.org/dev/peps/pep-0498/"">PEP 498</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/multi-value-repeated-key-literal/,F601,multi-value-repeated-key-literal,Dictionary key literal <code>{name}</code> repeated,Rule is stable,Automatic fix available,"What it does#
Checks for dictionary literals that associate multiple values with the
same key.
","Why is this bad?#
Dictionary keys should be unique. If a key is associated with multiple values,
the earlier values will be overwritten. Including multiple values for the
same key in a dictionary literal is likely a mistake.
","----neg----:
foo = {
    ""bar"": 1,
    ""baz"": 2,
    ""baz"": 3,
}
foo[""baz""]  # 3
----pos----:
foo = {
    ""bar"": 1,
    ""baz"": 2,
}
foo[""baz""]  # 2
",,"
<h1 id=""multi-value-repeated-key-literal-f601"">multi-value-repeated-key-literal (F601)<a class=""headerlink"" href=""#multi-value-repeated-key-literal-f601"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#dictionaries"">Python documentation: Dictionaries</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/multi-value-repeated-key-variable/,F602,multi-value-repeated-key-variable,Dictionary key <code>{name}</code> repeated,Rule is stable,Automatic fix available,"What it does#
Checks for dictionary keys that are repeated with different values.
","Why is this bad?#
Dictionary keys should be unique. If a key is repeated with a different
value, the first values will be overwritten and the key will correspond to
the last value. This is likely a mistake.
","----neg----:
foo = {
    bar: 1,
    baz: 2,
    baz: 3,
}
foo[baz]  # 3
----pos----:
foo = {
    bar: 1,
    baz: 2,
}
foo[baz]  # 2
",,"
<h1 id=""multi-value-repeated-key-variable-f602"">multi-value-repeated-key-variable (F602)<a class=""headerlink"" href=""#multi-value-repeated-key-variable-f602"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#dictionaries"">Python documentation: Dictionaries</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/expressions-in-star-assignment/,F621,expressions-in-star-assignment,Too many expressions in star-unpacking assignment,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of too many expressions in starred assignment statements.
","Why is this bad?#
In assignment statements, starred expressions can be used to unpack iterables.
In Python 3, no more than 1 << 8 assignments are allowed before a starred
expression, and no more than 1 << 24 expressions are allowed after a starred
expression.
",,,"
<h1 id=""expressions-in-star-assignment-f621"">expressions-in-star-assignment (F621)<a class=""headerlink"" href=""#expressions-in-star-assignment-f621"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/multiple-starred-expressions/,F622,multiple-starred-expressions,Two starred expressions in assignment,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of multiple starred expressions in assignment statements.
","Why is this bad?#
In assignment statements, starred expressions can be used to unpack iterables.
Including more than one starred expression on the left-hand-side of an
assignment will cause a SyntaxError, as it is unclear which expression
should receive the remaining values.
","*foo, *bar, baz = (1, 2, 3)
",,"
<h1 id=""multiple-starred-expressions-f622"">multiple-starred-expressions (F622)<a class=""headerlink"" href=""#multiple-starred-expressions-f622"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-3132/"">PEP 3132</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assert-tuple/,F631,assert-tuple,"Assert test is a non-empty tuple, which is always <code>True</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for assert statements that use non-empty tuples as test
conditions.
","Why is this bad?#
Non-empty tuples are always True, so an assert statement with a
non-empty tuple as its test condition will always pass. This is likely a
mistake.
","----neg----:
assert (some_condition,)
----pos----:
assert some_condition
",,"
<h1 id=""assert-tuple-f631"">assert-tuple (F631)<a class=""headerlink"" href=""#assert-tuple-f631"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement"">Python documentation: The <code>assert</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/is-literal/,F632,is-literal,Use <code>==</code> to compare constant literals,Rule is stable,Automatic fix available,"What it does#
Checks for is and is not comparisons against constant literals, like
integers and strings.
","Why is this bad?#
The is and is not comparators operate on identity, in that they check
whether two objects are the same object. If the objects are not the same
object, the comparison will always be False. Using is and is not with
constant literals often works ""by accident"", but are not guaranteed to produce
the expected result.
As of Python 3.8, using is and is not with constant literals will produce
a SyntaxWarning.
Instead, use == and != to compare constant literals, which will compare
the values of the objects instead of their identities.
In preview, this rule will also flag is and is not comparisons against
non-constant literals, like lists, sets, and dictionaries. While such
comparisons will not raise a SyntaxWarning, they are still likely to be
incorrect, as they will compare the identities of the objects instead of
their values, which will always evaluate to False.
","----neg----:
x = 200
if x is 200:
    print(""It's 200!"")
----pos----:
x = 200
if x == 200:
    print(""It's 200!"")
",,"
<h1 id=""is-literal-f632"">is-literal (F632)<a class=""headerlink"" href=""#is-literal-f632"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#is-not"">Python documentation: Identity comparisons</a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#value-comparisons"">Python documentation: Value comparisons</a></li>
<li><a href=""https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/""><em>Why does Python log a SyntaxWarning for ‘is’ with literals?</em> by Adam Johnson</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-print-syntax/,F633,invalid-print-syntax,Use of <code>&gt;&gt;</code> is invalid with <code>print</code> function,Rule is stable,Automatic fix not available,"What it does#
Checks for print statements that use the >> syntax.
","Why is this bad?#
In Python 2, the print statement can be used with the >> syntax to
print to a file-like object. This print >> sys.stderr syntax is
deprecated in Python 3.
Instead, use the file keyword argument to the print function, the
sys.stderr.write function, or the logging module.
","----neg----:
from __future__ import print_function
import sys

print >> sys.stderr, ""Hello, world!""
----pos----:
print(""Hello, world!"", file=sys.stderr)
----other----:
Or:
import sys

sys.stderr.write(""Hello, world!\n"")

Or:
import logging

logging.error(""Hello, world!"")

",,"
<h1 id=""invalid-print-syntax-f633"">invalid-print-syntax (F633)<a class=""headerlink"" href=""#invalid-print-syntax-f633"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#print"">Python documentation: <code>print</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-tuple/,F634,if-tuple,"If test is a tuple, which is always <code>True</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for `if statements that use non-empty tuples as test conditions.
","Why is this bad?#
Non-empty tuples are always True, so an if statement with a non-empty
tuple as its test condition will always pass. This is likely a mistake.
","----neg----:
if (False,):
    print(""This will always run"")
----pos----:
if False:
    print(""This will never run"")
",,"
<h1 id=""if-tuple-f634"">if-tuple (F634)<a class=""headerlink"" href=""#if-tuple-f634"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-if-statement"">Python documentation: The <code>if</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/break-outside-loop/,F701,break-outside-loop,<code>break</code> outside loop,Rule is stable,Automatic fix not available,"What it does#
Checks for break statements outside of loops.
","Why is this bad?#
The use of a break statement outside of a for or while loop will
raise a SyntaxError.
","def foo():
    break
",,"
<h1 id=""break-outside-loop-f701"">break-outside-loop (F701)<a class=""headerlink"" href=""#break-outside-loop-f701"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-break-statement"">Python documentation: <code>break</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/continue-outside-loop/,F702,continue-outside-loop,<code>continue</code> not properly in loop,Rule is stable,Automatic fix not available,"What it does#
Checks for continue statements outside of loops.
","Why is this bad?#
The use of a continue statement outside of a for or while loop will
raise a SyntaxError.
","def foo():
    continue  # SyntaxError
",,"
<h1 id=""continue-outside-loop-f702"">continue-outside-loop (F702)<a class=""headerlink"" href=""#continue-outside-loop-f702"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-continue-statement"">Python documentation: <code>continue</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/yield-outside-function/,F704,yield-outside-function,<code>{keyword}</code> statement outside of a function,Rule is stable,Automatic fix not available,"What it does#
Checks for yield, yield from, and await usages outside of functions.
","Why is this bad?#
The use of yield, yield from, or await outside of a function will
raise a SyntaxError.
As an exception, await is allowed at the top level of a Jupyter notebook
(see: autoawait).
","class Foo:
    yield 1
",,"
<h1 id=""yield-outside-function-f704"">yield-outside-function (F704)<a class=""headerlink"" href=""#yield-outside-function-f704"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement"">Python documentation: <code>yield</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/return-outside-function/,F706,return-outside-function,<code>return</code> statement outside of a function/method,Rule is stable,Automatic fix not available,"What it does#
Checks for return statements outside of functions.
","Why is this bad?#
The use of a return statement outside of a function will raise a
SyntaxError.
","class Foo:
    return 1
",,"
<h1 id=""return-outside-function-f706"">return-outside-function (F706)<a class=""headerlink"" href=""#return-outside-function-f706"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-return-statement"">Python documentation: <code>return</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/default-except-not-last/,F707,default-except-not-last,An <code>except</code> block as not the last exception handler,Rule is stable,Automatic fix not available,"What it does#
Checks for except blocks that handle all exceptions, but are not the last
except block in a try statement.
","Why is this bad?#
When an exception is raised within a try block, the except blocks are
evaluated in order, and the first matching block is executed. If an except
block handles all exceptions, but isn't the last block, Python will raise a
SyntaxError, as the following blocks would never be executed.
","----neg----:
def reciprocal(n):
    try:
        reciprocal = 1 / n
    except:
        print(""An exception occurred."")
    except ZeroDivisionError:
        print(""Cannot divide by zero."")
    else:
        return reciprocal
----pos----:
def reciprocal(n):
    try:
        reciprocal = 1 / n
    except ZeroDivisionError:
        print(""Cannot divide by zero."")
    except:
        print(""An exception occurred."")
    else:
        return reciprocal
",,"
<h1 id=""default-except-not-last-f707"">default-except-not-last (F707)<a class=""headerlink"" href=""#default-except-not-last-f707"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/forward-annotation-syntax-error/,F722,forward-annotation-syntax-error,Syntax error in forward annotation: <code>{body}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for forward annotations that include invalid syntax.
","Why is this bad?#
In Python, type annotations can be quoted as strings literals to enable
references to types that have not yet been defined, known as ""forward
references"".
However, these quoted annotations must be valid Python expressions. The use
of invalid syntax in a quoted annotation won't raise a SyntaxError, but
will instead raise an error when type checking is performed.
","def foo() -> ""/"":
    ...
",,"
<h1 id=""forward-annotation-syntax-error-f722"">forward-annotation-syntax-error (F722)<a class=""headerlink"" href=""#forward-annotation-syntax-error-f722"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.python.org/dev/peps/pep-0563/"">PEP 563</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redefined-while-unused/,F811,redefined-while-unused,Redefinition of unused <code>{name}</code> from {row},Rule is stable,Automatic fix available,"What it does#
Checks for variable definitions that redefine (or ""shadow"") unused
variables.
","Why is this bad?#
Redefinitions of unused names are unnecessary and often indicative of a
mistake.
","----neg----:
import foo
import bar
import foo  # Redefinition of unused `foo` from line 1
----pos----:
import foo
import bar
",,"
<h1 id=""redefined-while-unused-f811"">redefined-while-unused (F811)<a class=""headerlink"" href=""#redefined-while-unused-f811"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/undefined-name/,F821,undefined-name,Undefined name <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of undefined names.
","Why is this bad?#
An undefined name is likely to raise NameError at runtime.
","----neg----:
def double():
    return n * 2  # raises `NameError` if `n` is undefined when `double` is called
----pos----:
def double(n):
    return n * 2
",,"
<h1 id=""undefined-name-f821"">undefined-name (F821)<a class=""headerlink"" href=""#undefined-name-f821"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/executionmodel.html#naming-and-binding"">Python documentation: Naming and binding</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undefined-export/,F822,undefined-export,Undefined name <code>{name}</code> in <code>__all__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for undefined names in __all__.
","Why is this bad?#
In Python, the __all__ variable is used to define the names that are
exported when a module is imported as a wildcard (e.g.,
from foo import *). The names in __all__ must be defined in the module,
but are included as strings.
Including an undefined name in __all__ is likely to raise NameError at
runtime, when the module is imported.
","----neg----:
from foo import bar


__all__ = [""bar"", ""baz""]  # undefined name `baz` in `__all__`
----pos----:
from foo import bar, baz


__all__ = [""bar"", ""baz""]
",,"
<h1 id=""undefined-export-f822"">undefined-export (F822)<a class=""headerlink"" href=""#undefined-export-f822"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/modules.html#importing-from-a-package"">Python documentation: <code>__all__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undefined-local/,F823,undefined-local,Local variable <code>{name}</code> referenced before assignment,Rule is stable,Automatic fix not available,"What it does#
Checks for undefined local variables.
","Why is this bad?#
Referencing a local variable before it has been assigned will raise
an UnboundLocalError at runtime.
","----neg----:
x = 1


def foo():
    x += 1
----pos----:
x = 1


def foo():
    global x
    x += 1
",,"
<h1 id=""undefined-local-f823"">undefined-local (F823)<a class=""headerlink"" href=""#undefined-local-f823"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-variable/,F841,unused-variable,Local variable <code>{name}</code> is assigned to but never used,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of unused variables in function scopes.
","Why is this bad?#
A variable that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
If a variable is intentionally defined-but-not-used, it should be
prefixed with an underscore, or some other value that adheres to the
lint.dummy-variable-rgx pattern.
Under preview mode, this rule also
triggers on unused unpacked assignments (for example, x, y = foo()).
","----neg----:
def foo():
    x = 1
    y = 2
    return x
----pos----:
def foo():
    x = 1
    return x
","https://docs.astral.sh/ruff/settings/#lint_dummy-variable-rgx
lint.dummy-variable-rgx
None","
<h1 id=""unused-variable-f841"">unused-variable (F841)<a class=""headerlink"" href=""#unused-variable-f841"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/unused-annotation/,F842,unused-annotation,Local variable <code>{name}</code> is annotated but never used,Rule is stable,Automatic fix not available,"What it does#
Checks for local variables that are annotated but never used.
","Why is this bad?#
Annotations are used to provide type hints to static type checkers. If a
variable is annotated but never used, the annotation is unnecessary.
","def foo():
    bar: int
",,"
<h1 id=""unused-annotation-f842"">unused-annotation (F842)<a class=""headerlink"" href=""#unused-annotation-f842"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0484/"">PEP 484</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/raise-not-implemented/,F901,raise-not-implemented,<code>raise NotImplemented</code> should be <code>raise NotImplementedError</code>,Rule is stable,Automatic fix available,"What it does#
Checks for raise statements that raise NotImplemented.
","Why is this bad?#
NotImplemented is an exception used by binary special methods to indicate
that an operation is not implemented with respect to a particular type.
NotImplemented should not be raised directly. Instead, raise
NotImplementedError, which is used to indicate that the method is
abstract or not implemented in the derived class.
","----neg----:
class Foo:
    def bar(self):
        raise NotImplemented
----pos----:
class Foo:
    def bar(self):
        raise NotImplementedError
",,"
<h1 id=""raise-not-implemented-f901"">raise-not-implemented (F901)<a class=""headerlink"" href=""#raise-not-implemented-f901"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pyflakes</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/constants.html#NotImplemented"">Python documentation: <code>NotImplemented</code></a></li>
<li><a href=""https://docs.python.org/3/library/exceptions.html#NotImplementedError"">Python documentation: <code>NotImplementedError</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/mixed-spaces-and-tabs/,E101,mixed-spaces-and-tabs,Indentation contains mixed spaces and tabs,Rule is stable,Automatic fix not available,"What it does#
Checks for mixed tabs and spaces in indentation.
","Why is this bad?#
Never mix tabs and spaces.
The most popular way of indenting Python is with spaces only. The
second-most popular way is with tabs only. Code indented with a
mixture of tabs and spaces should be converted to using spaces
exclusively.
","----neg----:
if a == 0:\n        a = 1\n\tb = 1
----pos----:
if a == 0:\n    a = 1\n    b = 1
",,"
<h1 id=""mixed-spaces-and-tabs-e101"">mixed-spaces-and-tabs (E101)<a class=""headerlink"" href=""#mixed-spaces-and-tabs-e101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/,E111,indentation-with-invalid-multiple,Indentation is not a multiple of {indent_size},Rule is in preview,Automatic fix not available,"What it does#
Checks for indentation with a non-multiple of 4 spaces.
","Why is this bad?#
According to PEP 8, 4 spaces per indentation level should be preferred.
","----neg----:
if True:
   a = 1
----pos----:
if True:
    a = 1
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
The rule is also incompatible with the formatter when using
indent-width with a value other than 4.
",,"
<h1 id=""indentation-with-invalid-multiple-e111"">indentation-with-invalid-multiple (E111)<a class=""headerlink"" href=""#indentation-with-invalid-multiple-e111"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/no-indented-block/,E112,no-indented-block,Expected an indented block,Rule is in preview,Automatic fix not available,"What it does#
Checks for indented blocks that are lacking indentation.
","Why is this bad?#
All indented blocks should be indented; otherwise, they are not valid
Python syntax.
","----neg----:
for item in items:
pass
----pos----:
for item in items:
    pass
",,"
<h1 id=""no-indented-block-e112"">no-indented-block (E112)<a class=""headerlink"" href=""#no-indented-block-e112"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unexpected-indentation/,E113,unexpected-indentation,Unexpected indentation,Rule is in preview,Automatic fix not available,"What it does#
Checks for unexpected indentation.
","Why is this bad?#
Indentation outside of a code block is not valid Python syntax.
","----neg----:
a = 1
    b = 2
----pos----:
a = 1
b = 2
",,"
<h1 id=""unexpected-indentation-e113"">unexpected-indentation (E113)<a class=""headerlink"" href=""#unexpected-indentation-e113"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/,E114,indentation-with-invalid-multiple-comment,Indentation is not a multiple of {indent_size} (comment),Rule is in preview,Automatic fix not available,"What it does#
Checks for indentation of comments with a non-multiple of 4 spaces.
","Why is this bad?#
According to PEP 8, 4 spaces per indentation level should be preferred.
","----neg----:
if True:
   # a = 1
----pos----:
if True:
    # a = 1
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
The rule is also incompatible with the formatter when using
indent-width with a value other than 4.
",,"
<h1 id=""indentation-with-invalid-multiple-comment-e114"">indentation-with-invalid-multiple-comment (E114)<a class=""headerlink"" href=""#indentation-with-invalid-multiple-comment-e114"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/no-indented-block-comment/,E115,no-indented-block-comment,Expected an indented block (comment),Rule is in preview,Automatic fix not available,"What it does#
Checks for comments in a code blocks that are lacking indentation.
","Why is this bad?#
Comments within an indented block should themselves be indented, to
indicate that they are part of the block.
","----neg----:
for item in items:
# Hi
    pass
----pos----:
for item in items:
    # Hi
    pass
",,"
<h1 id=""no-indented-block-comment-e115"">no-indented-block-comment (E115)<a class=""headerlink"" href=""#no-indented-block-comment-e115"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unexpected-indentation-comment/,E116,unexpected-indentation-comment,Unexpected indentation (comment),Rule is in preview,Automatic fix not available,"What it does#
Checks for unexpected indentation of comment.
","Why is this bad?#
Comments should match the indentation of the containing code block.
","----neg----:
a = 1
    # b = 2
----pos----:
a = 1
# b = 2
",,"
<h1 id=""unexpected-indentation-comment-e116"">unexpected-indentation-comment (E116)<a class=""headerlink"" href=""#unexpected-indentation-comment-e116"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/over-indented/,E117,over-indented,Over-indented (comment),Rule is in preview,Automatic fix not available,"What it does#
Checks for over-indented code.
","Why is this bad?#
According to PEP 8, 4 spaces per indentation level should be preferred. Increased
indentation can lead to inconsistent formatting, which can hurt
readability.
","----neg----:
for item in items:
      pass
----pos----:
for item in items:
    pass
",,"
<h1 id=""over-indented-e117"">over-indented (E117)<a class=""headerlink"" href=""#over-indented-e117"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/whitespace-after-open-bracket/,E201,whitespace-after-open-bracket,Whitespace after '{symbol}',Rule is in preview,Automatic fix available,"What it does#
Checks for the use of extraneous whitespace after ""("".
","Why is this bad?#
PEP 8 recommends the omission of whitespace in the following cases:

""Immediately inside parentheses, brackets or braces.""
""Immediately before a comma, semicolon, or colon.""

","----neg----:
spam( ham[1], {eggs: 2})
spam(ham[ 1], {eggs: 2})
spam(ham[1], { eggs: 2})
----pos----:
spam(ham[1], {eggs: 2})
",,"
<h1 id=""whitespace-after-open-bracket-e201"">whitespace-after-open-bracket (E201)<a class=""headerlink"" href=""#whitespace-after-open-bracket-e201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/whitespace-before-close-bracket/,E202,whitespace-before-close-bracket,Whitespace before '{symbol}',Rule is in preview,Automatic fix available,"What it does#
Checks for the use of extraneous whitespace before "")"".
","Why is this bad?#
PEP 8 recommends the omission of whitespace in the following cases:

""Immediately inside parentheses, brackets or braces.""
""Immediately before a comma, semicolon, or colon.""

","----neg----:
spam(ham[1], {eggs: 2} )
spam(ham[1 ], {eggs: 2})
spam(ham[1], {eggs: 2 })
----pos----:
spam(ham[1], {eggs: 2})
",,"
<h1 id=""whitespace-before-close-bracket-e202"">whitespace-before-close-bracket (E202)<a class=""headerlink"" href=""#whitespace-before-close-bracket-e202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/whitespace-before-punctuation/,E203,whitespace-before-punctuation,Whitespace before '{symbol}',Rule is in preview,Automatic fix available,"What it does#
Checks for the use of extraneous whitespace before "","", "";"" or "":"".
","Why is this bad?#
PEP 8 recommends the omission of whitespace in the following cases:

""Immediately inside parentheses, brackets or braces.""
""Immediately before a comma, semicolon, or colon.""

","----neg----:
if x == 4: print(x, y); x, y = y , x
----pos----:
if x == 4: print(x, y); x, y = y, x
",,"
<h1 id=""whitespace-before-punctuation-e203"">whitespace-before-punctuation (E203)<a class=""headerlink"" href=""#whitespace-before-punctuation-e203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/whitespace-before-parameters/,E211,whitespace-before-parameters,Whitespace before '{bracket}',Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace immediately preceding an open parenthesis
or bracket.
","Why is this bad?#
According to PEP 8, open parentheses and brackets should not be preceded
by any trailing whitespace.
","----neg----:
spam (1)
----pos----:
spam(1)
",,"
<h1 id=""whitespace-before-parameters-e211"">whitespace-before-parameters (E211)<a class=""headerlink"" href=""#whitespace-before-parameters-e211"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-spaces-before-operator/,E221,multiple-spaces-before-operator,Multiple spaces before operator,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace before an operator.
","Why is this bad?#
According to PEP 8, operators should be surrounded by at most a single space on either
side.
","----neg----:
a = 4  + 5
----pos----:
a = 12 + 3
",,"
<h1 id=""multiple-spaces-before-operator-e221"">multiple-spaces-before-operator (E221)<a class=""headerlink"" href=""#multiple-spaces-before-operator-e221"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-spaces-after-operator/,E222,multiple-spaces-after-operator,Multiple spaces after operator,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace after an operator.
","Why is this bad?#
According to PEP 8, operators should be surrounded by at most a single space on either
side.
","----neg----:
a = 4 +  5
----pos----:
a = 12 + 3
",,"
<h1 id=""multiple-spaces-after-operator-e222"">multiple-spaces-after-operator (E222)<a class=""headerlink"" href=""#multiple-spaces-after-operator-e222"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/tab-before-operator/,E223,tab-before-operator,Tab before operator,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous tabs before an operator.
","Why is this bad?#
According to PEP 8, operators should be surrounded by at most a single space on either
side.
","----neg----:
a = 4\t+ 5
----pos----:
a = 12 + 3
",,"
<h1 id=""tab-before-operator-e223"">tab-before-operator (E223)<a class=""headerlink"" href=""#tab-before-operator-e223"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/tab-after-operator/,E224,tab-after-operator,Tab after operator,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous tabs after an operator.
","Why is this bad?#
According to PEP 8, operators should be surrounded by at most a single space on either
side.
","----neg----:
a = 4 +\t5
----pos----:
a = 12 + 3
",,"
<h1 id=""tab-after-operator-e224"">tab-after-operator (E224)<a class=""headerlink"" href=""#tab-after-operator-e224"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-around-operator/,E225,missing-whitespace-around-operator,Missing whitespace around operator,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace around all operators.
","Why is this bad?#
According to PEP 8, there should be one space before and after all
operators.
","----neg----:
if number==42:
    print('you have found the meaning of life')
----pos----:
if number == 42:
    print('you have found the meaning of life')
",,"
<h1 id=""missing-whitespace-around-operator-e225"">missing-whitespace-around-operator (E225)<a class=""headerlink"" href=""#missing-whitespace-around-operator-e225"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-around-arithmetic-operator/,E226,missing-whitespace-around-arithmetic-operator,Missing whitespace around arithmetic operator,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace arithmetic operators.
","Why is this bad?#
According to PEP 8, there should be one space before and after an
arithmetic operator (+, -, /, and *).
","----neg----:
number = 40+2
----pos----:
number = 40 + 2
",,"
<h1 id=""missing-whitespace-around-arithmetic-operator-e226"">missing-whitespace-around-arithmetic-operator (E226)<a class=""headerlink"" href=""#missing-whitespace-around-arithmetic-operator-e226"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-around-bitwise-or-shift-operator/,E227,missing-whitespace-around-bitwise-or-shift-operator,Missing whitespace around bitwise or shift operator,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace around bitwise and shift operators.
","Why is this bad?#
According to PEP 8, there should be one space before and after bitwise and
shift operators (<<, >>, &, |, ^).
","----neg----:
x = 128<<1
----pos----:
x = 128 << 1
",,"
<h1 id=""missing-whitespace-around-bitwise-or-shift-operator-e227"">missing-whitespace-around-bitwise-or-shift-operator (E227)<a class=""headerlink"" href=""#missing-whitespace-around-bitwise-or-shift-operator-e227"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-around-modulo-operator/,E228,missing-whitespace-around-modulo-operator,Missing whitespace around modulo operator,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace around the modulo operator.
","Why is this bad?#
According to PEP 8, the modulo operator (%) should have whitespace on
either side of it.
","----neg----:
remainder = 10%2
----pos----:
remainder = 10 % 2
",,"
<h1 id=""missing-whitespace-around-modulo-operator-e228"">missing-whitespace-around-modulo-operator (E228)<a class=""headerlink"" href=""#missing-whitespace-around-modulo-operator-e228"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace/,E231,missing-whitespace,Missing whitespace after '{token}',Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace after ,, ;, and :.
","Why is this bad?#
Missing whitespace after ,, ;, and : makes the code harder to read.
","----neg----:
a = (1,2)
----pos----:
a = (1, 2)
",,"
<h1 id=""missing-whitespace-e231"">missing-whitespace (E231)<a class=""headerlink"" href=""#missing-whitespace-e231"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-spaces-after-comma/,E241,multiple-spaces-after-comma,Multiple spaces after comma,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace after a comma.
","Why is this bad?#
According to the black code style, commas should be followed by a single space.
","----neg----:
a = 4,    5
----pos----:
a = 4, 5
",,"
<h1 id=""multiple-spaces-after-comma-e241"">multiple-spaces-after-comma (E241)<a class=""headerlink"" href=""#multiple-spaces-after-comma-e241"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/tab-after-comma/,E242,tab-after-comma,Tab after comma,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous tabs after a comma.
","Why is this bad?#
Commas should be followed by one space, never tabs.
","----neg----:
a = 4,\t5
----pos----:
a = 4, 3
",,"
<h1 id=""tab-after-comma-e242"">tab-after-comma (E242)<a class=""headerlink"" href=""#tab-after-comma-e242"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unexpected-spaces-around-keyword-parameter-equals/,E251,unexpected-spaces-around-keyword-parameter-equals,Unexpected spaces around keyword / parameter equals,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace around the equals sign in an unannotated
function keyword parameter.
","Why is this bad?#
According to PEP 8, there should be no spaces around the equals sign in a
keyword parameter, if it is unannotated:

Don’t use spaces around the = sign when used to indicate a keyword
argument, or when used to indicate a default value for an unannotated
function parameter.

","----neg----:
def add(a = 0) -> int:
    return a + 1
----pos----:
def add(a=0) -> int:
    return a + 1
",,"
<h1 id=""unexpected-spaces-around-keyword-parameter-equals-e251"">unexpected-spaces-around-keyword-parameter-equals (E251)<a class=""headerlink"" href=""#unexpected-spaces-around-keyword-parameter-equals-e251"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-around-parameter-equals/,E252,missing-whitespace-around-parameter-equals,Missing whitespace around parameter equals,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace around the equals sign in an annotated
function keyword parameter.
","Why is this bad?#
According to PEP 8, the spaces around the equals sign in a keyword
parameter should only be omitted when the parameter is unannotated:

Don’t use spaces around the = sign when used to indicate a keyword
argument, or when used to indicate a default value for an unannotated
function parameter.

","----neg----:
def add(a: int=0) -> int:
    return a + 1
----pos----:
def add(a: int = 0) -> int:
    return a + 1
",,"
<h1 id=""missing-whitespace-around-parameter-equals-e252"">missing-whitespace-around-parameter-equals (E252)<a class=""headerlink"" href=""#missing-whitespace-around-parameter-equals-e252"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/too-few-spaces-before-inline-comment/,E261,too-few-spaces-before-inline-comment,Insert at least two spaces before an inline comment,Rule is in preview,Automatic fix available,"What it does#
Checks if inline comments are separated by at least two spaces.
","Why is this bad?#
An inline comment is a comment on the same line as a statement.
Per PEP8, inline comments should be separated by at least two spaces from
the preceding statement.
","----neg----:
x = x + 1 # Increment x
----pos----:
x = x + 1  # Increment x
x = x + 1    # Increment x
",,"
<h1 id=""too-few-spaces-before-inline-comment-e261"">too-few-spaces-before-inline-comment (E261)<a class=""headerlink"" href=""#too-few-spaces-before-inline-comment-e261"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/no-space-after-inline-comment/,E262,no-space-after-inline-comment,Inline comment should start with <code>#</code>,Rule is in preview,Automatic fix available,"What it does#
Checks if one space is used after inline comments.
","Why is this bad?#
An inline comment is a comment on the same line as a statement.
Per PEP8, inline comments should start with a # and a single space.
","----neg----:
x = x + 1  #Increment x
x = x + 1  #  Increment x
x = x + 1  # \xa0Increment x
----pos----:
x = x + 1  # Increment x
x = x + 1    # Increment x
",,"
<h1 id=""no-space-after-inline-comment-e262"">no-space-after-inline-comment (E262)<a class=""headerlink"" href=""#no-space-after-inline-comment-e262"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/no-space-after-block-comment/,E265,no-space-after-block-comment,Block comment should start with <code>#</code>,Rule is in preview,Automatic fix available,"What it does#
Checks if one space is used after block comments.
","Why is this bad?#
Per PEP8, ""Block comments generally consist of one or more paragraphs built
out of complete sentences, with each sentence ending in a period.""
Block comments should start with a # and a single space.
","----neg----:
#Block comment
----pos----:
# Block comments:
#  - Block comment list
# \xa0- Block comment list
",,"
<h1 id=""no-space-after-block-comment-e265"">no-space-after-block-comment (E265)<a class=""headerlink"" href=""#no-space-after-block-comment-e265"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-leading-hashes-for-block-comment/,E266,multiple-leading-hashes-for-block-comment,Too many leading <code>#</code> before block comment,Rule is in preview,Automatic fix available,"What it does#
Checks if block comments start with a single ""#"".
","Why is this bad?#
Per PEP8, ""Block comments generally consist of one or more paragraphs built
out of complete sentences, with each sentence ending in a period.""
Each line of a block comment should start with a # and a single space.
","----neg----:
### Block comment
----pos----:
# Block comments:
#  - Block comment list
# \xa0- Block comment list
",,"
<h1 id=""multiple-leading-hashes-for-block-comment-e266"">multiple-leading-hashes-for-block-comment (E266)<a class=""headerlink"" href=""#multiple-leading-hashes-for-block-comment-e266"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-spaces-after-keyword/,E271,multiple-spaces-after-keyword,Multiple spaces after keyword,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace after keywords.
","Why is this bad?#
","----neg----:
True and  False
----pos----:
True and False
",,"
<h1 id=""multiple-spaces-after-keyword-e271"">multiple-spaces-after-keyword (E271)<a class=""headerlink"" href=""#multiple-spaces-after-keyword-e271"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-spaces-before-keyword/,E272,multiple-spaces-before-keyword,Multiple spaces before keyword,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous whitespace before keywords.
","Why is this bad?#
","----neg----:
True  and False
----pos----:
True and False
",,"
<h1 id=""multiple-spaces-before-keyword-e272"">multiple-spaces-before-keyword (E272)<a class=""headerlink"" href=""#multiple-spaces-before-keyword-e272"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/tab-after-keyword/,E273,tab-after-keyword,Tab after keyword,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous tabs after keywords.
","Why is this bad?#
","----neg----:
True and\tFalse
----pos----:
True and False
",,"
<h1 id=""tab-after-keyword-e273"">tab-after-keyword (E273)<a class=""headerlink"" href=""#tab-after-keyword-e273"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/tab-before-keyword/,E274,tab-before-keyword,Tab before keyword,Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous tabs before keywords.
","Why is this bad?#
","----neg----:
True\tand False
----pos----:
True and False
",,"
<h1 id=""tab-before-keyword-e274"">tab-before-keyword (E274)<a class=""headerlink"" href=""#tab-before-keyword-e274"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-whitespace-after-keyword/,E275,missing-whitespace-after-keyword,Missing whitespace after keyword,Rule is in preview,Automatic fix available,"What it does#
Checks for missing whitespace after keywords.
","Why is this bad?#
Missing whitespace after keywords makes the code harder to read.
","----neg----:
if(True):
    pass
----pos----:
if (True):
    pass
",,"
<h1 id=""missing-whitespace-after-keyword-e275"">missing-whitespace-after-keyword (E275)<a class=""headerlink"" href=""#missing-whitespace-after-keyword-e275"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#keywords"">Python documentation: Keywords</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-line-between-methods/,E301,blank-line-between-methods,"Expected {BLANK_LINES_NESTED_LEVEL:?} blank line, found 0",Rule is in preview,Automatic fix available,"What it does#
Checks for missing blank lines between methods of a class.
","Why is this bad?#
PEP 8 recommends exactly one blank line between methods of a class.
","----neg----:
class MyClass(object):
    def func1():
        pass
    def func2():
        pass
----pos----:
class MyClass(object):
    def func1():
        pass

    def func2():
        pass
----other----:
The typing style guide recommends to not use blank lines between methods except to group
them. That's why this rule is not enabled in typing stub files.
",,"
<h1 id=""blank-line-between-methods-e301"">blank-line-between-methods (E301)<a class=""headerlink"" href=""#blank-line-between-methods-e301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E301.html"">Flake 8 rule</a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#blank-lines"">Typing Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-lines-top-level/,E302,blank-lines-top-level,"Expected {expected_blank_lines:?} blank lines, found {actual_blank_lines}",Rule is in preview,Automatic fix available,"What it does#
Checks for missing blank lines between top level functions and classes.
","Why is this bad?#
PEP 8 recommends exactly two blank lines between top level functions and classes.
The rule respects the lint.isort.lines-after-imports setting when
determining the required number of blank lines between top-level import
statements and function or class definitions for compatibility with isort.
","----neg----:
def func1():
    pass
def func2():
    pass
----pos----:
def func1():
    pass


def func2():
    pass
----other----:
The typing style guide recommends to not use blank lines between classes and functions except to group
them. That's why this rule is not enabled in typing stub files.
","https://docs.astral.sh/ruff/settings/#lint_isort_lines-after-imports
lint.isort.lines-after-imports
None","
<h1 id=""blank-lines-top-level-e302"">blank-lines-top-level (E302)<a class=""headerlink"" href=""#blank-lines-top-level-e302"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E302.html"">Flake 8 rule</a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#blank-lines"">Typing Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/too-many-blank-lines/,E303,too-many-blank-lines,Too many blank lines ({actual_blank_lines}),Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous blank lines.
","Why is this bad?#
PEP 8 recommends using blank lines as follows:

No more than two blank lines between top-level statements.
No more than one blank line between non-top-level statements.

","----neg----:
def func1():
    pass



def func2():
    pass
----pos----:
def func1():
    pass


def func2():
    pass
----other----:
The rule allows at most one blank line in typing stub files in accordance to the typing style guide recommendation.
Note: The rule respects the following isort settings when determining the maximum number of blank lines allowed between two statements:

lint.isort.lines-after-imports: For top-level statements directly following an import statement.
lint.isort.lines-between-types: For import statements directly following a from ... import ... statement or vice versa.

","https://docs.astral.sh/ruff/settings/#lint_isort_lines-after-imports
lint.isort.lines-after-imports
None
https://docs.astral.sh/ruff/settings/#lint_isort_lines-between-types
lint.isort.lines-between-types
None","
<h1 id=""too-many-blank-lines-e303"">too-many-blank-lines (E303)<a class=""headerlink"" href=""#too-many-blank-lines-e303"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E303.html"">Flake 8 rule</a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#blank-lines"">Typing Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-line-after-decorator/,E304,blank-line-after-decorator,Blank lines found after function decorator ({lines}),Rule is in preview,Automatic fix available,"What it does#
Checks for extraneous blank line(s) after function decorators.
","Why is this bad?#
There should be no blank lines between a decorator and the object it is decorating.
","----neg----:
class User(object):

    @property

    def name(self):
        pass
----pos----:
class User(object):

    @property
    def name(self):
        pass
",,"
<h1 id=""blank-line-after-decorator-e304"">blank-line-after-decorator (E304)<a class=""headerlink"" href=""#blank-line-after-decorator-e304"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E304.html"">Flake 8 rule</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-lines-after-function-or-class/,E305,blank-lines-after-function-or-class,"Expected 2 blank lines after class or function definition, found ({blank_lines})",Rule is in preview,Automatic fix available,"What it does#
Checks for missing blank lines after the end of function or class.
","Why is this bad?#
PEP 8 recommends using blank lines as follows:

Two blank lines are expected between functions and classes
One blank line is expected between methods of a class.

","----neg----:
class User(object):
    pass
user = User()
----pos----:
class User(object):
    pass


user = User()
----other----:
The typing style guide recommends to not use blank lines between statements except to group
them. That's why this rule is not enabled in typing stub files.
",,"
<h1 id=""blank-lines-after-function-or-class-e305"">blank-lines-after-function-or-class (E305)<a class=""headerlink"" href=""#blank-lines-after-function-or-class-e305"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E305.html"">Flake 8 rule</a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#blank-lines"">Typing Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-lines-before-nested-definition/,E306,blank-lines-before-nested-definition,"Expected 1 blank line before a nested definition, found 0",Rule is in preview,Automatic fix available,"What it does#
Checks for 1 blank line between nested function or class definitions.
","Why is this bad?#
PEP 8 recommends using blank lines as follows:

Two blank lines are expected between functions and classes
One blank line is expected between methods of a class.

","----neg----:
def outer():
    def inner():
        pass
    def inner2():
        pass
----pos----:
def outer():
    def inner():
        pass

    def inner2():
        pass
----other----:
The typing style guide recommends to not use blank lines between classes and functions except to group
them. That's why this rule is not enabled in typing stub files.
",,"
<h1 id=""blank-lines-before-nested-definition-e306"">blank-lines-before-nested-definition (E306)<a class=""headerlink"" href=""#blank-lines-before-nested-definition-e306"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#blank-lines"">PEP 8</a></li>
<li><a href=""https://www.flake8rules.com/rules/E306.html"">Flake 8 rule</a></li>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#blank-lines"">Typing Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/multiple-imports-on-one-line/,E401,multiple-imports-on-one-line,Multiple imports on one line,Rule is stable,Automatic fix available,"What it does#
Check for multiple imports on one line.
","Why is this bad?#
According to PEP 8, ""imports should usually be on separate lines.""
","----neg----:
import sys, os
----pos----:
import os
import sys
",,"
<h1 id=""multiple-imports-on-one-line-e401"">multiple-imports-on-one-line (E401)<a class=""headerlink"" href=""#multiple-imports-on-one-line-e401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/,E402,module-import-not-at-top-of-file,Module level import not at top of cell,Rule is stable,Automatic fix not available,"What it does#
Checks for imports that are not at the top of the file. For Jupyter notebooks, this
checks for imports that are not at the top of the cell.
","Why is this bad?#
According to PEP 8, ""imports are always put at the top of the file, just after any
module comments and docstrings, and before module globals and constants.""
This rule makes an exception for sys.path modifications,  allowing for
sys.path.insert, sys.path.append, and similar modifications between import
statements.
In preview, this rule also allows os.environ modifications between import
statements.
","----neg----:
""One string""
""Two string""
a = 1
import os
from sys import x
----pos----:
import os
from sys import x

""One string""
""Two string""
a = 1
",,"
<h1 id=""module-import-not-at-top-of-file-e402"">module-import-not-at-top-of-file (E402)<a class=""headerlink"" href=""#module-import-not-at-top-of-file-e402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/line-too-long/,E501,line-too-long,Line too long ({width} > {limit}),Rule is stable,Automatic fix not available,"What it does#
Checks for lines that exceed the specified maximum character length.
","Why is this bad?#
Overlong lines can hurt readability. PEP 8, for example, recommends
limiting lines to 79 characters. By default, this rule enforces a limit
of 88 characters for compatibility with Black, though that limit is
configurable via the line-length setting.
In the interest of pragmatism, this rule makes a few exceptions when
determining whether a line is overlong. Namely, it:

Ignores lines that consist of a single ""word"" (i.e., without any
    whitespace between its characters).
Ignores lines that end with a URL, as long as the URL starts before
    the line-length threshold.
Ignores line that end with a pragma comment (e.g., # type: ignore
    or # noqa), as long as the pragma comment starts before the
    line-length threshold. That is, a line will not be flagged as
    overlong if a pragma comment causes it to exceed the line length.
    (This behavior aligns with that of the Ruff formatter.)
Ignores SPDX license identifiers and copyright notices
    (e.g., # SPDX-License-Identifier: MIT), which are machine-readable
    and should not wrap over multiple lines.

If lint.pycodestyle.ignore-overlong-task-comments is true, this rule will
also ignore comments that start with any of the specified lint.task-tags
(e.g., # TODO:).
","----neg----:
my_function(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10)
----pos----:
my_function(
    param1, param2, param3, param4, param5,
    param6, param7, param8, param9, param10
)
----other----:
Hint: when suppressing E501 errors within multi-line strings (like
docstrings), the noqa directive should come at the end of the string
(after the closing triple quote), and will apply to the entire string, like
so:
""""""Lorem ipsum dolor sit amet.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.
""""""  # noqa: E501

","https://docs.astral.sh/ruff/settings/#line-length
line-length
None
https://docs.astral.sh/ruff/settings/#lint_task-tags
lint.task-tags
None
https://docs.astral.sh/ruff/settings/#lint_pycodestyle_ignore-overlong-task-comments
lint.pycodestyle.ignore-overlong-task-comments
None
https://docs.astral.sh/ruff/settings/#lint_pycodestyle_max-line-length
lint.pycodestyle.max-line-length
None","
<h1 id=""line-too-long-e501"">line-too-long (E501)<a class=""headerlink"" href=""#line-too-long-e501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/redundant-backslash/,E502,redundant-backslash,Redundant backslash,Rule is in preview,Automatic fix available,"What it does#
Checks for redundant backslashes between brackets.
","Why is this bad?#
Explicit line joins using a backslash are redundant between brackets.
","----neg----:
x = (2 + \
    2)
----pos----:
x = (2 +
    2)
",,"
<h1 id=""redundant-backslash-e502"">redundant-backslash (E502)<a class=""headerlink"" href=""#redundant-backslash-e502"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/multiple-statements-on-one-line-colon/,E701,multiple-statements-on-one-line-colon,Multiple statements on one line (colon),Rule is stable,Automatic fix not available,"What it does#
Checks for compound statements (multiple statements on the same line).
","Why is this bad?#
According to PEP 8, ""compound statements are generally discouraged"".
","----neg----:
if foo == ""blah"": do_blah_thing()
----pos----:
if foo == ""blah"":
    do_blah_thing()
",,"
<h1 id=""multiple-statements-on-one-line-colon-e701"">multiple-statements-on-one-line-colon (E701)<a class=""headerlink"" href=""#multiple-statements-on-one-line-colon-e701"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/multiple-statements-on-one-line-semicolon/,E702,multiple-statements-on-one-line-semicolon,Multiple statements on one line (semicolon),Rule is stable,Automatic fix not available,"What it does#
Checks for multiline statements on one line.
","Why is this bad?#
According to PEP 8, including multi-clause statements on the same line is
discouraged.
","----neg----:
do_one(); do_two(); do_three()
----pos----:
do_one()
do_two()
do_three()
",,"
<h1 id=""multiple-statements-on-one-line-semicolon-e702"">multiple-statements-on-one-line-semicolon (E702)<a class=""headerlink"" href=""#multiple-statements-on-one-line-semicolon-e702"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/useless-semicolon/,E703,useless-semicolon,Statement ends with an unnecessary semicolon,Rule is stable,Automatic fix available,"What it does#
Checks for statements that end with an unnecessary semicolon.
","Why is this bad?#
A trailing semicolon is unnecessary and should be removed.
","----neg----:
do_four();  # useless semicolon
----pos----:
do_four()
",,"
<h1 id=""useless-semicolon-e703"">useless-semicolon (E703)<a class=""headerlink"" href=""#useless-semicolon-e703"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/none-comparison/,E711,none-comparison,Comparison to <code>None</code> should be <code>cond is None</code>,Rule is stable,Automatic fix available,"What it does#
Checks for comparisons to None which are not using the is operator.
","Why is this bad?#
According to PEP 8, ""Comparisons to singletons like None should always be done with
is or is not, never the equality operators.""
","----neg----:
if arg != None:
    pass
if None == arg:
    pass
----pos----:
if arg is not None:
    pass
",,"
<h1 id=""none-comparison-e711"">none-comparison (E711)<a class=""headerlink"" href=""#none-comparison-e711"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/true-false-comparison/,E712,true-false-comparison,Avoid equality comparisons to <code>True</code>; use <code>if {cond}:</code> for truth checks,Rule is stable,Automatic fix available,"What it does#
Checks for equality comparisons to boolean literals.
","Why is this bad?#
PEP 8 recommends against using the equality operators == and != to
compare values to True or False.
Instead, use if cond: or if not cond: to check for truth values.
If you intend to check if a value is the boolean literal True or False,
consider using is or is not to check for identity instead.
","----neg----:
if foo == True:
    ...

if bar == False:
    ...
----pos----:
if foo:
    ...

if not bar:
    ...
",,"
<h1 id=""true-false-comparison-e712"">true-false-comparison (E712)<a class=""headerlink"" href=""#true-false-comparison-e712"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/not-in-test/,E713,not-in-test,Test for membership should be <code>not in</code>,Rule is stable,Automatic fix available,"What it does#
Checks for negative comparison using not {foo} in {bar}.
","Why is this bad?#
Negative comparison should be done using not in.
","----neg----:
Z = not X in Y
if not X.B in Y:
    pass
----pos----:
Z = X not in Y
if X.B not in Y:
    pass
",,"
<h1 id=""not-in-test-e713"">not-in-test (E713)<a class=""headerlink"" href=""#not-in-test-e713"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/not-is-test/,E714,not-is-test,Test for object identity should be <code>is not</code>,Rule is stable,Automatic fix available,"What it does#
Checks for negative comparison using not {foo} is {bar}.
","Why is this bad?#
Negative comparison should be done using is not.
","----neg----:
if not X is Y:
    pass
Z = not X.B is Y
----pos----:
if X is not Y:
    pass
Z = X.B is not Y
",,"
<h1 id=""not-is-test-e714"">not-is-test (E714)<a class=""headerlink"" href=""#not-is-test-e714"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/type-comparison/,E721,type-comparison,"Do not compare types, use <code>isinstance()</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for object type comparisons using == and other comparison
operators.
","Why is this bad?#
Unlike a direct type comparison, isinstance will also check if an object
is an instance of a class or a subclass thereof.
Under preview mode, this rule also
allows for direct type comparisons using is and is not, to check for
exact type equality (while still forbidding comparisons using == and
!=).
","----neg----:
if type(obj) == type(1):
    pass

if type(obj) == int:
    pass
----pos----:
if isinstance(obj, int):
    pass
",,"
<h1 id=""type-comparison-e721"">type-comparison (E721)<a class=""headerlink"" href=""#type-comparison-e721"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bare-except/,E722,bare-except,Do not use bare <code>except</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for bare except catches in try-except statements.
","Why is this bad?#
A bare except catches BaseException which includes
KeyboardInterrupt, SystemExit, Exception, and others. Catching
BaseException can make it hard to interrupt the program (e.g., with
Ctrl-C) and can disguise other problems.
","----neg----:
try:
    raise KeyboardInterrupt(""You probably don't mean to break CTRL-C."")
except:
    print(""But a bare `except` will ignore keyboard interrupts."")
----pos----:
try:
    do_something_that_might_break()
except MoreSpecificException as e:
    handle_error(e)
----other----:
If you actually need to catch an unknown error, use Exception which will
catch regular program errors but not important system exceptions.
def run_a_function(some_other_fn):
    try:
        some_other_fn()
    except Exception as e:
        print(f""How exceptional! {e}"")

",,"
<h1 id=""bare-except-e722"">bare-except (E722)<a class=""headerlink"" href=""#bare-except-e722"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"">Python documentation: Exception hierarchy</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#24-exceptions"">Google Python Style Guide: ""Exceptions""</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/lambda-assignment/,E731,lambda-assignment,"Do not assign a <code>lambda</code> expression, use a <code>def</code>",Rule is stable,Automatic fix available,"What it does#
Checks for lambda expressions which are assigned to a variable.
","Why is this bad?#
Per PEP 8, you should ""Always use a def statement instead of an assignment
statement that binds a lambda expression directly to an identifier.""
Using a def statement leads to better tracebacks, and the assignment
itself negates the primary benefit of using a lambda expression (i.e.,
that it can be embedded inside another expression).
","----neg----:
f = lambda x: 2 * x
----pos----:
def f(x):
    return 2 * x
",,"
<h1 id=""lambda-assignment-e731"">lambda-assignment (E731)<a class=""headerlink"" href=""#lambda-assignment-e731"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/ambiguous-variable-name/,E741,ambiguous-variable-name,Ambiguous variable name: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of the characters 'l', 'O', or 'I' as variable names.
","Why is this bad?#
In some fonts, these characters are indistinguishable from the
numerals one and zero. When tempted to use 'l', use 'L' instead.
","----neg----:
l = 0
O = 123
I = 42
----pos----:
L = 0
o = 123
i = 42
",,"
<h1 id=""ambiguous-variable-name-e741"">ambiguous-variable-name (E741)<a class=""headerlink"" href=""#ambiguous-variable-name-e741"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/ambiguous-class-name/,E742,ambiguous-class-name,Ambiguous class name: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of the characters 'l', 'O', or 'I' as class names.
","Why is this bad?#
In some fonts, these characters are indistinguishable from the
numerals one and zero. When tempted to use 'l', use 'L' instead.
","----neg----:
class I(object):
    ...
----pos----:
class Integer(object):
    ...
",,"
<h1 id=""ambiguous-class-name-e742"">ambiguous-class-name (E742)<a class=""headerlink"" href=""#ambiguous-class-name-e742"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/ambiguous-function-name/,E743,ambiguous-function-name,Ambiguous function name: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of the characters 'l', 'O', or 'I' as function names.
","Why is this bad?#
In some fonts, these characters are indistinguishable from the
numerals one and zero. When tempted to use 'l', use 'L' instead.
","----neg----:
def l(x):
    ...
----pos----:
def long_name(x):
    ...
",,"
<h1 id=""ambiguous-function-name-e743"">ambiguous-function-name (E743)<a class=""headerlink"" href=""#ambiguous-function-name-e743"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/io-error/,E902,io-error,{message},Rule is stable,Automatic fix not available,"What it does#
This is not a regular diagnostic; instead, it's raised when a file cannot be read
from disk.
","Why is this bad?#
An IOError indicates an error in the development setup. For example, the user may
not have permissions to read a given file, or the filesystem may contain a broken
symlink.
","----neg----:
None----pos----:
None----other----:
On Linux or macOS:
$ echo 'print(""hello world!"")' > a.py
$ chmod 000 a.py
$ ruff a.py
a.py:1:1: E902 Permission denied (os error 13)
Found 1 error.

",,"
<h1 id=""io-error-e902"">io-error (E902)<a class=""headerlink"" href=""#io-error-e902"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://mason.gmu.edu/~montecin/UNIXpermiss.htm"">UNIX Permissions introduction</a></li>
<li><a href=""https://www.digitalocean.com/community/tutorials/workflow-symbolic-links"">Command Line Basics: Symbolic Links</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/syntax-error/,E999,syntax-error,SyntaxError: {message},Rule is stable,Automatic fix not available,"What it does#
Checks for code that contains syntax errors.
","Why is this bad?#
Code with syntax errors cannot be executed. Such errors are likely a
mistake.
","----neg----:
x =
----pos----:
x = 1
",,"
<h1 id=""syntax-error-e999"">syntax-error (E999)<a class=""headerlink"" href=""#syntax-error-e999"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/errors.html#syntax-errors"">Python documentation: Syntax Errors</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/tab-indentation/,W191,tab-indentation,Indentation contains tabs,Rule is stable,Automatic fix not available,"What it does#
Checks for indentation that uses tabs.
","Why is this bad?#
According to PEP 8, spaces are preferred over tabs (unless used to remain
consistent with code that is already indented with tabs).
","----neg----:
if True:
    a = 1
----pos----:
if True:
    a = 1
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
The rule is also incompatible with the formatter when using
format.indent-style=""tab"".
",,"
<h1 id=""tab-indentation-w191"">tab-indentation (W191)<a class=""headerlink"" href=""#tab-indentation-w191"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/trailing-whitespace/,W291,trailing-whitespace,Trailing whitespace,Rule is stable,Automatic fix available,"What it does#
Checks for superfluous trailing whitespace.
","Why is this bad?#
According to PEP 8, ""avoid trailing whitespace anywhere. Because it’s usually
invisible, it can be confusing""
","----neg----:
spam(1) \n#
----pos----:
spam(1)\n#
",,"
<h1 id=""trailing-whitespace-w291"">trailing-whitespace (W291)<a class=""headerlink"" href=""#trailing-whitespace-w291"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/missing-newline-at-end-of-file/,W292,missing-newline-at-end-of-file,No newline at end of file,Rule is stable,Automatic fix available,"What it does#
Checks for files missing a new line at the end of the file.
","Why is this bad?#
Trailing blank lines in a file are superfluous.
However, the last line of the file should end with a newline.
","----neg----:
spam(1)
----pos----:
spam(1)\n
",,"
<h1 id=""missing-newline-at-end-of-file-w292"">missing-newline-at-end-of-file (W292)<a class=""headerlink"" href=""#missing-newline-at-end-of-file-w292"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/blank-line-with-whitespace/,W293,blank-line-with-whitespace,Blank line contains whitespace,Rule is stable,Automatic fix available,"What it does#
Checks for superfluous whitespace in blank lines.
","Why is this bad?#
According to PEP 8, ""avoid trailing whitespace anywhere. Because it’s usually
invisible, it can be confusing""
","----neg----:
class Foo(object):\n    \n    bang = 12
----pos----:
class Foo(object):\n\n    bang = 12
",,"
<h1 id=""blank-line-with-whitespace-w293"">blank-line-with-whitespace (W293)<a class=""headerlink"" href=""#blank-line-with-whitespace-w293"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/too-many-newlines-at-end-of-file/,W391,too-many-newlines-at-end-of-file,Too many newlines at end of file,Rule is in preview,Automatic fix available,"What it does#
Checks for files with multiple trailing blank lines.
","Why is this bad?#
Trailing blank lines in a file are superfluous.
However, the last line of the file should end with a newline.
","----neg----:
spam(1)\n\n\n
----pos----:
spam(1)\n
",,"
<h1 id=""too-many-newlines-at-end-of-file-w391"">too-many-newlines-at-end-of-file (W391)<a class=""headerlink"" href=""#too-many-newlines-at-end-of-file-w391"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/doc-line-too-long/,W505,doc-line-too-long,Doc line too long ({width} > {limit}),Rule is stable,Automatic fix not available,"What it does#
Checks for doc lines that exceed the specified maximum character length.
","Why is this bad?#
For flowing long blocks of text (docstrings or comments), overlong lines
can hurt readability. PEP 8, for example, recommends that such lines be
limited to 72 characters, while this rule enforces the limit specified by
the lint.pycodestyle.max-doc-length setting. (If no value is provided, this
rule will be ignored, even if it's added to your --select list.)
In the context of this rule, a ""doc line"" is defined as a line consisting
of either a standalone comment or a standalone string, like a docstring.
In the interest of pragmatism, this rule makes a few exceptions when
determining whether a line is overlong. Namely, it:

Ignores lines that consist of a single ""word"" (i.e., without any
    whitespace between its characters).
Ignores lines that end with a URL, as long as the URL starts before
    the line-length threshold.
Ignores line that end with a pragma comment (e.g., # type: ignore
    or # noqa), as long as the pragma comment starts before the
    line-length threshold. That is, a line will not be flagged as
    overlong if a pragma comment causes it to exceed the line length.
    (This behavior aligns with that of the Ruff formatter.)

If lint.pycodestyle.ignore-overlong-task-comments is true, this rule will
also ignore comments that start with any of the specified lint.task-tags
(e.g., # TODO:).
","----neg----:
def function(x):
    """"""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis auctor purus ut ex fermentum, at maximus est hendrerit.""""""
----pos----:
def function(x):
    """"""
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    Duis auctor purus ut ex fermentum, at maximus est hendrerit.
    """"""
----other----:
Hint: when suppressing W505 errors within multi-line strings (like
docstrings), the noqa directive should come at the end of the string
(after the closing triple quote), and will apply to the entire string, like
so:
""""""Lorem ipsum dolor sit amet.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.
""""""  # noqa: W505

","https://docs.astral.sh/ruff/settings/#lint_task-tags
lint.task-tags
None
https://docs.astral.sh/ruff/settings/#lint_pycodestyle_max-doc-length
lint.pycodestyle.max-doc-length
None
https://docs.astral.sh/ruff/settings/#lint_pycodestyle_ignore-overlong-task-comments
lint.pycodestyle.ignore-overlong-task-comments
None","
<h1 id=""doc-line-too-long-w505"">doc-line-too-long (W505)<a class=""headerlink"" href=""#doc-line-too-long-w505"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-escape-sequence/,W605,invalid-escape-sequence,Invalid escape sequence: <code>\{ch}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for invalid escape sequences.
","Why is this bad?#
Invalid escape sequences are deprecated in Python 3.6.
","----neg----:
regex = ""\.png$""
----pos----:
regex = r""\.png$""
----other----:
Or, if the string already contains a valid escape sequence:
value = ""new line\nand invalid escape \_ here""

value = ""new line\nand invalid escape \\_ here""
",,"
<h1 id=""invalid-escape-sequence-w605"">invalid-escape-sequence (W605)<a class=""headerlink"" href=""#invalid-escape-sequence-w605"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pycodestyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"">Python documentation: String and Bytes literals</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/complex-structure/,C901,complex-structure,<code>{name}</code> is too complex ({complexity} > {max_complexity}),Rule is stable,Automatic fix not available,"What it does#
Checks for functions with a high McCabe complexity.
","Why is this bad?#
The McCabe complexity of a function is a measure of the complexity of
the control flow graph of the function. It is calculated by adding
one to the number of decision points in the function. A decision
point is a place in the code where the program has a choice of two
or more paths to follow.
Functions with a high complexity are hard to understand and maintain.
","----neg----:
def foo(a, b, c):
    if a:
        if b:
            if c:
                return 1
            else:
                return 2
        else:
            return 3
    else:
        return 4
----pos----:
def foo(a, b, c):
    if not a:
        return 4
    if not b:
        return 3
    if not c:
        return 2
    return 1
","https://docs.astral.sh/ruff/settings/#lint_mccabe_max-complexity
lint.mccabe.max-complexity
None","
<h1 id=""complex-structure-c901"">complex-structure (C901)<a class=""headerlink"" href=""#complex-structure-c901"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>mccabe</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unsorted-imports/,I001,unsorted-imports,Import block is un-sorted or un-formatted,Rule is stable,Automatic fix available,"What it does#
De-duplicates, groups, and sorts imports based on the provided isort settings.
","Why is this bad?#
Consistency is good. Use a common convention for imports to make your code
more readable and idiomatic.
","----neg----:
import pandas
import numpy as np
----pos----:
import numpy as np
import pandas
",,"
<h1 id=""unsorted-imports-i001"">unsorted-imports (I001)<a class=""headerlink"" href=""#unsorted-imports-i001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>isort</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/missing-required-import/,I002,missing-required-import,Missing required import: <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Adds any required imports, as specified by the user, to the top of the
file.
","Why is this bad?#
In some projects, certain imports are required to be present in all
files. For example, some projects assume that
from __future__ import annotations is enabled,
and thus require that import to be
present in all files. Omitting a ""required"" import (as specified by
the user) can cause errors or unexpected behavior.
","----neg----:
import typing
----pos----:
from __future__ import annotations

import typing
",,"
<h1 id=""missing-required-import-i002"">missing-required-import (I002)<a class=""headerlink"" href=""#missing-required-import-i002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>isort</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-class-name/,N801,invalid-class-name,Class name <code>{name}</code> should use CapWords convention,Rule is stable,Automatic fix not available,"What it does#
Checks for class names that do not follow the CamelCase convention.
","Why is this bad?#
PEP 8 recommends the use of the CapWords (or CamelCase) convention
for class names:

Class names should normally use the CapWords convention.
The naming convention for functions may be used instead in cases where the interface is
documented and used primarily as a callable.
Note that there is a separate convention for builtin names: most builtin names are single
words (or two words run together), with the CapWords convention used only for exception
names and builtin constants.

","----neg----:
class my_class:
    pass
----pos----:
class MyClass:
    pass
",,"
<h1 id=""invalid-class-name-n801"">invalid-class-name (N801)<a class=""headerlink"" href=""#invalid-class-name-n801"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-function-name/,N802,invalid-function-name,Function name <code>{name}</code> should be lowercase,Rule is stable,Automatic fix not available,"What it does#
Checks for functions names that do not follow the snake_case naming
convention.
","Why is this bad?#
PEP 8 recommends that function names follow snake_case:

Function names should be lowercase, with words separated by underscores as necessary to
improve readability. mixedCase is allowed only in contexts where that’s already the
prevailing style (e.g. threading.py), to retain backwards compatibility.

Names can be excluded from this rule using the lint.pep8-naming.ignore-names
or lint.pep8-naming.extend-ignore-names configuration options. For example,
to ignore all functions starting with test_ from this rule, set the
lint.pep8-naming.extend-ignore-names option to [""test_*""].
","----neg----:
def myFunction():
    pass
----pos----:
def my_function():
    pass
","https://docs.astral.sh/ruff/settings/#lint_pep8-naming_ignore-names
lint.pep8-naming.ignore-names
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_extend-ignore-names
lint.pep8-naming.extend-ignore-names
None","
<h1 id=""invalid-function-name-n802"">invalid-function-name (N802)<a class=""headerlink"" href=""#invalid-function-name-n802"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-argument-name/,N803,invalid-argument-name,Argument name <code>{name}</code> should be lowercase,Rule is stable,Automatic fix not available,"What it does#
Checks for argument names that do not follow the snake_case convention.
","Why is this bad?#
PEP 8 recommends that function names should be lower case and separated
by underscores (also known as snake_case).

Function names should be lowercase, with words separated by underscores
as necessary to improve readability.
Variable names follow the same convention as function names.
mixedCase is allowed only in contexts where that’s already the
prevailing style (e.g. threading.py), to retain backwards compatibility.

","----neg----:
def my_function(A, myArg):
    pass
----pos----:
def my_function(a, my_arg):
    pass
",,"
<h1 id=""invalid-argument-name-n803"">invalid-argument-name (N803)<a class=""headerlink"" href=""#invalid-argument-name-n803"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-first-argument-name-for-class-method/,N804,invalid-first-argument-name-for-class-method,First argument of a class method should be named <code>cls</code>,Rule is stable,Automatic fix available,"What it does#
Checks for class methods that use a name other than cls for their
first argument.
","Why is this bad?#
PEP 8 recommends the use of cls as the first argument for all class
methods:

Always use cls for the first argument to class methods.
If a function argument’s name clashes with a reserved keyword, it is generally better to
append a single trailing underscore rather than use an abbreviation or spelling corruption.
Thus class_ is better than clss. (Perhaps better is to avoid such clashes by using a synonym.)

Names can be excluded from this rule using the lint.pep8-naming.ignore-names
or lint.pep8-naming.extend-ignore-names configuration options. For example,
to allow the use of klass as the first argument to class methods, set
the lint.pep8-naming.extend-ignore-names option to [""klass""].
","----neg----:
class Example:
    @classmethod
    def function(self, data):
        ...
----pos----:
class Example:
    @classmethod
    def function(cls, data):
        ...
----other----:
This rule's fix is marked as unsafe, as renaming a method parameter
can change the behavior of the program.
","https://docs.astral.sh/ruff/settings/#lint_pep8-naming_classmethod-decorators
lint.pep8-naming.classmethod-decorators
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_staticmethod-decorators
lint.pep8-naming.staticmethod-decorators
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_ignore-names
lint.pep8-naming.ignore-names
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_extend-ignore-names
lint.pep8-naming.extend-ignore-names
None","
<h1 id=""invalid-first-argument-name-for-class-method-n804"">invalid-first-argument-name-for-class-method (N804)<a class=""headerlink"" href=""#invalid-first-argument-name-for-class-method-n804"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-first-argument-name-for-method/,N805,invalid-first-argument-name-for-method,First argument of a method should be named <code>self</code>,Rule is stable,Automatic fix available,"What it does#
Checks for instance methods that use a name other than self for their
first argument.
","Why is this bad?#
PEP 8 recommends the use of self as first argument for all instance
methods:

Always use self for the first argument to instance methods.
If a function argument’s name clashes with a reserved keyword, it is generally better to
append a single trailing underscore rather than use an abbreviation or spelling corruption.
Thus class_ is better than clss. (Perhaps better is to avoid such clashes by using a synonym.)

Names can be excluded from this rule using the lint.pep8-naming.ignore-names
or lint.pep8-naming.extend-ignore-names configuration options. For example,
to allow the use of this as the first argument to instance methods, set
the lint.pep8-naming.extend-ignore-names option to [""this""].
","----neg----:
class Example:
    def function(cls, data):
        ...
----pos----:
class Example:
    def function(self, data):
        ...
----other----:
This rule's fix is marked as unsafe, as renaming a method parameter
can change the behavior of the program.
","https://docs.astral.sh/ruff/settings/#lint_pep8-naming_classmethod-decorators
lint.pep8-naming.classmethod-decorators
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_staticmethod-decorators
lint.pep8-naming.staticmethod-decorators
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_ignore-names
lint.pep8-naming.ignore-names
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_extend-ignore-names
lint.pep8-naming.extend-ignore-names
None","
<h1 id=""invalid-first-argument-name-for-method-n805"">invalid-first-argument-name-for-method (N805)<a class=""headerlink"" href=""#invalid-first-argument-name-for-method-n805"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/non-lowercase-variable-in-function/,N806,non-lowercase-variable-in-function,Variable <code>{name}</code> in function should be lowercase,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of non-lowercase variable names in functions.
","Why is this bad?#
PEP 8 recommends that all function variables use lowercase names:

Function names should be lowercase, with words separated by underscores as necessary to
improve readability. Variable names follow the same convention as function names. mixedCase
is allowed only in contexts where that's already the prevailing style (e.g. threading.py),
to retain backwards compatibility.

","----neg----:
def my_function(a):
    B = a + 3
    return B
----pos----:
def my_function(a):
    b = a + 3
    return b
","https://docs.astral.sh/ruff/settings/#lint_pep8-naming_ignore-names
lint.pep8-naming.ignore-names
None
https://docs.astral.sh/ruff/settings/#lint_pep8-naming_extend-ignore-names
lint.pep8-naming.extend-ignore-names
None","
<h1 id=""non-lowercase-variable-in-function-n806"">non-lowercase-variable-in-function (N806)<a class=""headerlink"" href=""#non-lowercase-variable-in-function-n806"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/dunder-function-name/,N807,dunder-function-name,Function name should not start and end with <code>__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for functions with ""dunder"" names (that is, names with two
leading and trailing underscores) that are not documented.
","Why is this bad?#
PEP 8 recommends that only documented ""dunder"" methods are used:

...""magic"" objects or attributes that live in user-controlled
namespaces. E.g. __init__, __import__ or __file__. Never invent
such names; only use them as documented.

","----neg----:
def __my_function__():
    pass
----pos----:
def my_function():
    pass
",,"
<h1 id=""dunder-function-name-n807"">dunder-function-name (N807)<a class=""headerlink"" href=""#dunder-function-name-n807"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/constant-imported-as-non-constant/,N811,constant-imported-as-non-constant,Constant <code>{name}</code> imported as non-constant <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for constant imports that are aliased to non-constant-style
names.
","Why is this bad?#
PEP 8 recommends naming conventions for classes, functions,
constants, and more. The use of inconsistent naming styles between
import and alias names may lead readers to expect an import to be of
another type (e.g., confuse a Python class with a constant).
Import aliases should thus follow the same naming style as the member
being imported.
","----neg----:
from example import CONSTANT_VALUE as ConstantValue
----pos----:
from example import CONSTANT_VALUE
",,"
<h1 id=""constant-imported-as-non-constant-n811"">constant-imported-as-non-constant (N811)<a class=""headerlink"" href=""#constant-imported-as-non-constant-n811"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/lowercase-imported-as-non-lowercase/,N812,lowercase-imported-as-non-lowercase,Lowercase <code>{name}</code> imported as non-lowercase <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for lowercase imports that are aliased to non-lowercase names.
","Why is this bad?#
PEP 8 recommends naming conventions for classes, functions,
constants, and more. The use of inconsistent naming styles between
import and alias names may lead readers to expect an import to be of
another type (e.g., confuse a Python class with a constant).
Import aliases should thus follow the same naming style as the member
being imported.
","----neg----:
from example import myclassname as MyClassName
----pos----:
from example import myclassname
",,"
<h1 id=""lowercase-imported-as-non-lowercase-n812"">lowercase-imported-as-non-lowercase (N812)<a class=""headerlink"" href=""#lowercase-imported-as-non-lowercase-n812"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/camelcase-imported-as-lowercase/,N813,camelcase-imported-as-lowercase,Camelcase <code>{name}</code> imported as lowercase <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for CamelCase imports that are aliased to lowercase names.
","Why is this bad?#
PEP 8 recommends naming conventions for classes, functions,
constants, and more. The use of inconsistent naming styles between
import and alias names may lead readers to expect an import to be of
another type (e.g., confuse a Python class with a constant).
Import aliases should thus follow the same naming style as the member
being imported.
","----neg----:
from example import MyClassName as myclassname
----pos----:
from example import MyClassName
",,"
<h1 id=""camelcase-imported-as-lowercase-n813"">camelcase-imported-as-lowercase (N813)<a class=""headerlink"" href=""#camelcase-imported-as-lowercase-n813"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/camelcase-imported-as-constant/,N814,camelcase-imported-as-constant,Camelcase <code>{name}</code> imported as constant <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for CamelCase imports that are aliased to constant-style names.
","Why is this bad?#
PEP 8 recommends naming conventions for classes, functions,
constants, and more. The use of inconsistent naming styles between
import and alias names may lead readers to expect an import to be of
another type (e.g., confuse a Python class with a constant).
Import aliases should thus follow the same naming style as the member
being imported.
","----neg----:
from example import MyClassName as MY_CLASS_NAME
----pos----:
from example import MyClassName
",,"
<h1 id=""camelcase-imported-as-constant-n814"">camelcase-imported-as-constant (N814)<a class=""headerlink"" href=""#camelcase-imported-as-constant-n814"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/mixed-case-variable-in-class-scope/,N815,mixed-case-variable-in-class-scope,Variable <code>{name}</code> in class scope should not be mixedCase,Rule is stable,Automatic fix not available,"What it does#
Checks for class variable names that follow the mixedCase convention.
","Why is this bad?#
PEP 8 recommends that variable names should be lower case and separated
by underscores (also known as snake_case).

Function names should be lowercase, with words separated by underscores
as necessary to improve readability.
Variable names follow the same convention as function names.
mixedCase is allowed only in contexts where that’s already the
prevailing style (e.g. threading.py), to retain backwards compatibility.

","----neg----:
class MyClass:
    myVariable = ""hello""
    another_variable = ""world""
----pos----:
class MyClass:
    my_variable = ""hello""
    another_variable = ""world""
",,"
<h1 id=""mixed-case-variable-in-class-scope-n815"">mixed-case-variable-in-class-scope (N815)<a class=""headerlink"" href=""#mixed-case-variable-in-class-scope-n815"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/mixed-case-variable-in-global-scope/,N816,mixed-case-variable-in-global-scope,Variable <code>{name}</code> in global scope should not be mixedCase,Rule is stable,Automatic fix not available,"What it does#
Checks for global variable names that follow the mixedCase convention.
","Why is this bad?#
PEP 8 recommends that global variable names should be lower case and
separated by underscores (also known as snake_case).

Global Variable Names#
(Let’s hope that these variables are meant for use inside one module
only.) The conventions are about the same as those for functions.
Modules that are designed for use via from M import * should use the
all mechanism to prevent exporting globals, or use the older
convention of prefixing such globals with an underscore (which you might
want to do to indicate these globals are “module non-public”).
Function and Variable Names#
Function names should be lowercase, with words separated by underscores
as necessary to improve readability.
Variable names follow the same convention as function names.
mixedCase is allowed only in contexts where that’s already the prevailing
style (e.g. threading.py), to retain backwards compatibility.

","----neg----:
myVariable = ""hello""
another_variable = ""world""
yet_anotherVariable = ""foo""
----pos----:
my_variable = ""hello""
another_variable = ""world""
yet_another_variable = ""foo""
",,"
<h1 id=""mixed-case-variable-in-global-scope-n816"">mixed-case-variable-in-global-scope (N816)<a class=""headerlink"" href=""#mixed-case-variable-in-global-scope-n816"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/camelcase-imported-as-acronym/,N817,camelcase-imported-as-acronym,CamelCase <code>{name}</code> imported as acronym <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for CamelCase imports that are aliased as acronyms.
","Why is this bad?#
PEP 8 recommends naming conventions for classes, functions,
constants, and more. The use of inconsistent naming styles between
import and alias names may lead readers to expect an import to be of
another type (e.g., confuse a Python class with a constant).
Import aliases should thus follow the same naming style as the member
being imported.
Note that this rule is distinct from camelcase-imported-as-constant
to accommodate selective enforcement.
","----neg----:
from example import MyClassName as MCN
----pos----:
from example import MyClassName
",,"
<h1 id=""camelcase-imported-as-acronym-n817"">camelcase-imported-as-acronym (N817)<a class=""headerlink"" href=""#camelcase-imported-as-acronym-n817"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/error-suffix-on-exception-name/,N818,error-suffix-on-exception-name,Exception name <code>{name}</code> should be named with an Error suffix,Rule is stable,Automatic fix not available,"What it does#
Checks for custom exception definitions that omit the Error suffix.
","Why is this bad?#
The Error suffix is recommended by PEP 8:

Because exceptions should be classes, the class naming convention
applies here. However, you should use the suffix ""Error"" on your
exception names (if the exception actually is an error).

","----neg----:
class Validation(Exception):
    ...
----pos----:
class ValidationError(Exception):
    ...
",,"
<h1 id=""error-suffix-on-exception-name-n818"">error-suffix-on-exception-name (N818)<a class=""headerlink"" href=""#error-suffix-on-exception-name-n818"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-module-name/,N999,invalid-module-name,Invalid module name: '{name}',Rule is stable,Automatic fix not available,"What it does#
Checks for module names that do not follow the snake_case naming
convention or are otherwise invalid.
","Why is this bad?#
PEP 8 recommends the use of the snake_case naming convention for
module names:

Modules should have short, all-lowercase names. Underscores can be used in the
module name if it improves readability. Python packages should also have short,
all-lowercase names, although the use of underscores is discouraged.
When an extension module written in C or C++ has an accompanying Python module that
provides a higher level (e.g. more object-oriented) interface, the C/C++ module has
a leading underscore (e.g. _socket).

Further, in order for Python modules to be importable, they must be valid
identifiers. As such, they cannot start with a digit, or collide with hard
keywords, like import or class.
",,,"
<h1 id=""invalid-module-name-n999"">invalid-module-name (N999)<a class=""headerlink"" href=""#invalid-module-name-n999"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pep8-naming</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/undocumented-public-module/,D100,undocumented-public-module,Missing docstring in public module,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public module definitions.
","Why is this bad?#
Public modules should be documented via docstrings to outline their purpose
and contents.
Generally, module docstrings should describe the purpose of the module and
list the classes, exceptions, functions, and other objects that are exported
by the module, alongside a one-line summary of each.
If the module is a script, the docstring should be usable as its ""usage""
message.
If the codebase adheres to a standard format for module docstrings, follow
that format for consistency.
","----neg----:
class FasterThanLightError(ZeroDivisionError):
    ...


def calculate_speed(distance: float, time: float) -> float:
    ...
----pos----:
""""""Utility functions and classes for calculating speed.

This module provides:
- FasterThanLightError: exception when FTL speed is calculated;
- calculate_speed: calculate speed given distance and time.
""""""


class FasterThanLightError(ZeroDivisionError):
    ...


def calculate_speed(distance: float, time: float) -> float:
    ...
",,"
<h1 id=""undocumented-public-module-d100"">undocumented-public-module (D100)<a class=""headerlink"" href=""#undocumented-public-module-d100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-class/,D101,undocumented-public-class,Missing docstring in public class,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public class definitions.
","Why is this bad?#
Public classes should be documented via docstrings to outline their purpose
and behavior.
Generally, a class docstring should describe the class's purpose and list
its public attributes and methods.
If the codebase adheres to a standard format for class docstrings, follow
that format for consistency.
","----neg----:
class Player:
    def __init__(self, name: str, points: int = 0) -> None:
        self.name: str = name
        self.points: int = points

    def add_points(self, points: int) -> None:
        self.points += points
----pos----:
Use instead (in the NumPy docstring format):----other----:

class Player:
    """"""A player in the game.

    Attributes
    ----------
    name : str
        The name of the player.
    points : int
        The number of points the player has.

    Methods
    -------
    add_points(points: int) -> None
        Add points to the player's score.
    """"""

    def __init__(self, name: str, points: int = 0) -> None:
        self.name: str = name
        self.points: int = points

    def add_points(self, points: int) -> None:
        self.points += points

Or (in the Google docstring format):
class Player:
    """"""A player in the game.

    Attributes:
        name: The name of the player.
        points: The number of points the player has.
    """"""

    def __init__(self, name: str, points: int = 0) -> None:
        self.name: str = name
        self.points: int = points

    def add_points(self, points: int) -> None:
        self.points += points

",,"
<h1 id=""undocumented-public-class-d101"">undocumented-public-class (D101)<a class=""headerlink"" href=""#undocumented-public-class-d101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-method/,D102,undocumented-public-method,Missing docstring in public method,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public method definitions.
","Why is this bad?#
Public methods should be documented via docstrings to outline their purpose
and behavior.
Generally, a method docstring should describe the method's behavior,
arguments, side effects, exceptions, return values, and any other
information that may be relevant to the user.
If the codebase adheres to a standard format for method docstrings, follow
that format for consistency.
","----neg----:
class Cat(Animal):
    def greet(self, happy: bool = True):
        if happy:
            print(""Meow!"")
        else:
            raise ValueError(""Tried to greet an unhappy cat."")
----pos----:
Use instead (in the NumPy docstring format):----other----:

class Cat(Animal):
    def greet(self, happy: bool = True):
        """"""Print a greeting from the cat.

        Parameters
        ----------
        happy : bool, optional
            Whether the cat is happy, is True by default.

        Raises
        ------
        ValueError
            If the cat is not happy.
        """"""
        if happy:
            print(""Meow!"")
        else:
            raise ValueError(""Tried to greet an unhappy cat."")

Or (in the Google docstring format):
class Cat(Animal):
    def greet(self, happy: bool = True):
        """"""Print a greeting from the cat.

        Args:
            happy: Whether the cat is happy, is True by default.

        Raises:
            ValueError: If the cat is not happy.
        """"""
        if happy:
            print(""Meow!"")
        else:
            raise ValueError(""Tried to greet an unhappy cat."")

",,"
<h1 id=""undocumented-public-method-d102"">undocumented-public-method (D102)<a class=""headerlink"" href=""#undocumented-public-method-d102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-function/,D103,undocumented-public-function,Missing docstring in public function,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public function definitions.
","Why is this bad?#
Public functions should be documented via docstrings to outline their
purpose and behavior.
Generally, a function docstring should describe the function's behavior,
arguments, side effects, exceptions, return values, and any other
information that may be relevant to the user.
If the codebase adheres to a standard format for function docstrings, follow
that format for consistency.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
Use instead (using the NumPy docstring format):----other----:

def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc

Or, using the Google docstring format:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc

",,"
<h1 id=""undocumented-public-function-d103"">undocumented-public-function (D103)<a class=""headerlink"" href=""#undocumented-public-function-d103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings"">Google Style Python Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-package/,D104,undocumented-public-package,Missing docstring in public package,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public package definitions.
","Why is this bad?#
Public packages should be documented via docstrings to outline their
purpose and contents.
Generally, package docstrings should list the modules and subpackages that
are exported by the package.
If the codebase adheres to a standard format for package docstrings, follow
that format for consistency.
","----neg----:
__all__ = [""Player"", ""Game""]
----pos----:
""""""Game and player management package.

This package provides classes for managing players and games.
""""""

__all__ = [""player"", ""game""]
",,"
<h1 id=""undocumented-public-package-d104"">undocumented-public-package (D104)<a class=""headerlink"" href=""#undocumented-public-package-d104"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings"">Google Style Python Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-magic-method/,D105,undocumented-magic-method,Missing docstring in magic method,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented magic method definitions.
","Why is this bad?#
Magic methods (methods with names that start and end with double
underscores) are used to implement operator overloading and other special
behavior. Such methods should be documented via docstrings to
outline their behavior.
Generally, magic method docstrings should describe the method's behavior,
arguments, side effects, exceptions, return values, and any other
information that may be relevant to the user.
If the codebase adheres to a standard format for method docstrings, follow
that format for consistency.
","----neg----:
class Cat(Animal):
    def __str__(self) -> str:
        return f""Cat: {self.name}""


cat = Cat(""Dusty"")
print(cat)  # ""Cat: Dusty""
----pos----:
class Cat(Animal):
    def __str__(self) -> str:
        """"""Return a string representation of the cat.""""""
        return f""Cat: {self.name}""


cat = Cat(""Dusty"")
print(cat)  # ""Cat: Dusty""
",,"
<h1 id=""undocumented-magic-method-d105"">undocumented-magic-method (D105)<a class=""headerlink"" href=""#undocumented-magic-method-d105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings"">Google Style Python Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-nested-class/,D106,undocumented-public-nested-class,Missing docstring in public nested class,Rule is stable,Automatic fix not available,"What it does#
Checks for undocumented public class definitions, for nested classes.
","Why is this bad?#
Public classes should be documented via docstrings to outline their
purpose and behavior.
Nested classes do not inherit the docstring of their enclosing class, so
they should have their own docstrings.
If the codebase adheres to a standard format for class docstrings, follow
that format for consistency.
","----neg----:
class Foo:
    """"""Class Foo.""""""

    class Bar:
        ...


bar = Foo.Bar()
bar.__doc__  # None
----pos----:
class Foo:
    """"""Class Foo.""""""

    class Bar:
        """"""Class Bar.""""""


bar = Foo.Bar()
bar.__doc__  # ""Class Bar.""
",,"
<h1 id=""undocumented-public-nested-class-d106"">undocumented-public-nested-class (D106)<a class=""headerlink"" href=""#undocumented-public-nested-class-d106"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings"">Google Style Python Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-public-init/,D107,undocumented-public-init,Missing docstring in <code>__init__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for public __init__ method definitions that are missing
docstrings.
","Why is this bad?#
Public __init__ methods are used to initialize objects. __init__
methods should be documented via docstrings to describe the method's
behavior, arguments, side effects, exceptions, and any other information
that may be relevant to the user.
If the codebase adheres to a standard format for __init__ method docstrings,
follow that format for consistency.
","----neg----:
class City:
    def __init__(self, name: str, population: int) -> None:
        self.name: str = name
        self.population: int = population
----pos----:
class City:
    def __init__(self, name: str, population: int) -> None:
        """"""Initialize a city with a name and population.""""""
        self.name: str = name
        self.population: int = population
",,"
<h1 id=""undocumented-public-init-d107"">undocumented-public-init (D107)<a class=""headerlink"" href=""#undocumented-public-init-d107"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings"">Google Style Python Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/fits-on-one-line/,D200,fits-on-one-line,One-line docstring should fit on one line,Rule is stable,Automatic fix available,"What it does#
Checks for single-line docstrings that are broken across multiple lines.
","Why is this bad?#
PEP 257 recommends that docstrings that can fit on one line should be
formatted on a single line, for consistency and readability.
","----neg----:
def average(values: list[float]) -> float:
    """"""
    Return the mean of the given values.
    """"""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
",,"
<h1 id=""fits-on-one-line-d200"">fits-on-one-line (D200)<a class=""headerlink"" href=""#fits-on-one-line-d200"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-blank-line-before-function/,D201,no-blank-line-before-function,No blank lines allowed before function docstring (found {num_lines}),Rule is stable,Automatic fix available,"What it does#
Checks for docstrings on functions that are separated by one or more blank
lines from the function definition.
","Why is this bad?#
Remove any blank lines between the function definition and its docstring,
for consistency.
","----neg----:
def average(values: list[float]) -> float:

    """"""Return the mean of the given values.""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
",,"
<h1 id=""no-blank-line-before-function-d201"">no-blank-line-before-function (D201)<a class=""headerlink"" href=""#no-blank-line-before-function-d201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-blank-line-after-function/,D202,no-blank-line-after-function,No blank lines allowed after function docstring (found {num_lines}),Rule is stable,Automatic fix available,"What it does#
Checks for docstrings on functions that are separated by one or more blank
lines from the function body.
","Why is this bad?#
Remove any blank lines between the function body and the function
docstring, for consistency.
","----neg----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""

    return sum(values) / len(values)
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
    return sum(values) / len(values)
",,"
<h1 id=""no-blank-line-after-function-d202"">no-blank-line-after-function (D202)<a class=""headerlink"" href=""#no-blank-line-after-function-d202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/one-blank-line-before-class/,D203,one-blank-line-before-class,1 blank line required before class docstring,Rule is stable,Automatic fix available,"What it does#
Checks for docstrings on class definitions that are not preceded by a
blank line.
","Why is this bad?#
Use a blank line to separate the docstring from the class definition, for
consistency.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is disabled when using the google,
numpy, and pep257 conventions.
For an alternative, see D211.
","----neg----:
class PhotoMetadata:
    """"""Metadata about a photo.""""""
----pos----:
class PhotoMetadata:

    """"""Metadata about a photo.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""one-blank-line-before-class-d203"">one-blank-line-before-class (D203)<a class=""headerlink"" href=""#one-blank-line-before-class-d203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/one-blank-line-after-class/,D204,one-blank-line-after-class,1 blank line required after class docstring,Rule is stable,Automatic fix available,"What it does#
Checks for class methods that are not separated from the class's docstring
by a blank line.
","Why is this bad?#
PEP 257 recommends the use of a blank line to separate a class's
docstring from its methods.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the google
convention, and disabled when using the numpy and pep257 conventions.
","----neg----:
class PhotoMetadata:
    """"""Metadata about a photo.""""""
    def __init__(self, file: Path):
        ...
----pos----:
class PhotoMetadata:
    """"""Metadata about a photo.""""""

    def __init__(self, file: Path):
        ...
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""one-blank-line-after-class-d204"">one-blank-line-after-class (D204)<a class=""headerlink"" href=""#one-blank-line-after-class-d204"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-line-after-summary/,D205,blank-line-after-summary,1 blank line required between summary line and description,Rule is stable,Automatic fix available,"What it does#
Checks for docstring summary lines that are not separated from the docstring
description by one blank line.
","Why is this bad?#
PEP 257 recommends that multi-line docstrings consist of ""a summary line
just like a one-line docstring, followed by a blank line, followed by a
more elaborate description.""
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.
    Sort the list in ascending order and return a copy of the
    result using the bubble sort algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the
    result using the bubble sort algorithm.
    """"""
",,"
<h1 id=""blank-line-after-summary-d205"">blank-line-after-summary (D205)<a class=""headerlink"" href=""#blank-line-after-summary-d205"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/indent-with-spaces/,D206,indent-with-spaces,"Docstring should be indented with spaces, not tabs",Rule is stable,Automatic fix not available,"What it does#
Checks for docstrings that are indented with tabs.
","Why is this bad?#
PEP 8 recommends using spaces over tabs for indentation.
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
The rule is also incompatible with the formatter when using
format.indent-style=""tab"".
",,"
<h1 id=""indent-with-spaces-d206"">indent-with-spaces (D206)<a class=""headerlink"" href=""#indent-with-spaces-d206"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/under-indentation/,D207,under-indentation,Docstring is under-indented,Rule is stable,Automatic fix available,"What it does#
Checks for under-indented docstrings.
","Why is this bad?#
PEP 257 recommends that docstrings be indented to the same level as their
opening quotes. Avoid under-indenting docstrings, for consistency.
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

Sort the list in ascending order and return a copy of the result using the bubble sort
algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
",,"
<h1 id=""under-indentation-d207"">under-indentation (D207)<a class=""headerlink"" href=""#under-indentation-d207"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/over-indentation/,D208,over-indentation,Docstring is over-indented,Rule is stable,Automatic fix available,"What it does#
Checks for over-indented docstrings.
","Why is this bad?#
PEP 257 recommends that docstrings be indented to the same level as their
opening quotes. Avoid over-indenting docstrings, for consistency.
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

        Sort the list in ascending order and return a copy of the result using the
        bubble sort algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent indentation, making the rule redundant.
",,"
<h1 id=""over-indentation-d208"">over-indentation (D208)<a class=""headerlink"" href=""#over-indentation-d208"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/new-line-after-last-paragraph/,D209,new-line-after-last-paragraph,Multi-line docstring closing quotes should be on a separate line,Rule is stable,Automatic fix available,"What it does#
Checks for multi-line docstrings whose closing quotes are not on their
own line.
","Why is this bad?#
PEP 257 recommends that the closing quotes of a multi-line docstring be
on their own line, for consistency and compatibility with documentation
tools that may need to parse the docstring.
","----neg----:
def sort_list(l: List[int]) -> List[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the
    bubble sort algorithm.""""""
----pos----:
def sort_list(l: List[int]) -> List[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
",,"
<h1 id=""new-line-after-last-paragraph-d209"">new-line-after-last-paragraph (D209)<a class=""headerlink"" href=""#new-line-after-last-paragraph-d209"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/surrounding-whitespace/,D210,surrounding-whitespace,No whitespaces allowed surrounding docstring text,Rule is stable,Automatic fix available,"What it does#
Checks for surrounding whitespace in docstrings.
","Why is this bad?#
Remove surrounding whitespace from the docstring, for consistency.
","----neg----:
def factorial(n: int) -> int:
    """""" Return the factorial of n. """"""
----pos----:
def factorial(n: int) -> int:
    """"""Return the factorial of n.""""""
",,"
<h1 id=""surrounding-whitespace-d210"">surrounding-whitespace (D210)<a class=""headerlink"" href=""#surrounding-whitespace-d210"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-line-before-class/,D211,blank-line-before-class,No blank lines allowed before class docstring,Rule is stable,Automatic fix available,"What it does#
Checks for docstrings on class definitions that are preceded by a blank
line.
","Why is this bad?#
Avoid introducing any blank lines between a class definition and its
docstring, for consistency.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the google,
numpy, and pep257 conventions.
For an alternative, see D203.
","----neg----:
class PhotoMetadata:

    """"""Metadata about a photo.""""""
----pos----:
class PhotoMetadata:
    """"""Metadata about a photo.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""blank-line-before-class-d211"">blank-line-before-class (D211)<a class=""headerlink"" href=""#blank-line-before-class-d211"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/,D212,multi-line-summary-first-line,Multi-line docstring summary should start at the first line,Rule is stable,Automatic fix available,"What it does#
Checks for docstring summary lines that are not positioned on the first
physical line of the docstring.
","Why is this bad?#
PEP 257 recommends that multi-line docstrings consist of ""a summary line
just like a one-line docstring, followed by a blank line, followed by a
more elaborate description.""
The summary line should be located on the first physical line of the
docstring, immediately after the opening quotes.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the google
convention, and disabled when using the numpy and pep257 conventions.
For an alternative, see D213.
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""
    Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the
    bubble sort algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
",,"
<h1 id=""multi-line-summary-first-line-d212"">multi-line-summary-first-line (D212)<a class=""headerlink"" href=""#multi-line-summary-first-line-d212"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/,D213,multi-line-summary-second-line,Multi-line docstring summary should start at the second line,Rule is stable,Automatic fix available,"What it does#
Checks for docstring summary lines that are not positioned on the second
physical line of the docstring.
","Why is this bad?#
PEP 257 recommends that multi-line docstrings consist of ""a summary line
just like a one-line docstring, followed by a blank line, followed by a
more elaborate description.""
The summary line should be located on the second physical line of the
docstring, immediately after the opening quotes and the blank line.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is disabled when using the google,
numpy, and pep257 conventions.
For an alternative, see D212.
","----neg----:
def sort_list(l: list[int]) -> list[int]:
    """"""Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the
    bubble sort algorithm.
    """"""
----pos----:
def sort_list(l: list[int]) -> list[int]:
    """"""
    Return a sorted copy of the list.

    Sort the list in ascending order and return a copy of the result using the bubble
    sort algorithm.
    """"""
",,"
<h1 id=""multi-line-summary-second-line-d213"">multi-line-summary-second-line (D213)<a class=""headerlink"" href=""#multi-line-summary-second-line-d213"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/section-not-over-indented/,D214,section-not-over-indented,"Section is over-indented (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for over-indented sections in docstrings.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Each section should use consistent indentation, with the section headers
matching the indentation of the docstring's opening quotes, and the
section bodies being indented one level further.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

        Args:
            distance: Distance traveled.
            time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""section-not-over-indented-d214"">section-not-over-indented (D214)<a class=""headerlink"" href=""#section-not-over-indented-d214"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/section-underline-not-over-indented/,D215,section-underline-not-over-indented,"Section underline is over-indented (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for over-indented section underlines in docstrings.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Some docstring formats (like reStructuredText) use underlines to separate
section bodies from section headers.
Avoid over-indenting the section underlines, as this can cause syntax
errors in reStructuredText.
This rule is enabled when using the numpy convention, and disabled when
using the google or pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
        ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""section-underline-not-over-indented-d215"">section-underline-not-over-indented (D215)<a class=""headerlink"" href=""#section-underline-not-over-indented-d215"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/triple-single-quotes/,D300,triple-single-quotes,"Use triple double quotes <code>""""""</code>",Rule is stable,Automatic fix available,"What it does#
Checks for docstrings that use '''triple single quotes''' instead of
""""""triple double quotes"""""".
","Why is this bad?#
PEP 257 recommends
the use of """"""triple double quotes"""""" for docstrings, to ensure
consistency.
","----neg----:
def kos_root():
    '''Return the pathname of the KOS root directory.'''
----pos----:
def kos_root():
    """"""Return the pathname of the KOS root directory.""""""
----other----:
We recommend against using this rule alongside the formatter. The
formatter enforces consistent quotes, making the rule redundant.
",,"
<h1 id=""triple-single-quotes-d300"">triple-single-quotes (D300)<a class=""headerlink"" href=""#triple-single-quotes-d300"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/escape-sequence-in-docstring/,D301,escape-sequence-in-docstring,"Use <code>r""""""</code> if any backslashes in a docstring",Rule is stable,Automatic fix available,"What it does#
Checks for docstrings that include backslashes, but are not defined as
raw string literals.
","Why is this bad?#
In Python, backslashes are typically used to escape characters in strings.
In raw strings (those prefixed with an r), however, backslashes are
treated as literal characters.
PEP 257 recommends
the use of raw strings (i.e., r""""""raw triple double quotes"""""") for
docstrings that include backslashes. The use of a raw string ensures that
any backslashes are treated as literal characters, and not as escape
sequences, which avoids confusion.
","----neg----:
def foobar():
    """"""Docstring for foo\bar.""""""


foobar.__doc__  # ""Docstring for foar.""
----pos----:
def foobar():
    r""""""Docstring for foo\bar.""""""


foobar.__doc__  # ""Docstring for foo\bar.""
",,"
<h1 id=""escape-sequence-in-docstring-d301"">escape-sequence-in-docstring (D301)<a class=""headerlink"" href=""#escape-sequence-in-docstring-d301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"">Python documentation: String and Bytes literals</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/ends-in-period/,D400,ends-in-period,First line should end with a period,Rule is stable,Automatic fix available,"What it does#
Checks for docstrings in which the first line does not end in a period.
","Why is this bad?#
PEP 257 recommends that the first line of a docstring is written in the
form of a command, ending in a period.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the numpy and
pep257 conventions, and disabled when using the google convention.
","----neg----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""ends-in-period-d400"">ends-in-period (D400)<a class=""headerlink"" href=""#ends-in-period-d400"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/non-imperative-mood/,D401,non-imperative-mood,"First line of docstring should be in imperative mood: ""{first_line}""",Rule is stable,Automatic fix not available,"What it does#
Checks for docstring first lines that are not in an imperative mood.
","Why is this bad?#
PEP 257 recommends that the first line of a docstring be written in the
imperative mood, for consistency.
Hint: to rewrite the docstring in the imperative, phrase the first line as
if it were a command.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the numpy and
pep257 conventions, and disabled when using the google conventions.
","----neg----:
def average(values: list[float]) -> float:
    """"""Returns the mean of the given values.""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""non-imperative-mood-d401"">non-imperative-mood (D401)<a class=""headerlink"" href=""#non-imperative-mood-d401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-signature/,D402,no-signature,First line should not be the function's signature,Rule is stable,Automatic fix not available,"What it does#
Checks for function docstrings that include the function's signature in
the summary line.
","Why is this bad?#
PEP 257 recommends against including a function's signature in its
docstring. Instead, consider using type annotations as a form of
documentation for the function's parameters and return value.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the google and
pep257 conventions, and disabled when using the numpy convention.
","----neg----:
def foo(a, b):
    """"""foo(a: int, b: int) -> list[int]""""""
----pos----:
def foo(a: int, b: int) -> list[int]:
    """"""Return a list of a and b.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""no-signature-d402"">no-signature (D402)<a class=""headerlink"" href=""#no-signature-d402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/first-line-capitalized/,D403,first-line-capitalized,First word of the first line should be capitalized: <code>{}</code> -> <code>{}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for docstrings that do not start with a capital letter.
","Why is this bad?#
The first character in a docstring should be capitalized for, grammatical
correctness and consistency.
","----neg----:
def average(values: list[float]) -> float:
    """"""return the mean of the given values.""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
",,"
<h1 id=""first-line-capitalized-d403"">first-line-capitalized (D403)<a class=""headerlink"" href=""#first-line-capitalized-d403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/docstring-starts-with-this/,D404,docstring-starts-with-this,"First word of the docstring should not be ""This""",Rule is stable,Automatic fix not available,"What it does#
Checks for docstrings that start with This.
","Why is this bad?#
PEP 257 recommends that the first line of a docstring be written in the
imperative mood, for consistency.
Hint: to rewrite the docstring in the imperative, phrase the first line as
if it were a command.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the numpy
convention,, and disabled when using the google and pep257 conventions.
","----neg----:
def average(values: list[float]) -> float:
    """"""This function returns the mean of the given values.""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""docstring-starts-with-this-d404"">docstring-starts-with-this (D404)<a class=""headerlink"" href=""#docstring-starts-with-this-d404"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/capitalize-section-name/,D405,capitalize-section-name,"Section name should be properly capitalized (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for section headers in docstrings that do not begin with capital
letters.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Section headers should be capitalized, for consistency.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    args:
        distance: Distance traveled.
        time: Time spent traveling.

    returns:
        Speed as distance divided by time.

    raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""capitalize-section-name-d405"">capitalize-section-name (D405)<a class=""headerlink"" href=""#capitalize-section-name-d405"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/new-line-after-section-name/,D406,new-line-after-section-name,"Section name should end with a newline (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks that section headers in docstrings that are not followed by a
newline.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Section headers should be followed by a newline, and not by another
character (like a colon), for consistency.
This rule is enabled when using the numpy convention, and disabled
when using the google or pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters:
    -----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns:
    --------
    float
        Speed as distance divided by time.

    Raises:
    -------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""new-line-after-section-name-d406"">new-line-after-section-name (D406)<a class=""headerlink"" href=""#new-line-after-section-name-d406"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/dashed-underline-after-section/,D407,dashed-underline-after-section,"Missing dashed underline after section (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for section headers in docstrings that are not followed by
underlines.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Some docstring formats (like reStructuredText) use underlines to separate
section bodies from section headers.
This rule is enabled when using the numpy convention, and disabled
when using the google or pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters

    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns

    float
        Speed as distance divided by time.

    Raises

    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""dashed-underline-after-section-d407"">dashed-underline-after-section (D407)<a class=""headerlink"" href=""#dashed-underline-after-section-d407"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/section-underline-after-name/,D408,section-underline-after-name,"Section underline should be in the line following the section's name (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for section underlines in docstrings that are not on the line
immediately following the section name.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Some docstring formats (like reStructuredText) use underlines to separate
section bodies from section headers.
When present, section underlines should be positioned on the line
immediately following the section header.
This rule is enabled when using the numpy convention, and disabled
when using the google or pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters

    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns

    -------
    float
        Speed as distance divided by time.

    Raises

    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""section-underline-after-name-d408"">section-underline-after-name (D408)<a class=""headerlink"" href=""#section-underline-after-name-d408"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/section-underline-matches-section-length/,D409,section-underline-matches-section-length,"Section underline should match the length of its name (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for section underlines in docstrings that do not match the length of
the corresponding section header.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Some docstring formats (like reStructuredText) use underlines to separate
section bodies from section headers.
When present, section underlines should match the length of the
corresponding section header.
This rule is enabled when using the numpy convention, and disabled
when using the google or pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ---
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    ---
    float
        Speed as distance divided by time.

    Raises
    ---
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""section-underline-matches-section-length-d409"">section-underline-matches-section-length (D409)<a class=""headerlink"" href=""#section-underline-matches-section-length-d409"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-blank-line-after-section/,D410,no-blank-line-after-section,"Missing blank line after section (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for docstring sections that are not separated by a single blank
line.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Docstring sections should be separated by a blank line, for consistency and
compatibility with documentation tooling.
This rule is enabled when using the numpy and google conventions, and
disabled when using the pep257 convention.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.
    Returns
    -------
    float
        Speed as distance divided by time.
    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""no-blank-line-after-section-d410"">no-blank-line-after-section (D410)<a class=""headerlink"" href=""#no-blank-line-after-section-d410"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-blank-line-before-section/,D411,no-blank-line-before-section,"Missing blank line before section (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for docstring sections that are separated by a blank line.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Docstring sections should be separated by a blank line, for consistency and
compatibility with documentation tooling.
This rule is enabled when using the numpy and google conventions, and
disabled when using the pep257 convention.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.
    Returns
    -------
    float
        Speed as distance divided by time.
    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""no-blank-line-before-section-d411"">no-blank-line-before-section (D411)<a class=""headerlink"" href=""#no-blank-line-before-section-d411"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-lines-between-header-and-content/,D412,blank-lines-between-header-and-content,"No blank lines allowed between a section header and its content (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for docstring sections that contain blank lines between the section
header and the section body.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Docstring sections should not contain blank lines between the section header
and the section body, for consistency.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:

        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""blank-lines-between-header-and-content-d412"">blank-lines-between-header-and-content (D412)<a class=""headerlink"" href=""#blank-lines-between-header-and-content-d412"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blank-line-after-last-section/,D413,blank-line-after-last-section,"Missing blank line after last section (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for missing blank lines after the last section of a multi-line
docstring.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
In some projects, the last section of a docstring is followed by a blank line,
for consistency and compatibility.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is disabled when using the google,
numpy, and pep257 conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.
    Returns
    -------
    float
        Speed as distance divided by time.
    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.

    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""blank-line-after-last-section-d413"">blank-line-after-last-section (D413)<a class=""headerlink"" href=""#blank-line-after-last-section-d413"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/empty-docstring-section/,D414,empty-docstring-section,"Section has no content (""{name}"")",Rule is stable,Automatic fix not available,"What it does#
Checks for docstrings that contain empty sections.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Empty docstring sections are indicative of missing documentation. Empty
sections should either be removed or filled in with relevant documentation.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Parameters
    ----------
    distance : float
        Distance traveled.
    time : float
        Time spent traveling.

    Returns
    -------
    float
        Speed as distance divided by time.

    Raises
    ------
    FasterThanLightError
        If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""empty-docstring-section-d414"">empty-docstring-section (D414)<a class=""headerlink"" href=""#empty-docstring-section-d414"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/ends-in-punctuation/,D415,ends-in-punctuation,"First line should end with a period, question mark, or exclamation point",Rule is stable,Automatic fix available,"What it does#
Checks for docstrings in which the first line does not end in a punctuation
mark, such as a period, question mark, or exclamation point.
","Why is this bad?#
The first line of a docstring should end with a period, question mark, or
exclamation point, for grammatical correctness and consistency.
This rule may not apply to all projects; its applicability is a matter of
convention. By default, this rule is enabled when using the google
convention, and disabled when using the numpy and pep257 conventions.
","----neg----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""ends-in-punctuation-d415"">ends-in-punctuation (D415)<a class=""headerlink"" href=""#ends-in-punctuation-d415"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/section-name-ends-in-colon/,D416,section-name-ends-in-colon,"Section name should end with a colon (""{name}"")",Rule is stable,Automatic fix available,"What it does#
Checks for docstring section headers that do not end with a colon.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
In a docstring, each section header should end with a colon, for
consistency.
This rule is enabled when using the google convention, and disabled when
using the pep257 and numpy conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args
        distance: Distance traveled.
        time: Time spent traveling.

    Returns
        Speed as distance divided by time.

    Raises
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""section-name-ends-in-colon-d416"">section-name-ends-in-colon (D416)<a class=""headerlink"" href=""#section-name-ends-in-colon-d416"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Style Guide</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/undocumented-param/,D417,undocumented-param,Missing argument description in the docstring for <code>{definition}</code>: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for function docstrings that do not include documentation for all
parameters in the function.
","Why is this bad?#
Multi-line docstrings are typically composed of a summary line, followed by
a blank line, followed by a series of sections, each with a section header
and a section body.
Function docstrings often include a section for function arguments, which
should include documentation for every argument. Undocumented arguments are
indicative of missing documentation.
This rule is enabled when using the google convention, and disabled when
using the pep257 and numpy conventions.
","----neg----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
----pos----:
def calculate_speed(distance: float, time: float) -> float:
    """"""Calculate speed as distance divided by time.

    Args:
        distance: Distance traveled.
        time: Time spent traveling.

    Returns:
        Speed as distance divided by time.

    Raises:
        FasterThanLightError: If speed is greater than the speed of light.
    """"""
    try:
        return distance / time
    except ZeroDivisionError as exc:
        raise FasterThanLightError from exc
","https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention
lint.pydocstyle.convention
None","
<h1 id=""undocumented-param-d417"">undocumented-param (D417)<a class=""headerlink"" href=""#undocumented-param-d417"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://peps.python.org/pep-0287/"">PEP 287 – reStructuredText Docstring Format</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/overload-with-docstring/,D418,overload-with-docstring,Function decorated with <code>@overload</code> shouldn't contain a docstring,Rule is stable,Automatic fix not available,"What it does#
Checks for @overload function definitions that contain a docstring.
","Why is this bad?#
The @overload decorator is used to define multiple compatible signatures
for a given function, to support type-checking. A series of @overload
definitions should be followed by a single non-decorated definition that
contains the implementation of the function.
@overload function definitions should not contain a docstring; instead,
the docstring should be placed on the non-decorated definition that contains
the implementation.
","----neg----:
from typing import overload


@overload
def factorial(n: int) -> int:
    """"""Return the factorial of n.""""""


@overload
def factorial(n: float) -> float:
    """"""Return the factorial of n.""""""


def factorial(n):
    """"""Return the factorial of n.""""""


factorial.__doc__  # ""Return the factorial of n.""
----pos----:
from typing import overload


@overload
def factorial(n: int) -> int:
    ...


@overload
def factorial(n: float) -> float:
    ...


def factorial(n):
    """"""Return the factorial of n.""""""


factorial.__doc__  # ""Return the factorial of n.""
",,"
<h1 id=""overload-with-docstring-d418"">overload-with-docstring (D418)<a class=""headerlink"" href=""#overload-with-docstring-d418"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.overload"">Python documentation: <code>typing.overload</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/empty-docstring/,D419,empty-docstring,Docstring is empty,Rule is stable,Automatic fix not available,"What it does#
Checks for empty docstrings.
","Why is this bad?#
An empty docstring is indicative of incomplete documentation. It should either
be removed or replaced with a meaningful docstring.
","----neg----:
def average(values: list[float]) -> float:
    """"""""""""
----pos----:
def average(values: list[float]) -> float:
    """"""Return the mean of the given values.""""""
",,"
<h1 id=""empty-docstring-d419"">empty-docstring (D419)<a class=""headerlink"" href=""#empty-docstring-d419"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pydocstyle</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257 – Docstring Conventions</a></li>
<li><a href=""https://numpydoc.readthedocs.io/en/latest/format.html"">NumPy Style Guide</a></li>
<li><a href=""https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings"">Google Python Style Guide - Docstrings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/useless-metaclass-type/,UP001,useless-metaclass-type,<code>__metaclass__ = type</code> is implied,Rule is stable,Automatic fix available,"What it does#
Checks for the use of __metaclass__ = type in class definitions.
","Why is this bad?#
Since Python 3, __metaclass__ = type is implied and can thus be omitted.
","----neg----:
class Foo:
    __metaclass__ = type
----pos----:
class Foo:
    ...
",,"
<h1 id=""useless-metaclass-type-up001"">useless-metaclass-type (UP001)<a class=""headerlink"" href=""#useless-metaclass-type-up001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.python.org/dev/peps/pep-3115/"">PEP 3115</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/type-of-primitive/,UP003,type-of-primitive,Use <code>{}</code> instead of <code>type(...)</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of type that take a primitive as an argument.
","Why is this bad?#
type() returns the type of a given object. A type of a primitive can
always be known in advance and accessed directly, which is more concise
and explicit than using type().
","----neg----:
type(1)
----pos----:
int
",,"
<h1 id=""type-of-primitive-up003"">type-of-primitive (UP003)<a class=""headerlink"" href=""#type-of-primitive-up003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#type"">Python documentation: <code>type()</code></a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html"">Python documentation: Built-in types</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/useless-object-inheritance/,UP004,useless-object-inheritance,Class <code>{name}</code> inherits from <code>object</code>,Rule is stable,Automatic fix available,"What it does#
Checks for classes that inherit from object.
","Why is this bad?#
Since Python 3, all classes inherit from object by default, so object can
be omitted from the list of base classes.
","----neg----:
class Foo(object):
    ...
----pos----:
class Foo:
    ...
",,"
<h1 id=""useless-object-inheritance-up004"">useless-object-inheritance (UP004)<a class=""headerlink"" href=""#useless-object-inheritance-up004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.python.org/dev/peps/pep-3115/"">PEP 3115</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/deprecated-unittest-alias/,UP005,deprecated-unittest-alias,"<code>{alias}</code> is deprecated, use <code>{target}</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of deprecated methods from the unittest module.
","Why is this bad?#
The unittest module has deprecated aliases for some of its methods.
The aliases may be removed in future versions of Python. Instead,
use their non-deprecated counterparts.
","----neg----:
from unittest import TestCase


class SomeTest(TestCase):
    def test_something(self):
        self.assertEquals(1, 1)
----pos----:
from unittest import TestCase


class SomeTest(TestCase):
    def test_something(self):
        self.assertEqual(1, 1)
",,"
<h1 id=""deprecated-unittest-alias-up005"">deprecated-unittest-alias (UP005)<a class=""headerlink"" href=""#deprecated-unittest-alias-up005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/unittest.html#deprecated-aliases"">Python documentation: Deprecated aliases</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/non-pep585-annotation/,UP006,non-pep585-annotation,Use <code>{to}</code> instead of <code>{from}</code> for type annotation,Rule is stable,Automatic fix available,"What it does#
Checks for the use of generics that can be replaced with standard library
variants based on PEP 585.
","Why is this bad?#
PEP 585 enabled collections in the Python standard library (like list)
to be used as generics directly, instead of importing analogous members
from the typing module (like typing.List).
When available, the PEP 585 syntax should be used instead of importing
members from the typing module, as it's more concise and readable.
Importing those members from typing is considered deprecated as of PEP
585.
This rule is enabled when targeting Python 3.9 or later (see:
target-version). By default, it's also enabled for earlier Python
versions if from __future__ import annotations is present, as
__future__ annotations are not evaluated at runtime. If your code relies
on runtime type annotations (either directly or via a library like
Pydantic), you can disable this behavior for Python versions prior to 3.9
by setting lint.pyupgrade.keep-runtime-typing to true.
","----neg----:
from typing import List

foo: List[int] = [1, 2, 3]
----pos----:
foo: list[int] = [1, 2, 3]
----other----:
This rule's fix is marked as unsafe, as it may lead to runtime errors when
alongside libraries that rely on runtime type annotations, like Pydantic,
on Python versions prior to Python 3.9.
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None
https://docs.astral.sh/ruff/settings/#lint_pyupgrade_keep-runtime-typing
lint.pyupgrade.keep-runtime-typing
None","
<h1 id=""non-pep585-annotation-up006"">non-pep585-annotation (UP006)<a class=""headerlink"" href=""#non-pep585-annotation-up006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/non-pep604-annotation/,UP007,non-pep604-annotation,Use <code>X | Y</code> for type annotations,Rule is stable,Automatic fix available,"What it does#
Check for type annotations that can be rewritten based on PEP 604 syntax.
","Why is this bad?#
PEP 604 introduced a new syntax for union type annotations based on the
| operator. This syntax is more concise and readable than the previous
typing.Union and typing.Optional syntaxes.
This rule is enabled when targeting Python 3.10 or later (see:
target-version). By default, it's also enabled for earlier Python
versions if from __future__ import annotations is present, as
__future__ annotations are not evaluated at runtime. If your code relies
on runtime type annotations (either directly or via a library like
Pydantic), you can disable this behavior for Python versions prior to 3.10
by setting lint.pyupgrade.keep-runtime-typing to true.
","----neg----:
from typing import Union

foo: Union[int, str] = 1
----pos----:
foo: int | str = 1
----other----:
This rule's fix is marked as unsafe, as it may lead to runtime errors when
alongside libraries that rely on runtime type annotations, like Pydantic,
on Python versions prior to Python 3.10. It may also lead to runtime errors
in unusual and likely incorrect type annotations where the type does not
support the | operator.
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None
https://docs.astral.sh/ruff/settings/#lint_pyupgrade_keep-runtime-typing
lint.pyupgrade.keep-runtime-typing
None","
<h1 id=""non-pep604-annotation-up007"">non-pep604-annotation (UP007)<a class=""headerlink"" href=""#non-pep604-annotation-up007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/super-call-with-parameters/,UP008,super-call-with-parameters,"Use <code>super()</code> instead of <code>super(__class__, self)</code>",Rule is stable,Automatic fix available,"What it does#
Checks for super calls that pass redundant arguments.
","Why is this bad?#
In Python 3, super can be invoked without any arguments when: (1) the
first argument is __class__, and (2) the second argument is equivalent to
the first argument of the enclosing method.
When possible, omit the arguments to super to make the code more concise
and maintainable.
","----neg----:
class A:
    def foo(self):
        pass


class B(A):
    def bar(self):
        super(B, self).foo()
----pos----:
class A:
    def foo(self):
        pass


class B(A):
    def bar(self):
        super().foo()
",,"
<h1 id=""super-call-with-parameters-up008"">super-call-with-parameters (UP008)<a class=""headerlink"" href=""#super-call-with-parameters-up008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#super"">Python documentation: <code>super</code></a></li>
<li><a href=""https://www.youtube.com/watch?v=X1PQ7zzltz4"">super/MRO, Python's most misunderstood feature.</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/utf8-encoding-declaration/,UP009,utf8-encoding-declaration,UTF-8 encoding declaration is unnecessary,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary UTF-8 encoding declarations.
","Why is this bad?#
PEP 3120 makes UTF-8 the default encoding, so a UTF-8 encoding
declaration is unnecessary.
","----neg----:
# -*- coding: utf-8 -*-
print(""Hello, world!"")
----pos----:
print(""Hello, world!"")
",,"
<h1 id=""utf8-encoding-declaration-up009"">utf8-encoding-declaration (UP009)<a class=""headerlink"" href=""#utf8-encoding-declaration-up009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-future-import/,UP010,unnecessary-future-import,Unnecessary <code>__future__</code> import <code>{import}</code> for target Python version,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary __future__ imports.
","Why is this bad?#
The __future__ module is used to enable features that are not yet
available in the current Python version. If a feature is already
available in the minimum supported Python version, importing it
from __future__ is unnecessary and should be removed to avoid
confusion.
","----neg----:
from __future__ import print_function

print(""Hello, world!"")
----pos----:
print(""Hello, world!"")
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""unnecessary-future-import-up010"">unnecessary-future-import (UP010)<a class=""headerlink"" href=""#unnecessary-future-import-up010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/__future__.html"">Python documentation: <code>__future__</code> — Future statement definitions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/lru-cache-without-parameters/,UP011,lru-cache-without-parameters,Unnecessary parentheses to <code>functools.lru_cache</code>,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary parentheses on functools.lru_cache decorators.
","Why is this bad?#
Since Python 3.8, functools.lru_cache can be used as a decorator without
trailing parentheses, as long as no arguments are passed to it.
","----neg----:
import functools


@functools.lru_cache()
def foo():
    ...
----pos----:
import functools


@functools.lru_cache
def foo():
    ...
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""lru-cache-without-parameters-up011"">lru-cache-without-parameters (UP011)<a class=""headerlink"" href=""#lru-cache-without-parameters-up011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functools.html#functools.lru_cache"">Python documentation: <code>@functools.lru_cache</code></a></li>
<li><a href=""https://github.com/python/cpython/issues/80953"">Let lru_cache be used as a decorator with no arguments</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-encode-utf8/,UP012,unnecessary-encode-utf8,Unnecessary call to <code>encode</code> as UTF-8,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary calls to encode as UTF-8.
","Why is this bad?#
UTF-8 is the default encoding in Python, so there is no need to call
encode when UTF-8 is the desired encoding. Instead, use a bytes literal.
","----neg----:
""foo"".encode(""utf-8"")
----pos----:
b""foo""
",,"
<h1 id=""unnecessary-encode-utf8-up012"">unnecessary-encode-utf8 (UP012)<a class=""headerlink"" href=""#unnecessary-encode-utf8-up012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.encode"">Python documentation: <code>str.encode</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/convert-typed-dict-functional-to-class/,UP013,convert-typed-dict-functional-to-class,Convert <code>{name}</code> from <code>TypedDict</code> functional to class syntax,Rule is stable,Automatic fix available,"What it does#
Checks for TypedDict declarations that use functional syntax.
","Why is this bad?#
TypedDict subclasses can be defined either through a functional syntax
(Foo = TypedDict(...)) or a class syntax (class Foo(TypedDict): ...).
The class syntax is more readable and generally preferred over the
functional syntax.
","----neg----:
from typing import TypedDict

Foo = TypedDict(""Foo"", {""a"": int, ""b"": str})
----pos----:
from typing import TypedDict


class Foo(TypedDict):
    a: int
    b: str
",,"
<h1 id=""convert-typed-dict-functional-to-class-up013"">convert-typed-dict-functional-to-class (UP013)<a class=""headerlink"" href=""#convert-typed-dict-functional-to-class-up013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.TypedDict"">Python documentation: <code>typing.TypedDict</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/convert-named-tuple-functional-to-class/,UP014,convert-named-tuple-functional-to-class,Convert <code>{name}</code> from <code>NamedTuple</code> functional to class syntax,Rule is stable,Automatic fix available,"What it does#
Checks for NamedTuple declarations that use functional syntax.
","Why is this bad?#
NamedTuple subclasses can be defined either through a functional syntax
(Foo = NamedTuple(...)) or a class syntax (class Foo(NamedTuple): ...).
The class syntax is more readable and generally preferred over the
functional syntax, which exists primarily for backwards compatibility
with collections.namedtuple.
","----neg----:
from typing import NamedTuple

Foo = NamedTuple(""Foo"", [(""a"", int), (""b"", str)])
----pos----:
from typing import NamedTuple


class Foo(NamedTuple):
    a: int
    b: str
",,"
<h1 id=""convert-named-tuple-functional-to-class-up014"">convert-named-tuple-functional-to-class (UP014)<a class=""headerlink"" href=""#convert-named-tuple-functional-to-class-up014"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.NamedTuple"">Python documentation: <code>typing.NamedTuple</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redundant-open-modes/,UP015,redundant-open-modes,Unnecessary open mode parameters,Rule is stable,Automatic fix available,"What it does#
Checks for redundant open mode parameters.
","Why is this bad?#
Redundant open mode parameters are unnecessary and should be removed to
avoid confusion.
","----neg----:
with open(""foo.txt"", ""r"") as f:
    ...
----pos----:
with open(""foo.txt"") as f:
    ...
",,"
<h1 id=""redundant-open-modes-up015"">redundant-open-modes (UP015)<a class=""headerlink"" href=""#redundant-open-modes-up015"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#open"">Python documentation: <code>open</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/datetime-timezone-utc/,UP017,datetime-timezone-utc,Use <code>datetime.UTC</code> alias,Rule is stable,Automatic fix available,"What it does#
Checks for uses of datetime.timezone.utc.
","Why is this bad?#
As of Python 3.11, datetime.UTC is an alias for datetime.timezone.utc.
The alias is more readable and generally preferred over the full path.
","----neg----:
import datetime

datetime.timezone.utc
----pos----:
import datetime

datetime.UTC
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""datetime-timezone-utc-up017"">datetime-timezone-utc (UP017)<a class=""headerlink"" href=""#datetime-timezone-utc-up017"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#datetime.UTC"">Python documentation: <code>datetime.UTC</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/native-literals/,UP018,native-literals,Unnecessary <code>{literal_type}</code> call (rewrite as a literal),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary calls to str, bytes, int, float, and bool.
","Why is this bad?#
The mentioned constructors can be replaced with their respective literal
forms, which are more readable and idiomatic.
","----neg----:
str(""foo"")
----pos----:
""foo""
",,"
<h1 id=""native-literals-up018"">native-literals (UP018)<a class=""headerlink"" href=""#native-literals-up018"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str"">Python documentation: <code>str</code></a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#bytes"">Python documentation: <code>bytes</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#int"">Python documentation: <code>int</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#float"">Python documentation: <code>float</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#bool"">Python documentation: <code>bool</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/typing-text-str-alias/,UP019,typing-text-str-alias,"<code>typing.Text</code> is deprecated, use <code>str</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of typing.Text.
","Why is this bad?#
typing.Text is an alias for str, and only exists for Python 2
compatibility. As of Python 3.11, typing.Text is deprecated. Use str
instead.
","----neg----:
from typing import Text

foo: Text = ""bar""
----pos----:
foo: str = ""bar""
",,"
<h1 id=""typing-text-str-alias-up019"">typing-text-str-alias (UP019)<a class=""headerlink"" href=""#typing-text-str-alias-up019"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Text"">Python documentation: <code>typing.Text</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/open-alias/,UP020,open-alias,Use builtin <code>open</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of io.open.
","Why is this bad?#
In Python 3, io.open is an alias for open. Prefer using open directly,
as it is more idiomatic.
","----neg----:
import io

with io.open(""file.txt"") as f:
    ...
----pos----:
with open(""file.txt"") as f:
    ...
",,"
<h1 id=""open-alias-up020"">open-alias (UP020)<a class=""headerlink"" href=""#open-alias-up020"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/io.html#io.open"">Python documentation: <code>io.open</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/replace-universal-newlines/,UP021,replace-universal-newlines,"<code>universal_newlines</code> is deprecated, use <code>text</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of subprocess.run that set the universal_newlines
keyword argument.
","Why is this bad?#
As of Python 3.7, the universal_newlines keyword argument has been
renamed to text, and now exists for backwards compatibility. The
universal_newlines keyword argument may be removed in a future version of
Python. Prefer text, which is more explicit and readable.
","----neg----:
import subprocess

subprocess.run([""foo""], universal_newlines=True)
----pos----:
import subprocess

subprocess.run([""foo""], text=True)
",,"
<h1 id=""replace-universal-newlines-up021"">replace-universal-newlines (UP021)<a class=""headerlink"" href=""#replace-universal-newlines-up021"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/whatsnew/3.7.html#subprocess"">Python 3.7 release notes</a></li>
<li><a href=""https://docs.python.org/3/library/subprocess.html#subprocess.run"">Python documentation: <code>subprocess.run</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/replace-stdout-stderr/,UP022,replace-stdout-stderr,Prefer <code>capture_output</code> over sending <code>stdout</code> and <code>stderr</code> to <code>PIPE</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of subprocess.run that send stdout and stderr to a
pipe.
","Why is this bad?#
As of Python 3.7, subprocess.run has a capture_output keyword argument
that can be set to True to capture stdout and stderr outputs. This is
equivalent to setting stdout and stderr to subprocess.PIPE, but is
more explicit and readable.
","----neg----:
import subprocess

subprocess.run([""foo""], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
----pos----:
import subprocess

subprocess.run([""foo""], capture_output=True)
",,"
<h1 id=""replace-stdout-stderr-up022"">replace-stdout-stderr (UP022)<a class=""headerlink"" href=""#replace-stdout-stderr-up022"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/whatsnew/3.7.html#subprocess"">Python 3.7 release notes</a></li>
<li><a href=""https://docs.python.org/3/library/subprocess.html#subprocess.run"">Python documentation: <code>subprocess.run</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/deprecated-c-element-tree/,UP023,deprecated-c-element-tree,"<code>cElementTree</code> is deprecated, use <code>ElementTree</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of the xml.etree.cElementTree module.
","Why is this bad?#
In Python 3.3, xml.etree.cElementTree was deprecated in favor of
xml.etree.ElementTree.
","----neg----:
from xml.etree import cElementTree
----pos----:
from xml.etree import ElementTree
",,"
<h1 id=""deprecated-c-element-tree-up023"">deprecated-c-element-tree (UP023)<a class=""headerlink"" href=""#deprecated-c-element-tree-up023"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.etree.elementtree.html"">Python documentation: <code>xml.etree.ElementTree</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-error-alias/,UP024,os-error-alias,Replace aliased errors with <code>OSError</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of exceptions that alias OSError.
","Why is this bad?#
OSError is the builtin error type used for exceptions that relate to the
operating system.
In Python 3.3, a variety of other exceptions, like WindowsError were
aliased to OSError. These aliases remain in place for compatibility with
older versions of Python, but may be removed in future versions.
Prefer using OSError directly, as it is more idiomatic and future-proof.
","----neg----:
raise IOError
----pos----:
raise OSError
",,"
<h1 id=""os-error-alias-up024"">os-error-alias (UP024)<a class=""headerlink"" href=""#os-error-alias-up024"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/exceptions.html#OSError"">Python documentation: <code>OSError</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unicode-kind-prefix/,UP025,unicode-kind-prefix,Remove unicode literals from strings,Rule is stable,Automatic fix available,"What it does#
Checks for uses of the Unicode kind prefix (u) in strings.
","Why is this bad?#
In Python 3, all strings are Unicode by default. The Unicode kind prefix is
unnecessary and should be removed to avoid confusion.
","----neg----:
u""foo""
----pos----:
""foo""
",,"
<h1 id=""unicode-kind-prefix-up025"">unicode-kind-prefix (UP025)<a class=""headerlink"" href=""#unicode-kind-prefix-up025"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/howto/unicode.html"">Python documentation: Unicode HOWTO</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/deprecated-mock-import/,UP026,deprecated-mock-import,"<code>mock</code> is deprecated, use <code>unittest.mock</code>",Rule is stable,Automatic fix available,"What it does#
Checks for imports of the mock module that should be replaced with
unittest.mock.
","Why is this bad?#
Since Python 3.3, mock has been a part of the standard library as
unittest.mock. The mock package is deprecated; use unittest.mock
instead.
","----neg----:
import mock
----pos----:
from unittest import mock
",,"
<h1 id=""deprecated-mock-import-up026"">deprecated-mock-import (UP026)<a class=""headerlink"" href=""#deprecated-mock-import-up026"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/unittest.mock.html"">Python documentation: <code>unittest.mock</code></a></li>
<li><a href=""https://pypi.org/project/mock/"">PyPI: <code>mock</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unpacked-list-comprehension/,UP027,unpacked-list-comprehension,Replace unpacked list comprehension with a generator expression,Rule is stable,Automatic fix available,"What it does#
Checks for list comprehensions that are immediately unpacked.
","Why is this bad?#
There is no reason to use a list comprehension if the result is immediately
unpacked. Instead, use a generator expression, which is more efficient as
it avoids allocating an intermediary list.
","----neg----:
a, b, c = [foo(x) for x in items]
----pos----:
a, b, c = (foo(x) for x in items)
",,"
<h1 id=""unpacked-list-comprehension-up027"">unpacked-list-comprehension (UP027)<a class=""headerlink"" href=""#unpacked-list-comprehension-up027"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#generator-expressions"">Python documentation: Generator expressions</a></li>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"">Python documentation: List comprehensions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/yield-in-for-loop/,UP028,yield-in-for-loop,Replace <code>yield</code> over <code>for</code> loop with <code>yield from</code>,Rule is stable,Automatic fix available,"What it does#
Checks for for loops that can be replaced with yield from expressions.
","Why is this bad?#
If a for loop only contains a yield statement, it can be replaced with a
yield from expression, which is more concise and idiomatic.
","----neg----:
for x in foo:
    yield x
----pos----:
yield from foo
----other----:
This rule's fix is marked as unsafe, as converting a for loop to a yield from expression can change the behavior of the program in rare cases.
For example, if a generator is being sent values via send, then rewriting
to a yield from could lead to an attribute error if the underlying
generator does not implement the send method.
In most cases, however, the fix is safe, and such a modification should have
no effect on the behavior of the program.
",,"
<h1 id=""yield-in-for-loop-up028"">yield-in-for-loop (UP028)<a class=""headerlink"" href=""#yield-in-for-loop-up028"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement"">Python documentation: The <code>yield</code> statement</a></li>
<li><a href=""https://peps.python.org/pep-0380/"">PEP 380</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-builtin-import/,UP029,unnecessary-builtin-import,Unnecessary builtin import: <code>{import}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary imports of builtins.
","Why is this bad?#
Builtins are always available. Importing them is unnecessary and should be
removed to avoid confusion.
","----neg----:
from builtins import str

str(1)
----pos----:
str(1)
",,"
<h1 id=""unnecessary-builtin-import-up029"">unnecessary-builtin-import (UP029)<a class=""headerlink"" href=""#unnecessary-builtin-import-up029"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/index.html"">Python documentation: The Python Standard Library</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/format-literals/,UP030,format-literals,Use implicit references for positional format fields,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary positional indices in format strings.
","Why is this bad?#
In Python 3.1 and later, format strings can use implicit positional
references. For example, ""{0}, {1}"".format(""Hello"", ""World"") can be
rewritten as ""{}, {}"".format(""Hello"", ""World"").
If the positional indices appear exactly in-order, they can be omitted
in favor of automatic indices to improve readability.
","----neg----:
""{0}, {1}"".format(""Hello"", ""World"")  # ""Hello, World""
----pos----:
""{}, {}"".format(""Hello"", ""World"")  # ""Hello, World""
",,"
<h1 id=""format-literals-up030"">format-literals (UP030)<a class=""headerlink"" href=""#format-literals-up030"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/string.html#format-string-syntax"">Python documentation: Format String Syntax</a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/printf-string-formatting/,UP031,printf-string-formatting,Use format specifiers instead of percent format,Rule is stable,Automatic fix available,"What it does#
Checks for printf-style string formatting.
","Why is this bad?#
printf-style string formatting has a number of quirks, and leads to less
readable code than using str.format calls or f-strings. In general, prefer
the newer str.format and f-strings constructs over printf-style string
formatting.
Known problems#
This rule is unable to detect cases in which the format string contains
a single, generic format specifier (e.g. %s), and the right-hand side
is an ambiguous expression.
For example, given:
""%s"" % value

value could be a single-element tuple, or it could be a single value.
Both of these would resolve to the same formatted string when using
printf-style formatting, but not when using f-strings:
value = 1
print(""%s"" % value)  # ""1""
print(""{}"".format(value))  # ""1""

value = (1,)
print(""%s"" % value)  # ""1""
print(""{}"".format(value))  # ""(1,)""

","----neg----:
""%s, %s"" % (""Hello"", ""World"")  # ""Hello, World""
----pos----:
""{}, {}"".format(""Hello"", ""World"")  # ""Hello, World""
",,"
<h1 id=""printf-string-formatting-up031"">printf-string-formatting (UP031)<a class=""headerlink"" href=""#printf-string-formatting-up031"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#old-string-formatting"">Python documentation: <code>printf</code>-style String Formatting</a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.format"">Python documentation: <code>str.format</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/f-string/,UP032,f-string,Use f-string instead of <code>format</code> call,Rule is stable,Automatic fix available,"What it does#
Checks for str.format calls that can be replaced with f-strings.
","Why is this bad?#
f-strings are more readable and generally preferred over str.format
calls.
","----neg----:
""{}"".format(foo)
----pos----:
f""{foo}""
",,"
<h1 id=""f-string-up032"">f-string (UP032)<a class=""headerlink"" href=""#f-string-up032"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#f-strings"">Python documentation: f-strings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/lru-cache-with-maxsize-none/,UP033,lru-cache-with-maxsize-none,Use <code>@functools.cache</code> instead of <code>@functools.lru_cache(maxsize=None)</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of functools.lru_cache that set maxsize=None.
","Why is this bad?#
Since Python 3.9, functools.cache can be used as a drop-in replacement
for functools.lru_cache(maxsize=None). When possible, prefer
functools.cache as it is more readable and idiomatic.
","----neg----:
import functools


@functools.lru_cache(maxsize=None)
def foo():
    ...
----pos----:
import functools


@functools.cache
def foo():
    ...
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""lru-cache-with-maxsize-none-up033"">lru-cache-with-maxsize-none (UP033)<a class=""headerlink"" href=""#lru-cache-with-maxsize-none-up033"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functools.html#functools.cache"">Python documentation: <code>@functools.cache</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/extraneous-parentheses/,UP034,extraneous-parentheses,Avoid extraneous parentheses,Rule is stable,Automatic fix available,"What it does#
Checks for extraneous parentheses.
","Why is this bad?#
Extraneous parentheses are redundant, and can be removed to improve
readability while retaining identical semantics.
","----neg----:
print((""Hello, world""))
----pos----:
print(""Hello, world"")
",,"
<h1 id=""extraneous-parentheses-up034"">extraneous-parentheses (UP034)<a class=""headerlink"" href=""#extraneous-parentheses-up034"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/deprecated-import/,UP035,deprecated-import,Import from <code>{target}</code> instead: {names},Rule is stable,Automatic fix available,"What it does#
Checks for uses of deprecated imports based on the minimum supported
Python version.
","Why is this bad?#
Deprecated imports may be removed in future versions of Python, and
should be replaced with their new equivalents.
Note that, in some cases, it may be preferable to continue importing
members from typing_extensions even after they're added to the Python
standard library, as typing_extensions can backport bugfixes and
optimizations from later Python versions. This rule thus avoids flagging
imports from typing_extensions in such cases.
","----neg----:
from collections import Sequence
----pos----:
from collections.abc import Sequence
",,"
<h1 id=""deprecated-import-up035"">deprecated-import (UP035)<a class=""headerlink"" href=""#deprecated-import-up035"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/outdated-version-block/,UP036,outdated-version-block,Version block is outdated for minimum Python version,Rule is stable,Automatic fix available,"What it does#
Checks for conditional blocks gated on sys.version_info comparisons
that are outdated for the minimum supported Python version.
","Why is this bad?#
In Python, code can be conditionally executed based on the active
Python version by comparing against the sys.version_info tuple.
If a code block is only executed for Python versions older than the
minimum supported version, it should be removed.
","----neg----:
import sys

if sys.version_info < (3, 0):
    print(""py2"")
else:
    print(""py3"")
----pos----:
print(""py3"")
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""outdated-version-block-up036"">outdated-version-block (UP036)<a class=""headerlink"" href=""#outdated-version-block-up036"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/quoted-annotation/,UP037,quoted-annotation,Remove quotes from type annotation,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of unnecessary quotes in type annotations.
","Why is this bad?#
In Python, type annotations can be quoted to avoid forward references.
However, if from __future__ import annotations is present, Python
will always evaluate type annotations in a deferred manner, making
the quotes unnecessary.
","----neg----:
from __future__ import annotations


def foo(bar: ""Bar"") -> ""Bar"":
    ...
----pos----:
from __future__ import annotations


def foo(bar: Bar) -> Bar:
    ...
",,"
<h1 id=""quoted-annotation-up037"">quoted-annotation (UP037)<a class=""headerlink"" href=""#quoted-annotation-up037"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/"">PEP 563</a></li>
<li><a href=""https://docs.python.org/3/library/__future__.html#module-__future__"">Python documentation: <code>__future__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/non-pep604-isinstance/,UP038,non-pep604-isinstance,"Use <code>X | Y</code> in <code>{}</code> call instead of <code>(X, Y)</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of isinstance and issubclass that take a tuple
of types for comparison.
","Why is this bad?#
Since Python 3.10, isinstance and issubclass can be passed a
|-separated union of types, which is consistent
with the union operator introduced in PEP 604.
Note that this results in slower code. Ignore this rule if the
performance of an isinstance or issubclass check is a
concern, e.g., in a hot loop.
","----neg----:
isinstance(x, (int, float))
----pos----:
isinstance(x, int | float)
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""non-pep604-isinstance-up038"">non-pep604-isinstance (UP038)<a class=""headerlink"" href=""#non-pep604-isinstance-up038"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#isinstance"">Python documentation: <code>isinstance</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#issubclass"">Python documentation: <code>issubclass</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-class-parentheses/,UP039,unnecessary-class-parentheses,Unnecessary parentheses after class definition,Rule is stable,Automatic fix available,"What it does#
Checks for class definitions that include unnecessary parentheses after
the class name.
","Why is this bad?#
If a class definition doesn't have any bases, the parentheses are
unnecessary.
Examples#
class Foo():
    ...

Use instead:
class Foo:
    ...

",,,"
<h1 id=""unnecessary-class-parentheses-up039"">unnecessary-class-parentheses (UP039)<a class=""headerlink"" href=""#unnecessary-class-parentheses-up039"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/non-pep695-type-alias/,UP040,non-pep695-type-alias,Type alias <code>{name}</code> uses <code>TypeAlias</code> annotation instead of the <code>type</code> keyword,Rule is stable,Automatic fix available,"What it does#
Checks for use of TypeAlias annotation for declaring type aliases.
","Why is this bad?#
The type keyword was introduced in Python 3.12 by PEP 695 for defining
type aliases. The type keyword is easier to read and provides cleaner
support for generics.
Known problems#
PEP 695 uses inferred variance for type parameters, instead of the
covariant and contravariant keywords used by TypeParam variables. As
such, rewriting a TypeParam variable to a type alias may change its
variance.
Unlike TypeParam variables, PEP 695-style type aliases cannot be used
at runtime. For example, calling isinstance on a type alias will throw
a TypeError. As such, rewriting a TypeParam via the type keyword will
cause issues for parameters that are used for such runtime checks.
","----neg----:
ListOfInt: TypeAlias = list[int]
----pos----:
type ListOfInt = list[int]
",,"
<h1 id=""non-pep695-type-alias-up040"">non-pep695-type-alias (UP040)<a class=""headerlink"" href=""#non-pep695-type-alias-up040"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/timeout-error-alias/,UP041,timeout-error-alias,Replace aliased errors with <code>TimeoutError</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of exceptions that alias TimeoutError.
","Why is this bad?#
TimeoutError is the builtin error type used for exceptions when a system
function timed out at the system level.
In Python 3.10, socket.timeout was aliased to TimeoutError. In Python
3.11, asyncio.TimeoutError was aliased to TimeoutError.
These aliases remain in place for compatibility with older versions of
Python, but may be removed in future versions.
Prefer using TimeoutError directly, as it is more idiomatic and future-proof.
","----neg----:
raise asyncio.TimeoutError
----pos----:
raise TimeoutError
",,"
<h1 id=""timeout-error-alias-up041"">timeout-error-alias (UP041)<a class=""headerlink"" href=""#timeout-error-alias-up041"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pyupgrade</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/exceptions.html#TimeoutError"">Python documentation: <code>TimeoutError</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-slice3/,YTT101,sys-version-slice3,"<code>sys.version[:3]</code> referenced (python3.10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of sys.version[:3].
","Why is this bad?#
If the current major or minor version consists of multiple digits,
sys.version[:3] will truncate the version number (e.g., ""3.10"" would
become ""3.1""). This is likely unintended, and can lead to subtle bugs if
the version string is used to test against a specific Python version.
Instead, use sys.version_info to access the current major and minor
version numbers as a tuple, which can be compared to other tuples
without issue.
","----neg----:
import sys

sys.version[:3]  # Evaluates to ""3.1"" on Python 3.10.
----pos----:
import sys

sys.version_info[:2]  # Evaluates to (3, 10) on Python 3.10.
",,"
<h1 id=""sys-version-slice3-ytt101"">sys-version-slice3 (YTT101)<a class=""headerlink"" href=""#sys-version-slice3-ytt101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version2/,YTT102,sys-version2,"<code>sys.version[2]</code> referenced (python3.10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of sys.version[2].
","Why is this bad?#
If the current major or minor version consists of multiple digits,
sys.version[2] will select the first digit of the minor number only
(e.g., ""3.10"" would evaluate to ""1""). This is likely unintended, and
can lead to subtle bugs if the version is used to test against a minor
version number.
Instead, use sys.version_info.minor to access the current minor version
number.
","----neg----:
import sys

sys.version[2]  # Evaluates to ""1"" on Python 3.10.
----pos----:
import sys

f""{sys.version_info.minor}""  # Evaluates to ""10"" on Python 3.10.
",,"
<h1 id=""sys-version2-ytt102"">sys-version2 (YTT102)<a class=""headerlink"" href=""#sys-version2-ytt102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-cmp-str3/,YTT103,sys-version-cmp-str3,"<code>sys.version</code> compared to string (python3.10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for comparisons that test sys.version against string literals,
such that the comparison will evaluate to False on Python 3.10 or later.
","Why is this bad?#
Comparing sys.version to a string is error-prone and may cause subtle
bugs, as the comparison will be performed lexicographically, not
semantically. For example, sys.version > ""3.9"" will evaluate to False
when using Python 3.10, as ""3.10"" is lexicographically ""less"" than
""3.9"".
Instead, use sys.version_info to access the current major and minor
version numbers as a tuple, which can be compared to other tuples
without issue.
","----neg----:
import sys

sys.version > ""3.9""  # `False` on Python 3.10.
----pos----:
import sys

sys.version_info > (3, 9)  # `True` on Python 3.10.
",,"
<h1 id=""sys-version-cmp-str3-ytt103"">sys-version-cmp-str3 (YTT103)<a class=""headerlink"" href=""#sys-version-cmp-str3-ytt103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-info0-eq3/,YTT201,sys-version-info0-eq3,"<code>sys.version_info[0] == 3</code> referenced (python4), use <code>&gt;=</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for equality comparisons against the major version returned by
sys.version_info (e.g., sys.version_info[0] == 3).
","Why is this bad?#
Using sys.version_info[0] == 3 to verify that the major version is
Python 3 or greater will fail if the major version number is ever
incremented (e.g., to Python 4). This is likely unintended, as code
that uses this comparison is likely intended to be run on Python 2,
but would now run on Python 4 too.
Instead, use >= to check if the major version number is 3 or greater,
to future-proof the code.
","----neg----:
import sys

if sys.version_info[0] == 3:
    ...
else:
    print(""Python 2"")  # This will be printed on Python 4.
----pos----:
import sys

if sys.version_info >= (3,):
    ...
else:
    print(""Python 2"")  # This will not be printed on Python 4.
",,"
<h1 id=""sys-version-info0-eq3-ytt201"">sys-version-info0-eq3 (YTT201)<a class=""headerlink"" href=""#sys-version-info0-eq3-ytt201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/six-py3/,YTT202,six-py3,"<code>six.PY3</code> referenced (python4), use <code>not six.PY2</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of six.PY3.
","Why is this bad?#
six.PY3 will evaluate to False on Python 4 and greater. This is likely
unintended, and may cause code intended to run on Python 2 to run on Python 4
too.
Instead, use not six.PY2 to validate that the current Python major version is
not equal to 2, to future-proof the code.
","----neg----:
import six

six.PY3  # `False` on Python 4.
----pos----:
import six

not six.PY2  # `True` on Python 4.
",,"
<h1 id=""six-py3-ytt202"">six-py3 (YTT202)<a class=""headerlink"" href=""#six-py3-ytt202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pypi.org/project/six/"">PyPI: <code>six</code></a></li>
<li><a href=""https://six.readthedocs.io/#six.PY2"">Six documentation: <code>six.PY2</code></a></li>
<li><a href=""https://six.readthedocs.io/#six.PY3"">Six documentation: <code>six.PY3</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-info1-cmp-int/,YTT203,sys-version-info1-cmp-int,"<code>sys.version_info[1]</code> compared to integer (python4), compare <code>sys.version_info</code> to tuple",Rule is stable,Automatic fix not available,"What it does#
Checks for comparisons that test sys.version_info[1] against an integer.
","Why is this bad?#
Comparisons based on the current minor version number alone can cause
subtle bugs and would likely lead to unintended effects if the Python
major version number were ever incremented (e.g., to Python 4).
Instead, compare sys.version_info to a tuple, including the major and
minor version numbers, to future-proof the code.
","----neg----:
import sys

if sys.version_info[1] < 7:
    print(""Python 3.6 or earlier."")  # This will be printed on Python 4.0.
----pos----:
import sys

if sys.version_info < (3, 7):
    print(""Python 3.6 or earlier."")
",,"
<h1 id=""sys-version-info1-cmp-int-ytt203"">sys-version-info1-cmp-int (YTT203)<a class=""headerlink"" href=""#sys-version-info1-cmp-int-ytt203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-info-minor-cmp-int/,YTT204,sys-version-info-minor-cmp-int,"<code>sys.version_info.minor</code> compared to integer (python4), compare <code>sys.version_info</code> to tuple",Rule is stable,Automatic fix not available,"What it does#
Checks for comparisons that test sys.version_info.minor against an integer.
","Why is this bad?#
Comparisons based on the current minor version number alone can cause
subtle bugs and would likely lead to unintended effects if the Python
major version number were ever incremented (e.g., to Python 4).
Instead, compare sys.version_info to a tuple, including the major and
minor version numbers, to future-proof the code.
","----neg----:
import sys

if sys.version_info.minor < 7:
    print(""Python 3.6 or earlier."")  # This will be printed on Python 4.0.
----pos----:
import sys

if sys.version_info < (3, 7):
    print(""Python 3.6 or earlier."")
",,"
<h1 id=""sys-version-info-minor-cmp-int-ytt204"">sys-version-info-minor-cmp-int (YTT204)<a class=""headerlink"" href=""#sys-version-info-minor-cmp-int-ytt204"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version0/,YTT301,sys-version0,"<code>sys.version[0]</code> referenced (python10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of sys.version[0].
","Why is this bad?#
If the current major or minor version consists of multiple digits,
sys.version[0] will select the first digit of the major version number
only (e.g., ""3.10"" would evaluate to ""1""). This is likely unintended,
and can lead to subtle bugs if the version string is used to test against a
major version number.
Instead, use sys.version_info.major to access the current major version
number.
","----neg----:
import sys

sys.version[0]  # If using Python 10, this evaluates to ""1"".
----pos----:
import sys

f""{sys.version_info.major}""  # If using Python 10, this evaluates to ""10"".
",,"
<h1 id=""sys-version0-ytt301"">sys-version0 (YTT301)<a class=""headerlink"" href=""#sys-version0-ytt301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-cmp-str10/,YTT302,sys-version-cmp-str10,"<code>sys.version</code> compared to string (python10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for comparisons that test sys.version against string literals,
such that the comparison would fail if the major version number were
ever incremented to Python 10 or higher.
","Why is this bad?#
Comparing sys.version to a string is error-prone and may cause subtle
bugs, as the comparison will be performed lexicographically, not
semantically.
Instead, use sys.version_info to access the current major and minor
version numbers as a tuple, which can be compared to other tuples
without issue.
","----neg----:
import sys

sys.version >= ""3""  # `False` on Python 10.
----pos----:
import sys

sys.version_info >= (3,)  # `True` on Python 10.
",,"
<h1 id=""sys-version-cmp-str10-ytt302"">sys-version-cmp-str10 (YTT302)<a class=""headerlink"" href=""#sys-version-cmp-str10-ytt302"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-version-slice1/,YTT303,sys-version-slice1,"<code>sys.version[:1]</code> referenced (python10), use <code>sys.version_info</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of sys.version[:1].
","Why is this bad?#
If the major version number consists of more than one digit, this will
select the first digit of the major version number only (e.g., ""10.0""
would evaluate to ""1""). This is likely unintended, and can lead to subtle
bugs in future versions of Python if the version string is used to test
against a specific major version number.
Instead, use sys.version_info.major to access the current major version
number.
","----neg----:
import sys

sys.version[:1]  # If using Python 10, this evaluates to ""1"".
----pos----:
import sys

f""{sys.version_info.major}""  # If using Python 10, this evaluates to ""10"".
",,"
<h1 id=""sys-version-slice1-ytt303"">sys-version-slice1 (YTT303)<a class=""headerlink"" href=""#sys-version-slice1-ytt303"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-2020</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version"">Python documentation: <code>sys.version</code></a></li>
<li><a href=""https://docs.python.org/3/library/sys.html#sys.version_info"">Python documentation: <code>sys.version_info</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/missing-type-function-argument/,ANN001,missing-type-function-argument,Missing type annotation for function argument <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that function arguments have type annotations.
","Why is this bad?#
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.
","----neg----:
def foo(x):
    ...
----pos----:
def foo(x: int):
    ...
",,"
<h1 id=""missing-type-function-argument-ann001"">missing-type-function-argument (ANN001)<a class=""headerlink"" href=""#missing-type-function-argument-ann001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-type-args/,ANN002,missing-type-args,Missing type annotation for <code>*{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that function *args arguments have type annotations.
","Why is this bad?#
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.
","----neg----:
def foo(*args):
    ...
----pos----:
def foo(*args: int):
    ...
",,"
<h1 id=""missing-type-args-ann002"">missing-type-args (ANN002)<a class=""headerlink"" href=""#missing-type-args-ann002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-type-kwargs/,ANN003,missing-type-kwargs,Missing type annotation for <code>**{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that function **kwargs arguments have type annotations.
","Why is this bad?#
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.
","----neg----:
def foo(**kwargs):
    ...
----pos----:
def foo(**kwargs: int):
    ...
",,"
<h1 id=""missing-type-kwargs-ann003"">missing-type-kwargs (ANN003)<a class=""headerlink"" href=""#missing-type-kwargs-ann003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-type-self/,ANN101,missing-type-self,"<span style=""opacity: 0.8"" title=""This rule has been deprecated"">Missing type annotation for <code>{name}</code> in method</span>",Rule has been deprecated,Automatic fix not available,"What it does#
Checks that instance method self arguments have type annotations.
","Why is this bad?#
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.
Note that many type checkers will infer the type of self automatically, so this
annotation is not strictly necessary.
","----neg----:
class Foo:
    def bar(self):
        ...
----pos----:
class Foo:
    def bar(self: ""Foo""):
        ...
",,"
<h1 id=""missing-type-self-ann101"">missing-type-self (ANN101)<a class=""headerlink"" href=""#missing-type-self-ann101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p><strong>Warning: This rule is deprecated and will be removed in a future release.</strong></p>
<h2 id=""deprecation"">Deprecation<a class=""headerlink"" href=""#deprecation"" title=""Permanent link"">#</a></h2>
<p>This rule is commonly disabled because type checkers can infer this type without annotation.
It will be removed in a future release.</p>
"
https://docs.astral.sh/ruff/rules/missing-type-cls/,ANN102,missing-type-cls,"<span style=""opacity: 0.8"" title=""This rule has been deprecated"">Missing type annotation for <code>{name}</code> in classmethod</span>",Rule has been deprecated,Automatic fix not available,"What it does#
Checks that class method cls arguments have type annotations.
","Why is this bad?#
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.
Note that many type checkers will infer the type of cls automatically, so this
annotation is not strictly necessary.
","----neg----:
class Foo:
    @classmethod
    def bar(cls):
        ...
----pos----:
class Foo:
    @classmethod
    def bar(cls: Type[""Foo""]):
        ...
",,"
<h1 id=""missing-type-cls-ann102"">missing-type-cls (ANN102)<a class=""headerlink"" href=""#missing-type-cls-ann102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p><strong>Warning: This rule is deprecated and will be removed in a future release.</strong></p>
<h2 id=""deprecation"">Deprecation<a class=""headerlink"" href=""#deprecation"" title=""Permanent link"">#</a></h2>
<p>This rule is commonly disabled because type checkers can infer this type without annotation.
It will be removed in a future release.</p>
"
https://docs.astral.sh/ruff/rules/missing-return-type-undocumented-public-function/,ANN201,missing-return-type-undocumented-public-function,Missing return type annotation for public function <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks that public functions and methods have return type annotations.
","Why is this bad?#
Type annotations are a good way to document the return types of functions. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any returned values, and the types expected by callers, match expectation.
","----neg----:
def add(a, b):
    return a + b
----pos----:
def add(a: int, b: int) -> int:
    return a + b
",,"
<h1 id=""missing-return-type-undocumented-public-function-ann201"">missing-return-type-undocumented-public-function (ANN201)<a class=""headerlink"" href=""#missing-return-type-undocumented-public-function-ann201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/missing-return-type-private-function/,ANN202,missing-return-type-private-function,Missing return type annotation for private function <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks that private functions and methods have return type annotations.
","Why is this bad?#
Type annotations are a good way to document the return types of functions. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any returned values, and the types expected by callers, match expectation.
","----neg----:
def _add(a, b):
    return a + b
----pos----:
def _add(a: int, b: int) -> int:
    return a + b
",,"
<h1 id=""missing-return-type-private-function-ann202"">missing-return-type-private-function (ANN202)<a class=""headerlink"" href=""#missing-return-type-private-function-ann202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/missing-return-type-special-method/,ANN204,missing-return-type-special-method,Missing return type annotation for special method <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks that ""special"" methods, like __init__, __new__, and __call__, have
return type annotations.
","Why is this bad?#
Type annotations are a good way to document the return types of functions. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any returned values, and the types expected by callers, match expectation.
Note that type checkers often allow you to omit the return type annotation for
__init__ methods, as long as at least one argument has a type annotation. To
opt in to this behavior, use the mypy-init-return setting in your pyproject.toml
or ruff.toml file:
[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

","----neg----:
class Foo:
    def __init__(self, x: int):
        self.x = x
----pos----:
class Foo:
    def __init__(self, x: int) -> None:
        self.x = x
",,"
<h1 id=""missing-return-type-special-method-ann204"">missing-return-type-special-method (ANN204)<a class=""headerlink"" href=""#missing-return-type-special-method-ann204"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/missing-return-type-static-method/,ANN205,missing-return-type-static-method,Missing return type annotation for staticmethod <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks that static methods have return type annotations.
","Why is this bad?#
Type annotations are a good way to document the return types of functions. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any returned values, and the types expected by callers, match expectation.
","----neg----:
class Foo:
    @staticmethod
    def bar():
        return 1
----pos----:
class Foo:
    @staticmethod
    def bar() -> int:
        return 1
",,"
<h1 id=""missing-return-type-static-method-ann205"">missing-return-type-static-method (ANN205)<a class=""headerlink"" href=""#missing-return-type-static-method-ann205"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/missing-return-type-class-method/,ANN206,missing-return-type-class-method,Missing return type annotation for classmethod <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks that class methods have return type annotations.
","Why is this bad?#
Type annotations are a good way to document the return types of functions. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any returned values, and the types expected by callers, match expectation.
","----neg----:
class Foo:
    @classmethod
    def bar(cls):
        return 1
----pos----:
class Foo:
    @classmethod
    def bar(cls) -> int:
        return 1
",,"
<h1 id=""missing-return-type-class-method-ann206"">missing-return-type-class-method (ANN206)<a class=""headerlink"" href=""#missing-return-type-class-method-ann206"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/any-type/,ANN401,any-type,Dynamically typed expressions (typing.Any) are disallowed in <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that function arguments are annotated with a more specific type than
Any.
","Why is this bad?#
Any is a special type indicating an unconstrained type. When an
expression is annotated with type Any, type checkers will allow all
operations on it.
It's better to be explicit about the type of an expression, and to use
Any as an ""escape hatch"" only when it is really needed.
","----neg----:
def foo(x: Any):
    ...
----pos----:
def foo(x: int):
    ...
----other----:
Type aliases are unsupported and can lead to false positives.
For example, the following will trigger this rule inadvertently:
from typing import Any

MyAny = Any


def foo(x: MyAny):
    ...

",,"
<h1 id=""any-type-ann401"">any-type (ANN401)<a class=""headerlink"" href=""#any-type-ann401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-annotations</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.python.org/dev/peps/pep-0484/#the-any-type"">PEP 484</a></li>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Any"">Python documentation: <code>typing.Any</code></a></li>
<li><a href=""https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-any-type"">Mypy documentation: The Any type</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blocking-http-call-in-async-function/,ASYNC100,blocking-http-call-in-async-function,Async functions should not call blocking HTTP methods,Rule is stable,Automatic fix not available,"What it does#
Checks that async functions do not contain blocking HTTP calls.
","Why is this bad?#
Blocking an async function via a blocking HTTP call will block the entire
event loop, preventing it from executing other tasks while waiting for the
HTTP response, negating the benefits of asynchronous programming.
Instead of making a blocking HTTP call, use an asynchronous HTTP client
library such as aiohttp or httpx.
","----neg----:
async def fetch():
    urllib.request.urlopen(""https://example.com/foo/bar"").read()
----pos----:
async def fetch():
    async with aiohttp.ClientSession() as session:
        async with session.get(""https://example.com/foo/bar"") as resp:
            ...
",,"
<h1 id=""blocking-http-call-in-async-function-async100"">blocking-http-call-in-async-function (ASYNC100)<a class=""headerlink"" href=""#blocking-http-call-in-async-function-async100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-async</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/open-sleep-or-subprocess-in-async-function/,ASYNC101,open-sleep-or-subprocess-in-async-function,"Async functions should not call <code>open</code>, <code>time.sleep</code>, or <code>subprocess</code> methods",Rule is stable,Automatic fix not available,"What it does#
Checks that async functions do not contain calls to open, time.sleep,
or subprocess methods.
","Why is this bad?#
Blocking an async function via a blocking call will block the entire
event loop, preventing it from executing other tasks while waiting for the
call to complete, negating the benefits of asynchronous programming.
Instead of making a blocking call, use an equivalent asynchronous library
or function.
","----neg----:
async def foo():
    time.sleep(1000)
----pos----:
async def foo():
    await asyncio.sleep(1000)
",,"
<h1 id=""open-sleep-or-subprocess-in-async-function-async101"">open-sleep-or-subprocess-in-async-function (ASYNC101)<a class=""headerlink"" href=""#open-sleep-or-subprocess-in-async-function-async101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-async</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/blocking-os-call-in-async-function/,ASYNC102,blocking-os-call-in-async-function,Async functions should not call synchronous <code>os</code> methods,Rule is stable,Automatic fix not available,"What it does#
Checks that async functions do not contain calls to blocking synchronous
process calls via the os module.
","Why is this bad?#
Blocking an async function via a blocking call will block the entire
event loop, preventing it from executing other tasks while waiting for the
call to complete, negating the benefits of asynchronous programming.
Instead of making a blocking call, use an equivalent asynchronous library
or function.
","----neg----:
async def foo():
    os.popen()
----pos----:
def foo():
    os.popen()
",,"
<h1 id=""blocking-os-call-in-async-function-async102"">blocking-os-call-in-async-function (ASYNC102)<a class=""headerlink"" href=""#blocking-os-call-in-async-function-async102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-async</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/trio-timeout-without-await/,TRIO100,trio-timeout-without-await,"A <code>with {method_name}(...):</code> context does not contain any <code>await</code> statements. This makes it pointless, as the timeout can only be triggered by a checkpoint.",Rule is stable,Automatic fix not available,"What it does#
Checks for trio functions that should contain await but don't.
","Why is this bad?#
Some trio context managers, such as trio.fail_after and
trio.move_on_after, have no effect unless they contain an await
statement. The use of such functions without an await statement is
likely a mistake.
","----neg----:
async def func():
    with trio.move_on_after(2):
        do_something()
----pos----:
async def func():
    with trio.move_on_after(2):
        do_something()
        await awaitable()
",,"
<h1 id=""trio-timeout-without-await-trio100"">trio-timeout-without-await (TRIO100)<a class=""headerlink"" href=""#trio-timeout-without-await-trio100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-trio</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/trio-sync-call/,TRIO105,trio-sync-call,Call to <code>{method_name}</code> is not immediately awaited,Rule is stable,Automatic fix available,"What it does#
Checks for calls to trio functions that are not immediately awaited.
","Why is this bad?#
Many of the functions exposed by trio are asynchronous, and must be awaited
to take effect. Calling a trio function without an await can lead to
RuntimeWarning diagnostics and unexpected behaviour.
","----neg----:
async def double_sleep(x):
    trio.sleep(2 * x)
----pos----:
async def double_sleep(x):
    await trio.sleep(2 * x)
----other----:
This rule's fix is marked as unsafe, as adding an await to a function
call changes its semantics and runtime behavior.
",,"
<h1 id=""trio-sync-call-trio105"">trio-sync-call (TRIO105)<a class=""headerlink"" href=""#trio-sync-call-trio105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-trio</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/trio-async-function-with-timeout/,TRIO109,trio-async-function-with-timeout,Prefer <code>trio.fail_after</code> and <code>trio.move_on_after</code> over manual <code>async</code> timeout behavior,Rule is stable,Automatic fix not available,"What it does#
Checks for async functions with a timeout argument.
","Why is this bad?#
Rather than implementing asynchronous timeout behavior manually, prefer
trio's built-in timeout functionality, available as trio.fail_after,
trio.move_on_after, trio.fail_at, and trio.move_on_at.
Known problems#
To avoid false positives, this rule is only enabled if trio is imported
in the module.
","----neg----:
async def func():
    await long_running_task(timeout=2)
----pos----:
async def func():
    with trio.fail_after(2):
        await long_running_task()
",,"
<h1 id=""trio-async-function-with-timeout-trio109"">trio-async-function-with-timeout (TRIO109)<a class=""headerlink"" href=""#trio-async-function-with-timeout-trio109"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-trio</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/trio-unneeded-sleep/,TRIO110,trio-unneeded-sleep,Use <code>trio.Event</code> instead of awaiting <code>trio.sleep</code> in a <code>while</code> loop,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of trio.sleep in a while loop.
","Why is this bad?#
Instead of sleeping in a while loop, and waiting for a condition
to become true, it's preferable to wait() on a trio.Event.
","----neg----:
DONE = False


async def func():
    while not DONE:
        await trio.sleep(1)
----pos----:
DONE = trio.Event()


async def func():
    await DONE.wait()
",,"
<h1 id=""trio-unneeded-sleep-trio110"">trio-unneeded-sleep (TRIO110)<a class=""headerlink"" href=""#trio-unneeded-sleep-trio110"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-trio</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/trio-zero-sleep-call/,TRIO115,trio-zero-sleep-call,Use <code>trio.lowlevel.checkpoint()</code> instead of <code>trio.sleep(0)</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of trio.sleep(0).
","Why is this bad?#
trio.sleep(0) is equivalent to calling trio.lowlevel.checkpoint().
However, the latter better conveys the intent of the code.
","----neg----:
import trio


async def func():
    await trio.sleep(0)
----pos----:
import trio


async def func():
    await trio.lowlevel.checkpoint()
",,"
<h1 id=""trio-zero-sleep-call-trio115"">trio-zero-sleep-call (TRIO115)<a class=""headerlink"" href=""#trio-zero-sleep-call-trio115"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-trio</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/assert/,S101,assert,Use of <code>assert</code> detected,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the assert keyword.
","Why is this bad?#
Assertions are removed when Python is run with optimization requested
(i.e., when the -O flag is present), which is a common practice in
production environments. As such, assertions should not be used for runtime
validation of user input or to enforce  interface constraints.
Consider raising a meaningful error instead of using assert.
","----neg----:
assert x > 0, ""Expected positive value.""
----pos----:
if not x > 0:
    raise ValueError(""Expected positive value."")

# or even better:
if x <= 0:
    raise ValueError(""Expected positive value."")
",,"
<h1 id=""assert-s101"">assert (S101)<a class=""headerlink"" href=""#assert-s101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/exec-builtin/,S102,exec-builtin,Use of <code>exec</code> detected,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the builtin exec function.
","Why is this bad?#
The exec() function is insecure as it allows for arbitrary code
execution.
","exec(""print('Hello World')"")
",,"
<h1 id=""exec-builtin-s102"">exec-builtin (S102)<a class=""headerlink"" href=""#exec-builtin-s102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#exec"">Python documentation: <code>exec</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/78.html"">Common Weakness Enumeration: CWE-78</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/bad-file-permissions/,S103,bad-file-permissions,<code>os.chmod</code> setting a permissive mask <code>{mask:#o}</code> on file or directory,Rule is stable,Automatic fix not available,"What it does#
Checks for files with overly permissive permissions.
","Why is this bad?#
Overly permissive file permissions may allow unintended access and
arbitrary code execution.
","----neg----:
import os

os.chmod(""/etc/secrets.txt"", 0o666)  # rw-rw-rw-
----pos----:
import os

os.chmod(""/etc/secrets.txt"", 0o600)  # rw-------
",,"
<h1 id=""bad-file-permissions-s103"">bad-file-permissions (S103)<a class=""headerlink"" href=""#bad-file-permissions-s103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/os.html#os.chmod"">Python documentation: <code>os.chmod</code></a></li>
<li><a href=""https://docs.python.org/3/library/stat.html"">Python documentation: <code>stat</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/732.html"">Common Weakness Enumeration: CWE-732</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-bind-all-interfaces/,S104,hardcoded-bind-all-interfaces,Possible binding to all interfaces,Rule is stable,Automatic fix not available,"What it does#
Checks for hardcoded bindings to all network interfaces (0.0.0.0).
","Why is this bad?#
Binding to all network interfaces is insecure as it allows access from
unintended interfaces, which may be poorly secured or unauthorized.
Instead, bind to specific interfaces.
","----neg----:
ALLOWED_HOSTS = [""0.0.0.0""]
----pos----:
ALLOWED_HOSTS = [""127.0.0.1"", ""localhost""]
",,"
<h1 id=""hardcoded-bind-all-interfaces-s104"">hardcoded-bind-all-interfaces (S104)<a class=""headerlink"" href=""#hardcoded-bind-all-interfaces-s104"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/200.html"">Common Weakness Enumeration: CWE-200</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-password-string/,S105,hardcoded-password-string,"Possible hardcoded password assigned to: ""{}""",Rule is stable,Automatic fix not available,"What it does#
Checks for potential uses of hardcoded passwords in strings.
","Why is this bad?#
Including a hardcoded password in source code is a security risk, as an
attacker could discover the password and use it to gain unauthorized
access.
Instead, store passwords and other secrets in configuration files,
environment variables, or other sources that are excluded from version
control.
","----neg----:
SECRET_KEY = ""hunter2""
----pos----:
import os

SECRET_KEY = os.environ[""SECRET_KEY""]
",,"
<h1 id=""hardcoded-password-string-s105"">hardcoded-password-string (S105)<a class=""headerlink"" href=""#hardcoded-password-string-s105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/259.html"">Common Weakness Enumeration: CWE-259</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-password-func-arg/,S106,hardcoded-password-func-arg,"Possible hardcoded password assigned to argument: ""{}""",Rule is stable,Automatic fix not available,"What it does#
Checks for potential uses of hardcoded passwords in function calls.
","Why is this bad?#
Including a hardcoded password in source code is a security risk, as an
attacker could discover the password and use it to gain unauthorized
access.
Instead, store passwords and other secrets in configuration files,
environment variables, or other sources that are excluded from version
control.
","----neg----:
connect_to_server(password=""hunter2"")
----pos----:
import os

connect_to_server(password=os.environ[""PASSWORD""])
",,"
<h1 id=""hardcoded-password-func-arg-s106"">hardcoded-password-func-arg (S106)<a class=""headerlink"" href=""#hardcoded-password-func-arg-s106"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/259.html"">Common Weakness Enumeration: CWE-259</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-password-default/,S107,hardcoded-password-default,"Possible hardcoded password assigned to function default: ""{}""",Rule is stable,Automatic fix not available,"What it does#
Checks for potential uses of hardcoded passwords in function argument
defaults.
","Why is this bad?#
Including a hardcoded password in source code is a security risk, as an
attacker could discover the password and use it to gain unauthorized
access.
Instead, store passwords and other secrets in configuration files,
environment variables, or other sources that are excluded from version
control.
","----neg----:
def connect_to_server(password=""hunter2""):
    ...
----pos----:
import os


def connect_to_server(password=os.environ[""PASSWORD""]):
    ...
",,"
<h1 id=""hardcoded-password-default-s107"">hardcoded-password-default (S107)<a class=""headerlink"" href=""#hardcoded-password-default-s107"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/259.html"">Common Weakness Enumeration: CWE-259</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-temp-file/,S108,hardcoded-temp-file,"Probable insecure usage of temporary file or directory: ""{}""",Rule is stable,Automatic fix not available,"What it does#
Checks for the use of hardcoded temporary file or directory paths.
","Why is this bad?#
The use of hardcoded paths for temporary files can be insecure. If an
attacker discovers the location of a hardcoded path, they can replace the
contents of the file or directory with a malicious payload.
Other programs may also read or write contents to these hardcoded paths,
causing unexpected behavior.
","----neg----:
with open(""/tmp/foo.txt"", ""w"") as file:
    ...
----pos----:
import tempfile

with tempfile.NamedTemporaryFile() as file:
    ...
",,"
<h1 id=""hardcoded-temp-file-s108"">hardcoded-temp-file (S108)<a class=""headerlink"" href=""#hardcoded-temp-file-s108"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/377.html"">Common Weakness Enumeration: CWE-377</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/379.html"">Common Weakness Enumeration: CWE-379</a></li>
<li><a href=""https://docs.python.org/3/library/tempfile.html"">Python documentation: <code>tempfile</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/try-except-pass/,S110,try-except-pass,"<code>try</code>-<code>except</code>-<code>pass</code> detected, consider logging the exception",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the try-except-pass pattern.
","Why is this bad?#
The try-except-pass pattern suppresses all exceptions. Suppressing
exceptions may hide errors that could otherwise reveal unexpected behavior,
security vulnerabilities, or malicious activity. Instead, consider logging
the exception.
","----neg----:
try:
    ...
except Exception:
    pass
----pos----:
import logging

try:
    ...
except Exception as exc:
    logging.exception(""Exception occurred"")
",,"
<h1 id=""try-except-pass-s110"">try-except-pass (S110)<a class=""headerlink"" href=""#try-except-pass-s110"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/703.html"">Common Weakness Enumeration: CWE-703</a></li>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/try-except-continue/,S112,try-except-continue,"<code>try</code>-<code>except</code>-<code>continue</code> detected, consider logging the exception",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the try-except-continue pattern.
","Why is this bad?#
The try-except-continue pattern suppresses all exceptions.
Suppressing exceptions may hide errors that could otherwise reveal
unexpected behavior, security vulnerabilities, or malicious activity.
Instead, consider logging the exception.
","----neg----:
import logging

while predicate:
    try:
        ...
    except Exception:
        continue
----pos----:
import logging

while predicate:
    try:
        ...
    except Exception as exc:
        logging.exception(""Error occurred"")
",,"
<h1 id=""try-except-continue-s112"">try-except-continue (S112)<a class=""headerlink"" href=""#try-except-continue-s112"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/703.html"">Common Weakness Enumeration: CWE-703</a></li>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/request-without-timeout/,S113,request-without-timeout,Probable use of requests call without timeout,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the Python requests module that omit the timeout
parameter.
","Why is this bad?#
The timeout parameter is used to set the maximum time to wait for a
response from the server. By omitting the timeout parameter, the program
may hang indefinitely while awaiting a response.
","----neg----:
import requests

requests.get(""https://www.example.com/"")
----pos----:
import requests

requests.get(""https://www.example.com/"", timeout=10)
",,"
<h1 id=""request-without-timeout-s113"">request-without-timeout (S113)<a class=""headerlink"" href=""#request-without-timeout-s113"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://requests.readthedocs.io/en/latest/user/advanced/#timeouts"">Requests documentation: Timeouts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/flask-debug-true/,S201,flask-debug-true,Use of <code>debug=True</code> in Flask app detected,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of debug=True in Flask.
","Why is this bad?#
Enabling debug mode shows an interactive debugger in the browser if an
error occurs, and allows running arbitrary Python code from the browser.
This could leak sensitive information, or allow an attacker to run
arbitrary code.
","----neg----:
import flask

app = Flask()

app.run(debug=True)
----pos----:
import flask

app = Flask()

app.run(debug=os.environ[""ENV""] == ""dev"")
",,"
<h1 id=""flask-debug-true-s201"">flask-debug-true (S201)<a class=""headerlink"" href=""#flask-debug-true-s201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://flask.palletsprojects.com/en/latest/quickstart/#debug-mode"">Flask documentation: Debug Mode</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/tarfile-unsafe-members/,S202,tarfile-unsafe-members,Uses of <code>tarfile.extractall()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of tarfile.extractall.
","Why is this bad?#
Extracting archives from untrusted sources without prior inspection is
a security risk, as maliciously crafted archives may contain files that
will be written outside of the target directory. For example, the archive
could include files with absolute paths (e.g., /etc/passwd), or relative
paths with parent directory references (e.g., ../etc/passwd).
On Python 3.12 and later, use filter='data' to prevent the most dangerous
security issues (see: PEP 706). On earlier versions, set the members
argument to a trusted subset of the archive's members.
","import tarfile
import tempfile

tar = tarfile.open(filename)
tar.extractall(path=tempfile.mkdtemp())
tar.close()
",,"
<h1 id=""tarfile-unsafe-members-s202"">tarfile-unsafe-members (S202)<a class=""headerlink"" href=""#tarfile-unsafe-members-s202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/22.html"">Common Weakness Enumeration: CWE-22</a></li>
<li><a href=""https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall"">Python Documentation: <code>TarFile.extractall</code></a></li>
<li><a href=""https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter"">Python Documentation: Extraction filters</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-pickle-usage/,S301,suspicious-pickle-usage,"<code>pickle</code> and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue",Rule is stable,Automatic fix not available,"What it does#
Checks for calls to pickle functions or modules that wrap them.
","Why is this bad?#
Deserializing untrusted data with pickle and other deserialization
modules is insecure as it can allow for the creation of arbitrary objects,
which can then be used to achieve arbitrary code execution and otherwise
unexpected behavior.
Avoid deserializing untrusted data with pickle and other deserialization
modules. Instead, consider safer formats, such as JSON.
If you must deserialize untrusted data with pickle, consider signing the
data with a secret key and verifying the signature before deserializing the
payload, This will prevent an attacker from injecting arbitrary objects
into the serialized data.
","----neg----:
import pickle

with open(""foo.pickle"", ""rb"") as file:
    foo = pickle.load(file)
----pos----:
import json

with open(""foo.json"", ""rb"") as file:
    foo = json.load(file)
",,"
<h1 id=""suspicious-pickle-usage-s301"">suspicious-pickle-usage (S301)<a class=""headerlink"" href=""#suspicious-pickle-usage-s301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pickle.html"">Python documentation: <code>pickle</code> — Python object serialization</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/502.html"">Common Weakness Enumeration: CWE-502</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-marshal-usage/,S302,suspicious-marshal-usage,Deserialization with the <code>marshal</code> module is possibly dangerous,Rule is stable,Automatic fix not available,"What it does#
Checks for calls to marshal functions.
","Why is this bad?#
Deserializing untrusted data with marshal is insecure, as it can allow for
the creation of arbitrary objects, which can then be used to achieve
arbitrary code execution and otherwise unexpected behavior.
Avoid deserializing untrusted data with marshal. Instead, consider safer
formats, such as JSON.
If you must deserialize untrusted data with marshal, consider signing the
data with a secret key and verifying the signature before deserializing the
payload. This will prevent an attacker from injecting arbitrary objects
into the serialized data.
","----neg----:
import marshal

with open(""foo.marshal"", ""rb"") as file:
    foo = marshal.load(file)
----pos----:
import json

with open(""foo.json"", ""rb"") as file:
    foo = json.load(file)
",,"
<h1 id=""suspicious-marshal-usage-s302"">suspicious-marshal-usage (S302)<a class=""headerlink"" href=""#suspicious-marshal-usage-s302"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/marshal.html"">Python documentation: <code>marshal</code> — Internal Python object serialization</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/502.html"">Common Weakness Enumeration: CWE-502</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-insecure-hash-usage/,S303,suspicious-insecure-hash-usage,"Use of insecure MD2, MD4, MD5, or SHA1 hash function",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of weak or broken cryptographic hash functions.
","Why is this bad?#
Weak or broken cryptographic hash functions may be susceptible to
collision attacks (where two different inputs produce the same hash) or
pre-image attacks (where an attacker can find an input that produces a
given hash). This can lead to security vulnerabilities in applications
that rely on these hash functions.
Avoid using weak or broken cryptographic hash functions in security
contexts. Instead, use a known secure hash function such as SHA-256.
","----neg----:
from cryptography.hazmat.primitives import hashes

digest = hashes.Hash(hashes.MD5())
digest.update(b""Hello, world!"")
digest.finalize()
----pos----:
from cryptography.hazmat.primitives import hashes

digest = hashes.Hash(hashes.SHA256())
digest.update(b""Hello, world!"")
digest.finalize()
",,"
<h1 id=""suspicious-insecure-hash-usage-s303"">suspicious-insecure-hash-usage (S303)<a class=""headerlink"" href=""#suspicious-insecure-hash-usage-s303"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/hashlib.html"">Python documentation: <code>hashlib</code> — Secure hashes and message digests</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/327.html"">Common Weakness Enumeration: CWE-327</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/328.html"">Common Weakness Enumeration: CWE-328</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/916.html"">Common Weakness Enumeration: CWE-916</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-insecure-cipher-usage/,S304,suspicious-insecure-cipher-usage,"Use of insecure cipher, replace with a known secure cipher such as AES",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of weak or broken cryptographic ciphers.
","Why is this bad?#
Weak or broken cryptographic ciphers may be susceptible to attacks that
allow an attacker to decrypt ciphertext without knowing the key or
otherwise compromise the security of the cipher, such as forgeries.
Use strong, modern cryptographic ciphers instead of weak or broken ones.
","----neg----:
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms

algorithm = algorithms.ARC4(key)
cipher = Cipher(algorithm, mode=None)
encryptor = cipher.encryptor()
----pos----:
from cryptography.fernet import Fernet

fernet = Fernet(key)
",,"
<h1 id=""suspicious-insecure-cipher-usage-s304"">suspicious-insecure-cipher-usage (S304)<a class=""headerlink"" href=""#suspicious-insecure-cipher-usage-s304"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/327.html"">Common Weakness Enumeration: CWE-327</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-insecure-cipher-mode-usage/,S305,suspicious-insecure-cipher-mode-usage,"Use of insecure cipher mode, replace with a known secure cipher such as AES",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of weak or broken cryptographic cipher modes.
","Why is this bad?#
Weak or broken cryptographic ciphers may be susceptible to attacks that
allow an attacker to decrypt ciphertext without knowing the key or
otherwise compromise the security of the cipher, such as forgeries.
Use strong, modern cryptographic ciphers instead of weak or broken ones.
","----neg----:
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

algorithm = algorithms.ARC4(key)
cipher = Cipher(algorithm, mode=modes.ECB(iv))
encryptor = cipher.encryptor()
----pos----:
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

algorithm = algorithms.ARC4(key)
cipher = Cipher(algorithm, mode=modes.CTR(iv))
encryptor = cipher.encryptor()
",,"
<h1 id=""suspicious-insecure-cipher-mode-usage-s305"">suspicious-insecure-cipher-mode-usage (S305)<a class=""headerlink"" href=""#suspicious-insecure-cipher-mode-usage-s305"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/327.html"">Common Weakness Enumeration: CWE-327</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-mktemp-usage/,S306,suspicious-mktemp-usage,Use of insecure and deprecated function (<code>mktemp</code>),Rule is stable,Automatic fix not available,"What it does#
Checks for uses of tempfile.mktemp.
","Why is this bad?#
tempfile.mktemp returns a pathname of a file that does not exist at the
time the call is made; then, the caller is responsible for creating the
file and subsequently using it. This is insecure because another process
could create a file with the same name between the time the function
returns and the time the caller creates the file.
tempfile.mktemp is deprecated in favor of tempfile.mkstemp which
creates the file when it is called. Consider using tempfile.mkstemp
instead, either directly or via a context manager such as
tempfile.TemporaryFile.
","----neg----:
import tempfile

tmp_file = tempfile.mktemp()
with open(tmp_file, ""w"") as file:
    file.write(""Hello, world!"")
----pos----:
import tempfile

with tempfile.TemporaryFile() as file:
    file.write(""Hello, world!"")
",,"
<h1 id=""suspicious-mktemp-usage-s306"">suspicious-mktemp-usage (S306)<a class=""headerlink"" href=""#suspicious-mktemp-usage-s306"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/tempfile.html#tempfile.mktemp"">Python documentation:<code>mktemp</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-eval-usage/,S307,suspicious-eval-usage,Use of possibly insecure function; consider using <code>ast.literal_eval</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the builtin eval() function.
","Why is this bad?#
The eval() function is insecure as it enables arbitrary code execution.
If you need to evaluate an expression from a string, consider using
ast.literal_eval() instead, which will raise an exception if the
expression is not a valid Python literal.
","----neg----:
x = eval(input(""Enter a number: ""))
----pos----:
from ast import literal_eval

x = literal_eval(input(""Enter a number: ""))
",,"
<h1 id=""suspicious-eval-usage-s307"">suspicious-eval-usage (S307)<a class=""headerlink"" href=""#suspicious-eval-usage-s307"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#eval"">Python documentation: <code>eval</code></a></li>
<li><a href=""https://docs.python.org/3/library/ast.html#ast.literal_eval"">Python documentation: <code>literal_eval</code></a></li>
<li><a href=""https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html""><em>Eval really is dangerous</em> by Ned Batchelder</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-mark-safe-usage/,S308,suspicious-mark-safe-usage,Use of <code>mark_safe</code> may expose cross-site scripting vulnerabilities,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of calls to django.utils.safestring.mark_safe.
","Why is this bad?#
Cross-site scripting (XSS) vulnerabilities allow attackers to execute
arbitrary JavaScript. To guard against XSS attacks, Django templates
assumes that data is unsafe and automatically escapes malicious strings
before rending them.
django.utils.safestring.mark_safe marks a string as safe for use in HTML
templates, bypassing XSS protection. This is dangerous because it may allow
cross-site scripting attacks if the string is not properly escaped.
","----neg----:
from django.utils.safestring import mark_safe

content = mark_safe(""<script>alert('Hello, world!')</script>"")  # XSS.
----pos----:
content = ""<script>alert('Hello, world!')</script>""  # Safe if rendered.
",,"
<h1 id=""suspicious-mark-safe-usage-s308"">suspicious-mark-safe-usage (S308)<a class=""headerlink"" href=""#suspicious-mark-safe-usage-s308"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.safestring.mark_safe"">Django documentation: <code>mark_safe</code></a></li>
<li><a href=""https://docs.djangoproject.com/en/dev/topics/security/#cross-site-scripting-xss-protection"">Django documentation: Cross Site Scripting (XSS) protection</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/80.html"">Common Weakness Enumeration: CWE-80</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-url-open-usage/,S310,suspicious-url-open-usage,Audit URL open for permitted schemes. Allowing use of <code>file:</code> or custom schemes is often unexpected.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of URL open functions that unexpected schemes.
","Why is this bad?#
Some URL open functions allow the use of file: or custom schemes (for use
instead of http: or https:). An attacker may be able to use these
schemes to access or modify unauthorized resources, and cause unexpected
behavior.
To mitigate this risk, audit all uses of URL open functions and ensure that
only permitted schemes are used (e.g., allowing http: and https:, and
disallowing file: and ftp:).
","----neg----:
from urllib.request import urlopen

url = input(""Enter a URL: "")

with urlopen(url) as response:
    ...
----pos----:
from urllib.request import urlopen

url = input(""Enter a URL: "")

if not url.startswith((""http:"", ""https:"")):
    raise ValueError(""URL must start with 'http:' or 'https:'"")

with urlopen(url) as response:
    ...
",,"
<h1 id=""suspicious-url-open-usage-s310"">suspicious-url-open-usage (S310)<a class=""headerlink"" href=""#suspicious-url-open-usage-s310"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"">Python documentation: <code>urlopen</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-non-cryptographic-random-usage/,S311,suspicious-non-cryptographic-random-usage,Standard pseudo-random generators are not suitable for cryptographic purposes,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of cryptographically weak pseudo-random number generators.
","Why is this bad?#
Cryptographically weak pseudo-random number generators are insecure, as they
are easily predictable. This can allow an attacker to guess the generated
numbers and compromise the security of the system.
Instead, use a cryptographically secure pseudo-random number generator
(such as using the secrets module)
when generating random numbers for security purposes.
","----neg----:
import random

random.randrange(10)
----pos----:
import secrets

secrets.randbelow(10)
",,"
<h1 id=""suspicious-non-cryptographic-random-usage-s311"">suspicious-non-cryptographic-random-usage (S311)<a class=""headerlink"" href=""#suspicious-non-cryptographic-random-usage-s311"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/random.html"">Python documentation: <code>random</code> — Generate pseudo-random numbers</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-telnet-usage/,S312,suspicious-telnet-usage,Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol.,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of Telnet-related functions.
","Why is this bad?#
Telnet is considered insecure because it does not encrypt data sent over
the connection and is vulnerable to numerous attacks.
Instead, consider using a more secure protocol such as SSH.
",,,"
<h1 id=""suspicious-telnet-usage-s312"">suspicious-telnet-usage (S312)<a class=""headerlink"" href=""#suspicious-telnet-usage-s312"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/telnetlib.html"">Python documentation: <code>telnetlib</code> — Telnet client</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xmlc-element-tree-usage/,S313,suspicious-xmlc-element-tree-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.etree.cElementTree import parse

tree = parse(""untrusted.xml"")  # Vulnerable to XML attacks.
----pos----:
from defusedxml.cElementTree import parse

tree = parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xmlc-element-tree-usage-s313"">suspicious-xmlc-element-tree-usage (S313)<a class=""headerlink"" href=""#suspicious-xmlc-element-tree-usage-s313"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-element-tree-usage/,S314,suspicious-xml-element-tree-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.etree.ElementTree import parse

tree = parse(""untrusted.xml"")  # Vulnerable to XML attacks.
----pos----:
from defusedxml.ElementTree import parse

tree = parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xml-element-tree-usage-s314"">suspicious-xml-element-tree-usage (S314)<a class=""headerlink"" href=""#suspicious-xml-element-tree-usage-s314"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-expat-reader-usage/,S315,suspicious-xml-expat-reader-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.sax.expatreader import create_parser

parser = create_parser()
----pos----:
from defusedxml.sax import create_parser

parser = create_parser()
",,"
<h1 id=""suspicious-xml-expat-reader-usage-s315"">suspicious-xml-expat-reader-usage (S315)<a class=""headerlink"" href=""#suspicious-xml-expat-reader-usage-s315"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-expat-builder-usage/,S316,suspicious-xml-expat-builder-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.dom.expatbuilder import parse

parse(""untrusted.xml"")
----pos----:
from defusedxml.expatbuilder import parse

tree = parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xml-expat-builder-usage-s316"">suspicious-xml-expat-builder-usage (S316)<a class=""headerlink"" href=""#suspicious-xml-expat-builder-usage-s316"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-sax-usage/,S317,suspicious-xml-sax-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.sax import make_parser

make_parser()
----pos----:
from defusedxml.sax import make_parser

make_parser()
",,"
<h1 id=""suspicious-xml-sax-usage-s317"">suspicious-xml-sax-usage (S317)<a class=""headerlink"" href=""#suspicious-xml-sax-usage-s317"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-mini-dom-usage/,S318,suspicious-xml-mini-dom-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.dom.minidom import parse

content = parse(""untrusted.xml"")
----pos----:
from defusedxml.minidom import parse

content = parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xml-mini-dom-usage-s318"">suspicious-xml-mini-dom-usage (S318)<a class=""headerlink"" href=""#suspicious-xml-mini-dom-usage-s318"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-pull-dom-usage/,S319,suspicious-xml-pull-dom-usage,Using <code>xml</code> to parse untrusted data is known to be vulnerable to XML attacks; use <code>defusedxml</code> equivalents,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
Consider using the defusedxml package when parsing untrusted XML data,
to protect against XML attacks.
","----neg----:
from xml.dom.pulldom import parse

content = parse(""untrusted.xml"")
----pos----:
from defusedxml.pulldom import parse

content = parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xml-pull-dom-usage-s319"">suspicious-xml-pull-dom-usage (S319)<a class=""headerlink"" href=""#suspicious-xml-pull-dom-usage-s319"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/xml.html"">Python documentation: <code>xml</code> — XML processing modules</a></li>
<li><a href=""https://pypi.org/project/defusedxml/"">PyPI: <code>defusedxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-xmle-tree-usage/,S320,suspicious-xmle-tree-usage,Using <code>lxml</code> to parse untrusted data is known to be vulnerable to XML attacks,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of insecure XML parsers.
","Why is this bad?#
Many XML parsers are vulnerable to XML attacks (such as entity expansion),
which cause excessive memory and CPU usage by exploiting recursion. An
attacker could use such methods to access unauthorized resources.
","from lxml import etree

content = etree.parse(""untrusted.xml"")
",,"
<h1 id=""suspicious-xmle-tree-usage-s320"">suspicious-xmle-tree-usage (S320)<a class=""headerlink"" href=""#suspicious-xmle-tree-usage-s320"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pypi.org/project/lxml/"">PyPI: <code>lxml</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/400.html"">Common Weakness Enumeration: CWE-400</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/776.html"">Common Weakness Enumeration: CWE-776</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-ftp-lib-usage/,S321,suspicious-ftp-lib-usage,FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol.,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of FTP-related functions.
","Why is this bad?#
FTP is considered insecure as it does not encrypt data sent over the
connection and is thus vulnerable to numerous attacks.
Instead, consider using FTPS (which secures FTP using SSL/TLS) or SFTP.
",,,"
<h1 id=""suspicious-ftp-lib-usage-s321"">suspicious-ftp-lib-usage (S321)<a class=""headerlink"" href=""#suspicious-ftp-lib-usage-s321"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/ftplib.html"">Python documentation: <code>ftplib</code> — FTP protocol client</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-unverified-context-usage/,S323,suspicious-unverified-context-usage,Python allows using an insecure context via the <code>_create_unverified_context</code> that reverts to the previous behavior that does not validate certificates or perform hostname checks.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of ssl._create_unverified_context.
","Why is this bad?#
PEP 476 enabled certificate and hostname validation by default in Python
standard library HTTP clients. Previously, Python did not validate
certificates by default, which could allow an attacker to perform a ""man in
the middle"" attack by intercepting and modifying traffic between client and
server.
To support legacy environments, ssl._create_unverified_context reverts to
the previous behavior that does perform verification. Otherwise, use
ssl.create_default_context to create a secure context.
","----neg----:
import ssl

context = ssl._create_unverified_context()
----pos----:
import ssl

context = ssl.create_default_context()
",,"
<h1 id=""suspicious-unverified-context-usage-s323"">suspicious-unverified-context-usage (S323)<a class=""headerlink"" href=""#suspicious-unverified-context-usage-s323"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0476/#opting-out"">PEP 476 – Enabling certificate verification by default for stdlib http clients: Opting out</a></li>
<li><a href=""https://docs.python.org/3/library/ssl.html"">Python documentation: <code>ssl</code> — TLS/SSL wrapper for socket objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hashlib-insecure-hash-function/,S324,hashlib-insecure-hash-function,Probable use of insecure hash functions in <code>{library}</code>: <code>{string}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of weak or broken cryptographic hash functions in
hashlib and crypt libraries.
","Why is this bad?#
Weak or broken cryptographic hash functions may be susceptible to
collision attacks (where two different inputs produce the same hash) or
pre-image attacks (where an attacker can find an input that produces a
given hash). This can lead to security vulnerabilities in applications
that rely on these hash functions.
Avoid using weak or broken cryptographic hash functions in security
contexts. Instead, use a known secure hash function such as SHA256.
","----neg----:
import hashlib


def certificate_is_valid(certificate: bytes, known_hash: str) -> bool:
    hash = hashlib.md5(certificate).hexdigest()
    return hash == known_hash
----pos----:
import hashlib


def certificate_is_valid(certificate: bytes, known_hash: str) -> bool:
    hash = hashlib.sha256(certificate).hexdigest()
    return hash == known_hash
",,"
<h1 id=""hashlib-insecure-hash-function-s324"">hashlib-insecure-hash-function (S324)<a class=""headerlink"" href=""#hashlib-insecure-hash-function-s324"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/hashlib.html"">Python documentation: <code>hashlib</code> — Secure hashes and message digests</a></li>
<li><a href=""https://docs.python.org/3/library/crypt.html"">Python documentation: <code>crypt</code> — Function to check Unix passwords</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/327.html"">Common Weakness Enumeration: CWE-327</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/328.html"">Common Weakness Enumeration: CWE-328</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/916.html"">Common Weakness Enumeration: CWE-916</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-telnetlib-import/,S401,suspicious-telnetlib-import,<code>telnetlib</code> and related modules are considered insecure. Use SSH or another encrypted protocol.,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of thetelnetlib module.
","Why is this bad?#
Telnet is considered insecure. Instead, use SSH or another encrypted
protocol.
","import telnetlib
",,"
<h1 id=""suspicious-telnetlib-import-s401"">suspicious-telnetlib-import (S401)<a class=""headerlink"" href=""#suspicious-telnetlib-import-s401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-ftplib-import/,S402,suspicious-ftplib-import,"<code>ftplib</code> and related modules are considered insecure. Use SSH, SFTP, SCP, or another encrypted protocol.",Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the ftplib module.
","Why is this bad?#
FTP is considered insecure. Instead, use SSH, SFTP, SCP, or another
encrypted protocol.
","import ftplib
",,"
<h1 id=""suspicious-ftplib-import-s402"">suspicious-ftplib-import (S402)<a class=""headerlink"" href=""#suspicious-ftplib-import-s402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-pickle-import/,S403,suspicious-pickle-import,"<code>pickle</code>, <code>cPickle</code>, <code>dill</code>, and <code>shelve</code> modules are possibly insecure",Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the pickle, cPickle, dill, and shelve modules.
","Why is this bad?#
It is possible to construct malicious pickle data which will execute
arbitrary code during unpickling. Consider possible security implications
associated with these modules.
","----neg----:
import pickle
----pos----:
/// ## References----other----:


Python Docs

",,"
<h1 id=""suspicious-pickle-import-s403"">suspicious-pickle-import (S403)<a class=""headerlink"" href=""#suspicious-pickle-import-s403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-subprocess-import/,S404,suspicious-subprocess-import,<code>subprocess</code> module is possibly insecure,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the subprocess module.
","Why is this bad?#
It is possible to inject malicious commands into subprocess calls. Consider
possible security implications associated with this module.
","import subprocess
",,"
<h1 id=""suspicious-subprocess-import-s404"">suspicious-subprocess-import (S404)<a class=""headerlink"" href=""#suspicious-subprocess-import-s404"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-etree-import/,S405,suspicious-xml-etree-import,<code>xml.etree</code> methods are vulnerable to XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xml.etree.cElementTree and xml.etree.ElementTree modules
","Why is this bad?#
Using various methods from these modules to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is
called before parsing XML data.
","import xml.etree.cElementTree
",,"
<h1 id=""suspicious-xml-etree-import-s405"">suspicious-xml-etree-import (S405)<a class=""headerlink"" href=""#suspicious-xml-etree-import-s405"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-sax-import/,S406,suspicious-xml-sax-import,<code>xml.sax</code> methods are vulnerable to XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xml.sax module.
","Why is this bad?#
Using various methods from these modules to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is
called before parsing XML data.
","import xml.sax
",,"
<h1 id=""suspicious-xml-sax-import-s406"">suspicious-xml-sax-import (S406)<a class=""headerlink"" href=""#suspicious-xml-sax-import-s406"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-expat-import/,S407,suspicious-xml-expat-import,<code>xml.dom.expatbuilder</code> is vulnerable to XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xml.dom.expatbuilder module.
","Why is this bad?#
Using various methods from these modules to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is
called before parsing XML data.
","import xml.dom.expatbuilder
",,"
<h1 id=""suspicious-xml-expat-import-s407"">suspicious-xml-expat-import (S407)<a class=""headerlink"" href=""#suspicious-xml-expat-import-s407"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-minidom-import/,S408,suspicious-xml-minidom-import,<code>xml.dom.minidom</code> is vulnerable to XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xml.dom.minidom module.
","Why is this bad?#
Using various methods from these modules to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is
called before parsing XML data.
","import xml.dom.minidom
",,"
<h1 id=""suspicious-xml-minidom-import-s408"">suspicious-xml-minidom-import (S408)<a class=""headerlink"" href=""#suspicious-xml-minidom-import-s408"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xml-pulldom-import/,S409,suspicious-xml-pulldom-import,<code>xml.dom.pulldom</code> is vulnerable to XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xml.dom.pulldom module.
","Why is this bad?#
Using various methods from these modules to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is
called before parsing XML data.
","import xml.dom.pulldom
",,"
<h1 id=""suspicious-xml-pulldom-import-s409"">suspicious-xml-pulldom-import (S409)<a class=""headerlink"" href=""#suspicious-xml-pulldom-import-s409"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-lxml-import/,S410,suspicious-lxml-import,"<span style=""opacity: 0.5"" title=""This rule has been removed""><code>lxml</code> is vulnerable to XML attacks</span>",Rule has been removed,Automatic fix not available,"What it does#
Checks for imports of the lxml module.
","Why is this bad?#
Using various methods from the lxml module to parse untrusted XML data is
known to be vulnerable to XML attacks. Replace vulnerable imports with the
equivalent defusedxml package.
","import lxml
",,"
<h1 id=""suspicious-lxml-import-s410"">suspicious-lxml-import (S410)<a class=""headerlink"" href=""#suspicious-lxml-import-s410"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<h2 id=""removed"">Removed<a class=""headerlink"" href=""#removed"" title=""Permanent link"">#</a></h2>
<p>This rule was removed as the <code>lxml</code> library has been modified to address
known vulnerabilities and unsafe defaults. As such, the <code>defusedxml</code>
library is no longer necessary, <code>defusedxml</code> has <a href=""https://github.com/tiran/defusedxml/blob/c7445887f5e1bcea470a16f61369d29870cfcfe1/README.md#defusedxmllxml"">deprecated</a> its <code>lxml</code>
module.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-xmlrpc-import/,S411,suspicious-xmlrpc-import,XMLRPC is vulnerable to remote XML attacks,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the xmlrpc module.
","Why is this bad?#
XMLRPC is a particularly dangerous XML module, as it is also concerned with
communicating data over a network. Use the defused.xmlrpc.monkey_patch()
function to monkey-patch the xmlrpclib module and mitigate remote XML
attacks.
","import xmlrpc
",,"
<h1 id=""suspicious-xmlrpc-import-s411"">suspicious-xmlrpc-import (S411)<a class=""headerlink"" href=""#suspicious-xmlrpc-import-s411"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/suspicious-httpoxy-import/,S412,suspicious-httpoxy-import,"<code>httpoxy</code> is a set of vulnerabilities that affect application code running inCGI, or CGI-like environments. The use of CGI for web applications should be avoided",Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of wsgiref.handlers.CGIHandler and
twisted.web.twcgi.CGIScript.
","Why is this bad?#
httpoxy is a set of vulnerabilities that affect application code running in
CGI or CGI-like environments. The use of CGI for web applications should be
avoided to prevent this class of attack.
","import wsgiref.handlers.CGIHandler
",,"
<h1 id=""suspicious-httpoxy-import-s412"">suspicious-httpoxy-import (S412)<a class=""headerlink"" href=""#suspicious-httpoxy-import-s412"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://httpoxy.org/"">httpoxy website</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-pycrypto-import/,S413,suspicious-pycrypto-import,<code>pycrypto</code> library is known to have publicly disclosed buffer overflow vulnerability,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of several unsafe cryptography modules.
","Why is this bad?#
The pycrypto library is known to have a publicly disclosed buffer
overflow vulnerability. It is no longer actively maintained and has been
deprecated in favor of the pyca/cryptography library.
","import Crypto.Random
",,"
<h1 id=""suspicious-pycrypto-import-s413"">suspicious-pycrypto-import (S413)<a class=""headerlink"" href=""#suspicious-pycrypto-import-s413"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://github.com/pycrypto/pycrypto/issues/176"">Buffer Overflow Issue</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suspicious-pyghmi-import/,S415,suspicious-pyghmi-import,An IPMI-related module is being imported. Prefer an encrypted protocol over IPMI.,Rule is in preview,Automatic fix not available,"What it does#
Checks for imports of the pyghmi module.
","Why is this bad?#
pyghmi is an IPMI-related module, but IPMI is considered insecure.
Instead, use an encrypted protocol.
","import pyghmi
",,"
<h1 id=""suspicious-pyghmi-import-s415"">suspicious-pyghmi-import (S415)<a class=""headerlink"" href=""#suspicious-pyghmi-import-s415"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://github.com/pycrypto/pycrypto/issues/176"">Buffer Overflow Issue</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/request-with-no-cert-validation/,S501,request-with-no-cert-validation,Probable use of <code>{string}</code> call with <code>verify=False</code> disabling SSL certificate checks,Rule is stable,Automatic fix not available,"What it does#
Checks for HTTPS requests that disable SSL certificate checks.
","Why is this bad?#
If SSL certificates are not verified, an attacker could perform a ""man in
the middle"" attack by intercepting and modifying traffic between the client
and server.
","----neg----:
import requests

requests.get(""https://www.example.com"", verify=False)
----pos----:
import requests

requests.get(""https://www.example.com"")  # By default, `verify=True`.
",,"
<h1 id=""request-with-no-cert-validation-s501"">request-with-no-cert-validation (S501)<a class=""headerlink"" href=""#request-with-no-cert-validation-s501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/295.html"">Common Weakness Enumeration: CWE-295</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/ssl-insecure-version/,S502,ssl-insecure-version,Call made with insecure SSL protocol: <code>{protocol}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for function calls with parameters that indicate the use of insecure
SSL and TLS protocol versions.
","Why is this bad?#
Several highly publicized exploitable flaws have been discovered in all
versions of SSL and early versions of TLS. The following versions are
considered insecure, and should be avoided:

SSL v2
SSL v3
TLS v1
TLS v1.1

This method supports detection on the Python's built-in ssl module and
the pyOpenSSL module.
","----neg----:
import ssl

ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1)
----pos----:
import ssl

ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_2)
",,"
<h1 id=""ssl-insecure-version-s502"">ssl-insecure-version (S502)<a class=""headerlink"" href=""#ssl-insecure-version-s502"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/ssl-with-bad-defaults/,S503,ssl-with-bad-defaults,Argument default set to insecure SSL protocol: <code>{protocol}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for function definitions with default arguments set to insecure SSL
and TLS protocol versions.
","Why is this bad?#
Several highly publicized exploitable flaws have been discovered in all
versions of SSL and early versions of TLS. The following versions are
considered insecure, and should be avoided:

SSL v2
SSL v3
TLS v1
TLS v1.1

","----neg----:
import ssl


def func(version=ssl.PROTOCOL_TLSv1):
    ...
----pos----:
import ssl


def func(version=ssl.PROTOCOL_TLSv1_2):
    ...
",,"
<h1 id=""ssl-with-bad-defaults-s503"">ssl-with-bad-defaults (S503)<a class=""headerlink"" href=""#ssl-with-bad-defaults-s503"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/ssl-with-no-version/,S504,ssl-with-no-version,<code>ssl.wrap_socket</code> called without an `ssl_version``,Rule is stable,Automatic fix not available,"What it does#
Checks for calls to ssl.wrap_socket() without an ssl_version.
","Why is this bad?#
This method is known to provide a default value that maximizes
compatibility, but permits use of insecure protocols.
","----neg----:
import ssl

ssl.wrap_socket()
----pos----:
import ssl

ssl.wrap_socket(ssl_version=ssl.PROTOCOL_TLSv1_2)
",,"
<h1 id=""ssl-with-no-version-s504"">ssl-with-no-version (S504)<a class=""headerlink"" href=""#ssl-with-no-version-s504"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/weak-cryptographic-key/,S505,weak-cryptographic-key,{cryptographic_key} key sizes below {minimum_key_size} bits are considered breakable,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of cryptographic keys with vulnerable key sizes.
","Why is this bad?#
Small keys are easily breakable. For DSA and RSA, keys should be at least
2048 bits long. For EC, keys should be at least 224 bits long.
","----neg----:
from cryptography.hazmat.primitives.asymmetric import dsa, ec

dsa.generate_private_key(key_size=512)
ec.generate_private_key(curve=ec.SECT163K1())
----pos----:
from cryptography.hazmat.primitives.asymmetric import dsa, ec

dsa.generate_private_key(key_size=4096)
ec.generate_private_key(curve=ec.SECP384R1())
",,"
<h1 id=""weak-cryptographic-key-s505"">weak-cryptographic-key (S505)<a class=""headerlink"" href=""#weak-cryptographic-key-s505"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://csrc.nist.gov/pubs/sp/800/131/a/r2/final"">CSRC: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unsafe-yaml-load/,S506,unsafe-yaml-load,Probable use of unsafe loader <code>{name}</code> with <code>yaml.load</code>. Allows instantiation of arbitrary objects. Consider <code>yaml.safe_load</code>.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the yaml.load function.
","Why is this bad?#
Running the yaml.load function over untrusted YAML files is insecure, as
yaml.load allows for the creation of arbitrary Python objects, which can
then be used to execute arbitrary code.
Instead, consider using yaml.safe_load, which allows for the creation of
simple Python objects like integers and lists, but prohibits the creation of
more complex objects like functions and classes.
","----neg----:
import yaml

yaml.load(untrusted_yaml)
----pos----:
import yaml

yaml.safe_load(untrusted_yaml)
",,"
<h1 id=""unsafe-yaml-load-s506"">unsafe-yaml-load (S506)<a class=""headerlink"" href=""#unsafe-yaml-load-s506"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pyyaml.org/wiki/PyYAMLDocumentation"">PyYAML documentation: Loading YAML</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/20.html"">Common Weakness Enumeration: CWE-20</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/ssh-no-host-key-verification/,S507,ssh-no-host-key-verification,Paramiko call with policy set to automatically trust the unknown host key,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of policies disabling SSH verification in Paramiko.
","Why is this bad?#
By default, Paramiko checks the identity of the remote host when establishing
an SSH connection. Disabling the verification might lead to the client
connecting to a malicious host, without the client knowing.
","----neg----:
from paramiko import client

ssh_client = client.SSHClient()
ssh_client.set_missing_host_key_policy(client.AutoAddPolicy)
----pos----:
from paramiko import client

ssh_client = client.SSHClient()
ssh_client.set_missing_host_key_policy(client.RejectPolicy)
",,"
<h1 id=""ssh-no-host-key-verification-s507"">ssh-no-host-key-verification (S507)<a class=""headerlink"" href=""#ssh-no-host-key-verification-s507"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.paramiko.org/en/latest/api/client.html#paramiko.client.SSHClient.set_missing_host_key_policy"">Paramiko documentation: set_missing_host_key_policy</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/snmp-insecure-version/,S508,snmp-insecure-version,The use of SNMPv1 and SNMPv2 is insecure. Use SNMPv3 if able.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of SNMPv1 or SNMPv2.
","Why is this bad?#
The SNMPv1 and SNMPv2 protocols are considered insecure as they do
not support encryption. Instead, prefer SNMPv3, which supports
encryption.
","----neg----:
from pysnmp.hlapi import CommunityData

CommunityData(""public"", mpModel=0)
----pos----:
from pysnmp.hlapi import CommunityData

CommunityData(""public"", mpModel=2)
",,"
<h1 id=""snmp-insecure-version-s508"">snmp-insecure-version (S508)<a class=""headerlink"" href=""#snmp-insecure-version-s508"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.cisa.gov/news-events/alerts/2017/06/05/reducing-risk-snmp-abuse"">Cybersecurity and Infrastructure Security Agency (CISA): Alert TA17-156A</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/319.html"">Common Weakness Enumeration: CWE-319</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/snmp-weak-cryptography/,S509,snmp-weak-cryptography,You should not use SNMPv3 without encryption. <code>noAuthNoPriv</code> & <code>authNoPriv</code> is insecure.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the SNMPv3 protocol without encryption.
","Why is this bad?#
Unencrypted SNMPv3 communication can be intercepted and read by
unauthorized parties. Instead, enable encryption when using SNMPv3.
","----neg----:
from pysnmp.hlapi import UsmUserData

UsmUserData(""user"")
----pos----:
from pysnmp.hlapi import UsmUserData

UsmUserData(""user"", ""authkey"", ""privkey"")
",,"
<h1 id=""snmp-weak-cryptography-s509"">snmp-weak-cryptography (S509)<a class=""headerlink"" href=""#snmp-weak-cryptography-s509"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/319.html"">Common Weakness Enumeration: CWE-319</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/paramiko-call/,S601,paramiko-call,Possible shell injection via Paramiko call; check inputs are properly sanitized,Rule is stable,Automatic fix not available,"What it does#
Checks for paramiko calls.
","Why is this bad?#
paramiko calls allow users to execute arbitrary shell commands on a
remote machine. If the inputs to these calls are not properly sanitized,
they can be vulnerable to shell injection attacks.
","import paramiko

client = paramiko.SSHClient()
client.exec_command(""echo $HOME"")
",,"
<h1 id=""paramiko-call-s601"">paramiko-call (S601)<a class=""headerlink"" href=""#paramiko-call-s601"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/78.html"">Common Weakness Enumeration: CWE-78</a></li>
<li><a href=""https://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command"">Paramiko documentation: <code>SSHClient.exec_command()</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/subprocess-popen-with-shell-equals-true/,S602,subprocess-popen-with-shell-equals-true,"<code>subprocess</code> call with <code>shell=True</code> seems safe, but may be changed in the future; consider rewriting without <code>shell</code>",Rule is stable,Automatic fix not available,"What it does#
Check for method calls that initiate a subprocess with a shell.
","Why is this bad?#
Starting a subprocess with a shell can allow attackers to execute arbitrary
shell commands. Consider starting the process without a shell call and
sanitize the input to mitigate the risk of shell injection.
","----neg----:
import subprocess

subprocess.run(""ls -l"", shell=True)
----pos----:
import subprocess

subprocess.run([""ls"", ""-l""])
",,"
<h1 id=""subprocess-popen-with-shell-equals-true-s602"">subprocess-popen-with-shell-equals-true (S602)<a class=""headerlink"" href=""#subprocess-popen-with-shell-equals-true-s602"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html"">Python documentation: <code>subprocess</code> — Subprocess management</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/78.html"">Common Weakness Enumeration: CWE-78</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/subprocess-without-shell-equals-true/,S603,subprocess-without-shell-equals-true,<code>subprocess</code> call: check for execution of untrusted input,Rule is stable,Automatic fix not available,"What it does#
Check for method calls that initiate a subprocess without a shell.
","Why is this bad?#
Starting a subprocess without a shell can prevent attackers from executing
arbitrary shell commands; however, it is still error-prone. Consider
validating the input.
Known problems#
Prone to false positives as it is difficult to determine whether the
passed arguments have been validated (#4045).
","import subprocess

cmd = input(""Enter a command: "").split()
subprocess.run(cmd)
",,"
<h1 id=""subprocess-without-shell-equals-true-s603"">subprocess-without-shell-equals-true (S603)<a class=""headerlink"" href=""#subprocess-without-shell-equals-true-s603"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html"">Python documentation: <code>subprocess</code> — Subprocess management</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-with-shell-equals-true/,S604,call-with-shell-equals-true,"Function call with <code>shell=True</code> parameter identified, security issue",Rule is stable,Automatic fix not available,"What it does#
Checks for method calls that set the shell parameter to true or another
truthy value when invoking a subprocess.
","Why is this bad?#
Setting the shell parameter to true or another truthy value when
invoking a subprocess can introduce security vulnerabilities, as it allows
shell metacharacters and whitespace to be passed to child processes,
potentially leading to shell injection attacks.
It is recommended to avoid using shell=True unless absolutely necessary
and, when used, to ensure that all inputs are properly sanitized and quoted
to prevent such vulnerabilities.
Known problems#
Prone to false positives as it is triggered on any function call with a
shell=True parameter.
","import subprocess

user_input = input(""Enter a command: "")
subprocess.run(user_input, shell=True)
",,"
<h1 id=""call-with-shell-equals-true-s604"">call-with-shell-equals-true (S604)<a class=""headerlink"" href=""#call-with-shell-equals-true-s604"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html#security-considerations"">Python documentation: Security Considerations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/start-process-with-a-shell/,S605,start-process-with-a-shell,"Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without <code>shell</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for calls that start a process with a shell, providing guidance on
whether the usage is safe or not.
","Why is this bad?#
Starting a process with a shell can introduce security risks, such as
code injection vulnerabilities. It's important to be aware of whether the
usage of the shell is safe or not.
This rule triggers on functions like os.system, popen, etc., which
start processes with a shell. It evaluates whether the provided command
is a literal string or an expression. If the command is a literal string,
it's considered safe. If the command is an expression, it's considered
(potentially) unsafe.
","----neg----:
import os

# Safe usage (literal string)
command = ""ls -l""
os.system(command)

# Potentially unsafe usage (expression)
cmd = get_user_input()
os.system(cmd)
----pos----:
The subprocess module provides more powerful facilities for spawning new
processes and retrieving their results, and using that module is preferable
to using os.system or similar functions. Consider replacing such usages
with subprocess.call or related functions.----other----:

",,"
<h1 id=""start-process-with-a-shell-s605"">start-process-with-a-shell (S605)<a class=""headerlink"" href=""#start-process-with-a-shell-s605"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html"">Python documentation: <code>subprocess</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/start-process-with-no-shell/,S606,start-process-with-no-shell,Starting a process without a shell,Rule is stable,Automatic fix not available,"What it does#
Checks for functions that start a process without a shell.
","Why is this bad?#
The subprocess module provides more powerful facilities for spawning new
processes and retrieving their results; using that module is preferable to
using these functions.
","----neg----:
os.spawnlp(os.P_NOWAIT, ""/bin/mycmd"", ""mycmd"", ""myarg"")
----pos----:
subprocess.Popen([""/bin/mycmd"", ""myarg""])
",,"
<h1 id=""start-process-with-no-shell-s606"">start-process-with-no-shell (S606)<a class=""headerlink"" href=""#start-process-with-no-shell-s606"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html#replacing-the-os-spawn-family"">Python documentation: Replacing the <code>os.spawn</code> family</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/start-process-with-partial-path/,S607,start-process-with-partial-path,Starting a process with a partial executable path,Rule is stable,Automatic fix not available,"What it does#
Checks for the starting of a process with a partial executable path.
","Why is this bad?#
Starting a process with a partial executable path can allow attackers to
execute an arbitrary executable by adjusting the PATH environment variable.
Consider using a full path to the executable instead.
","----neg----:
import subprocess

subprocess.Popen([""ruff"", ""check"", ""file.py""])
----pos----:
import subprocess

subprocess.Popen([""/usr/bin/ruff"", ""check"", ""file.py""])
",,"
<h1 id=""start-process-with-partial-path-s607"">start-process-with-partial-path (S607)<a class=""headerlink"" href=""#start-process-with-partial-path-s607"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html#subprocess.Popen"">Python documentation: <code>subprocess.Popen()</code></a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/426.html"">Common Weakness Enumeration: CWE-426</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hardcoded-sql-expression/,S608,hardcoded-sql-expression,Possible SQL injection vector through string-based query construction,Rule is stable,Automatic fix not available,"What it does#
Checks for strings that resemble SQL statements involved in some form
string building operation.
","Why is this bad?#
SQL injection is a common attack vector for web applications. Directly
interpolating user input into SQL statements should always be avoided.
Instead, favor parameterized queries, in which the SQL statement is
provided separately from its parameters, as supported by psycopg3
and other database drivers and ORMs.
","query = ""DELETE FROM foo WHERE id = '%s'"" % identifier
",,"
<h1 id=""hardcoded-sql-expression-s608"">hardcoded-sql-expression (S608)<a class=""headerlink"" href=""#hardcoded-sql-expression-s608"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html"">B608: Test for SQL injection</a></li>
<li><a href=""https://www.psycopg.org/psycopg3/docs/basic/from_pg2.html#server-side-binding"">psycopg3: Server-side binding</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unix-command-wildcard-injection/,S609,unix-command-wildcard-injection,Possible wildcard injection in call due to <code>*</code> usage,Rule is stable,Automatic fix not available,"What it does#
Checks for possible wildcard injections in calls to subprocess.Popen().
","Why is this bad?#
Wildcard injections can lead to unexpected behavior if unintended files are
matched by the wildcard. Consider using a more specific path instead.
","----neg----:
import subprocess

subprocess.Popen([""chmod"", ""777"", ""*.py""])
----pos----:
import subprocess

subprocess.Popen([""chmod"", ""777"", ""main.py""])
",,"
<h1 id=""unix-command-wildcard-injection-s609"">unix-command-wildcard-injection (S609)<a class=""headerlink"" href=""#unix-command-wildcard-injection-s609"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://cwe.mitre.org/data/definitions/78.html"">Common Weakness Enumeration: CWE-78</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/django-extra/,S610,django-extra,Use of Django <code>extra</code> can lead to SQL injection vulnerabilities,Rule is in preview,Automatic fix not available,"What it does#
Checks for uses of Django's extra function.
","Why is this bad?#
Django's extra function can be used to execute arbitrary SQL queries,
which can in turn lead to SQL injection vulnerabilities.
","from django.contrib.auth.models import User

User.objects.all().extra(select={""test"": ""%secure"" % ""nos""})
",,"
<h1 id=""django-extra-s610"">django-extra (S610)<a class=""headerlink"" href=""#django-extra-s610"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection"">Django documentation: SQL injection protection</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/89.html"">Common Weakness Enumeration: CWE-89</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/django-raw-sql/,S611,django-raw-sql,Use of <code>RawSQL</code> can lead to SQL injection vulnerabilities,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of Django's RawSQL function.
","Why is this bad?#
Django's RawSQL function can be used to execute arbitrary SQL queries,
which can in turn lead to SQL injection vulnerabilities.
","from django.db.models.expressions import RawSQL
from django.contrib.auth.models import User

User.objects.annotate(val=(""%secure"" % ""nos"", []))
",,"
<h1 id=""django-raw-sql-s611"">django-raw-sql (S611)<a class=""headerlink"" href=""#django-raw-sql-s611"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection"">Django documentation: SQL injection protection</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/89.html"">Common Weakness Enumeration: CWE-89</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-config-insecure-listen/,S612,logging-config-insecure-listen,Use of insecure <code>logging.config.listen</code> detected,Rule is stable,Automatic fix not available,"What it does#
Checks for insecure logging.config.listen calls.
","Why is this bad?#
logging.config.listen starts a server that listens for logging
configuration requests. This is insecure, as parts of the configuration are
passed to the built-in eval function, which can be used to execute
arbitrary code.
","import logging

logging.config.listen(9999)
",,"
<h1 id=""logging-config-insecure-listen-s612"">logging-config-insecure-listen (S612)<a class=""headerlink"" href=""#logging-config-insecure-listen-s612"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.config.html#logging.config.listen"">Python documentation: <code>logging.config.listen()</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/jinja2-autoescape-false/,S701,jinja2-autoescape-false,Using jinja2 templates with <code>autoescape=False</code> is dangerous and can lead to XSS. Ensure <code>autoescape=True</code> or use the <code>select_autoescape</code> function.,Rule is stable,Automatic fix not available,"What it does#
Checks for jinja2 templates that use autoescape=False.
","Why is this bad?#
jinja2 templates that use autoescape=False are vulnerable to cross-site
scripting (XSS) attacks that allow attackers to execute arbitrary
JavaScript.
By default, jinja2 sets autoescape to False, so it is important to
set autoescape=True or use the select_autoescape function to mitigate
XSS vulnerabilities.
","----neg----:
import jinja2

jinja2.Environment(loader=jinja2.FileSystemLoader("".""))
----pos----:
import jinja2

jinja2.Environment(loader=jinja2.FileSystemLoader("".""), autoescape=True)
",,"
<h1 id=""jinja2-autoescape-false-s701"">jinja2-autoescape-false (S701)<a class=""headerlink"" href=""#jinja2-autoescape-false-s701"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://jinja.palletsprojects.com/en/latest/api/#autoescaping"">Jinja documentation: API</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/94.html"">Common Weakness Enumeration: CWE-94</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/mako-templates/,S702,mako-templates,Mako templates allow HTML and JavaScript rendering by default and are inherently open to XSS attacks,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the mako templates.
","Why is this bad?#
Mako templates allow HTML and JavaScript rendering by default, and are
inherently open to XSS attacks. Ensure variables in all templates are
properly sanitized via the n, h or x flags (depending on context).
For example, to HTML escape the variable data, use ${ data |h }.
","----neg----:
from mako.template import Template

Template(""hello"")
----pos----:
from mako.template import Template

Template(""hello |h"")
",,"
<h1 id=""mako-templates-s702"">mako-templates (S702)<a class=""headerlink"" href=""#mako-templates-s702"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bandit</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://www.makotemplates.org/"">Mako documentation</a></li>
<li><a href=""https://security.openstack.org/guidelines/dg_cross-site-scripting-xss.html"">OpenStack security: Cross site scripting XSS</a></li>
<li><a href=""https://cwe.mitre.org/data/definitions/80.html"">Common Weakness Enumeration: CWE-80</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blind-except/,BLE001,blind-except,Do not catch blind exception: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for except clauses that catch all exceptions.
","Why is this bad?#
Overly broad except clauses can lead to unexpected behavior, such as
catching KeyboardInterrupt or SystemExit exceptions that prevent the
user from exiting the program.
Instead of catching all exceptions, catch only those that are expected to
be raised in the try block.
","----neg----:
try:
    foo()
except BaseException:
    ...
----pos----:
try:
    foo()
except FileNotFoundError:
    ...
----other----:
Exceptions that are re-raised will not be flagged, as they're expected to
be caught elsewhere:
try:
    foo()
except BaseException:
    raise

Exceptions that are logged via logging.exception() or logging.error()
with exc_info enabled will not be flagged, as this is a common pattern
for propagating exception traces:
try:
    foo()
except BaseException:
    logging.exception(""Something went wrong"")

",,"
<h1 id=""blind-except-ble001"">blind-except (BLE001)<a class=""headerlink"" href=""#blind-except-ble001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-blind-except</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-try-statement"">Python documentation: The <code>try</code> statement</a></li>
<li><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"">Python documentation: Exception hierarchy</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/boolean-type-hint-positional-argument/,FBT001,boolean-type-hint-positional-argument,Boolean-typed positional argument in function definition,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of boolean positional arguments in function definitions,
as determined by the presence of a bool type hint.
","Why is this bad?#
Calling a function with boolean positional arguments is confusing as the
meaning of the boolean value is not clear to the caller and to future
readers of the code.
The use of a boolean will also limit the function to only two possible
behaviors, which makes the function difficult to extend in the future.
Instead, consider refactoring into separate implementations for the
True and False cases, using an Enum, or making the argument a
keyword-only argument, to force callers to be explicit when providing
the argument.
In preview, this rule will also flag annotations that include boolean
variants, like bool | int.
","----neg----:
from math import ceil, floor


def round_number(number: float, up: bool) -> int:
    return ceil(number) if up else floor(number)


round_number(1.5, True)  # What does `True` mean?
round_number(1.5, False)  # What does `False` mean?
----pos----:
Instead, refactor into separate implementations:----other----:

from math import ceil, floor


def round_up(number: float) -> int:
    return ceil(number)


def round_down(number: float) -> int:
    return floor(number)


round_up(1.5)
round_down(1.5)

Or, refactor to use an Enum:
from enum import Enum


class RoundingMethod(Enum):
    UP = 1
    DOWN = 2


def round_number(value: float, method: RoundingMethod) -> float:
    ...

Or, make the argument a keyword-only argument:
from math import ceil, floor


def round_number(number: float, *, up: bool) -> int:
    return ceil(number) if up else floor(number)


round_number(1.5, up=True)
round_number(1.5, up=False)

",,"
<h1 id=""boolean-type-hint-positional-argument-fbt001"">boolean-type-hint-positional-argument (FBT001)<a class=""headerlink"" href=""#boolean-type-hint-positional-argument-fbt001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-boolean-trap</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#calls"">Python documentation: Calls</a></li>
<li><a href=""https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap/""><em>How to Avoid “The Boolean Trap”</em> by Adam Johnson</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/boolean-default-value-positional-argument/,FBT002,boolean-default-value-positional-argument,Boolean default positional argument in function definition,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of boolean positional arguments in function definitions,
as determined by the presence of a boolean default value.
","Why is this bad?#
Calling a function with boolean positional arguments is confusing as the
meaning of the boolean value is not clear to the caller and to future
readers of the code.
The use of a boolean will also limit the function to only two possible
behaviors, which makes the function difficult to extend in the future.
Instead, consider refactoring into separate implementations for the
True and False cases, using an Enum, or making the argument a
keyword-only argument, to force callers to be explicit when providing
the argument.
","----neg----:
from math import ceil, floor


def round_number(number, up=True):
    return ceil(number) if up else floor(number)


round_number(1.5, True)  # What does `True` mean?
round_number(1.5, False)  # What does `False` mean?
----pos----:
Instead, refactor into separate implementations:----other----:

from math import ceil, floor


def round_up(number):
    return ceil(number)


def round_down(number):
    return floor(number)


round_up(1.5)
round_down(1.5)

Or, refactor to use an Enum:
from enum import Enum


class RoundingMethod(Enum):
    UP = 1
    DOWN = 2


def round_number(value, method):
    ...

Or, make the argument a keyword-only argument:
from math import ceil, floor


def round_number(number, *, up=True):
    return ceil(number) if up else floor(number)


round_number(1.5, up=True)
round_number(1.5, up=False)

",,"
<h1 id=""boolean-default-value-positional-argument-fbt002"">boolean-default-value-positional-argument (FBT002)<a class=""headerlink"" href=""#boolean-default-value-positional-argument-fbt002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-boolean-trap</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#calls"">Python documentation: Calls</a></li>
<li><a href=""https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap/""><em>How to Avoid “The Boolean Trap”</em> by Adam Johnson</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/boolean-positional-value-in-call/,FBT003,boolean-positional-value-in-call,Boolean positional value in function call,Rule is stable,Automatic fix not available,"What it does#
Checks for boolean positional arguments in function calls.
","Why is this bad?#
Calling a function with boolean positional arguments is confusing as the
meaning of the boolean value is not clear to the caller, and to future
readers of the code.
","----neg----:
def func(flag: bool) -> None:
    ...


func(True)
----pos----:
def func(flag: bool) -> None:
    ...


func(flag=True)
",,"
<h1 id=""boolean-positional-value-in-call-fbt003"">boolean-positional-value-in-call (FBT003)<a class=""headerlink"" href=""#boolean-positional-value-in-call-fbt003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-boolean-trap</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#calls"">Python documentation: Calls</a></li>
<li><a href=""https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap/""><em>How to Avoid “The Boolean Trap”</em> by Adam Johnson</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unary-prefix-increment-decrement/,B002,unary-prefix-increment-decrement,Python does not support the unary prefix increment operator (<code>++</code>),Rule is stable,Automatic fix not available,"What it does#
Checks for the attempted use of the unary prefix increment (++) or
decrement operator (--).
","Why is this bad?#
Python does not support the unary prefix increment or decrement operator.
Writing ++n is equivalent to +(+(n)) and writing --n is equivalent to
-(-(n)). In both cases, it is equivalent to n.
","----neg----:
++x
--y
----pos----:
x += 1
y -= 1
",,"
<h1 id=""unary-prefix-increment-decrement-b002"">unary-prefix-increment-decrement (B002)<a class=""headerlink"" href=""#unary-prefix-increment-decrement-b002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations"">Python documentation: Unary arithmetic and bitwise operations</a></li>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements"">Python documentation: Augmented assignment statements</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assignment-to-os-environ/,B003,assignment-to-os-environ,Assigning to <code>os.environ</code> doesn't clear the environment,Rule is stable,Automatic fix not available,"What it does#
Checks for assignments to os.environ.
","Why is this bad?#
In Python, os.environ is a mapping that represents the environment of the
current process.
However, reassigning to os.environ does not clear the environment. Instead,
it merely updates the os.environ for the current process. This can lead to
unexpected behavior, especially when running the program in a subprocess.
Instead, use os.environ.clear() to clear the environment, or use the
env argument of subprocess.Popen to pass a custom environment to
a subprocess.
","----neg----:
import os

os.environ = {""foo"": ""bar""}
----pos----:
import os

os.environ.clear()
os.environ[""foo""] = ""bar""
",,"
<h1 id=""assignment-to-os-environ-b003"">assignment-to-os-environ (B003)<a class=""headerlink"" href=""#assignment-to-os-environ-b003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/os.html#os.environ"">Python documentation: <code>os.environ</code></a></li>
<li><a href=""https://docs.python.org/3/library/subprocess.html#subprocess.Popen"">Python documentation: <code>subprocess.Popen</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unreliable-callable-check/,B004,unreliable-callable-check,"Using <code>hasattr(x, ""__call__"")</code> to test if x is callable is unreliable. Use <code>callable(x)</code> for consistent results.",Rule is stable,Automatic fix available,"What it does#
Checks for uses of hasattr to test if an object is callable (e.g.,
hasattr(obj, ""__call__"")).
","Why is this bad?#
Using hasattr is an unreliable mechanism for testing if an object is
callable. If obj implements a custom __getattr__, or if its __call__
is itself not callable, you may get misleading results.
Instead, use callable(obj) to test if obj is callable.
","----neg----:
hasattr(obj, ""__call__"")
----pos----:
callable(obj)
",,"
<h1 id=""unreliable-callable-check-b004"">unreliable-callable-check (B004)<a class=""headerlink"" href=""#unreliable-callable-check-b004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#callable"">Python documentation: <code>callable</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#hasattr"">Python documentation: <code>hasattr</code></a></li>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#object.__getattr__"">Python documentation: <code>__getattr__</code></a></li>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#object.__call__"">Python documentation: <code>__call__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/strip-with-multi-characters/,B005,strip-with-multi-characters,Using <code>.strip()</code> with multi-character strings is misleading,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of multi-character strings in .strip(), .lstrip(), and
.rstrip() calls.
","Why is this bad?#
All characters in the call to .strip(), .lstrip(), or .rstrip() are
removed from the leading and trailing ends of the string. If the string
contains multiple characters, the reader may be misled into thinking that
a prefix or suffix is being removed, rather than a set of characters.
In Python 3.9 and later, you can use str.removeprefix and
str.removesuffix to remove an exact prefix or suffix from a string,
respectively, which should be preferred when possible.
Known problems#
As a heuristic, this rule only flags multi-character strings that contain
duplicate characters. This allows usages like .strip(""xyz""), which
removes all occurrences of the characters x, y, and z from the
leading and trailing ends of the string, but not .strip(""foo"").
The use of unique, multi-character strings may be intentional and
consistent with the intent of .strip(), .lstrip(), or .rstrip(),
while the use of duplicate-character strings is very likely to be a
mistake.
","----neg----:
""text.txt"".strip("".txt"")  # ""e""
----pos----:
""text.txt"".removesuffix("".txt"")  # ""text""
",,"
<h1 id=""strip-with-multi-characters-b005"">strip-with-multi-characters (B005)<a class=""headerlink"" href=""#strip-with-multi-characters-b005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.strip"">Python documentation: <code>str.strip</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/mutable-argument-default/,B006,mutable-argument-default,Do not use mutable data structures for argument defaults,Rule is stable,Automatic fix available,"What it does#
Checks for uses of mutable objects as function argument defaults.
","Why is this bad?#
Function defaults are evaluated once, when the function is defined.
The same mutable object is then shared across all calls to the function.
If the object is modified, those modifications will persist across calls,
which can lead to unexpected behavior.
Instead, prefer to use immutable data structures, or take None as a
default, and initialize a new mutable object inside the function body
for each call.
Arguments with immutable type annotations will be ignored by this rule.
Types outside of the standard library can be marked as immutable with the
lint.flake8-bugbear.extend-immutable-calls configuration option.
Known problems#
Mutable argument defaults can be used intentionally to cache computation
results. Replacing the default with None or an immutable data structure
does not work for such usages. Instead, prefer the @functools.lru_cache
decorator from the standard library.
","----neg----:
def add_to_list(item, some_list=[]):
    some_list.append(item)
    return some_list


l1 = add_to_list(0)  # [0]
l2 = add_to_list(1)  # [0, 1]
----pos----:
def add_to_list(item, some_list=None):
    if some_list is None:
        some_list = []
    some_list.append(item)
    return some_list


l1 = add_to_list(0)  # [0]
l2 = add_to_list(1)  # [1]
","https://docs.astral.sh/ruff/settings/#lint_flake8-bugbear_extend-immutable-calls
lint.flake8-bugbear.extend-immutable-calls
None","
<h1 id=""mutable-argument-default-b006"">mutable-argument-default (B006)<a class=""headerlink"" href=""#mutable-argument-default-b006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/controlflow.html#default-argument-values"">Python documentation: Default Argument Values</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unused-loop-control-variable/,B007,unused-loop-control-variable,Loop control variable <code>{name}</code> not used within loop body,Rule is stable,Automatic fix available,"What it does#
Checks for unused variables in loops (e.g., for and while statements).
","Why is this bad?#
Defining a variable in a loop statement that is never used can confuse
readers.
If the variable is intended to be unused (e.g., to facilitate
destructuring of a tuple or other object), prefix it with an underscore
to indicate the intent. Otherwise, remove the variable entirely.
","----neg----:
for i, j in foo:
    bar(i)
----pos----:
for i, _j in foo:
    bar(i)
",,"
<h1 id=""unused-loop-control-variable-b007"">unused-loop-control-variable (B007)<a class=""headerlink"" href=""#unused-loop-control-variable-b007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#naming-conventions"">PEP 8: Naming Conventions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/function-call-in-default-argument/,B008,function-call-in-default-argument,"Do not perform function call <code>{name}</code> in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable",Rule is stable,Automatic fix not available,"What it does#
Checks for function calls in default function arguments.
","Why is this bad?#
Any function call that's used in a default argument will only be performed
once, at definition time. The returned value will then be reused by all
calls to the function, which can lead to unexpected behaviour.
Calls can be marked as an exception to this rule with the
lint.flake8-bugbear.extend-immutable-calls configuration option.
Arguments with immutable type annotations will be ignored by this rule.
Types outside of the standard library can be marked as immutable with the
lint.flake8-bugbear.extend-immutable-calls configuration option as well.
","----neg----:
def create_list() -> list[int]:
    return [1, 2, 3]


def mutable_default(arg: list[int] = create_list()) -> list[int]:
    arg.append(4)
    return arg
----pos----:
def better(arg: list[int] | None = None) -> list[int]:
    if arg is None:
        arg = create_list()

    arg.append(4)
    return arg
----other----:
If the use of a singleton is intentional, assign the result call to a
module-level variable, and use that variable in the default argument:
ERROR = ValueError(""Hosts weren't successfully added"")


def add_host(error: Exception = ERROR) -> None:
    ...

","https://docs.astral.sh/ruff/settings/#lint_flake8-bugbear_extend-immutable-calls
lint.flake8-bugbear.extend-immutable-calls
None","
<h1 id=""function-call-in-default-argument-b008"">function-call-in-default-argument (B008)<a class=""headerlink"" href=""#function-call-in-default-argument-b008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/get-attr-with-constant/,B009,get-attr-with-constant,Do not call <code>getattr</code> with a constant attribute value. It is not any safer than normal property access.,Rule is stable,Automatic fix available,"What it does#
Checks for uses of getattr that take a constant attribute value as an
argument (e.g., getattr(obj, ""foo"")).
","Why is this bad?#
getattr is used to access attributes dynamically. If the attribute is
defined as a constant, it is no safer than a typical property access. When
possible, prefer property access over getattr calls, as the former is
more concise and idiomatic.
","----neg----:
getattr(obj, ""foo"")
----pos----:
obj.foo
",,"
<h1 id=""get-attr-with-constant-b009"">get-attr-with-constant (B009)<a class=""headerlink"" href=""#get-attr-with-constant-b009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#getattr"">Python documentation: <code>getattr</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/set-attr-with-constant/,B010,set-attr-with-constant,Do not call <code>setattr</code> with a constant attribute value. It is not any safer than normal property access.,Rule is stable,Automatic fix available,"What it does#
Checks for uses of setattr that take a constant attribute value as an
argument (e.g., setattr(obj, ""foo"", 42)).
","Why is this bad?#
setattr is used to set attributes dynamically. If the attribute is
defined as a constant, it is no safer than a typical property access. When
possible, prefer property access over setattr calls, as the former is
more concise and idiomatic.
","----neg----:
setattr(obj, ""foo"", 42)
----pos----:
obj.foo = 42
",,"
<h1 id=""set-attr-with-constant-b010"">set-attr-with-constant (B010)<a class=""headerlink"" href=""#set-attr-with-constant-b010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#setattr"">Python documentation: <code>setattr</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assert-false/,B011,assert-false,"Do not <code>assert False</code> (<code>python -O</code> removes these calls), raise <code>AssertionError()</code>",Rule is stable,Automatic fix available,"What it does#
Checks for uses of assert False.
","Why is this bad?#
Python removes assert statements when running in optimized mode
(python -O), making assert False an unreliable means of
raising an AssertionError.
Instead, raise an AssertionError directly.
","----neg----:
assert False
----pos----:
raise AssertionError
----other----:
This rule's fix is marked as unsafe, as changing an assert to a
raise will change the behavior of your program when running in
optimized mode (python -O).
",,"
<h1 id=""assert-false-b011"">assert-false (B011)<a class=""headerlink"" href=""#assert-false-b011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement"">Python documentation: <code>assert</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/jump-statement-in-finally/,B012,jump-statement-in-finally,<code>{name}</code> inside <code>finally</code> blocks cause exceptions to be silenced,Rule is stable,Automatic fix not available,"What it does#
Checks for break, continue, and return statements in finally
blocks.
","Why is this bad?#
The use of break, continue, and return statements in finally blocks
can cause exceptions to be silenced.
finally blocks execute regardless of whether an exception is raised. If a
break, continue, or return statement is reached in a finally block,
any exception raised in the try or except blocks will be silenced.
","----neg----:
def speed(distance, time):
    try:
        return distance / time
    except ZeroDivisionError:
        raise ValueError(""Time cannot be zero"")
    finally:
        return 299792458  # `ValueError` is silenced
----pos----:
def speed(distance, time):
    try:
        return distance / time
    except ZeroDivisionError:
        raise ValueError(""Time cannot be zero"")
",,"
<h1 id=""jump-statement-in-finally-b012"">jump-statement-in-finally (B012)<a class=""headerlink"" href=""#jump-statement-in-finally-b012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-try-statement"">Python documentation: The <code>try</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redundant-tuple-in-exception-handler/,B013,redundant-tuple-in-exception-handler,A length-one tuple literal is redundant in exception handlers,Rule is stable,Automatic fix available,"What it does#
Checks for single-element tuples in exception handlers (e.g.,
except (ValueError,):).
","Why is this bad?#
A tuple with a single element can be more concisely and idiomatically
expressed as a single value.
","----neg----:
try:
    ...
except (ValueError,):
    ...
----pos----:
try:
    ...
except ValueError:
    ...
",,"
<h1 id=""redundant-tuple-in-exception-handler-b013"">redundant-tuple-in-exception-handler (B013)<a class=""headerlink"" href=""#redundant-tuple-in-exception-handler-b013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/duplicate-handler-exception/,B014,duplicate-handler-exception,Exception handler with duplicate exception: <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for exception handlers that catch duplicate exceptions.
","Why is this bad?#
Including the same exception multiple times in the same handler is redundant,
as the first exception will catch the exception, making the second exception
unreachable. The same applies to exception hierarchies, as a handler for a
parent exception (like Exception) will also catch child exceptions (like
ValueError).
","----neg----:
try:
    ...
except (Exception, ValueError):  # `Exception` includes `ValueError`.
    ...
----pos----:
try:
    ...
except Exception:
    ...
",,"
<h1 id=""duplicate-handler-exception-b014"">duplicate-handler-exception (B014)<a class=""headerlink"" href=""#duplicate-handler-exception-b014"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
<li><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"">Python documentation: Exception hierarchy</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/useless-comparison/,B015,useless-comparison,"Pointless comparison. Did you mean to assign a value? Otherwise, prepend <code>assert</code> or remove it.",Rule is stable,Automatic fix not available,"What it does#
Checks for useless comparisons.
","Why is this bad?#
Useless comparisons have no effect on the program, and are often included
by mistake. If the comparison is intended to enforce an invariant, prepend
the comparison with an assert. Otherwise, remove it entirely.
","----neg----:
foo == bar
----pos----:
assert foo == bar, ""`foo` and `bar` should be equal.""
",,"
<h1 id=""useless-comparison-b015"">useless-comparison (B015)<a class=""headerlink"" href=""#useless-comparison-b015"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement"">Python documentation: <code>assert</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/raise-literal/,B016,raise-literal,Cannot raise a literal. Did you intend to return it or raise an Exception?,Rule is stable,Automatic fix not available,"What it does#
Checks for raise statements that raise a literal value.
","Why is this bad?#
raise must be followed by an exception instance or an exception class,
and exceptions must be instances of BaseException or a subclass thereof.
Raising a literal will raise a TypeError at runtime.
","----neg----:
raise ""foo""
----pos----:
raise Exception(""foo"")
",,"
<h1 id=""raise-literal-b016"">raise-literal (B016)<a class=""headerlink"" href=""#raise-literal-b016"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement"">Python documentation: <code>raise</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assert-raises-exception/,B017,assert-raises-exception,<code>{assertion}({exception})</code> should be considered evil,Rule is stable,Automatic fix not available,"What it does#
Checks for assertRaises and pytest.raises context managers that catch
Exception or BaseException.
","Why is this bad?#
These forms catch every Exception, which can lead to tests passing even
if, e.g., the code under consideration raises a SyntaxError or
IndentationError.
Either assert for a more specific exception (builtin or custom), or use
assertRaisesRegex or pytest.raises(..., match=<REGEX>) respectively.
","----neg----:
self.assertRaises(Exception, foo)
----pos----:
self.assertRaises(SomeSpecificException, foo)
",,"
<h1 id=""assert-raises-exception-b017"">assert-raises-exception (B017)<a class=""headerlink"" href=""#assert-raises-exception-b017"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/useless-expression/,B018,useless-expression,Found useless expression. Either assign it to a variable or remove it.,Rule is stable,Automatic fix not available,"What it does#
Checks for useless expressions.
","Why is this bad?#
Useless expressions have no effect on the program, and are often included
by mistake. Assign a useless expression to a variable, or remove it
entirely.
","----neg----:
1 + 1
----pos----:
foo = 1 + 1
",,"
<h1 id=""useless-expression-b018"">useless-expression (B018)<a class=""headerlink"" href=""#useless-expression-b018"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/cached-instance-method/,B019,cached-instance-method,Use of <code>functools.lru_cache</code> or <code>functools.cache</code> on methods can lead to memory leaks,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the functools.lru_cache and functools.cache
decorators on methods.
","Why is this bad?#
Using the functools.lru_cache and functools.cache decorators on methods
can lead to memory leaks, as the global cache will retain a reference to
the instance, preventing it from being garbage collected.
Instead, refactor the method to depend only on its arguments and not on the
instance of the class, or use the @lru_cache decorator on a function
outside of the class.
","----neg----:
from functools import lru_cache


def square(x: int) -> int:
    return x * x


class Number:
    value: int

    @lru_cache
    def squared(self):
        return square(self.value)
----pos----:
from functools import lru_cache


@lru_cache
def square(x: int) -> int:
    return x * x


class Number:
    value: int

    def squared(self):
        return square(self.value)
",,"
<h1 id=""cached-instance-method-b019"">cached-instance-method (B019)<a class=""headerlink"" href=""#cached-instance-method-b019"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functools.html#functools.lru_cache"">Python documentation: <code>functools.lru_cache</code></a></li>
<li><a href=""https://docs.python.org/3/library/functools.html#functools.cache"">Python documentation: <code>functools.cache</code></a></li>
<li><a href=""https://www.youtube.com/watch?v=sVjtp6tGo0g"">don't lru_cache methods!</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/loop-variable-overrides-iterator/,B020,loop-variable-overrides-iterator,Loop control variable <code>{name}</code> overrides iterable it iterates,Rule is stable,Automatic fix not available,"What it does#
Checks for loop control variables that override the loop iterable.
","Why is this bad?#
Loop control variables should not override the loop iterable, as this can
lead to confusing behavior.
Instead, use a distinct variable name for any loop control variables.
","----neg----:
items = [1, 2, 3]

for items in items:
    print(items)
----pos----:
items = [1, 2, 3]

for item in items:
    print(item)
",,"
<h1 id=""loop-variable-overrides-iterator-b020"">loop-variable-overrides-iterator (B020)<a class=""headerlink"" href=""#loop-variable-overrides-iterator-b020"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-for-statement"">Python documentation: The <code>for</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/f-string-docstring/,B021,f-string-docstring,"f-string used as docstring. Python will interpret this as a joined string, rather than a docstring.",Rule is stable,Automatic fix not available,"What it does#
Checks for docstrings that are written via f-strings.
","Why is this bad?#
Python will interpret the f-string as a joined string, rather than as a
docstring. As such, the ""docstring"" will not be accessible via the
__doc__ attribute, nor will it be picked up by any automated
documentation tooling.
","----neg----:
def foo():
    f""""""Not a docstring.""""""
----pos----:
def foo():
    """"""A docstring.""""""
",,"
<h1 id=""f-string-docstring-b021"">f-string-docstring (B021)<a class=""headerlink"" href=""#f-string-docstring-b021"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0257/"">PEP 257</a></li>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#f-strings"">Python documentation: Formatted string literals</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/useless-contextlib-suppress/,B022,useless-contextlib-suppress,No arguments passed to <code>contextlib.suppress</code>. No exceptions will be suppressed and therefore this context manager is redundant,Rule is stable,Automatic fix not available,"What it does#
Checks for contextlib.suppress without arguments.
","Why is this bad?#
contextlib.suppress is a context manager that suppresses exceptions. It takes,
as arguments, the exceptions to suppress within the enclosed block. If no
exceptions are specified, then the context manager won't suppress any
exceptions, and is thus redundant.
Consider adding exceptions to the contextlib.suppress call, or removing the
context manager entirely.
","----neg----:
import contextlib

with contextlib.suppress():
    foo()
----pos----:
import contextlib

with contextlib.suppress(Exception):
    foo()
",,"
<h1 id=""useless-contextlib-suppress-b022"">useless-contextlib-suppress (B022)<a class=""headerlink"" href=""#useless-contextlib-suppress-b022"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/contextlib.html#contextlib.suppress"">Python documentation: contextlib.suppress</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/function-uses-loop-variable/,B023,function-uses-loop-variable,Function definition does not bind loop variable <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for function definitions that use a loop variable.
","Why is this bad?#
The loop variable is not bound in the function definition, so it will always
have the value it had in the last iteration when the function is called.
Instead, consider using a default argument to bind the loop variable at
function definition time. Or, use functools.partial.
","----neg----:
adders = [lambda x: x + i for i in range(3)]
values = [adder(1) for adder in adders]  # [3, 3, 3]
----pos----:
adders = [lambda x, i=i: x + i for i in range(3)]
values = [adder(1) for adder in adders]  # [1, 2, 3]
----other----:
Or:
from functools import partial

adders = [partial(lambda x, i: x + i, i) for i in range(3)]
values = [adder(1) for adder in adders]  # [1, 2, 3]

",,"
<h1 id=""function-uses-loop-variable-b023"">function-uses-loop-variable (B023)<a class=""headerlink"" href=""#function-uses-loop-variable-b023"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python-guide.org/writing/gotchas/#late-binding-closures"">The Hitchhiker's Guide to Python: Late Binding Closures</a></li>
<li><a href=""https://docs.python.org/3/library/functools.html#functools.partial"">Python documentation: functools.partial</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/abstract-base-class-without-abstract-method/,B024,abstract-base-class-without-abstract-method,"<code>{name}</code> is an abstract base class, but it has no abstract methods",Rule is stable,Automatic fix not available,"What it does#
Checks for abstract classes without abstract methods.
","Why is this bad?#
Abstract base classes are used to define interfaces. If they have no abstract
methods, they are not useful.
If the class is not meant to be used as an interface, it should not be an
abstract base class. Remove the ABC base class from the class definition,
or add an abstract method to the class.
","----neg----:
from abc import ABC


class Foo(ABC):
    def method(self):
        bar()
----pos----:
from abc import ABC, abstractmethod


class Foo(ABC):
    @abstractmethod
    def method(self):
        bar()
",,"
<h1 id=""abstract-base-class-without-abstract-method-b024"">abstract-base-class-without-abstract-method (B024)<a class=""headerlink"" href=""#abstract-base-class-without-abstract-method-b024"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/abc.html"">Python documentation: <code>abc</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/duplicate-try-block-exception/,B025,duplicate-try-block-exception,try-except block with duplicate exception <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for try-except blocks with duplicate exception handlers.
","Why is this bad?#
Duplicate exception handlers are redundant, as the first handler will catch
the exception, making the second handler unreachable.
","----neg----:
try:
    ...
except ValueError:
    ...
except ValueError:
    ...
----pos----:
try:
    ...
except ValueError:
    ...
",,"
<h1 id=""duplicate-try-block-exception-b025"">duplicate-try-block-exception (B025)<a class=""headerlink"" href=""#duplicate-try-block-exception-b025"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/star-arg-unpacking-after-keyword-arg/,B026,star-arg-unpacking-after-keyword-arg,Star-arg unpacking after a keyword argument is strongly discouraged,Rule is stable,Automatic fix not available,"What it does#
Checks for function calls that use star-argument unpacking after providing a
keyword argument
","Why is this bad?#
In Python, you can use star-argument unpacking to pass a list or tuple of
arguments to a function.
Providing a star-argument after a keyword argument can lead to confusing
behavior, and is only supported for backwards compatibility.
","----neg----:
def foo(x, y, z):
    return x, y, z


foo(1, 2, 3)  # (1, 2, 3)
foo(1, *[2, 3])  # (1, 2, 3)
# foo(x=1, *[2, 3])  # TypeError
# foo(y=2, *[1, 3])  # TypeError
foo(z=3, *[1, 2])  # (1, 2, 3)  # No error, but confusing!
----pos----:
def foo(x, y, z):
    return x, y, z


foo(1, 2, 3)  # (1, 2, 3)
foo(x=1, y=2, z=3)  # (1, 2, 3)
foo(*[1, 2, 3])  # (1, 2, 3)
foo(*[1, 2], 3)  # (1, 2, 3)
",,"
<h1 id=""star-arg-unpacking-after-keyword-arg-b026"">star-arg-unpacking-after-keyword-arg (B026)<a class=""headerlink"" href=""#star-arg-unpacking-after-keyword-arg-b026"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#calls"">Python documentation: Calls</a></li>
<li><a href=""https://github.com/python/cpython/issues/82741"">Disallow iterable argument unpacking after a keyword argument?</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/empty-method-without-abstract-decorator/,B027,empty-method-without-abstract-decorator,"<code>{name}</code> is an empty method in an abstract base class, but has no abstract decorator",Rule is stable,Automatic fix not available,"What it does#
Checks for empty methods in abstract base classes without an abstract
decorator.
","Why is this bad?#
Empty methods in abstract base classes without an abstract decorator are
indicative of unfinished code or a mistake.
Instead, add an abstract method decorated to indicate that it is abstract,
or implement the method.
","----neg----:
from abc import ABC


class Foo(ABC):
    def method(self):
        ...
----pos----:
from abc import ABC, abstractmethod


class Foo(ABC):
    @abstractmethod
    def method(self):
        ...
",,"
<h1 id=""empty-method-without-abstract-decorator-b027"">empty-method-without-abstract-decorator (B027)<a class=""headerlink"" href=""#empty-method-without-abstract-decorator-b027"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/abc.html"">Python documentation: abc</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-explicit-stacklevel/,B028,no-explicit-stacklevel,No explicit <code>stacklevel</code> keyword argument found,Rule is stable,Automatic fix not available,"What it does#
Checks for warnings.warn calls without an explicit stacklevel keyword
argument.
","Why is this bad?#
The warnings.warn method uses a stacklevel of 1 by default, which
limits the rendered stack trace to that of the line on which the
warn method is called.
It's recommended to use a stacklevel of 2 or higher, give the caller
more context about the warning.
","----neg----:
warnings.warn(""This is a warning"")
----pos----:
warnings.warn(""This is a warning"", stacklevel=2)
",,"
<h1 id=""no-explicit-stacklevel-b028"">no-explicit-stacklevel (B028)<a class=""headerlink"" href=""#no-explicit-stacklevel-b028"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/except-with-empty-tuple/,B029,except-with-empty-tuple,Using <code>except ():</code> with an empty tuple does not catch anything; add exceptions to handle,Rule is stable,Automatic fix not available,"What it does#
Checks for exception handlers that catch an empty tuple.
","Why is this bad?#
An exception handler that catches an empty tuple will not catch anything,
and is indicative of a mistake. Instead, add exceptions to the except
clause.
","----neg----:
try:
    1 / 0
except ():
    ...
----pos----:
try:
    1 / 0
except ZeroDivisionError:
    ...
",,"
<h1 id=""except-with-empty-tuple-b029"">except-with-empty-tuple (B029)<a class=""headerlink"" href=""#except-with-empty-tuple-b029"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/except-with-non-exception-classes/,B030,except-with-non-exception-classes,<code>except</code> handlers should only be exception classes or tuples of exception classes,Rule is stable,Automatic fix not available,"What it does#
Checks for exception handlers that catch non-exception classes.
","Why is this bad?#
Catching classes that do not inherit from BaseException will raise a
TypeError.
","----neg----:
try:
    1 / 0
except 1:
    ...
----pos----:
try:
    1 / 0
except ZeroDivisionError:
    ...
",,"
<h1 id=""except-with-non-exception-classes-b030"">except-with-non-exception-classes (B030)<a class=""headerlink"" href=""#except-with-non-exception-classes-b030"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#except-clause"">Python documentation: <code>except</code> clause</a></li>
<li><a href=""https://docs.python.org/3/library/exceptions.html#built-in-exceptions"">Python documentation: Built-in Exceptions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reuse-of-groupby-generator/,B031,reuse-of-groupby-generator,Using the generator returned from <code>itertools.groupby()</code> more than once will do nothing on the second usage,Rule is stable,Automatic fix not available,"What it does#
Checks for multiple usage of the generator returned from
itertools.groupby().
","Why is this bad?#
Using the generator more than once will do nothing on the second usage.
If that data is needed later, it should be stored as a list.
Examples:#
import itertools

for name, group in itertools.groupby(data):
    for _ in range(5):
        do_something_with_the_group(group)

Use instead:
import itertools

for name, group in itertools.groupby(data):
    values = list(group)
    for _ in range(5):
        do_something_with_the_group(values)

",,,"
<h1 id=""reuse-of-groupby-generator-b031"">reuse-of-groupby-generator (B031)<a class=""headerlink"" href=""#reuse-of-groupby-generator-b031"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unintentional-type-annotation/,B032,unintentional-type-annotation,Possible unintentional type annotation (using <code>:</code>). Did you mean to assign (using <code>=</code>)?,Rule is stable,Automatic fix not available,"What it does#
Checks for the unintentional use of type annotations.
","Why is this bad?#
The use of a colon (:) in lieu of an assignment (=) can be syntactically valid, but
is almost certainly a mistake when used in a subscript or attribute assignment.
","----neg----:
a[""b""]: 1
----pos----:
a[""b""] = 1
",,"
<h1 id=""unintentional-type-annotation-b032"">unintentional-type-annotation (B032)<a class=""headerlink"" href=""#unintentional-type-annotation-b032"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/duplicate-value/,B033,duplicate-value,Sets should not contain duplicate item <code>{value}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for set literals that contain duplicate items.
","Why is this bad?#
In Python, sets are unordered collections of unique elements. Including a
duplicate item in a set literal is redundant, as the duplicate item will be
replaced with a single item at runtime.
","----neg----:
{1, 2, 3, 1}
----pos----:
{1, 2, 3}
",,"
<h1 id=""duplicate-value-b033"">duplicate-value (B033)<a class=""headerlink"" href=""#duplicate-value-b033"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/re-sub-positional-args/,B034,re-sub-positional-args,<code>{method}</code> should pass <code>{param_name}</code> and <code>flags</code> as keyword arguments to avoid confusion due to unintuitive argument positions,Rule is stable,Automatic fix not available,"What it does#
Checks for calls to re.sub, re.subn, and re.split that pass count,
maxsplit, or flags as positional arguments.
","Why is this bad?#
Passing count, maxsplit, or flags as positional arguments to
re.sub, re.subn, or re.split can lead to confusion, as most methods in
the re module accept flags as the third positional argument, while
re.sub, re.subn, and re.split have different signatures.
Instead, pass count, maxsplit, and flags as keyword arguments.
","----neg----:
import re

re.split(""pattern"", ""replacement"", 1)
----pos----:
import re

re.split(""pattern"", ""replacement"", maxsplit=1)
",,"
<h1 id=""re-sub-positional-args-b034"">re-sub-positional-args (B034)<a class=""headerlink"" href=""#re-sub-positional-args-b034"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/re.html#re.sub"">Python documentation: <code>re.sub</code></a></li>
<li><a href=""https://docs.python.org/3/library/re.html#re.subn"">Python documentation: <code>re.subn</code></a></li>
<li><a href=""https://docs.python.org/3/library/re.html#re.split"">Python documentation: <code>re.split</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/static-key-dict-comprehension/,B035,static-key-dict-comprehension,Dictionary comprehension uses static key: <code>{key}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for dictionary comprehensions that use a static key, like a string
literal or a variable defined outside the comprehension.
","Why is this bad?#
Using a static key (like a string literal) in a dictionary comprehension
is usually a mistake, as it will result in a dictionary with only one key,
despite the comprehension iterating over multiple values.
","----neg----:
data = [""some"", ""Data""]
{""key"": value.upper() for value in data}
----pos----:
data = [""some"", ""Data""]
{value: value.upper() for value in data}
",,"
<h1 id=""static-key-dict-comprehension-b035"">static-key-dict-comprehension (B035)<a class=""headerlink"" href=""#static-key-dict-comprehension-b035"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/raise-without-from-inside-except/,B904,raise-without-from-inside-except,"Within an <code>except</code> clause, raise exceptions with <code>raise ... from err</code> or <code>raise ... from None</code> to distinguish them from errors in exception handling",Rule is stable,Automatic fix not available,"What it does#
Checks for raise statements in exception handlers that lack a from
clause.
","Why is this bad?#
In Python, raise can be used with or without an exception from which the
current exception is derived. This is known as exception chaining. When
printing the stack trace, chained exceptions are displayed in such a way
so as make it easier to trace the exception back to its root cause.
When raising an exception from within an except clause, always include a
from clause to facilitate exception chaining. If the exception is not
chained, it will be difficult to trace the exception back to its root cause.
","----neg----:
try:
    ...
except FileNotFoundError:
    if ...:
        raise RuntimeError(""..."")
    else:
        raise UserWarning(""..."")
----pos----:
try:
    ...
except FileNotFoundError as exc:
    if ...:
        raise RuntimeError(""..."") from None
    else:
        raise UserWarning(""..."") from exc
",,"
<h1 id=""raise-without-from-inside-except-b904"">raise-without-from-inside-except (B904)<a class=""headerlink"" href=""#raise-without-from-inside-except-b904"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement"">Python documentation: <code>raise</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/zip-without-explicit-strict/,B905,zip-without-explicit-strict,<code>zip()</code> without an explicit <code>strict=</code> parameter,Rule is stable,Automatic fix available,"What it does#
Checks for zip calls without an explicit strict parameter.
","Why is this bad?#
By default, if the iterables passed to zip are of different lengths, the
resulting iterator will be silently truncated to the length of the shortest
iterable. This can lead to subtle bugs.
Use the strict parameter to raise a ValueError if the iterables are of
non-uniform length.
","----neg----:
zip(a, b)
----pos----:
zip(a, b, strict=True)
----other----:
This rule's fix is marked as unsafe for zip calls that contain
**kwargs, as adding a check keyword argument to such a call may lead
to a duplicate keyword argument error.
",,"
<h1 id=""zip-without-explicit-strict-b905"">zip-without-explicit-strict (B905)<a class=""headerlink"" href=""#zip-without-explicit-strict-b905"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-bugbear</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#zip"">Python documentation: <code>zip</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/builtin-variable-shadowing/,A001,builtin-variable-shadowing,Variable <code>{name}</code> is shadowing a Python builtin,Rule is stable,Automatic fix not available,"What it does#
Checks for variable (and function) assignments that use the same name
as a builtin.
","Why is this bad?#
Reusing a builtin name for the name of a variable increases the
difficulty of reading and maintaining the code, and can cause
non-obvious errors, as readers may mistake the variable for the
builtin and vice versa.
Builtins can be marked as exceptions to this rule via the
lint.flake8-builtins.builtins-ignorelist configuration option.
","----neg----:
def find_max(list_of_lists):
    max = 0
    for flat_list in list_of_lists:
        for value in flat_list:
            max = max(max, value)  # TypeError: 'int' object is not callable
    return max
----pos----:
def find_max(list_of_lists):
    result = 0
    for flat_list in list_of_lists:
        for value in flat_list:
            result = max(result, value)
    return result
","https://docs.astral.sh/ruff/settings/#lint_flake8-builtins_builtins-ignorelist
lint.flake8-builtins.builtins-ignorelist
None","
<h1 id=""builtin-variable-shadowing-a001"">builtin-variable-shadowing (A001)<a class=""headerlink"" href=""#builtin-variable-shadowing-a001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-builtins</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/77552/id-is-a-bad-variable-name-in-python""><em>Why is it a bad idea to name a variable <code>id</code> in Python?</em></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/builtin-argument-shadowing/,A002,builtin-argument-shadowing,Argument <code>{name}</code> is shadowing a Python builtin,Rule is stable,Automatic fix not available,"What it does#
Checks for any function arguments that use the same name as a builtin.
","Why is this bad?#
Reusing a builtin name for the name of an argument increases the
difficulty of reading and maintaining the code, and can cause
non-obvious errors, as readers may mistake the argument for the
builtin and vice versa.
Builtins can be marked as exceptions to this rule via the
lint.flake8-builtins.builtins-ignorelist configuration option.
","----neg----:
def remove_duplicates(list, list2):
    result = set()
    for value in list:
        result.add(value)
    for value in list2:
        result.add(value)
    return list(result)  # TypeError: 'list' object is not callable
----pos----:
def remove_duplicates(list1, list2):
    result = set()
    for value in list1:
        result.add(value)
    for value in list2:
        result.add(value)
    return list(result)
","https://docs.astral.sh/ruff/settings/#lint_flake8-builtins_builtins-ignorelist
lint.flake8-builtins.builtins-ignorelist
None","
<h1 id=""builtin-argument-shadowing-a002"">builtin-argument-shadowing (A002)<a class=""headerlink"" href=""#builtin-argument-shadowing-a002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-builtins</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/9109333/is-it-bad-practice-to-use-a-built-in-function-name-as-an-attribute-or-method-ide""><em>Is it bad practice to use a built-in function name as an attribute or method identifier?</em></a></li>
<li><a href=""https://stackoverflow.com/questions/77552/id-is-a-bad-variable-name-in-python""><em>Why is it a bad idea to name a variable <code>id</code> in Python?</em></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/builtin-attribute-shadowing/,A003,builtin-attribute-shadowing,Python builtin is shadowed by class attribute <code>{name}</code> from {row},Rule is stable,Automatic fix not available,"What it does#
Checks for any class attributes or methods that use the same name as a
builtin.
","Why is this bad?#
Reusing a builtin name for the name of an attribute increases the
difficulty of reading and maintaining the code, and can cause
non-obvious errors, as readers may mistake the attribute for the
builtin and vice versa.
Since methods and class attributes typically cannot be referenced directly
from outside the class scope, this rule only applies to those methods
and attributes that both shadow a builtin and are referenced from within
the class scope, as in the following example, where the list[int] return
type annotation resolves to the list method, rather than the builtin:
class Class:
    @staticmethod
    def list() -> None:
        pass

    @staticmethod
    def repeat(value: int, times: int) -> list[int]:
        return [value] * times

Builtins can be marked as exceptions to this rule via the
lint.flake8-builtins.builtins-ignorelist configuration option, or
converted to the appropriate dunder method. Methods decorated with
@typing.override or @typing_extensions.override are also
ignored.
","class Class:
    @staticmethod
    def list() -> None:
        pass

    @staticmethod
    def repeat(value: int, times: int) -> list[int]:
        return [value] * times
","https://docs.astral.sh/ruff/settings/#lint_flake8-builtins_builtins-ignorelist
lint.flake8-builtins.builtins-ignorelist
None","
<h1 id=""builtin-attribute-shadowing-a003"">builtin-attribute-shadowing (A003)<a class=""headerlink"" href=""#builtin-attribute-shadowing-a003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-builtins</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-trailing-comma/,COM812,missing-trailing-comma,Trailing comma missing,Rule is stable,Automatic fix available,"What it does#
Checks for the absence of trailing commas.
","Why is this bad?#
The presence of a trailing comma can reduce diff size when parameters or
elements are added or removed from function calls, function definitions,
literals, etc.
","----neg----:
foo = {
    ""bar"": 1,
    ""baz"": 2
}
----pos----:
foo = {
    ""bar"": 1,
    ""baz"": 2,
}
",,"
<h1 id=""missing-trailing-comma-com812"">missing-trailing-comma (COM812)<a class=""headerlink"" href=""#missing-trailing-comma-com812"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-commas</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/trailing-comma-on-bare-tuple/,COM818,trailing-comma-on-bare-tuple,Trailing comma on bare tuple prohibited,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of trailing commas on bare (i.e., unparenthesized)
tuples.
","Why is this bad?#
The presence of a misplaced comma will cause Python to interpret the value
as a tuple, which can lead to unexpected behaviour.
","----neg----:
import json


foo = json.dumps({""bar"": 1}),
----pos----:
import json


foo = json.dumps({""bar"": 1})
----other----:
In the event that a tuple is intended, then use instead:
import json


foo = (json.dumps({""bar"": 1}),)

",,"
<h1 id=""trailing-comma-on-bare-tuple-com818"">trailing-comma-on-bare-tuple (COM818)<a class=""headerlink"" href=""#trailing-comma-on-bare-tuple-com818"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-commas</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/,COM819,prohibited-trailing-comma,Trailing comma prohibited,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of prohibited trailing commas.
","Why is this bad?#
Trailing commas are not essential in some cases and can therefore be viewed
as unnecessary.
","----neg----:
foo = (1, 2, 3,)
----pos----:
foo = (1, 2, 3)
",,"
<h1 id=""prohibited-trailing-comma-com819"">prohibited-trailing-comma (COM819)<a class=""headerlink"" href=""#prohibited-trailing-comma-com819"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-commas</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/missing-copyright-notice/,CPY001,missing-copyright-notice,Missing copyright notice at top of file,Rule is in preview,Automatic fix not available,"What it does#
Checks for the absence of copyright notices within Python files.
","Why is this bad?#
In some codebases, it's common to have a license header at the top of every
file. This rule ensures that the license header is present.
",,,"
<h1 id=""missing-copyright-notice-cpy001"">missing-copyright-notice (CPY001)<a class=""headerlink"" href=""#missing-copyright-notice-cpy001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-copyright</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-generator-list/,C400,unnecessary-generator-list,Unnecessary generator (rewrite using <code>list()</code>),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary generators that can be rewritten as list
comprehensions (or with list directly).
","Why is this bad?#
It is unnecessary to use list around a generator expression, since
there are equivalent comprehensions for these types. Using a
comprehension is clearer and more idiomatic.
Further, if the comprehension can be removed entirely, as in the case of
list(x for x in foo), it's better to use list(foo) directly, since it's
even more direct.
Examples#
list(f(x) for x in foo)
list(x for x in foo)

Use instead:
[f(x) for x in foo]
list(foo)

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-generator-list-c400"">unnecessary-generator-list (C400)<a class=""headerlink"" href=""#unnecessary-generator-list-c400"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-generator-set/,C401,unnecessary-generator-set,Unnecessary generator (rewrite as a <code>set</code> comprehension),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary generators that can be rewritten as set
comprehensions.
","Why is this bad?#
It is unnecessary to use set around a generator expression, since
there are equivalent comprehensions for these types. Using a
comprehension is clearer and more idiomatic.
Examples#
set(f(x) for x in foo)

Use instead:
{f(x) for x in foo}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-generator-set-c401"">unnecessary-generator-set (C401)<a class=""headerlink"" href=""#unnecessary-generator-set-c401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-generator-dict/,C402,unnecessary-generator-dict,Unnecessary generator (rewrite as a <code>dict</code> comprehension),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary generators that can be rewritten as dict
comprehensions.
","Why is this bad?#
It is unnecessary to use dict around a generator expression, since
there are equivalent comprehensions for these types. Using a
comprehension is clearer and more idiomatic.
Examples#
dict((x, f(x)) for x in foo)

Use instead:
{x: f(x) for x in foo}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-generator-dict-c402"">unnecessary-generator-dict (C402)<a class=""headerlink"" href=""#unnecessary-generator-dict-c402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-list-comprehension-set/,C403,unnecessary-list-comprehension-set,Unnecessary <code>list</code> comprehension (rewrite as a <code>set</code> comprehension),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list comprehensions.
","Why is this bad?#
It's unnecessary to use a list comprehension inside a call to set,
since there is an equivalent comprehension for this type.
Examples#
set([f(x) for x in foo])

Use instead:
{f(x) for x in foo}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-list-comprehension-set-c403"">unnecessary-list-comprehension-set (C403)<a class=""headerlink"" href=""#unnecessary-list-comprehension-set-c403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-list-comprehension-dict/,C404,unnecessary-list-comprehension-dict,Unnecessary <code>list</code> comprehension (rewrite as a <code>dict</code> comprehension),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list comprehensions.
","Why is this bad?#
It's unnecessary to use a list comprehension inside a call to dict,
since there is an equivalent comprehension for this type.
Examples#
dict([(x, f(x)) for x in foo])

Use instead:
{x: f(x) for x in foo}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-list-comprehension-dict-c404"">unnecessary-list-comprehension-dict (C404)<a class=""headerlink"" href=""#unnecessary-list-comprehension-dict-c404"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-set/,C405,unnecessary-literal-set,Unnecessary <code>{obj_type}</code> literal (rewrite as a <code>set</code> literal),Rule is stable,Automatic fix available,"What it does#
Checks for set calls that take unnecessary list or tuple literals
as arguments.
","Why is this bad?#
It's unnecessary to use a list or tuple literal within a call to set.
Instead, the expression can be rewritten as a set literal.
Examples#
set([1, 2])
set((1, 2))
set([])

Use instead:
{1, 2}
{1, 2}
set()

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-literal-set-c405"">unnecessary-literal-set (C405)<a class=""headerlink"" href=""#unnecessary-literal-set-c405"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-dict/,C406,unnecessary-literal-dict,Unnecessary <code>{obj_type}</code> literal (rewrite as a <code>dict</code> literal),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list or tuple literals.
","Why is this bad?#
It's unnecessary to use a list or tuple literal within a call to dict.
It can be rewritten as a dict literal ({}).
Examples#
dict([(1, 2), (3, 4)])
dict(((1, 2), (3, 4)))
dict([])

Use instead:
{1: 2, 3: 4}
{1: 2, 3: 4}
{}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-literal-dict-c406"">unnecessary-literal-dict (C406)<a class=""headerlink"" href=""#unnecessary-literal-dict-c406"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-collection-call/,C408,unnecessary-collection-call,Unnecessary <code>{obj_type}</code> call (rewrite as a literal),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary dict, list or tuple calls that can be
rewritten as empty literals.
","Why is this bad?#
It's unnecessary to call, e.g., dict() as opposed to using an empty
literal ({}). The former is slower because the name dict must be
looked up in the global scope in case it has been rebound.
Examples#
dict()
dict(a=1, b=2)
list()
tuple()

Use instead:
{}
{""a"": 1, ""b"": 2}
[]
()

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,"https://docs.astral.sh/ruff/settings/#lint_flake8-comprehensions_allow-dict-calls-with-keyword-arguments
lint.flake8-comprehensions.allow-dict-calls-with-keyword-arguments
None","
<h1 id=""unnecessary-collection-call-c408"">unnecessary-collection-call (C408)<a class=""headerlink"" href=""#unnecessary-collection-call-c408"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-within-tuple-call/,C409,unnecessary-literal-within-tuple-call,Unnecessary <code>{literal}</code> literal passed to <code>tuple()</code> (rewrite as a <code>tuple</code> literal),Rule is stable,Automatic fix available,"What it does#
Checks for tuple calls that take unnecessary list or tuple literals as
arguments.
","Why is this bad?#
It's unnecessary to use a list or tuple literal within a tuple() call,
since there is a literal syntax for these types.
If a list literal was passed, then it should be rewritten as a tuple
literal. Otherwise, if a tuple literal was passed, then the outer call
to tuple() should be removed.
Examples#
tuple([1, 2])
tuple((1, 2))

Use instead:
(1, 2)
(1, 2)

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-literal-within-tuple-call-c409"">unnecessary-literal-within-tuple-call (C409)<a class=""headerlink"" href=""#unnecessary-literal-within-tuple-call-c409"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-within-list-call/,C410,unnecessary-literal-within-list-call,Unnecessary <code>{literal}</code> literal passed to <code>list()</code> (remove the outer call to <code>list()</code>),Rule is stable,Automatic fix available,"What it does#
Checks for list calls that take unnecessary list or tuple literals as
arguments.
","Why is this bad?#
It's unnecessary to use a list or tuple literal within a list() call,
since there is a literal syntax for these types.
If a list literal is passed in, then the outer call to list() should be
removed. Otherwise, if a tuple literal is passed in, then it should be
rewritten as a list literal.
Examples#
list([1, 2])
list((1, 2))

Use instead:
[1, 2]
[1, 2]

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-literal-within-list-call-c410"">unnecessary-literal-within-list-call (C410)<a class=""headerlink"" href=""#unnecessary-literal-within-list-call-c410"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-list-call/,C411,unnecessary-list-call,Unnecessary <code>list</code> call (remove the outer call to <code>list()</code>),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list calls around list comprehensions.
","Why is this bad?#
It is redundant to use a list call around a list comprehension.
Examples#
list([f(x) for x in foo])

Use instead
[f(x) for x in foo]

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-list-call-c411"">unnecessary-list-call (C411)<a class=""headerlink"" href=""#unnecessary-list-call-c411"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-call-around-sorted/,C413,unnecessary-call-around-sorted,Unnecessary <code>{func}</code> call around <code>sorted()</code>,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list or reversed calls around sorted
calls.
","Why is this bad?#
It is unnecessary to use list around sorted, as the latter already
returns a list.
It is also unnecessary to use reversed around sorted, as the latter
has a reverse argument that can be used in lieu of an additional
reversed call.
In both cases, it's clearer to avoid the redundant call.
Examples#
reversed(sorted(iterable))

Use instead:
sorted(iterable, reverse=True)

Fix safety#
This rule's fix is marked as unsafe, as reversed and reverse=True will
yield different results in the event of custom sort keys or equality
functions. Specifically, reversed will reverse the order of the
collection, while sorted with reverse=True will perform a stable
reverse sort, which will preserve the order of elements that compare as
equal.
",,,"
<h1 id=""unnecessary-call-around-sorted-c413"">unnecessary-call-around-sorted (C413)<a class=""headerlink"" href=""#unnecessary-call-around-sorted-c413"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-double-cast-or-process/,C414,unnecessary-double-cast-or-process,Unnecessary <code>{inner}</code> call within <code>{outer}()</code>,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list, reversed, set, sorted, and tuple
call within list, set, sorted, and tuple calls.
","Why is this bad?#
It's unnecessary to double-cast or double-process iterables by wrapping
the listed functions within an additional list, set, sorted, or
tuple call. Doing so is redundant and can be confusing for readers.
Examples#
list(tuple(iterable))

Use instead:
list(iterable)

This rule applies to a variety of functions, including list, reversed,
set, sorted, and tuple. For example:

Instead of list(list(iterable)), use list(iterable).
Instead of list(tuple(iterable)), use list(iterable).
Instead of tuple(list(iterable)), use tuple(iterable).
Instead of tuple(tuple(iterable)), use tuple(iterable).
Instead of set(set(iterable)), use set(iterable).
Instead of set(list(iterable)), use set(iterable).
Instead of set(tuple(iterable)), use set(iterable).
Instead of set(sorted(iterable)), use set(iterable).
Instead of set(reversed(iterable)), use set(iterable).
Instead of sorted(list(iterable)), use sorted(iterable).
Instead of sorted(tuple(iterable)), use sorted(iterable).
Instead of sorted(sorted(iterable)), use sorted(iterable).
Instead of sorted(reversed(iterable)), use sorted(iterable).

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-double-cast-or-process-c414"">unnecessary-double-cast-or-process (C414)<a class=""headerlink"" href=""#unnecessary-double-cast-or-process-c414"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-subscript-reversal/,C415,unnecessary-subscript-reversal,Unnecessary subscript reversal of iterable within <code>{func}()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for unnecessary subscript reversal of iterable.
","Why is this bad?#
It's unnecessary to reverse the order of an iterable when passing it
into reversed(), set() or sorted() functions as they will change
the order of the elements again.
Examples#
sorted(iterable[::-1])
set(iterable[::-1])
reversed(iterable[::-1])

Use instead:
sorted(iterable)
set(iterable)
iterable

",,,"
<h1 id=""unnecessary-subscript-reversal-c415"">unnecessary-subscript-reversal (C415)<a class=""headerlink"" href=""#unnecessary-subscript-reversal-c415"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-comprehension/,C416,unnecessary-comprehension,Unnecessary <code>{obj_type}</code> comprehension (rewrite using <code>{obj_type}()</code>),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary dict, list, and set comprehension.
","Why is this bad?#
It's unnecessary to use a dict/list/set comprehension to build a
data structure if the elements are unchanged. Wrap the iterable with
dict(), list(), or set() instead.
Examples#
{a: b for a, b in iterable}
[x for x in iterable]
{x for x in iterable}

Use instead:
dict(iterable)
list(iterable)
set(iterable)

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the comprehension. In most cases, though, comments will be
preserved.
",,,"
<h1 id=""unnecessary-comprehension-c416"">unnecessary-comprehension (C416)<a class=""headerlink"" href=""#unnecessary-comprehension-c416"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-map/,C417,unnecessary-map,Unnecessary <code>map</code> usage (rewrite using a {object_type}),Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary map calls with lambda functions.
","Why is this bad?#
Using map(func, iterable) when func is a lambda is slower than
using a generator expression or a comprehension, as the latter approach
avoids the function call overhead, in addition to being more readable.
This rule also applies to map calls within list, set, and dict
calls. For example:

Instead of list(map(lambda num: num * 2, nums)), use
    [num * 2 for num in nums].
Instead of set(map(lambda num: num % 2 == 0, nums)), use
    {num % 2 == 0 for num in nums}.
Instead of dict(map(lambda v: (v, v ** 2), values)), use
    {v: v ** 2 for v in values}.

Examples#
map(lambda x: x + 1, iterable)

Use instead:
(x + 1 for x in iterable)

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-map-c417"">unnecessary-map (C417)<a class=""headerlink"" href=""#unnecessary-map-c417"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-within-dict-call/,C418,unnecessary-literal-within-dict-call,Unnecessary <code>dict</code> {kind} passed to <code>dict()</code> (remove the outer call to <code>dict()</code>),Rule is stable,Automatic fix available,"What it does#
Checks for dict calls that take unnecessary dict literals or dict
comprehensions as arguments.
","Why is this bad?#
It's unnecessary to wrap a dict literal or comprehension within a dict
call, since the literal or comprehension syntax already returns a dict.
Examples#
dict({})
dict({""a"": 1})

Use instead:
{}
{""a"": 1}

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the call. In most cases, though, comments will be preserved.
",,,"
<h1 id=""unnecessary-literal-within-dict-call-c418"">unnecessary-literal-within-dict-call (C418)<a class=""headerlink"" href=""#unnecessary-literal-within-dict-call-c418"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-comprehension-any-all/,C419,unnecessary-comprehension-any-all,Unnecessary list comprehension,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary list comprehensions passed to any and all.
","Why is this bad?#
any and all take any iterators, including generators. Converting a generator to a list
by way of a list comprehension is unnecessary and reduces performance due to the
overhead of creating the list.
For example, compare the performance of all with a list comprehension against that
of a generator (~40x faster here):
In [1]: %timeit all([i for i in range(1000)])
8.14 µs ± 25.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)

In [2]: %timeit all(i for i in range(1000))
212 ns ± 0.892 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)

Examples#
any([x.id for x in bar])
all([x.id for x in bar])

Use instead:
any(x.id for x in bar)
all(x.id for x in bar)

Fix safety#
This rule's fix is marked as unsafe, as it may occasionally drop comments
when rewriting the comprehension. In most cases, though, comments will be
preserved.
",,,"
<h1 id=""unnecessary-comprehension-any-all-c419"">unnecessary-comprehension-any-all (C419)<a class=""headerlink"" href=""#unnecessary-comprehension-any-all-c419"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-comprehensions</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/call-datetime-without-tzinfo/,DTZ001,call-datetime-without-tzinfo,The use of <code>datetime.datetime()</code> without <code>tzinfo</code> argument is not allowed,Rule is stable,Automatic fix not available,"What it does#
Checks for datetime instantiations that lack a tzinfo argument.
","Why is this bad?#
datetime objects are ""naive"" by default, in that they do not include
timezone information. ""Naive"" objects are easy to understand, but ignore
some aspects of reality, which can lead to subtle bugs. Timezone-aware
datetime objects are preferred, as they represent a specific moment in
time, unlike ""naive"" objects.
By providing a tzinfo value, a datetime can be made timezone-aware.
","----neg----:
import datetime

datetime.datetime(2000, 1, 1, 0, 0, 0)
----pos----:
import datetime

datetime.datetime(2000, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime(2000, 1, 1, 0, 0, 0, tzinfo=datetime.UTC)

",,"
<h1 id=""call-datetime-without-tzinfo-dtz001"">call-datetime-without-tzinfo (DTZ001)<a class=""headerlink"" href=""#call-datetime-without-tzinfo-dtz001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/call-datetime-today/,DTZ002,call-datetime-today,"The use of <code>datetime.datetime.today()</code> is not allowed, use <code>datetime.datetime.now(tz=)</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.datetime.today().
","Why is this bad?#
datetime objects are ""naive"" by default, in that they do not include
timezone information. ""Naive"" objects are easy to understand, but ignore
some aspects of reality, which can lead to subtle bugs. Timezone-aware
datetime objects are preferred, as they represent a specific moment in
time, unlike ""naive"" objects.
datetime.datetime.today() creates a ""naive"" object; instead, use
datetime.datetime.now(tz=) to create a timezone-aware object.
","----neg----:
import datetime

datetime.datetime.today()
----pos----:
import datetime

datetime.datetime.now(tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.now(tz=datetime.UTC)

",,"
<h1 id=""call-datetime-today-dtz002"">call-datetime-today (DTZ002)<a class=""headerlink"" href=""#call-datetime-today-dtz002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/call-datetime-utcnow/,DTZ003,call-datetime-utcnow,"The use of <code>datetime.datetime.utcnow()</code> is not allowed, use <code>datetime.datetime.now(tz=)</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.datetime.utcnow().
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.datetime.utcnow() returns a naive datetime object; instead, use
datetime.datetime.now(tz=) to return a timezone-aware object.
","----neg----:
import datetime

datetime.datetime.utcnow()
----pos----:
import datetime

datetime.datetime.now(tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.now(tz=datetime.UTC)

",,"
<h1 id=""call-datetime-utcnow-dtz003"">call-datetime-utcnow (DTZ003)<a class=""headerlink"" href=""#call-datetime-utcnow-dtz003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-datetime-utcfromtimestamp/,DTZ004,call-datetime-utcfromtimestamp,"The use of <code>datetime.datetime.utcfromtimestamp()</code> is not allowed, use <code>datetime.datetime.fromtimestamp(ts, tz=)</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.datetime.utcfromtimestamp().
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.datetime.utcfromtimestamp() returns a naive datetime object;
instead, use datetime.datetime.fromtimestamp(ts, tz=) to return a
timezone-aware object.
","----neg----:
import datetime

datetime.datetime.utcfromtimestamp()
----pos----:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)

",,"
<h1 id=""call-datetime-utcfromtimestamp-dtz004"">call-datetime-utcfromtimestamp (DTZ004)<a class=""headerlink"" href=""#call-datetime-utcfromtimestamp-dtz004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-datetime-now-without-tzinfo/,DTZ005,call-datetime-now-without-tzinfo,The use of <code>datetime.datetime.now()</code> without <code>tz</code> argument is not allowed,Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.datetime.now() without a tz argument.
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.datetime.now() returns a naive datetime object. Instead, use
datetime.datetime.now(tz=) to return a timezone-aware object.
","----neg----:
import datetime

datetime.datetime.now()
----pos----:
import datetime

datetime.datetime.now(tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.now(tz=datetime.UTC)

",,"
<h1 id=""call-datetime-now-without-tzinfo-dtz005"">call-datetime-now-without-tzinfo (DTZ005)<a class=""headerlink"" href=""#call-datetime-now-without-tzinfo-dtz005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-datetime-fromtimestamp/,DTZ006,call-datetime-fromtimestamp,The use of <code>datetime.datetime.fromtimestamp()</code> without <code>tz</code> argument is not allowed,Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.datetime.fromtimestamp() without a tz
argument.
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.datetime.fromtimestamp(ts) returns a naive datetime object.
Instead, use datetime.datetime.fromtimestamp(ts, tz=) to return a
timezone-aware object.
","----neg----:
import datetime

datetime.datetime.fromtimestamp(946684800)
----pos----:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)

",,"
<h1 id=""call-datetime-fromtimestamp-dtz006"">call-datetime-fromtimestamp (DTZ006)<a class=""headerlink"" href=""#call-datetime-fromtimestamp-dtz006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-datetime-strptime-without-zone/,DTZ007,call-datetime-strptime-without-zone,The use of <code>datetime.datetime.strptime()</code> without %z must be followed by <code>.replace(tzinfo=)</code> or <code>.astimezone()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of datetime.datetime.strptime() that lead to naive
datetime objects.
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.datetime.strptime() without %z returns a naive datetime
object. Follow it with .replace(tzinfo=) or .astimezone().
","----neg----:
import datetime

datetime.datetime.strptime(""2022/01/31"", ""%Y/%m/%d"")
----pos----:
Instead, use .replace(tzinfo=):----other----:

import datetime

datetime.datetime.strptime(""2022/01/31"", ""%Y/%m/%d"").replace(
    tzinfo=datetime.timezone.utc
)

Or, use .astimezone():
import datetime

datetime.datetime.strptime(""2022/01/31"", ""%Y/%m/%d"").astimezone(datetime.timezone.utc)

On Python 3.11 and later, datetime.timezone.utc can be replaced with
datetime.UTC.
",,"
<h1 id=""call-datetime-strptime-without-zone-dtz007"">call-datetime-strptime-without-zone (DTZ007)<a class=""headerlink"" href=""#call-datetime-strptime-without-zone-dtz007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
<li><a href=""https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior"">Python documentation: <code>strftime()</code> and <code>strptime()</code> Behavior</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-date-today/,DTZ011,call-date-today,"The use of <code>datetime.date.today()</code> is not allowed, use <code>datetime.datetime.now(tz=).date()</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.date.today().
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.date.today returns a naive datetime object. Instead, use
datetime.datetime.now(tz=).date() to return a timezone-aware object.
","----neg----:
import datetime

datetime.datetime.today()
----pos----:
import datetime

datetime.datetime.now(tz=datetime.timezone.utc).date()
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.now(tz=datetime.UTC).date()

",,"
<h1 id=""call-date-today-dtz011"">call-date-today (DTZ011)<a class=""headerlink"" href=""#call-date-today-dtz011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/call-date-fromtimestamp/,DTZ012,call-date-fromtimestamp,"The use of <code>datetime.date.fromtimestamp()</code> is not allowed, use <code>datetime.datetime.fromtimestamp(ts, tz=).date()</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for usage of datetime.date.fromtimestamp().
","Why is this bad?#
Python datetime objects can be naive or timezone-aware. While an aware
object represents a specific moment in time, a naive object does not
contain enough information to unambiguously locate itself relative to other
datetime objects. Since this can lead to errors, it is recommended to
always use timezone-aware objects.
datetime.date.fromtimestamp(ts) returns a naive datetime object.
Instead, use datetime.datetime.fromtimestamp(ts, tz=) to return a
timezone-aware object.
","----neg----:
import datetime

datetime.date.fromtimestamp(946684800)
----pos----:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.timezone.utc)
----other----:
Or, for Python 3.11 and later:
import datetime

datetime.datetime.fromtimestamp(946684800, tz=datetime.UTC)

",,"
<h1 id=""call-date-fromtimestamp-dtz012"">call-date-fromtimestamp (DTZ012)<a class=""headerlink"" href=""#call-date-fromtimestamp-dtz012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-datetimez</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"">Python documentation: Aware and Naive Objects</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/debugger/,T100,debugger,Trace found: <code>{name}</code> used,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of debugger calls and imports.
","Why is this bad?#
Debugger calls and imports should be used for debugging purposes only. The
presence of a debugger call or import in production code is likely a
mistake and may cause unintended behavior, such as exposing sensitive
information or causing the program to hang.
Instead, consider using a logging library to log information about the
program's state, and writing tests to verify that the program behaves
as expected.
","def foo():
    breakpoint()
",,"
<h1 id=""debugger-t100"">debugger (T100)<a class=""headerlink"" href=""#debugger-t100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-debugger</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pdb.html"">Python documentation: <code>pdb</code> — The Python Debugger</a></li>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code> — Logging facility for Python</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/django-nullable-model-string-field/,DJ001,django-nullable-model-string-field,Avoid using <code>null=True</code> on string-based fields such as <code>{field_name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks nullable string-based fields (like CharField and TextField)
in Django models.
","Why is this bad?#
If a string-based field is nullable, then your model will have two possible
representations for ""no data"": None and the empty string. This can lead to
confusion, as clients of the API have to check for both None and the
empty string when trying to determine if the field has data.
The Django convention is to use the empty string in lieu of None for
string-based fields.
","----neg----:
from django.db import models


class MyModel(models.Model):
    field = models.CharField(max_length=255, null=True)
----pos----:
from django.db import models


class MyModel(models.Model):
    field = models.CharField(max_length=255, default="""")
",,"
<h1 id=""django-nullable-model-string-field-dj001"">django-nullable-model-string-field (DJ001)<a class=""headerlink"" href=""#django-nullable-model-string-field-dj001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-locals-in-render-function/,DJ003,django-locals-in-render-function,Avoid passing <code>locals()</code> as context to a <code>render</code> function,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of locals() in render functions.
","Why is this bad?#
Using locals() can expose internal variables or other unintentional
data to the rendered template.
","----neg----:
from django.shortcuts import render


def index(request):
    posts = Post.objects.all()
    return render(request, ""app/index.html"", locals())
----pos----:
from django.shortcuts import render


def index(request):
    posts = Post.objects.all()
    context = {""posts"": posts}
    return render(request, ""app/index.html"", context)
",,"
<h1 id=""django-locals-in-render-function-dj003"">django-locals-in-render-function (DJ003)<a class=""headerlink"" href=""#django-locals-in-render-function-dj003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-exclude-with-model-form/,DJ006,django-exclude-with-model-form,"Do not use <code>exclude</code> with <code>ModelForm</code>, use <code>fields</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for the use of exclude in Django ModelForm classes.
","Why is this bad?#
If a ModelForm includes the exclude attribute, any new field that
is added to the model will automatically be exposed for modification.
","----neg----:
from django.forms import ModelForm


class PostForm(ModelForm):
    class Meta:
        model = Post
        exclude = [""author""]
----pos----:
from django.forms import ModelForm


class PostForm(ModelForm):
    class Meta:
        model = Post
        fields = [""title"", ""content""]
",,"
<h1 id=""django-exclude-with-model-form-dj006"">django-exclude-with-model-form (DJ006)<a class=""headerlink"" href=""#django-exclude-with-model-form-dj006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-all-with-model-form/,DJ007,django-all-with-model-form,"Do not use <code>__all__</code> with <code>ModelForm</code>, use <code>fields</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for the use of fields = ""__all__"" in Django ModelForm
classes.
","Why is this bad?#
If a ModelForm includes the fields = ""__all__"" attribute, any new
field that is added to the model will automatically be exposed for
modification.
","----neg----:
from django.forms import ModelForm


class PostForm(ModelForm):
    class Meta:
        model = Post
        fields = ""__all__""
----pos----:
from django.forms import ModelForm


class PostForm(ModelForm):
    class Meta:
        model = Post
        fields = [""title"", ""content""]
",,"
<h1 id=""django-all-with-model-form-dj007"">django-all-with-model-form (DJ007)<a class=""headerlink"" href=""#django-all-with-model-form-dj007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-model-without-dunder-str/,DJ008,django-model-without-dunder-str,Model does not define <code>__str__</code> method,Rule is stable,Automatic fix not available,"What it does#
Checks that a __str__ method is defined in Django models.
","Why is this bad?#
Django models should define a __str__ method to return a string representation
of the model instance, as Django calls this method to display the object in
the Django Admin and elsewhere.
Models without a __str__ method will display a non-meaningful representation
of the object in the Django Admin.
","----neg----:
from django.db import models


class MyModel(models.Model):
    field = models.CharField(max_length=255)
----pos----:
from django.db import models


class MyModel(models.Model):
    field = models.CharField(max_length=255)

    def __str__(self):
        return f""{self.field}""
",,"
<h1 id=""django-model-without-dunder-str-dj008"">django-model-without-dunder-str (DJ008)<a class=""headerlink"" href=""#django-model-without-dunder-str-dj008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-unordered-body-content-in-model/,DJ012,django-unordered-body-content-in-model,"Order of model's inner classes, methods, and fields does not follow the Django Style Guide: {element_type} should come before {prev_element_type}",Rule is stable,Automatic fix not available,"What it does#
Checks for the order of Model's inner classes, methods, and fields as per
the Django Style Guide.
","Why is this bad?#
The Django Style Guide specifies that the order of Model inner classes,
attributes and methods should be as follows:

All database fields
Custom manager attributes
class Meta
def __str__()
def save()
def get_absolute_url()
Any custom methods

Examples#
from django.db import models


class StrBeforeFieldModel(models.Model):
    class Meta:
        verbose_name = ""test""
        verbose_name_plural = ""tests""

    def __str__(self):
        return ""foobar""

    first_name = models.CharField(max_length=32)
    last_name = models.CharField(max_length=40)

Use instead:
from django.db import models


class StrBeforeFieldModel(models.Model):
    first_name = models.CharField(max_length=32)
    last_name = models.CharField(max_length=40)

    class Meta:
        verbose_name = ""test""
        verbose_name_plural = ""tests""

    def __str__(self):
        return ""foobar""

",,,"
<h1 id=""django-unordered-body-content-in-model-dj012"">django-unordered-body-content-in-model (DJ012)<a class=""headerlink"" href=""#django-unordered-body-content-in-model-dj012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/django-non-leading-receiver-decorator/,DJ013,django-non-leading-receiver-decorator,<code>@receiver</code> decorator must be on top of all the other decorators,Rule is stable,Automatic fix not available,"What it does#
Checks that Django's @receiver decorator is listed first, prior to
any other decorators.
","Why is this bad?#
Django's @receiver decorator is special in that it does not return
a wrapped function. Rather, @receiver connects the decorated function
to a signal. If any other decorators are listed before @receiver,
the decorated function will not be connected to the signal.
","----neg----:
from django.dispatch import receiver
from django.db.models.signals import post_save


@transaction.atomic
@receiver(post_save, sender=MyModel)
def my_handler(sender, instance, created, **kwargs):
    pass
----pos----:
from django.dispatch import receiver
from django.db.models.signals import post_save


@receiver(post_save, sender=MyModel)
@transaction.atomic
def my_handler(sender, instance, created, **kwargs):
    pass
",,"
<h1 id=""django-non-leading-receiver-decorator-dj013"">django-non-leading-receiver-decorator (DJ013)<a class=""headerlink"" href=""#django-non-leading-receiver-decorator-dj013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-django</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/raw-string-in-exception/,EM101,raw-string-in-exception,"Exception must not use a string literal, assign to variable first",Rule is stable,Automatic fix available,"What it does#
Checks for the use of string literals in exception constructors.
","Why is this bad?#
Python includes the raise in the default traceback (and formatters
like Rich and IPython do too).
By using a string literal, the error message will be duplicated in the
traceback, which can make the traceback less readable.
","----neg----:
None----pos----:
None----other----:
Given:
raise RuntimeError(""'Some value' is incorrect"")

Python will produce a traceback like:
Traceback (most recent call last):
  File ""tmp.py"", line 2, in <module>
    raise RuntimeError(""Some value is incorrect"")
RuntimeError: 'Some value' is incorrect

Instead, assign the string to a variable:
msg = ""'Some value' is incorrect""
raise RuntimeError(msg)

Which will produce a traceback like:
Traceback (most recent call last):
  File ""tmp.py"", line 3, in <module>
    raise RuntimeError(msg)
RuntimeError: 'Some value' is incorrect

",,"
<h1 id=""raw-string-in-exception-em101"">raw-string-in-exception (EM101)<a class=""headerlink"" href=""#raw-string-in-exception-em101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-errmsg</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/f-string-in-exception/,EM102,f-string-in-exception,"Exception must not use an f-string literal, assign to variable first",Rule is stable,Automatic fix available,"What it does#
Checks for the use of f-strings in exception constructors.
","Why is this bad?#
Python includes the raise in the default traceback (and formatters
like Rich and IPython do too).
By using an f-string, the error message will be duplicated in the
traceback, which can make the traceback less readable.
","----neg----:
None----pos----:
None----other----:
Given:
sub = ""Some value""
raise RuntimeError(f""{sub!r} is incorrect"")

Python will produce a traceback like:
Traceback (most recent call last):
  File ""tmp.py"", line 2, in <module>
    raise RuntimeError(f""{sub!r} is incorrect"")
RuntimeError: 'Some value' is incorrect

Instead, assign the string to a variable:
sub = ""Some value""
msg = f""{sub!r} is incorrect""
raise RuntimeError(msg)

Which will produce a traceback like:
  File ""tmp.py"", line 3, in <module>
    raise RuntimeError(msg)
RuntimeError: 'Some value' is incorrect

",,"
<h1 id=""f-string-in-exception-em102"">f-string-in-exception (EM102)<a class=""headerlink"" href=""#f-string-in-exception-em102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-errmsg</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/dot-format-in-exception/,EM103,dot-format-in-exception,"Exception must not use a <code>.format()</code> string directly, assign to variable first",Rule is stable,Automatic fix available,"What it does#
Checks for the use of .format calls on string literals in exception
constructors.
","Why is this bad?#
Python includes the raise in the default traceback (and formatters
like Rich and IPython do too).
By using a .format call, the error message will be duplicated in the
traceback, which can make the traceback less readable.
","----neg----:
None----pos----:
None----other----:
Given:
sub = ""Some value""
raise RuntimeError(""'{}' is incorrect"".format(sub))

Python will produce a traceback like:
Traceback (most recent call last):
  File ""tmp.py"", line 2, in <module>
    raise RuntimeError(""'{}' is incorrect"".format(sub))
RuntimeError: 'Some value' is incorrect

Instead, assign the string to a variable:
sub = ""Some value""
msg = ""'{}' is incorrect"".format(sub)
raise RuntimeError(msg)

Which will produce a traceback like:
Traceback (most recent call last):
  File ""tmp.py"", line 3, in <module>
    raise RuntimeError(msg)
RuntimeError: 'Some value' is incorrect

",,"
<h1 id=""dot-format-in-exception-em103"">dot-format-in-exception (EM103)<a class=""headerlink"" href=""#dot-format-in-exception-em103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-errmsg</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/shebang-not-executable/,EXE001,shebang-not-executable,Shebang is present but file is not executable,Rule is stable,Automatic fix not available,"What it does#
Checks for a shebang directive in a file that is not executable.
","Why is this bad?#
In Python, a shebang (also known as a hashbang) is the first line of a
script, which specifies the interpreter that should be used to run the
script.
The presence of a shebang suggests that a file is intended to be
executable. If a file contains a shebang but is not executable, then the
shebang is misleading, or the file is missing the executable bit.
If the file is meant to be executable, add a shebang; otherwise, remove the
executable bit from the file.
This rule is only available on Unix-like systems.
",,,"
<h1 id=""shebang-not-executable-exe001"">shebang-not-executable (EXE001)<a class=""headerlink"" href=""#shebang-not-executable-exe001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-executable</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts"">Python documentation: Executable Python Scripts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/shebang-missing-executable-file/,EXE002,shebang-missing-executable-file,The file is executable but no shebang is present,Rule is stable,Automatic fix not available,"What it does#
Checks for executable .py files that do not have a shebang.
","Why is this bad?#
In Python, a shebang (also known as a hashbang) is the first line of a
script, which specifies the interpreter that should be used to run the
script.
If a .py file is executable, but does not have a shebang, it may be run
with the wrong interpreter, or fail to run at all.
If the file is meant to be executable, add a shebang; otherwise, remove the
executable bit from the file.
This rule is only available on Unix-like systems.
",,,"
<h1 id=""shebang-missing-executable-file-exe002"">shebang-missing-executable-file (EXE002)<a class=""headerlink"" href=""#shebang-missing-executable-file-exe002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-executable</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts"">Python documentation: Executable Python Scripts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/shebang-missing-python/,EXE003,shebang-missing-python,Shebang should contain <code>python</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for a shebang directive in .py files that does not contain python.
","Why is this bad?#
In Python, a shebang (also known as a hashbang) is the first line of a
script, which specifies the interpreter that should be used to run the
script.
For Python scripts, the shebang must contain python to indicate that the
script should be executed as a Python script. If the shebang does not
contain python, then the file will be executed with the default
interpreter, which is likely a mistake.
","----neg----:
#!/usr/bin/env bash
----pos----:
#!/usr/bin/env python3
",,"
<h1 id=""shebang-missing-python-exe003"">shebang-missing-python (EXE003)<a class=""headerlink"" href=""#shebang-missing-python-exe003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-executable</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts"">Python documentation: Executable Python Scripts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/shebang-leading-whitespace/,EXE004,shebang-leading-whitespace,Avoid whitespace before shebang,Rule is stable,Automatic fix available,"What it does#
Checks for whitespace before a shebang directive.
","Why is this bad?#
In Python, a shebang (also known as a hashbang) is the first line of a
script, which specifies the interpreter that should be used to run the
script.
The shebang's #! prefix must be the first two characters of a file. The
presence of whitespace before the shebang will cause the shebang to be
ignored, which is likely a mistake.
","----neg----:
 #!/usr/bin/env python3
----pos----:
#!/usr/bin/env python3
",,"
<h1 id=""shebang-leading-whitespace-exe004"">shebang-leading-whitespace (EXE004)<a class=""headerlink"" href=""#shebang-leading-whitespace-exe004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-executable</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts"">Python documentation: Executable Python Scripts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/shebang-not-first-line/,EXE005,shebang-not-first-line,Shebang should be at the beginning of the file,Rule is stable,Automatic fix not available,"What it does#
Checks for a shebang directive that is not at the beginning of the file.
","Why is this bad?#
In Python, a shebang (also known as a hashbang) is the first line of a
script, which specifies the interpreter that should be used to run the
script.
The shebang's #! prefix must be the first two characters of a file. If
the shebang is not at the beginning of the file, it will be ignored, which
is likely a mistake.
","----neg----:
foo = 1
#!/usr/bin/env python3
----pos----:
#!/usr/bin/env python3
foo = 1
",,"
<h1 id=""shebang-not-first-line-exe005"">shebang-not-first-line (EXE005)<a class=""headerlink"" href=""#shebang-not-first-line-exe005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-executable</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts"">Python documentation: Executable Python Scripts</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/future-rewritable-type-annotation/,FA100,future-rewritable-type-annotation,"Missing <code>from __future__ import annotations</code>, but uses <code>{name}</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for missing from __future__ import annotations imports upon
detecting type annotations that can be written more succinctly under
PEP 563.
","Why is this bad?#
PEP 563 enabled the use of a number of convenient type annotations, such as
list[str] instead of List[str]. However, these annotations are only
available on Python 3.9 and higher, unless the from __future__ import annotations
import is present.
Similarly, PEP 604 enabled the use of the | operator for unions, such as
str | None instead of Optional[str]. However, these annotations are only
available on Python 3.10 and higher, unless the from __future__ import annotations
import is present.
By adding the __future__ import, the pyupgrade rules can automatically
migrate existing code to use the new syntax, even for older Python versions.
This rule thus pairs well with pyupgrade and with Ruff's pyupgrade rules.
This rule respects the target-version setting. For example, if your
project targets Python 3.10 and above, adding from __future__ import annotations
does not impact your ability to leverage PEP 604-style unions (e.g., to
convert Optional[str] to str | None). As such, this rule will only
flag such usages if your project targets Python 3.9 or below.
","----neg----:
from typing import List, Dict, Optional


def func(obj: Dict[str, Optional[int]]) -> None:
    ...
----pos----:
from __future__ import annotations

from typing import List, Dict, Optional


def func(obj: Dict[str, Optional[int]]) -> None:
    ...
----other----:
After running the additional pyupgrade rules:
from __future__ import annotations


def func(obj: dict[str, int | None]) -> None:
    ...

","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""future-rewritable-type-annotation-fa100"">future-rewritable-type-annotation (FA100)<a class=""headerlink"" href=""#future-rewritable-type-annotation-fa100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-future-annotations</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/future-required-type-annotation/,FA102,future-required-type-annotation,"Missing <code>from __future__ import annotations</code>, but uses {reason}",Rule is stable,Automatic fix available,"What it does#
Checks for uses of PEP 585- and PEP 604-style type annotations in Python
modules that lack the required from __future__ import annotations import
for compatibility with older Python versions.
","Why is this bad?#
Using PEP 585 and PEP 604 style annotations without a from __future__ import annotations import will cause runtime errors on Python versions prior to
3.9 and 3.10, respectively.
By adding the __future__ import, the interpreter will no longer interpret
annotations at evaluation time, making the code compatible with both past
and future Python versions.
This rule respects the target-version setting. For example, if your
project targets Python 3.10 and above, adding from __future__ import annotations
does not impact your ability to leverage PEP 604-style unions (e.g., to
convert Optional[str] to str | None). As such, this rule will only
flag such usages if your project targets Python 3.9 or below.
","----neg----:
def func(obj: dict[str, int | None]) -> None:
    ...
----pos----:
from __future__ import annotations


def func(obj: dict[str, int | None]) -> None:
    ...
----other----:
This rule's fix is marked as unsafe, as adding from __future__ import annotations
may change the semantics of the program.
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""future-required-type-annotation-fa102"">future-required-type-annotation (FA102)<a class=""headerlink"" href=""#future-required-type-annotation-fa102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-future-annotations</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/,ISC001,single-line-implicit-string-concatenation,Implicitly concatenated string literals on one line,Rule is stable,Automatic fix available,"What it does#
Checks for implicitly concatenated strings on a single line.
","Why is this bad?#
While it is valid Python syntax to concatenate multiple string or byte
literals implicitly (via whitespace delimiters), it is unnecessary and
negatively affects code readability.
In some cases, the implicit concatenation may also be unintentional, as
code formatters are capable of introducing single-line implicit
concatenations when collapsing long lines.
","----neg----:
z = ""The quick "" ""brown fox.""
----pos----:
z = ""The quick brown fox.""
",,"
<h1 id=""single-line-implicit-string-concatenation-isc001"">single-line-implicit-string-concatenation (ISC001)<a class=""headerlink"" href=""#single-line-implicit-string-concatenation-isc001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-implicit-str-concat</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/,ISC002,multi-line-implicit-string-concatenation,Implicitly concatenated string literals over multiple lines,Rule is stable,Automatic fix not available,"What it does#
Checks for implicitly concatenated strings that span multiple lines.
","Why is this bad?#
For string literals that wrap across multiple lines, PEP 8 recommends
the use of implicit string concatenation within parentheses instead of
using a backslash for line continuation, as the former is more readable
than the latter.
By default, this rule will only trigger if the string literal is
concatenated via a backslash. To disallow implicit string concatenation
altogether, set the lint.flake8-implicit-str-concat.allow-multiline option
to false.
","----neg----:
z = ""The quick brown fox jumps over the lazy ""\
    ""dog.""
----pos----:
z = (
    ""The quick brown fox jumps over the lazy ""
    ""dog.""
)
","https://docs.astral.sh/ruff/settings/#lint_flake8-implicit-str-concat_allow-multiline
lint.flake8-implicit-str-concat.allow-multiline
None","
<h1 id=""multi-line-implicit-string-concatenation-isc002"">multi-line-implicit-string-concatenation (ISC002)<a class=""headerlink"" href=""#multi-line-implicit-string-concatenation-isc002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-implicit-str-concat</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/explicit-string-concatenation/,ISC003,explicit-string-concatenation,Explicitly concatenated string should be implicitly concatenated,Rule is stable,Automatic fix not available,"What it does#
Checks for string literals that are explicitly concatenated (using the
+ operator).
","Why is this bad?#
For string literals that wrap across multiple lines, implicit string
concatenation within parentheses is preferred over explicit
concatenation using the + operator, as the former is more readable.
","----neg----:
z = (
    ""The quick brown fox jumps over the lazy ""
    + ""dog""
)
----pos----:
z = (
    ""The quick brown fox jumps over the lazy ""
    ""dog""
)
",,"
<h1 id=""explicit-string-concatenation-isc003"">explicit-string-concatenation (ISC003)<a class=""headerlink"" href=""#explicit-string-concatenation-isc003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-implicit-str-concat</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unconventional-import-alias/,ICN001,unconventional-import-alias,<code>{name}</code> should be imported as <code>{asname}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for imports that are typically imported using a common convention,
like import pandas as pd, and enforces that convention.
","Why is this bad?#
Consistency is good. Use a common convention for imports to make your code
more readable and idiomatic.
For example, import pandas as pd is a common
convention for importing the pandas library, and users typically expect
Pandas to be aliased as pd.
","----neg----:
import pandas
----pos----:
import pandas as pd
","https://docs.astral.sh/ruff/settings/#lint_flake8-import-conventions_aliases
lint.flake8-import-conventions.aliases
None
https://docs.astral.sh/ruff/settings/#lint_flake8-import-conventions_extend-aliases
lint.flake8-import-conventions.extend-aliases
None","
<h1 id=""unconventional-import-alias-icn001"">unconventional-import-alias (ICN001)<a class=""headerlink"" href=""#unconventional-import-alias-icn001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-import-conventions</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/banned-import-alias/,ICN002,banned-import-alias,<code>{name}</code> should not be imported as <code>{asname}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for imports that use non-standard naming conventions, like
import tensorflow.keras.backend as K.
","Why is this bad?#
Consistency is good. Avoid using a non-standard naming convention for
imports, and, in particular, choosing import aliases that violate PEP 8.
For example, aliasing via import tensorflow.keras.backend as K violates
the guidance of PEP 8, and is thus avoided in some projects.
","----neg----:
import tensorflow.keras.backend as K
----pos----:
import tensorflow as tf

tf.keras.backend
","https://docs.astral.sh/ruff/settings/#lint_flake8-import-conventions_banned-aliases
lint.flake8-import-conventions.banned-aliases
None","
<h1 id=""banned-import-alias-icn002"">banned-import-alias (ICN002)<a class=""headerlink"" href=""#banned-import-alias-icn002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-import-conventions</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/banned-import-from/,ICN003,banned-import-from,Members of <code>{name}</code> should not be imported explicitly,Rule is stable,Automatic fix not available,"What it does#
Checks for member imports that should instead be accessed by importing the
module.
","Why is this bad?#
Consistency is good. Use a common convention for imports to make your code
more readable and idiomatic.
For example, it's common to import pandas as pd, and then access
members like Series via pd.Series, rather than importing Series
directly.
","----neg----:
from pandas import Series
----pos----:
import pandas as pd

pd.Series
","https://docs.astral.sh/ruff/settings/#lint_flake8-import-conventions_banned-from
lint.flake8-import-conventions.banned-from
None","
<h1 id=""banned-import-from-icn003"">banned-import-from (ICN003)<a class=""headerlink"" href=""#banned-import-from-icn003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-import-conventions</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/logging-string-format/,G001,logging-string-format,Logging statement uses <code>str.format</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of str.format to format logging messages.
","Why is this bad?#
The logging module provides a mechanism for passing additional values to
be logged using the extra keyword argument. This is more consistent, more
efficient, and less error-prone than formatting the string directly.
Using str.format to format a logging message requires that Python eagerly
format the string, even if the logging statement is never executed (e.g.,
if the log level is above the level of the logging statement), whereas
using the extra keyword argument defers formatting until required.
Additionally, the use of extra will ensure that the values are made
available to all handlers, which can then be configured to log the values
in a consistent manner.
As an alternative to extra, passing values as arguments to the logging
method can also be used to defer string formatting until required.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""{} - Something happened"".format(user))
----pos----:
import logging

logging.basicConfig(format=""%(user_id)s - %(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""Something happened"", extra={""user_id"": user})
----other----:
Or:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""%s - Something happened"", user)

","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-string-format-g001"">logging-string-format (G001)<a class=""headerlink"" href=""#logging-string-format-g001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
<li><a href=""https://docs.python.org/3/howto/logging.html#optimization"">Python documentation: Optimization</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-percent-format/,G002,logging-percent-format,Logging statement uses <code>%</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of printf-style format strings to format logging
messages.
","Why is this bad?#
The logging module provides a mechanism for passing additional values to
be logged using the extra keyword argument. This is more consistent, more
efficient, and less error-prone than formatting the string directly.
Using printf-style format strings to format a logging message requires
that Python eagerly format the string, even if the logging statement is
never executed (e.g., if the log level is above the level of the logging
statement), whereas using the extra keyword argument defers formatting
until required.
Additionally, the use of extra will ensure that the values are made
available to all handlers, which can then be configured to log the values
in a consistent manner.
As an alternative to extra, passing values as arguments to the logging
method can also be used to defer string formatting until required.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""%s - Something happened"" % user)
----pos----:
import logging

logging.basicConfig(format=""%(user_id)s - %(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""Something happened"", extra=dict(user_id=user))
----other----:
Or:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""%s - Something happened"", user)

","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-percent-format-g002"">logging-percent-format (G002)<a class=""headerlink"" href=""#logging-percent-format-g002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
<li><a href=""https://docs.python.org/3/howto/logging.html#optimization"">Python documentation: Optimization</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-string-concat/,G003,logging-string-concat,Logging statement uses <code>+</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses string concatenation via the + operator to format logging
messages.
","Why is this bad?#
The logging module provides a mechanism for passing additional values to
be logged using the extra keyword argument. This is more consistent, more
efficient, and less error-prone than formatting the string directly.
Using concatenation to format a logging message requires that Python
eagerly format the string, even if the logging statement is never executed
(e.g., if the log level is above the level of the logging statement),
whereas using the extra keyword argument defers formatting until required.
Additionally, the use of extra will ensure that the values are made
available to all handlers, which can then be configured to log the values
in a consistent manner.
As an alternative to extra, passing values as arguments to the logging
method can also be used to defer string formatting until required.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(user + "" - Something happened"")
----pos----:
import logging

logging.basicConfig(format=""%(user_id)s - %(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""Something happened"", extra=dict(user_id=user))
----other----:
Or:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""%s - Something happened"", user)

","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-string-concat-g003"">logging-string-concat (G003)<a class=""headerlink"" href=""#logging-string-concat-g003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
<li><a href=""https://docs.python.org/3/howto/logging.html#optimization"">Python documentation: Optimization</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-f-string/,G004,logging-f-string,Logging statement uses f-string,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of f-strings to format logging messages.
","Why is this bad?#
The logging module provides a mechanism for passing additional values to
be logged using the extra keyword argument. This is more consistent, more
efficient, and less error-prone than formatting the string directly.
Using f-strings to format a logging message requires that Python eagerly
format the string, even if the logging statement is never executed (e.g.,
if the log level is above the level of the logging statement), whereas
using the extra keyword argument defers formatting until required.
Additionally, the use of extra will ensure that the values are made
available to all handlers, which can then be configured to log the values
in a consistent manner.
As an alternative to extra, passing values as arguments to the logging
method can also be used to defer string formatting until required.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(f""{user} - Something happened"")
----pos----:
import logging

logging.basicConfig(format=""%(user_id)s - %(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""Something happened"", extra=dict(user_id=user))
----other----:
Or:
import logging

logging.basicConfig(format=""%(message)s"", level=logging.INFO)

user = ""Maria""

logging.info(""%s - Something happened"", user)

","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-f-string-g004"">logging-f-string (G004)<a class=""headerlink"" href=""#logging-f-string-g004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html"">Python documentation: <code>logging</code></a></li>
<li><a href=""https://docs.python.org/3/howto/logging.html#optimization"">Python documentation: Optimization</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-warn/,G010,logging-warn,Logging statement uses <code>warn</code> instead of <code>warning</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of logging.warn and logging.Logger.warn.
","Why is this bad?#
logging.warn and logging.Logger.warn are deprecated in favor of
logging.warning and logging.Logger.warning, which are functionally
equivalent.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.warn(""Something happened"")
----pos----:
import logging

logging.warning(""Something happened"")
","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-warn-g010"">logging-warn (G010)<a class=""headerlink"" href=""#logging-warn-g010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.warning"">Python documentation: <code>logging.warning</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.warning"">Python documentation: <code>logging.Logger.warning</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-extra-attr-clash/,G101,logging-extra-attr-clash,Logging statement uses an <code>extra</code> field that clashes with a <code>LogRecord</code> field: <code>{key}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for extra keywords in logging statements that clash with
LogRecord attributes.
","Why is this bad?#
The logging module provides a mechanism for passing additional values to
be logged using the extra keyword argument. These values are then passed
to the LogRecord constructor.
Providing a value via extra that clashes with one of the attributes of
the LogRecord constructor will raise a KeyError when the LogRecord is
constructed.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

logging.basicConfig(format=""%(name) - %(message)s"", level=logging.INFO)

username = ""Maria""

logging.info(""Something happened"", extra=dict(name=username))
----pos----:
import logging

logging.basicConfig(format=""%(user_id)s - %(message)s"", level=logging.INFO)

username = ""Maria""

logging.info(""Something happened"", extra=dict(user=username))
","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-extra-attr-clash-g101"">logging-extra-attr-clash (G101)<a class=""headerlink"" href=""#logging-extra-attr-clash-g101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logrecord-attributes"">Python documentation: LogRecord attributes</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-exc-info/,G201,logging-exc-info,"Logging <code>.exception(...)</code> should be used instead of <code>.error(..., exc_info=True)</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of logging.error that pass exc_info=True.
","Why is this bad?#
Calling logging.error with exc_info=True is equivalent to calling
logging.exception. Using logging.exception is more concise, more
readable, and conveys the intent of the logging statement more clearly.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

try:
    ...
except ValueError:
    logging.error(""Exception occurred"", exc_info=True)
----pos----:
import logging

try:
    ...
except ValueError:
    logging.exception(""Exception occurred"")
","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-exc-info-g201"">logging-exc-info (G201)<a class=""headerlink"" href=""#logging-exc-info-g201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.exception"">Python documentation: <code>logging.exception</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.exception"">Python documentation: <code>exception</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.error"">Python documentation: <code>logging.error</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.error"">Python documentation: <code>error</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-redundant-exc-info/,G202,logging-redundant-exc-info,Logging statement has redundant <code>exc_info</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for redundant exc_info keyword arguments in logging statements.
","Why is this bad?#
exc_info is True by default for logging.exception, and False by
default for logging.error.
Passing exc_info=True to logging.exception calls is redundant, as is
passing exc_info=False to logging.error calls.
Known problems#
This rule detects uses of the logging module via a heuristic.
Specifically, it matches against:

Uses of the logging module itself (e.g., import logging; logging.info(...)).
Uses of flask.current_app.logger (e.g., from flask import current_app; current_app.logger.info(...)).
Objects whose name starts with log or ends with logger or logging,
    when used in the same file in which they are defined (e.g., logger = logging.getLogger(); logger.info(...)).
Imported objects marked as loggers via the lint.logger-objects setting, which can be
    used to enforce these rules against shared logger objects (e.g., from module import logger; logger.info(...),
    when lint.logger-objects is set to [""module.logger""]).

","----neg----:
import logging

try:
    ...
except ValueError:
    logging.exception(""Exception occurred"", exc_info=True)
----pos----:
import logging

try:
    ...
except ValueError:
    logging.exception(""Exception occurred"")
","https://docs.astral.sh/ruff/settings/#lint_logger-objects
lint.logger-objects
None","
<h1 id=""logging-redundant-exc-info-g202"">logging-redundant-exc-info (G202)<a class=""headerlink"" href=""#logging-redundant-exc-info-g202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging-format</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.exception"">Python documentation: <code>logging.exception</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.exception"">Python documentation: <code>exception</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.error"">Python documentation: <code>logging.error</code></a></li>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.error"">Python documentation: <code>error</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/implicit-namespace-package/,INP001,implicit-namespace-package,File <code>{filename}</code> is part of an implicit namespace package. Add an <code>__init__.py</code>.,Rule is stable,Automatic fix not available,"What it does#
Checks for packages that are missing an __init__.py file.
","Why is this bad?#
Python packages are directories that contain a file named __init__.py.
The existence of this file indicates that the directory is a Python
package, and so it can be imported the same way a module can be
imported.
Directories that lack an __init__.py file can still be imported, but
they're indicative of a special kind of package, known as a ""namespace
package"" (see: PEP 420).
Namespace packages are less widely used, so a package that lacks an
__init__.py file is typically meant to be a regular package, and
the absence of the __init__.py file is probably an oversight.
",,"https://docs.astral.sh/ruff/settings/#namespace-packages
namespace-packages
None","
<h1 id=""implicit-namespace-package-inp001"">implicit-namespace-package (INP001)<a class=""headerlink"" href=""#implicit-namespace-package-inp001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-no-pep420</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-placeholder/,PIE790,unnecessary-placeholder,Unnecessary <code>pass</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary pass statements and ellipsis (...) literals in
functions, classes, and other blocks.
","Why is this bad?#
In Python, the pass statement and ellipsis (...) literal serve as
placeholders, allowing for syntactically correct empty code blocks. The
primary purpose of these nodes is to avoid syntax errors in situations
where a statement or expression is syntactically required, but no code
needs to be executed.
If a pass or ellipsis is present in a code block that includes at least
one other statement (even, e.g., a docstring), it is unnecessary and should
be removed.
","----neg----:
def func():
    """"""Placeholder docstring.""""""
    pass
----pos----:
def func():
    """"""Placeholder docstring.""""""
----other----:
Or, given:
def func():
    """"""Placeholder docstring.""""""
    ...

def func():
    """"""Placeholder docstring.""""""
",,"
<h1 id=""unnecessary-placeholder-pie790"">unnecessary-placeholder (PIE790)<a class=""headerlink"" href=""#unnecessary-placeholder-pie790"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement"">Python documentation: The <code>pass</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/duplicate-class-field-definition/,PIE794,duplicate-class-field-definition,Class field <code>{name}</code> is defined multiple times,Rule is stable,Automatic fix available,"What it does#
Checks for duplicate field definitions in classes.
","Why is this bad?#
Defining a field multiple times in a class body is redundant and likely a
mistake.
","----neg----:
class Person:
    name = Tom
    ...
    name = Ben
----pos----:
class Person:
    name = Tom
    ...
",,"
<h1 id=""duplicate-class-field-definition-pie794"">duplicate-class-field-definition (PIE794)<a class=""headerlink"" href=""#duplicate-class-field-definition-pie794"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/non-unique-enums/,PIE796,non-unique-enums,Enum contains duplicate value: <code>{value}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for enums that contain duplicate values.
","Why is this bad?#
Enum values should be unique. Non-unique values are redundant and likely a
mistake.
","----neg----:
from enum import Enum


class Foo(Enum):
    A = 1
    B = 2
    C = 1
----pos----:
from enum import Enum


class Foo(Enum):
    A = 1
    B = 2
    C = 3
",,"
<h1 id=""non-unique-enums-pie796"">non-unique-enums (PIE796)<a class=""headerlink"" href=""#non-unique-enums-pie796"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/enum.html#enum.Enum"">Python documentation: <code>enum.Enum</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-spread/,PIE800,unnecessary-spread,Unnecessary spread <code>**</code>,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary dictionary unpacking operators (**).
","Why is this bad?#
Unpacking a dictionary into another dictionary is redundant. The unpacking
operator can be removed, making the code more readable.
","----neg----:
foo = {""A"": 1, ""B"": 2}
bar = {**foo, **{""C"": 3}}
----pos----:
foo = {""A"": 1, ""B"": 2}
bar = {**foo, ""C"": 3}
",,"
<h1 id=""unnecessary-spread-pie800"">unnecessary-spread (PIE800)<a class=""headerlink"" href=""#unnecessary-spread-pie800"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#dictionary-displays"">Python documentation: Dictionary displays</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-dict-kwargs/,PIE804,unnecessary-dict-kwargs,Unnecessary <code>dict</code> kwargs,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary dict kwargs.
","Why is this bad?#
If the dict keys are valid identifiers, they can be passed as keyword
arguments directly.
","----neg----:
def foo(bar):
    return bar + 1


print(foo(**{""bar"": 2}))  # prints 3
----pos----:
def foo(bar):
    return bar + 1


print(foo(bar=2))  # prints 3
",,"
<h1 id=""unnecessary-dict-kwargs-pie804"">unnecessary-dict-kwargs (PIE804)<a class=""headerlink"" href=""#unnecessary-dict-kwargs-pie804"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#dictionary-displays"">Python documentation: Dictionary displays</a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#calls"">Python documentation: Calls</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reimplemented-container-builtin/,PIE807,reimplemented-container-builtin,Prefer <code>{container}</code> over useless lambda,Rule is stable,Automatic fix available,"What it does#
Checks for lambdas that can be replaced with the list or dict builtins.
","Why is this bad?#
Using container builtins are more succinct and idiomatic than wrapping
the literal in a lambda.
","----neg----:
from dataclasses import dataclass, field


@dataclass
class Foo:
    bar: list[int] = field(default_factory=lambda: [])
----pos----:
from dataclasses import dataclass, field


@dataclass
class Foo:
    bar: list[int] = field(default_factory=list)
    baz: dict[str, int] = field(default_factory=dict)
",,"
<h1 id=""reimplemented-container-builtin-pie807"">reimplemented-container-builtin (PIE807)<a class=""headerlink"" href=""#reimplemented-container-builtin-pie807"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#func-list"">Python documentation: <code>list</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-range-start/,PIE808,unnecessary-range-start,Unnecessary <code>start</code> argument in <code>range</code>,Rule is stable,Automatic fix available,"What it does#
Checks for range calls with an unnecessary start argument.
","Why is this bad?#
range(0, x) is equivalent to range(x), as 0 is the default value for
the start argument. Omitting the start argument makes the code more
concise and idiomatic.
","----neg----:
range(0, 3)
----pos----:
range(3)
",,"
<h1 id=""unnecessary-range-start-pie808"">unnecessary-range-start (PIE808)<a class=""headerlink"" href=""#unnecessary-range-start-pie808"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#range"">Python documentation: <code>range</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/multiple-starts-ends-with/,PIE810,multiple-starts-ends-with,Call <code>{attr}</code> once with a <code>tuple</code>,Rule is stable,Automatic fix available,"What it does#
Checks for startswith or endswith calls on the same value with
different prefixes or suffixes.
","Why is this bad?#
The startswith and endswith methods accept tuples of prefixes or
suffixes respectively. Passing a tuple of prefixes or suffixes is more
efficient and readable than calling the method multiple times.
","----neg----:
msg = ""Hello, world!""
if msg.startswith(""Hello"") or msg.startswith(""Hi""):
    print(""Greetings!"")
----pos----:
msg = ""Hello, world!""
if msg.startswith((""Hello"", ""Hi"")):
    print(""Greetings!"")
----other----:
This rule's fix is unsafe, as in some cases, it will be unable to determine
whether the argument to an existing .startswith or .endswith call is a
tuple. For example, given msg.startswith(x) or msg.startswith(y), if x
or y is a tuple, and the semantic model is unable to detect it as such,
the rule will suggest msg.startswith((x, y)), which will error at
runtime.
",,"
<h1 id=""multiple-starts-ends-with-pie810"">multiple-starts-ends-with (PIE810)<a class=""headerlink"" href=""#multiple-starts-ends-with-pie810"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pie</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.startswith"">Python documentation: <code>str.startswith</code></a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#str.endswith"">Python documentation: <code>str.endswith</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/print/,T201,print,<code>print</code> found,Rule is stable,Automatic fix available,"What it does#
Checks for print statements.
","Why is this bad?#
print statements are useful in some situations (e.g., debugging), but
should typically be omitted from production code. print statements can
lead to the accidental inclusion of sensitive information in logs, and are
not configurable by clients, unlike logging statements.
","----neg----:
def add_numbers(a, b):
    print(f""The sum of {a} and {b} is {a + b}"")
    return a + b
----pos----:
def add_numbers(a, b):
    return a + b
----other----:
This rule's fix is marked as unsafe, as it may remove print statements
that are used beyond debugging purposes.
",,"
<h1 id=""print-t201"">print (T201)<a class=""headerlink"" href=""#print-t201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-print</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/p-print/,T203,p-print,<code>pprint</code> found,Rule is stable,Automatic fix available,"What it does#
Checks for pprint statements.
","Why is this bad?#
Like print statements, pprint statements are useful in some situations
(e.g., debugging), but should typically be omitted from production code.
pprint statements can lead to the accidental inclusion of sensitive
information in logs, and are not configurable by clients, unlike logging
statements.
","----neg----:
import pprint


def merge_dicts(dict_a, dict_b):
    dict_c = {**dict_a, **dict_b}
    pprint.pprint(dict_c)
    return dict_c
----pos----:
def merge_dicts(dict_a, dict_b):
    dict_c = {**dict_a, **dict_b}
    return dict_c
----other----:
This rule's fix is marked as unsafe, as it may remove pprint statements
that are used beyond debugging purposes.
",,"
<h1 id=""p-print-t203"">p-print (T203)<a class=""headerlink"" href=""#p-print-t203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-print</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/unprefixed-type-param/,PYI001,unprefixed-type-param,Name of private <code>{kind}</code> must start with <code>_</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that type TypeVars, ParamSpecs, and TypeVarTuples in stubs
have names prefixed with _.
","Why is this bad?#
Prefixing type parameters with _ avoids accidentally exposing names
internal to the stub.
","----neg----:
from typing import TypeVar

T = TypeVar(""T"")
----pos----:
from typing import TypeVar

_T = TypeVar(""_T"")
",,"
<h1 id=""unprefixed-type-param-pyi001"">unprefixed-type-param (PYI001)<a class=""headerlink"" href=""#unprefixed-type-param-pyi001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/complex-if-statement-in-stub/,PYI002,complex-if-statement-in-stub,<code>if</code> test must be a simple comparison against <code>sys.platform</code> or <code>sys.version_info</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for if statements with complex conditionals in stubs.
","Why is this bad?#
Type checkers understand simple conditionals to express variations between
different Python versions and platforms. However, complex tests may not be
understood by a type checker, leading to incorrect inferences when they
analyze your code.
","----neg----:
import sys

if (3, 10) <= sys.version_info < (3, 12):
    ...
----pos----:
import sys

if sys.version_info >= (3, 10) and sys.version_info < (3, 12):
    ...
",,"
<h1 id=""complex-if-statement-in-stub-pyi002"">complex-if-statement-in-stub (PYI002)<a class=""headerlink"" href=""#complex-if-statement-in-stub-pyi002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<p>The <a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">typing documentation on stub files</a></p>
"
https://docs.astral.sh/ruff/rules/unrecognized-version-info-check/,PYI003,unrecognized-version-info-check,Unrecognized <code>sys.version_info</code> check,Rule is stable,Automatic fix not available,"What it does#
Checks for problematic sys.version_info-related conditions in stubs.
","Why is this bad?#
Stub files support simple conditionals to test for differences in Python
versions using sys.version_info. However, there are a number of common
mistakes involving sys.version_info comparisons that should be avoided.
For example, comparing against a string can lead to unexpected behavior.
","----neg----:
import sys

if sys.version_info[0] == ""2"":
    ...
----pos----:
import sys

if sys.version_info[0] == 2:
    ...
",,"
<h1 id=""unrecognized-version-info-check-pyi003"">unrecognized-version-info-check (PYI003)<a class=""headerlink"" href=""#unrecognized-version-info-check-pyi003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">Typing stubs documentation: Version and Platform Checks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/patch-version-comparison/,PYI004,patch-version-comparison,Version comparison must use only major and minor version,Rule is stable,Automatic fix not available,"What it does#
Checks for Python version comparisons in stubs that compare against patch
versions (e.g., Python 3.8.3) instead of major and minor versions (e.g.,
Python 3.8).
","Why is this bad?#
Stub files support simple conditionals to test for differences in Python
versions and platforms. However, type checkers only understand a limited
subset of these conditionals. In particular, type checkers don't support
patch versions (e.g., Python 3.8.3), only major and minor versions (e.g.,
Python 3.8). Therefore, version checks in stubs should only use the major
and minor versions.
","----neg----:
import sys

if sys.version_info >= (3, 4, 3):
    ...
----pos----:
import sys

if sys.version_info >= (3, 4):
    ...
",,"
<h1 id=""patch-version-comparison-pyi004"">patch-version-comparison (PYI004)<a class=""headerlink"" href=""#patch-version-comparison-pyi004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">Typing stubs documentation: Version and Platform Checks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/wrong-tuple-length-version-comparison/,PYI005,wrong-tuple-length-version-comparison,Version comparison must be against a length-{expected_length} tuple,Rule is stable,Automatic fix not available,"What it does#
Checks for Python version comparisons that compare against a tuple of the
wrong length.
","Why is this bad?#
Stub files support simple conditionals to test for differences in Python
versions and platforms. When comparing against sys.version_info, avoid
comparing against tuples of the wrong length, which can lead to unexpected
behavior.
","----neg----:
import sys

if sys.version_info[:2] == (3,):
    ...
----pos----:
import sys

if sys.version_info[0] == 3:
    ...
",,"
<h1 id=""wrong-tuple-length-version-comparison-pyi005"">wrong-tuple-length-version-comparison (PYI005)<a class=""headerlink"" href=""#wrong-tuple-length-version-comparison-pyi005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">Typing stubs documentation: Version and Platform Checks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/bad-version-info-comparison/,PYI006,bad-version-info-comparison,Use <code>&lt;</code> or <code>&gt;=</code> for <code>sys.version_info</code> comparisons,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of comparators other than < and >= for
sys.version_info checks in .pyi files. All other comparators, such
as >, <=, and ==, are banned.
","Why is this bad?#
Comparing sys.version_info with == or <= has unexpected behavior
and can lead to bugs.
For example, sys.version_info > (3, 8) will also match 3.8.10,
while sys.version_info <= (3, 8) will not match 3.8.10:
>>> import sys
>>> print(sys.version_info)
sys.version_info(major=3, minor=8, micro=10, releaselevel='final', serial=0)
>>> print(sys.version_info > (3, 8))
True
>>> print(sys.version_info == (3, 8))
False
>>> print(sys.version_info <= (3, 8))
False
>>> print(sys.version_info in (3, 8))
False

","----neg----:
import sys

if sys.version_info > (3, 8):
    ...
----pos----:
import sys

if sys.version_info >= (3, 9):
    ...
",,"
<h1 id=""bad-version-info-comparison-pyi006"">bad-version-info-comparison (PYI006)<a class=""headerlink"" href=""#bad-version-info-comparison-pyi006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unrecognized-platform-check/,PYI007,unrecognized-platform-check,Unrecognized <code>sys.platform</code> check,Rule is stable,Automatic fix not available,"What it does#
Check for unrecognized sys.platform checks. Platform checks should be
simple string comparisons.
Note: this rule is only enabled in .pyi stub files.
","Why is this bad?#
Some sys.platform checks are too complex for type checkers to
understand, and thus result in incorrect inferences by these tools.
sys.platform checks should be simple string comparisons, like
if sys.platform == ""linux"".
","----neg----:
if sys.platform.startswith(""linux""):
    # Linux specific definitions
    ...
else:
    # Posix specific definitions
    ...
----pos----:
Instead, use a simple string comparison, such as == or !=:----other----:

if sys.platform == ""linux"":
    # Linux specific definitions
    ...
else:
    # Posix specific definitions
    ...

",,"
<h1 id=""unrecognized-platform-check-pyi007"">unrecognized-platform-check (PYI007)<a class=""headerlink"" href=""#unrecognized-platform-check-pyi007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">Typing stubs documentation: Version and Platform Checks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unrecognized-platform-name/,PYI008,unrecognized-platform-name,Unrecognized platform <code>{platform}</code>,Rule is stable,Automatic fix not available,"What it does#
Check for unrecognized platform names in sys.platform checks.
Note: this rule is only enabled in .pyi stub files.
","Why is this bad?#
If a sys.platform check compares to a platform name outside of a
small set of known platforms (e.g. ""linux"", ""win32"", etc.), it's likely
a typo or a platform name that is not recognized by type checkers.
The list of known platforms is: ""linux"", ""win32"", ""cygwin"", ""darwin"".
","----neg----:
if sys.platform == ""linus"":
    ...
----pos----:
if sys.platform == ""linux"":
    ...
",,"
<h1 id=""unrecognized-platform-name-pyi008"">unrecognized-platform-name (PYI008)<a class=""headerlink"" href=""#unrecognized-platform-name-pyi008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#version-and-platform-checks"">Typing stubs documentation: Version and Platform Checks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pass-statement-stub-body/,PYI009,pass-statement-stub-body,"Empty body should contain <code>...</code>, not <code>pass</code>",Rule is stable,Automatic fix available,"What it does#
Checks for pass statements in empty stub bodies.
","Why is this bad?#
For stylistic consistency, ... should always be used rather than pass
in stub files.
","----neg----:
def foo(bar: int) -> list[int]: pass
----pos----:
def foo(bar: int) -> list[int]: ...
",,"
<h1 id=""pass-statement-stub-body-pyi009"">pass-statement-stub-body (PYI009)<a class=""headerlink"" href=""#pass-statement-stub-body-pyi009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<p>The <a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#functions-and-methods"">recommended style for functions and methods</a>
in the typing docs.</p>
"
https://docs.astral.sh/ruff/rules/non-empty-stub-body/,PYI010,non-empty-stub-body,Function body must contain only <code>...</code>,Rule is stable,Automatic fix available,"What it does#
Checks for non-empty function stub bodies.
","Why is this bad?#
Stub files are never executed at runtime; they should be thought of as
""data files"" for type checkers or IDEs. Function bodies are redundant
for this purpose.
","----neg----:
def double(x: int) -> int:
    return x * 2
----pos----:
def double(x: int) -> int: ...
",,"
<h1 id=""non-empty-stub-body-pyi010"">non-empty-stub-body (PYI010)<a class=""headerlink"" href=""#non-empty-stub-body-pyi010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html#id6"">The recommended style for stub functions and methods</a>
    in the typing docs.</li>
</ul>
"
https://docs.astral.sh/ruff/rules/typed-argument-default-in-stub/,PYI011,typed-argument-default-in-stub,Only simple default values allowed for typed arguments,Rule is stable,Automatic fix available,"What it does#
Checks for typed function arguments in stubs with complex default values.
","Why is this bad?#
Stub (.pyi) files exist as ""data files"" for static analysis tools, and
are not evaluated at runtime. While simple default values may be useful for
some tools that consume stubs, such as IDEs, they are ignored by type
checkers.
Instead of including and reproducing a complex value, use ... to indicate
that the assignment has a default value, but that the value is ""complex"" or
varies according to the current platform or Python version. For the
purposes of this rule, any default value counts as ""complex"" unless it is
a literal int, float, complex, bytes, str, bool, None, ...,
or a simple container literal.
","----neg----:
def foo(arg: list[int] = list(range(10_000))) -> None:
    ...
----pos----:
def foo(arg: list[int] = ...) -> None:
    ...
",,"
<h1 id=""typed-argument-default-in-stub-pyi011"">typed-argument-default-in-stub (PYI011)<a class=""headerlink"" href=""#typed-argument-default-in-stub-pyi011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://github.com/PyCQA/flake8-pyi/blob/main/ERRORCODES.md""><code>flake8-pyi</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pass-in-class-body/,PYI012,pass-in-class-body,Class body must not contain <code>pass</code>,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of the pass statement in non-empty class bodies
in .pyi files.
","Why is this bad?#
The pass statement is always unnecessary in non-empty class bodies in
stubs.
","----neg----:
class MyClass:
    x: int
    pass
----pos----:
class MyClass:
    x: int
",,"
<h1 id=""pass-in-class-body-pyi012"">pass-in-class-body (PYI012)<a class=""headerlink"" href=""#pass-in-class-body-pyi012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/ellipsis-in-non-empty-class-body/,PYI013,ellipsis-in-non-empty-class-body,Non-empty class body must not contain <code>...</code>,Rule is stable,Automatic fix available,"What it does#
Removes ellipses (...) in otherwise non-empty class bodies.
","Why is this bad?#
An ellipsis in a class body is only necessary if the class body is
otherwise empty. If the class body is non-empty, then the ellipsis
is redundant.
","----neg----:
class Foo:
    ...
    value: int
----pos----:
class Foo:
    value: int
",,"
<h1 id=""ellipsis-in-non-empty-class-body-pyi013"">ellipsis-in-non-empty-class-body (PYI013)<a class=""headerlink"" href=""#ellipsis-in-non-empty-class-body-pyi013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/argument-default-in-stub/,PYI014,argument-default-in-stub,Only simple default values allowed for arguments,Rule is stable,Automatic fix available,"What it does#
Checks for untyped function arguments in stubs with default values that
are not ""simple"" /// (i.e., int, float, complex, bytes, str,
bool, None, ..., or simple container literals).
","Why is this bad?#
Stub (.pyi) files exist to define type hints, and are not evaluated at
runtime. As such, function arguments in stub files should not have default
values, as they are ignored by type checkers.
However, the use of default values may be useful for IDEs and other
consumers of stub files, and so ""simple"" values may be worth including and
are permitted by this rule.
Instead of including and reproducing a complex value, use ... to indicate
that the assignment has a default value, but that the value is non-simple
or varies according to the current platform or Python version.
","----neg----:
def foo(arg=[]) -> None:
    ...
----pos----:
def foo(arg=...) -> None:
    ...
",,"
<h1 id=""argument-default-in-stub-pyi014"">argument-default-in-stub (PYI014)<a class=""headerlink"" href=""#argument-default-in-stub-pyi014"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://github.com/PyCQA/flake8-pyi/blob/main/ERRORCODES.md""><code>flake8-pyi</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assignment-default-in-stub/,PYI015,assignment-default-in-stub,Only simple default values allowed for assignments,Rule is stable,Automatic fix available,"What it does#
Checks for assignments in stubs with default values that are not ""simple""
(i.e., int, float, complex, bytes, str, bool, None, ..., or
simple container literals).
","Why is this bad?#
Stub (.pyi) files exist to define type hints, and are not evaluated at
runtime. As such, assignments in stub files should not include values,
as they are ignored by type checkers.
However, the use of such values may be useful for IDEs and other consumers
of stub files, and so ""simple"" values may be worth including and are
permitted by this rule.
Instead of including and reproducing a complex value, use ... to indicate
that the assignment has a default value, but that the value is non-simple
or varies according to the current platform or Python version.
","----neg----:
foo: str = ""...""
----pos----:
foo: str = ...
",,"
<h1 id=""assignment-default-in-stub-pyi015"">assignment-default-in-stub (PYI015)<a class=""headerlink"" href=""#assignment-default-in-stub-pyi015"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://github.com/PyCQA/flake8-pyi/blob/main/ERRORCODES.md""><code>flake8-pyi</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/duplicate-union-member/,PYI016,duplicate-union-member,Duplicate union member <code>{}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for duplicate union members.
","Why is this bad?#
Duplicate union members are redundant and should be removed.
","----neg----:
foo: str | str
----pos----:
foo: str
",,"
<h1 id=""duplicate-union-member-pyi016"">duplicate-union-member (PYI016)<a class=""headerlink"" href=""#duplicate-union-member-pyi016"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Union"">Python documentation: <code>typing.Union</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/complex-assignment-in-stub/,PYI017,complex-assignment-in-stub,Stubs should not contain assignments to attributes or multiple targets,Rule is stable,Automatic fix not available,"What it does#
Checks for assignments with multiple or non-name targets in stub files.
","Why is this bad?#
In general, stub files should be thought of as ""data files"" for a type
checker, and are not intended to be executed. As such, it's useful to
enforce that only a subset of Python syntax is allowed in a stub file, to
ensure that everything in the stub is unambiguous for the type checker.
The need to perform multi-assignment, or assignment to a non-name target,
likely indicates a misunderstanding of how stub files are intended to be
used.
","----neg----:
from typing import TypeAlias

a = b = int


class Klass:
    ...


Klass.X: TypeAlias = int
----pos----:
from typing import TypeAlias

a: TypeAlias = int
b: TypeAlias = int


class Klass:
    X: TypeAlias = int
",,"
<h1 id=""complex-assignment-in-stub-pyi017"">complex-assignment-in-stub (PYI017)<a class=""headerlink"" href=""#complex-assignment-in-stub-pyi017"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-private-type-var/,PYI018,unused-private-type-var,Private {type_var_like_kind} <code>{type_var_like_name}</code> is never used,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused private TypeVar, ParamSpec or
TypeVarTuple declarations.
","Why is this bad?#
A private TypeVar that is defined but not used is likely a mistake. It
should either be used, made public, or removed to avoid confusion.
","import typing
import typing_extensions

_T = typing.TypeVar(""_T"")
_Ts = typing_extensions.TypeVarTuple(""_Ts"")
",,"
<h1 id=""unused-private-type-var-pyi018"">unused-private-type-var (PYI018)<a class=""headerlink"" href=""#unused-private-type-var-pyi018"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/custom-type-var-return-type/,PYI019,custom-type-var-return-type,Methods like <code>{method_name}</code> should return <code>typing.Self</code> instead of a custom <code>TypeVar</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for methods that define a custom TypeVar for their return type
annotation instead of using typing_extensions.Self.
","Why is this bad?#
While the semantics are often identical, using typing_extensions.Self is
more intuitive and succinct (per PEP 673) than a custom TypeVar. For
example, the use of Self will typically allow for the omission of type
parameters on the self and cls arguments.
This check currently applies to instance methods that return self, class
methods that return an instance of cls, and __new__ methods.
","----neg----:
class Foo:
    def __new__(cls: type[_S], *args: str, **kwargs: int) -> _S:
        ...

    def foo(self: _S, arg: bytes) -> _S:
        ...

    @classmethod
    def bar(cls: type[_S], arg: int) -> _S:
        ...
----pos----:
from typing import Self


class Foo:
    def __new__(cls, *args: str, **kwargs: int) -> Self:
        ...

    def foo(self, arg: bytes) -> Self:
        ...

    @classmethod
    def bar(cls, arg: int) -> Self:
        ...
",,"
<h1 id=""custom-type-var-return-type-pyi019"">custom-type-var-return-type (PYI019)<a class=""headerlink"" href=""#custom-type-var-return-type-pyi019"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/quoted-annotation-in-stub/,PYI020,quoted-annotation-in-stub,Quoted annotations should not be included in stubs,Rule is stable,Automatic fix available,"What it does#
Checks for quoted type annotations in stub (.pyi) files, which should be avoided.
","Why is this bad?#
Stub files natively support forward references in all contexts, as stubs
are never executed at runtime. (They should be thought of as ""data files""
for type checkers and IDEs.) As such, quotes are never required for type
annotations in stub files, and should be omitted.
","----neg----:
def function() -> ""int"":
    ...
----pos----:
def function() -> int:
    ...
",,"
<h1 id=""quoted-annotation-in-stub-pyi020"">quoted-annotation-in-stub (PYI020)<a class=""headerlink"" href=""#quoted-annotation-in-stub-pyi020"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html"">Static Typing with Python: Type Stubs</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/docstring-in-stub/,PYI021,docstring-in-stub,Docstrings should not be included in stubs,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of docstrings in stub files.
","Why is this bad?#
Stub files should omit docstrings, as they're intended to provide type
hints, rather than documentation.
","----neg----:
def func(param: int) -> str:
    """"""This is a docstring.""""""
    ...
----pos----:
def func(param: int) -> str:
    ...
",,"
<h1 id=""docstring-in-stub-pyi021"">docstring-in-stub (PYI021)<a class=""headerlink"" href=""#docstring-in-stub-pyi021"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/collections-named-tuple/,PYI024,collections-named-tuple,Use <code>typing.NamedTuple</code> instead of <code>collections.namedtuple</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of collections.namedtuple in stub files.
","Why is this bad?#
typing.NamedTuple is the ""typed version"" of collections.namedtuple.
Inheriting from typing.NamedTuple creates a custom tuple subclass in
the same way as using the collections.namedtuple factory function.
However, using typing.NamedTuple allows you to provide a type annotation
for each field in the class. This means that type checkers will have more
information to work with, and will be able to analyze your code more
precisely.
","----neg----:
from collections import namedtuple

person = namedtuple(""Person"", [""name"", ""age""])
----pos----:
from typing import NamedTuple


class Person(NamedTuple):
    name: str
    age: int
",,"
<h1 id=""collections-named-tuple-pyi024"">collections-named-tuple (PYI024)<a class=""headerlink"" href=""#collections-named-tuple-pyi024"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unaliased-collections-abc-set-import/,PYI025,unaliased-collections-abc-set-import,Use <code>from collections.abc import Set as AbstractSet</code> to avoid confusion with the <code>set</code> builtin,Rule is stable,Automatic fix available,"What it does#
Checks for from collections.abc import Set imports that do not alias
Set to AbstractSet.
","Why is this bad?#
The Set type in collections.abc is an abstract base class for set-like types.
It is easily confused with, and not equivalent to, the set builtin.
To avoid confusion, Set should be aliased to AbstractSet when imported. This
makes it clear that the imported type is an abstract base class, and not the
set builtin.
","----neg----:
from collections.abc import Set
----pos----:
from collections.abc import Set as AbstractSet
----other----:
This rule's fix is marked as unsafe for Set imports defined at the
top-level of a module. Top-level symbols are implicitly exported by the
module, and so renaming a top-level symbol may break downstream modules
that import it.
",,"
<h1 id=""unaliased-collections-abc-set-import-pyi025"">unaliased-collections-abc-set-import (PYI025)<a class=""headerlink"" href=""#unaliased-collections-abc-set-import-pyi025"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/type-alias-without-annotation/,PYI026,type-alias-without-annotation,"Use <code>{module}.TypeAlias</code> for type alias, e.g., <code>{name}: TypeAlias = {value}</code>",Rule is stable,Automatic fix available,"What it does#
Checks for type alias definitions that are not annotated with
typing.TypeAlias.
","Why is this bad?#
In Python, a type alias is defined by assigning a type to a variable (e.g.,
Vector = list[float]).
It's best to annotate type aliases with the typing.TypeAlias type to
make it clear that the statement is a type alias declaration, as opposed
to a normal variable assignment.
","----neg----:
Vector = list[float]
----pos----:
from typing import TypeAlias

Vector: TypeAlias = list[float]
",,"
<h1 id=""type-alias-without-annotation-pyi026"">type-alias-without-annotation (PYI026)<a class=""headerlink"" href=""#type-alias-without-annotation-pyi026"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/str-or-repr-defined-in-stub/,PYI029,str-or-repr-defined-in-stub,Defining <code>{name}</code> in a stub is almost always redundant,Rule is stable,Automatic fix available,"What it does#
Checks for redundant definitions of __str__ or __repr__ in stubs.
","Why is this bad?#
Defining __str__ or __repr__ in a stub is almost always redundant,
as the signatures are almost always identical to those of the default
equivalent, object.__str__ and object.__repr__, respectively.
","class Foo:
    def __repr__(self) -> str:
        ...
",,"
<h1 id=""str-or-repr-defined-in-stub-pyi029"">str-or-repr-defined-in-stub (PYI029)<a class=""headerlink"" href=""#str-or-repr-defined-in-stub-pyi029"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-literal-union/,PYI030,unnecessary-literal-union,"Multiple literal members in a union. Use a single literal, e.g. <code>Literal[{}]</code>",Rule is stable,Automatic fix available,"What it does#
Checks for the presence of multiple literal types in a union.
","Why is this bad?#
Literal[""foo"", 42] has identical semantics to
Literal[""foo""] | Literal[42], but is clearer and more concise.
","----neg----:
from typing import Literal

field: Literal[1] | Literal[2] | str
----pos----:
from typing import Literal

field: Literal[1, 2] | str
",,"
<h1 id=""unnecessary-literal-union-pyi030"">unnecessary-literal-union (PYI030)<a class=""headerlink"" href=""#unnecessary-literal-union-pyi030"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Literal"">Python documentation: <code>typing.Literal</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/any-eq-ne-annotation/,PYI032,any-eq-ne-annotation,Prefer <code>object</code> to <code>Any</code> for the second parameter to <code>{method_name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for __eq__ and __ne__ implementations that use typing.Any as
the type annotation for their second parameter.
","Why is this bad?#
The Python documentation recommends the use of object to ""indicate that a
value could be any type in a typesafe manner"". Any, on the other hand,
should be seen as an ""escape hatch when you need to mix dynamically and
statically typed code"". Since using Any allows you to write highly unsafe
code, you should generally only use Any when the semantics of your code
would otherwise be inexpressible to the type checker.
The expectation in Python is that a comparison of two arbitrary objects
using == or != should never raise an exception. This contract can be
fully expressed in the type system and does not involve requesting unsound
behaviour from a type checker. As such, object is a more appropriate
annotation than Any for the second parameter of the methods implementing
these comparison operators -- __eq__ and __ne__.
","----neg----:
class Foo:
    def __eq__(self, obj: typing.Any) -> bool:
        ...
----pos----:
class Foo:
    def __eq__(self, obj: object) -> bool:
        ...
",,"
<h1 id=""any-eq-ne-annotation-pyi032"">any-eq-ne-annotation (PYI032)<a class=""headerlink"" href=""#any-eq-ne-annotation-pyi032"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#the-any-type"">Python documentation: The <code>Any</code> type</a></li>
<li><a href=""https://mypy.readthedocs.io/en/latest/dynamic_typing.html#any-vs-object"">Mypy documentation: Any vs. object</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/type-comment-in-stub/,PYI033,type-comment-in-stub,Don't use type comments in stub file,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of type comments (e.g., x = 1  # type: int) in stub
files.
","Why is this bad?#
Stub (.pyi) files should use type annotations directly, rather
than type comments, even if they're intended to support Python 2, since
stub files are not executed at runtime. The one exception is # type: ignore.
","----neg----:
x = 1  # type: int
----pos----:
x: int = 1
",,"
<h1 id=""type-comment-in-stub-pyi033"">type-comment-in-stub (PYI033)<a class=""headerlink"" href=""#type-comment-in-stub-pyi033"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/non-self-return-type/,PYI034,non-self-return-type,<code>__new__</code> methods usually return <code>self</code> at runtime,Rule is stable,Automatic fix not available,"What it does#
Checks for methods that are annotated with a fixed return type which
should instead be returning Self.
","Why is this bad?#
If methods that generally return self at runtime are annotated with a
fixed return type, and the class is subclassed, type checkers will not be
able to infer the correct return type.
For example:
class Shape:
    def set_scale(self, scale: float) -> Shape:
        self.scale = scale
        return self

class Circle(Shape):
    def set_radius(self, radius: float) -> Circle:
        self.radius = radius
        return self

# Type checker infers return type as `Shape`, not `Circle`.
Circle().set_scale(0.5)

# Thus, this expression is invalid, as `Shape` has no attribute `set_radius`.
Circle().set_scale(0.5).set_radius(2.7)

Specifically, this check enforces that the return type of the following
methods is Self:

In-place binary-operation dunder methods, like __iadd__, __imul__, etc.
__new__, __enter__, and __aenter__, if those methods return the
    class name.
__iter__ methods that return Iterator, despite the class inheriting
    directly from Iterator.
__aiter__ methods that return AsyncIterator, despite the class
    inheriting directly from AsyncIterator.

","----neg----:
class Foo:
    def __new__(cls, *args: Any, **kwargs: Any) -> Foo:
        ...

    def __enter__(self) -> Foo:
        ...

    async def __aenter__(self) -> Foo:
        ...

    def __iadd__(self, other: Foo) -> Foo:
        ...
----pos----:
from typing_extensions import Self


class Foo:
    def __new__(cls, *args: Any, **kwargs: Any) -> Self:
        ...

    def __enter__(self) -> Self:
        ...

    async def __aenter__(self) -> Self:
        ...

    def __iadd__(self, other: Foo) -> Self:
        ...
",,"
<h1 id=""non-self-return-type-pyi034"">non-self-return-type (PYI034)<a class=""headerlink"" href=""#non-self-return-type-pyi034"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Self""><code>typing.Self</code> documentation</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unassigned-special-variable-in-stub/,PYI035,unassigned-special-variable-in-stub,"<code>{name}</code> in a stub file must have a value, as it has the same semantics as <code>{name}</code> at runtime",Rule is stable,Automatic fix not available,"What it does#
Checks that __all__, __match_args__, and __slots__ variables are
assigned to values when defined in stub files.
","Why is this bad?#
Special variables like __all__ have the same semantics in stub files
as they do in Python modules, and so should be consistent with their
runtime counterparts.
","----neg----:
__all__: list[str]
----pos----:
__all__: list[str] = [""foo"", ""bar""]
",,"
<h1 id=""unassigned-special-variable-in-stub-pyi035"">unassigned-special-variable-in-stub (PYI035)<a class=""headerlink"" href=""#unassigned-special-variable-in-stub-pyi035"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-exit-annotation/,PYI036,bad-exit-annotation,Star-args in <code>{method_name}</code> should be annotated with <code>object</code>,Rule is stable,Automatic fix available,"What it does#
Checks for incorrect function signatures on __exit__ and __aexit__
methods.
","Why is this bad?#
Improperly annotated __exit__ and __aexit__ methods can cause
unexpected behavior when interacting with type checkers.
","----neg----:
from types import TracebackType


class Foo:
    def __exit__(
        self, typ: BaseException, exc: BaseException, tb: TracebackType
    ) -> None:
        ...
----pos----:
from types import TracebackType


class Foo:
    def __exit__(
        self,
        typ: type[BaseException] | None,
        exc: BaseException | None,
        tb: TracebackType | None,
    ) -> None:
        ...
",,"
<h1 id=""bad-exit-annotation-pyi036"">bad-exit-annotation (PYI036)<a class=""headerlink"" href=""#bad-exit-annotation-pyi036"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/redundant-numeric-union/,PYI041,redundant-numeric-union,Use <code>{supertype}</code> instead of <code>{subtype} | {supertype}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for parameter annotations that contain redundant unions between
builtin numeric types (e.g., int | float).
","Why is this bad?#
The typing specification states:

Python’s numeric types complex, float and int are not subtypes of
each other, but to support common use cases, the type system contains a
straightforward shortcut: when an argument is annotated as having type
float, an argument of type int is acceptable; similar, for an
argument annotated as having type complex, arguments of type float or
int are acceptable.

As such, a union that includes both int and float is redundant in the
specific context of a parameter annotation, as it is equivalent to a union
that only includes float. For readability and clarity, unions should omit
redundant elements.
","----neg----:
def foo(x: float | int | str) -> None:
    ...
----pos----:
def foo(x: float | str) -> None:
    ...
",,"
<h1 id=""redundant-numeric-union-pyi041"">redundant-numeric-union (PYI041)<a class=""headerlink"" href=""#redundant-numeric-union-pyi041"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/numbers.html#the-numeric-tower"">The typing specification</a></li>
<li><a href=""https://peps.python.org/pep-0484/#the-numeric-tower"">PEP 484: The numeric tower</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/snake-case-type-alias/,PYI042,snake-case-type-alias,Type alias <code>{name}</code> should be CamelCase,Rule is stable,Automatic fix not available,"What it does#
Checks for type aliases that do not use the CamelCase naming convention.
","Why is this bad?#
It's conventional to use the CamelCase naming convention for type aliases,
to distinguish them from other variables.
","----neg----:
type_alias_name: TypeAlias = int
----pos----:
TypeAliasName: TypeAlias = int
",,"
<h1 id=""snake-case-type-alias-pyi042"">snake-case-type-alias (PYI042)<a class=""headerlink"" href=""#snake-case-type-alias-pyi042"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/t-suffixed-type-alias/,PYI043,t-suffixed-type-alias,Private type alias <code>{name}</code> should not be suffixed with <code>T</code> (the <code>T</code> suffix implies that an object is a <code>TypeVar</code>),Rule is stable,Automatic fix not available,"What it does#
Checks for private type alias definitions suffixed with 'T'.
","Why is this bad?#
It's conventional to use the 'T' suffix for type variables; the use of
such a suffix implies that the object is a TypeVar.
Adding the 'T' suffix to a non-TypeVar, it can be misleading and should
be avoided.
","----neg----:
from typing import TypeAlias

_MyTypeT: TypeAlias = int
----pos----:
from typing import TypeAlias

_MyType: TypeAlias = int
",,"
<h1 id=""t-suffixed-type-alias-pyi043"">t-suffixed-type-alias (PYI043)<a class=""headerlink"" href=""#t-suffixed-type-alias-pyi043"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0484/#type-aliases"">PEP 484: Type Aliases</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/future-annotations-in-stub/,PYI044,future-annotations-in-stub,"<code>from __future__ import annotations</code> has no effect in stub files, since type checkers automatically treat stubs as having those semantics",Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of the from __future__ import annotations import
statement in stub files.
","Why is this bad?#
Stub files natively support forward references in all contexts, as stubs are
never executed at runtime. (They should be thought of as ""data files"" for
type checkers.) As such, the from __future__ import annotations import
statement has no effect and should be omitted.
",,,"
<h1 id=""future-annotations-in-stub-pyi044"">future-annotations-in-stub (PYI044)<a class=""headerlink"" href=""#future-annotations-in-stub-pyi044"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://typing.readthedocs.io/en/latest/source/stubs.html"">Static Typing with Python: Type Stubs</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/iter-method-return-iterable/,PYI045,iter-method-return-iterable,"<code>__aiter__</code> methods should return an <code>AsyncIterator</code>, not an <code>AsyncIterable</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for __iter__ methods in stubs that return Iterable[T] instead
of an Iterator[T].
","Why is this bad?#
__iter__ methods should always should return an Iterator of some kind,
not an Iterable.
In Python, an Iterable is an object that has an __iter__ method; an
Iterator is an object that has __iter__ and __next__ methods. All
__iter__ methods are expected to return Iterators. Type checkers may
not always recognize an object as being iterable if its __iter__ method
does not return an Iterator.
Every Iterator is an Iterable, but not every Iterable is an Iterator.
For example, list is an Iterable, but not an Iterator; you can obtain
an iterator over a list's elements by passing the list to iter():
>>> import collections.abc
>>> x = [42]
>>> isinstance(x, collections.abc.Iterable)
True
>>> isinstance(x, collections.abc.Iterator)
False
>>> next(x)
Traceback (most recent call last):
 File ""<stdin>"", line 1, in <module>
TypeError: 'list' object is not an iterator
>>> y = iter(x)
>>> isinstance(y, collections.abc.Iterable)
True
>>> isinstance(y, collections.abc.Iterator)
True
>>> next(y)
42

Using Iterable rather than Iterator as a return type for an __iter__
methods would imply that you would not necessarily be able to call next()
on the returned object, violating the expectations of the interface.
","----neg----:
import collections.abc


class Klass:
    def __iter__(self) -> collections.abc.Iterable[str]:
        ...
----pos----:
import collections.abc


class Klass:
    def __iter__(self) -> collections.abc.Iterator[str]:
        ...
",,"
<h1 id=""iter-method-return-iterable-pyi045"">iter-method-return-iterable (PYI045)<a class=""headerlink"" href=""#iter-method-return-iterable-pyi045"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-private-protocol/,PYI046,unused-private-protocol,Private protocol <code>{name}</code> is never used,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused private typing.Protocol definitions.
","Why is this bad?#
A private typing.Protocol that is defined but not used is likely a
mistake. It should either be used, made public, or removed to avoid
confusion.
","----neg----:
import typing


class _PrivateProtocol(typing.Protocol):
    foo: int
----pos----:
import typing


class _PrivateProtocol(typing.Protocol):
    foo: int


def func(arg: _PrivateProtocol) -> None:
    ...
",,"
<h1 id=""unused-private-protocol-pyi046"">unused-private-protocol (PYI046)<a class=""headerlink"" href=""#unused-private-protocol-pyi046"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-private-type-alias/,PYI047,unused-private-type-alias,Private TypeAlias <code>{name}</code> is never used,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused private type aliases.
","Why is this bad?#
A private type alias that is defined but not used is likely a
mistake. It should either be used, made public, or removed to avoid
confusion.
","----neg----:
import typing

_UnusedTypeAlias: typing.TypeAlias = int
----pos----:
import typing

_UsedTypeAlias: typing.TypeAlias = int


def func(arg: _UsedTypeAlias) -> _UsedTypeAlias:
    ...
",,"
<h1 id=""unused-private-type-alias-pyi047"">unused-private-type-alias (PYI047)<a class=""headerlink"" href=""#unused-private-type-alias-pyi047"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/stub-body-multiple-statements/,PYI048,stub-body-multiple-statements,Function body must contain exactly one statement,Rule is stable,Automatic fix not available,"What it does#
Checks for functions in stub (.pyi) files that contain multiple
statements.
","Why is this bad?#
Stub files are never executed, and are only intended to define type hints.
As such, functions in stub files should not contain functional code, and
should instead contain only a single statement (e.g., ...).
","----neg----:
def function():
    x = 1
    y = 2
    return x + y
----pos----:
def function():
    ...
",,"
<h1 id=""stub-body-multiple-statements-pyi048"">stub-body-multiple-statements (PYI048)<a class=""headerlink"" href=""#stub-body-multiple-statements-pyi048"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-private-typed-dict/,PYI049,unused-private-typed-dict,Private TypedDict <code>{name}</code> is never used,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused private typing.TypedDict definitions.
","Why is this bad?#
A private typing.TypedDict that is defined but not used is likely a
mistake. It should either be used, made public, or removed to avoid
confusion.
","----neg----:
import typing


class _UnusedPrivateTypedDict(typing.TypedDict):
    foo: list[int]
----pos----:
import typing


class _UsedPrivateTypedDict(typing.TypedDict):
    foo: set[str]


def func(arg: _UsedPrivateTypedDict) -> _UsedPrivateTypedDict:
    ...
",,"
<h1 id=""unused-private-typed-dict-pyi049"">unused-private-typed-dict (PYI049)<a class=""headerlink"" href=""#unused-private-typed-dict-pyi049"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/no-return-argument-annotation-in-stub/,PYI050,no-return-argument-annotation-in-stub,Prefer <code>{module}.Never</code> over <code>NoReturn</code> for argument annotations,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of typing.NoReturn (and typing_extensions.NoReturn) for
parameter annotations.
","Why is this bad?#
Prefer Never over NoReturn for parameter annotations. Never has a
clearer name in these contexts, since it makes little sense to talk about a
parameter annotation ""not returning"".
This is a purely stylistic lint: the two types have identical semantics for
type checkers. Both represent Python's ""bottom type"" (a type that has no
members).
","----neg----:
from typing import NoReturn

def foo(x: NoReturn): ...
----pos----:
from typing import Never

def foo(x: Never): ...
",,"
<h1 id=""no-return-argument-annotation-in-stub-pyi050"">no-return-argument-annotation-in-stub (PYI050)<a class=""headerlink"" href=""#no-return-argument-annotation-in-stub-pyi050"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Never"">Python documentation: <code>typing.Never</code></a></li>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.NoReturn"">Python documentation: <code>typing.NoReturn</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redundant-literal-union/,PYI051,redundant-literal-union,<code>Literal[{literal}]</code> is redundant in a union with <code>{builtin_type}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for redundant unions between a Literal and a builtin supertype of
that Literal.
","Why is this bad?#
Using a Literal type in a union with its builtin supertype is redundant,
as the supertype will be strictly more general than the Literal type.
For example, Literal[""A""] | str is equivalent to str, and
Literal[1] | int is equivalent to int, as str and int are the
supertypes of ""A"" and 1 respectively.
","----neg----:
from typing import Literal

x: Literal[""A"", b""B""] | str
----pos----:
from typing import Literal

x: Literal[b""B""] | str
",,"
<h1 id=""redundant-literal-union-pyi051"">redundant-literal-union (PYI051)<a class=""headerlink"" href=""#redundant-literal-union-pyi051"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unannotated-assignment-in-stub/,PYI052,unannotated-assignment-in-stub,Need type annotation for <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does?#
Checks for unannotated assignments in stub (.pyi) files.
","Why is this bad?#
Stub files exist to provide type hints, and are never executed. As such,
all assignments in stub files should be annotated with a type.
",,,"
<h1 id=""unannotated-assignment-in-stub-pyi052"">unannotated-assignment-in-stub (PYI052)<a class=""headerlink"" href=""#unannotated-assignment-in-stub-pyi052"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/string-or-bytes-too-long/,PYI053,string-or-bytes-too-long,String and bytes literals longer than 50 characters are not permitted,Rule is stable,Automatic fix available,"What it does#
Checks for the use of string and bytes literals longer than 50 characters
in stub (.pyi) files.
","Why is this bad?#
If a function or variable has a default value where the string or bytes
representation is greater than 50 characters long, it is likely to be an
implementation detail or a constant that varies depending on the system
you're running on.
Although IDEs may find them useful, default values are ignored by type
checkers, the primary consumers of stub files. Replace very long constants
with ellipses (...) to simplify the stub.
","----neg----:
def foo(arg: str = ""51 character stringgggggggggggggggggggggggggggggggg"") -> None:
    ...
----pos----:
def foo(arg: str = ...) -> None:
    ...
",,"
<h1 id=""string-or-bytes-too-long-pyi053"">string-or-bytes-too-long (PYI053)<a class=""headerlink"" href=""#string-or-bytes-too-long-pyi053"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/numeric-literal-too-long/,PYI054,numeric-literal-too-long,Numeric literals with a string representation longer than ten characters are not permitted,Rule is stable,Automatic fix available,"What it does#
Checks for numeric literals with a string representation longer than ten
characters.
","Why is this bad?#
If a function has a default value where the literal representation is
greater than 50 characters, the value is likely to be an implementation
detail or a constant that varies depending on the system you're running on.
Default values like these should generally be omitted from stubs. Use
ellipses (...) instead.
","----neg----:
def foo(arg: int = 693568516352839939918568862861217771399698285293568) -> None:
    ...
----pos----:
def foo(arg: int = ...) -> None:
    ...
",,"
<h1 id=""numeric-literal-too-long-pyi054"">numeric-literal-too-long (PYI054)<a class=""headerlink"" href=""#numeric-literal-too-long-pyi054"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-type-union/,PYI055,unnecessary-type-union,"Multiple <code>type</code> members in a union. Combine them into one, e.g., <code>type[{union_str}]</code>.",Rule is stable,Automatic fix available,"What it does#
Checks for the presence of multiple types in a union.
","Why is this bad?#
type[T | S] has identical semantics to type[T] | type[S] in a type
annotation, but is cleaner and more concise.
","----neg----:
field: type[int] | type[float] | str
----pos----:
field: type[int | float] | str
",,"
<h1 id=""unnecessary-type-union-pyi055"">unnecessary-type-union (PYI055)<a class=""headerlink"" href=""#unnecessary-type-union-pyi055"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/unsupported-method-call-on-all/,PYI056,unsupported-method-call-on-all,Calling <code>.{name}()</code> on <code>__all__</code> may not be supported by all type checkers (use <code>+=</code> instead),Rule is stable,Automatic fix not available,"What it does#
Checks that append, extend and remove methods are not called on
__all__.
","Why is this bad?#
Different type checkers have varying levels of support for calling these
methods on __all__. Instead, use the += operator to add items to
__all__, which is known to be supported by all major type checkers.
","----neg----:
import sys

__all__ = [""A"", ""B""]

if sys.version_info >= (3, 10):
    __all__.append(""C"")

if sys.version_info >= (3, 11):
    __all__.remove(""B"")
----pos----:
import sys

__all__ = [""A""]

if sys.version_info < (3, 11):
    __all__ += [""B""]

if sys.version_info >= (3, 10):
    __all__ += [""C""]
",,"
<h1 id=""unsupported-method-call-on-all-pyi056"">unsupported-method-call-on-all (PYI056)<a class=""headerlink"" href=""#unsupported-method-call-on-all-pyi056"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/generator-return-from-iter-method/,PYI058,generator-return-from-iter-method,Use <code>{return_type}</code> as the return value for simple <code>{method}</code> methods,Rule is stable,Automatic fix available,"What it does#
Checks for simple __iter__ methods that return Generator, and for
simple __aiter__ methods that return AsyncGenerator.
","Why is this bad?#
Using (Async)Iterator for these methods is simpler and more elegant. More
importantly, it also reflects the fact that the precise kind of iterator
returned from an __iter__ method is usually an implementation detail that
could change at any time. Type annotations help define a contract for a
function; implementation details should not leak into that contract.
For example:
from collections.abc import AsyncGenerator, Generator
from typing import Any


class CustomIterator:
    def __iter__(self) -> Generator:
        yield from range(42)


class CustomIterator2:
    def __iter__(self) -> Generator[str, Any, None]:
        yield from ""abcdefg""

Use instead:
from collections.abc import Iterator


class CustomIterator:
    def __iter__(self) -> Iterator:
        yield from range(42)


class CustomIterator2:
    def __iter__(self) -> Iterator[str]:
        yield from ""abdefg""

Fix safety#
This rule tries hard to avoid false-positive errors, and the rule's fix
should always be safe for .pyi stub files. However, there is a slightly
higher chance that a false positive might be emitted by this rule when
applied to runtime Python (.py files). As such, the fix is marked as
unsafe for any __iter__ or __aiter__ method in a .py file that has
more than two statements (including docstrings) in its body.
",,,"
<h1 id=""generator-return-from-iter-method-pyi058"">generator-return-from-iter-method (PYI058)<a class=""headerlink"" href=""#generator-return-from-iter-method-pyi058"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pyi</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/pytest-fixture-incorrect-parentheses-style/,PT001,pytest-fixture-incorrect-parentheses-style,Use <code>@pytest.fixture{expected}</code> over <code>@pytest.fixture{actual}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for argument-free @pytest.fixture() decorators with or without
parentheses, depending on the lint.flake8-pytest-style.fixture-parentheses
setting.
","Why is this bad?#
If a @pytest.fixture() doesn't take any arguments, the parentheses are
optional.
Either removing those unnecessary parentheses or requiring them for all
fixtures is fine, but it's best to be consistent.
","----neg----:
import pytest


@pytest.fixture
def my_fixture():
    ...
----pos----:
import pytest


@pytest.fixture()
def my_fixture():
    ...
","https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_fixture-parentheses
lint.flake8-pytest-style.fixture-parentheses
None","
<h1 id=""pytest-fixture-incorrect-parentheses-style-pt001"">pytest-fixture-incorrect-parentheses-style (PT001)<a class=""headerlink"" href=""#pytest-fixture-incorrect-parentheses-style-pt001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#fixtures-api""><code>pytest</code> documentation: API Reference: Fixtures</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-fixture-positional-args/,PT002,pytest-fixture-positional-args,"Configuration for fixture <code>{function}</code> specified via positional args, use kwargs",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.fixture calls with positional arguments.
","Why is this bad?#
For clarity and consistency, prefer using keyword arguments to specify
fixture configuration.
","----neg----:
import pytest


@pytest.fixture(""module"")
def my_fixture():
    ...
----pos----:
import pytest


@pytest.fixture(scope=""module"")
def my_fixture():
    ...
",,"
<h1 id=""pytest-fixture-positional-args-pt002"">pytest-fixture-positional-args (PT002)<a class=""headerlink"" href=""#pytest-fixture-positional-args-pt002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-fixture""><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-extraneous-scope-function/,PT003,pytest-extraneous-scope-function,<code>scope='function'</code> is implied in <code>@pytest.fixture()</code>,Rule is stable,Automatic fix available,"What it does#
Checks for pytest.fixture calls with scope=""function"".
","Why is this bad?#
scope=""function"" can be omitted, as it is the default.
","----neg----:
import pytest


@pytest.fixture(scope=""function"")
def my_fixture():
    ...
----pos----:
import pytest


@pytest.fixture()
def my_fixture():
    ...
",,"
<h1 id=""pytest-extraneous-scope-function-pt003"">pytest-extraneous-scope-function (PT003)<a class=""headerlink"" href=""#pytest-extraneous-scope-function-pt003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-fixture""><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-missing-fixture-name-underscore/,PT004,pytest-missing-fixture-name-underscore,"Fixture <code>{function}</code> does not return anything, add leading underscore",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest fixtures that do not return a value, but are not named
with a leading underscore.
","Why is this bad?#
By convention, fixtures that don't return a value should be named with a
leading underscore, while fixtures that do return a value should not.
This rule ignores abstract fixtures and generators.
","----neg----:
import pytest


@pytest.fixture()
def patch_something(mocker):
    mocker.patch(""module.object"")


@pytest.fixture()
def use_context():
    with create_context():
        yield
----pos----:
import pytest


@pytest.fixture()
def _patch_something(mocker):
    mocker.patch(""module.object"")


@pytest.fixture()
def _use_context():
    with create_context():
        yield
",,"
<h1 id=""pytest-missing-fixture-name-underscore-pt004"">pytest-missing-fixture-name-underscore (PT004)<a class=""headerlink"" href=""#pytest-missing-fixture-name-underscore-pt004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-fixture""><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-incorrect-fixture-name-underscore/,PT005,pytest-incorrect-fixture-name-underscore,"Fixture <code>{function}</code> returns a value, remove leading underscore",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest fixtures that return a value, but are named with a
leading underscore.
","Why is this bad?#
By convention, fixtures that don't return a value should be named with a
leading underscore, while fixtures that do return a value should not.
This rule ignores abstract fixtures.
","----neg----:
import pytest


@pytest.fixture()
def _some_object():
    return SomeClass()


@pytest.fixture()
def _some_object_with_cleanup():
    obj = SomeClass()
    yield obj
    obj.cleanup()
----pos----:
import pytest


@pytest.fixture()
def some_object():
    return SomeClass()


@pytest.fixture()
def some_object_with_cleanup():
    obj = SomeClass()
    yield obj
    obj.cleanup()
",,"
<h1 id=""pytest-incorrect-fixture-name-underscore-pt005"">pytest-incorrect-fixture-name-underscore (PT005)<a class=""headerlink"" href=""#pytest-incorrect-fixture-name-underscore-pt005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-fixture""><code>pytest</code> documentation: <code>@pytest.fixture</code> functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-parametrize-names-wrong-type/,PT006,pytest-parametrize-names-wrong-type,Wrong type passed to first argument of <code>@pytest.mark.parametrize</code>; expected {expected_string},Rule is stable,Automatic fix available,"What it does#
Checks for the type of parameter names passed to pytest.mark.parametrize.
","Why is this bad?#
The argnames argument of pytest.mark.parametrize takes a string or
a sequence of strings. For a single parameter, it's preferable to use a
string. For multiple parameters, it's preferable to use the style
configured via the lint.flake8-pytest-style.parametrize-names-type setting.
","----neg----:
import pytest


# single parameter, always expecting string
@pytest.mark.parametrize((""param"",), [1, 2, 3])
def test_foo(param):
    ...


# multiple parameters, expecting tuple
@pytest.mark.parametrize([""param1"", ""param2""], [(1, 2), (3, 4)])
def test_bar(param1, param2):
    ...


# multiple parameters, expecting tuple
@pytest.mark.parametrize(""param1,param2"", [(1, 2), (3, 4)])
def test_baz(param1, param2):
    ...
----pos----:
import pytest


@pytest.mark.parametrize(""param"", [1, 2, 3])
def test_foo(param):
    ...


@pytest.mark.parametrize((""param1"", ""param2""), [(1, 2), (3, 4)])
def test_bar(param1, param2):
    ...
","https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_parametrize-names-type
lint.flake8-pytest-style.parametrize-names-type
None","
<h1 id=""pytest-parametrize-names-wrong-type-pt006"">pytest-parametrize-names-wrong-type (PT006)<a class=""headerlink"" href=""#pytest-parametrize-names-wrong-type-pt006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/parametrize.html#pytest-mark-parametrize""><code>pytest</code> documentation: How to parametrize fixtures and test functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-parametrize-values-wrong-type/,PT007,pytest-parametrize-values-wrong-type,Wrong values type in <code>@pytest.mark.parametrize</code> expected <code>{values}</code> of <code>{row}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for the type of parameter values passed to pytest.mark.parametrize.
","Why is this bad?#
The argvalues argument of pytest.mark.parametrize takes an iterator of
parameter values, which can be provided as lists or tuples.
To aid in readability, it's recommended to use a consistent style for the
list of values rows, and, in the case of multiple parameters, for each row
of values.
The style for the list of values rows can be configured via the
lint.flake8-pytest-style.parametrize-values-type setting, while the
style for each row of values can be configured via the
lint.flake8-pytest-style.parametrize-values-row-type setting.
For example, lint.flake8-pytest-style.parametrize-values-type will lead to
the following expectations:

tuple: @pytest.mark.parametrize(""value"", (""a"", ""b"", ""c""))
list: @pytest.mark.parametrize(""value"", [""a"", ""b"", ""c""])

Similarly, lint.flake8-pytest-style.parametrize-values-row-type will lead to
the following expectations:

tuple: @pytest.mark.parametrize((""key"", ""value""), [(""a"", ""b""), (""c"", ""d"")])
list: @pytest.mark.parametrize((""key"", ""value""), [[""a"", ""b""], [""c"", ""d""]])

","----neg----:
import pytest


# expected list, got tuple
@pytest.mark.parametrize(""param"", (1, 2))
def test_foo(param):
    ...


# expected top-level list, got tuple
@pytest.mark.parametrize(
    (""param1"", ""param2""),
    (
        (1, 2),
        (3, 4),
    ),
)
def test_bar(param1, param2):
    ...


# expected individual rows to be tuples, got lists
@pytest.mark.parametrize(
    (""param1"", ""param2""),
    [
        [1, 2],
        [3, 4],
    ],
)
def test_baz(param1, param2):
    ...
----pos----:
import pytest


@pytest.mark.parametrize(""param"", [1, 2, 3])
def test_foo(param):
    ...


@pytest.mark.parametrize((""param1"", ""param2""), [(1, 2), (3, 4)])
def test_bar(param1, param2):
    ...
","https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_parametrize-values-type
lint.flake8-pytest-style.parametrize-values-type
None
https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_parametrize-values-row-type
lint.flake8-pytest-style.parametrize-values-row-type
None","
<h1 id=""pytest-parametrize-values-wrong-type-pt007"">pytest-parametrize-values-wrong-type (PT007)<a class=""headerlink"" href=""#pytest-parametrize-values-wrong-type-pt007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/parametrize.html#pytest-mark-parametrize""><code>pytest</code> documentation: How to parametrize fixtures and test functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-patch-with-lambda/,PT008,pytest-patch-with-lambda,Use <code>return_value=</code> instead of patching with <code>lambda</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for mocked calls that use a dummy lambda function instead of
return_value.
","Why is this bad?#
When patching calls, an explicit return_value better conveys the intent
than a lambda function, assuming the lambda does not use the arguments
passed to it.
return_value is also robust to changes in the patched function's
signature, and enables additional assertions to verify behavior. For
example, return_value allows for verification of the number of calls or
the arguments passed to the patched function via assert_called_once_with
and related methods.
","----neg----:
def test_foo(mocker):
    mocker.patch(""module.target"", lambda x, y: 7)
----pos----:
def test_foo(mocker):
    mocker.patch(""module.target"", return_value=7)

    # If the lambda makes use of the arguments, no diagnostic is emitted.
    mocker.patch(""module.other_target"", lambda x, y: x)
",,"
<h1 id=""pytest-patch-with-lambda-pt008"">pytest-patch-with-lambda (PT008)<a class=""headerlink"" href=""#pytest-patch-with-lambda-pt008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"">Python documentation: <code>unittest.mock.patch</code></a></li>
<li><a href=""https://pypi.org/project/pytest-mock/""><code>pytest-mock</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-unittest-assertion/,PT009,pytest-unittest-assertion,Use a regular <code>assert</code> instead of unittest-style <code>{assertion}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of assertion methods from the unittest module.
","Why is this bad?#
To make use of pytest's assertion rewriting, a regular assert statement
is preferred over unittest's assertion methods.
","----neg----:
import unittest


class TestFoo(unittest.TestCase):
    def test_foo(self):
        self.assertEqual(a, b)
----pos----:
import unittest


class TestFoo(unittest.TestCase):
    def test_foo(self):
        assert a == b
",,"
<h1 id=""pytest-unittest-assertion-pt009"">pytest-unittest-assertion (PT009)<a class=""headerlink"" href=""#pytest-unittest-assertion-pt009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/7.1.x/how-to/assert.html#assertion-introspection-details""><code>pytest</code> documentation: Assertion introspection details</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-raises-without-exception/,PT010,pytest-raises-without-exception,set the expected exception in <code>pytest.raises()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.raises calls without an expected exception.
","Why is this bad?#
pytest.raises expects to receive an expected exception as its first
argument. If omitted, the pytest.raises call will fail at runtime.
","----neg----:
import pytest


def test_foo():
    with pytest.raises():
        do_something()
----pos----:
import pytest


def test_foo():
    with pytest.raises(SomeException):
        do_something()
",,"
<h1 id=""pytest-raises-without-exception-pt010"">pytest-raises-without-exception (PT010)<a class=""headerlink"" href=""#pytest-raises-without-exception-pt010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises""><code>pytest</code> documentation: <code>pytest.raises</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-raises-too-broad/,PT011,pytest-raises-too-broad,"<code>pytest.raises({exception})</code> is too broad, set the <code>match</code> parameter or use a more specific exception",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.raises calls without a match parameter.
","Why is this bad?#
pytest.raises(Error) will catch any Error and may catch errors that are
unrelated to the code under test. To avoid this, pytest.raises should be
called with a match parameter. The exception names that require a match
parameter can be configured via the
lint.flake8-pytest-style.raises-require-match-for and
lint.flake8-pytest-style.raises-extend-require-match-for settings.
","----neg----:
import pytest


def test_foo():
    with pytest.raises(ValueError):
        ...

    # empty string is also an error
    with pytest.raises(ValueError, match=""""):
        ...
----pos----:
import pytest


def test_foo():
    with pytest.raises(ValueError, match=""expected message""):
        ...
","https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_raises-require-match-for
lint.flake8-pytest-style.raises-require-match-for
None
https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_raises-extend-require-match-for
lint.flake8-pytest-style.raises-extend-require-match-for
None","
<h1 id=""pytest-raises-too-broad-pt011"">pytest-raises-too-broad (PT011)<a class=""headerlink"" href=""#pytest-raises-too-broad-pt011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises""><code>pytest</code> documentation: <code>pytest.raises</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-raises-with-multiple-statements/,PT012,pytest-raises-with-multiple-statements,<code>pytest.raises()</code> block should contain a single simple statement,Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.raises context managers with multiple statements.
","Why is this bad?#
When a pytest.raises is used as a context manager and contains multiple
statements, it can lead to the test passing when it actually should fail.
To avoid this, a pytest.raises context manager should only contain
a single simple statement that raises the expected exception.
","----neg----:
import pytest


def test_foo():
    with pytest.raises(MyError):
        setup()
        func_to_test()  # not executed if `setup()` raises `MyError`
        assert foo()  # not executed
----pos----:
import pytest


def test_foo():
    setup()
    with pytest.raises(MyError):
        func_to_test()
    assert foo()
",,"
<h1 id=""pytest-raises-with-multiple-statements-pt012"">pytest-raises-with-multiple-statements (PT012)<a class=""headerlink"" href=""#pytest-raises-with-multiple-statements-pt012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises""><code>pytest</code> documentation: <code>pytest.raises</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-incorrect-pytest-import/,PT013,pytest-incorrect-pytest-import,"Found incorrect import of pytest, use simple <code>import pytest</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for incorrect import of pytest.
","Why is this bad?#
pytest should be imported as import pytest and its members should be accessed in the form of
pytest.xxx.yyy for consistency and to make it easier for linting tools to analyze the code.
","----neg----:
import pytest as pt
from pytest import fixture
----pos----:
import pytest
",,"
<h1 id=""pytest-incorrect-pytest-import-pt013"">pytest-incorrect-pytest-import (PT013)<a class=""headerlink"" href=""#pytest-incorrect-pytest-import-pt013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/pytest-duplicate-parametrize-test-cases/,PT014,pytest-duplicate-parametrize-test-cases,Duplicate of test case at index {index} in <code>@pytest_mark.parametrize</code>,Rule is stable,Automatic fix available,"What it does#
Checks for duplicate test cases in pytest.mark.parametrize.
","Why is this bad?#
Duplicate test cases are redundant and should be removed.
","----neg----:
import pytest


@pytest.mark.parametrize(
    (""param1"", ""param2""),
    [
        (1, 2),
        (1, 2),
    ],
)
def test_foo(param1, param2):
    ...
----pos----:
import pytest


@pytest.mark.parametrize(
    (""param1"", ""param2""),
    [
        (1, 2),
    ],
)
def test_foo(param1, param2):
    ...
----other----:
This rule's fix is marked as unsafe, as tests that rely on mutable global
state may be affected by removing duplicate test cases.
",,"
<h1 id=""pytest-duplicate-parametrize-test-cases-pt014"">pytest-duplicate-parametrize-test-cases (PT014)<a class=""headerlink"" href=""#pytest-duplicate-parametrize-test-cases-pt014"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/parametrize.html#pytest-mark-parametrize""><code>pytest</code> documentation: How to parametrize fixtures and test functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-assert-always-false/,PT015,pytest-assert-always-false,"Assertion always fails, replace with <code>pytest.fail()</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for assert statements whose test expression is a falsy value.
","Why is this bad?#
pytest.fail conveys the intent more clearly than assert falsy_value.
","----neg----:
def test_foo():
    if some_condition:
        assert False, ""some_condition was True""
----pos----:
import pytest


def test_foo():
    if some_condition:
        pytest.fail(""some_condition was True"")
    ...
----other----:
References

pytest documentation: pytest.fail

",,"
<h1 id=""pytest-assert-always-false-pt015"">pytest-assert-always-false (PT015)<a class=""headerlink"" href=""#pytest-assert-always-false-pt015"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/pytest-fail-without-message/,PT016,pytest-fail-without-message,No message passed to <code>pytest.fail()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.fail calls without a message.
","Why is this bad?#
pytest.fail calls without a message make it harder to understand and debug test failures.
","----neg----:
import pytest


def test_foo():
    pytest.fail()


def test_bar():
    pytest.fail("""")


def test_baz():
    pytest.fail(reason="""")
----pos----:
import pytest


def test_foo():
    pytest.fail(""..."")


def test_bar():
    pytest.fail(reason=""..."")
",,"
<h1 id=""pytest-fail-without-message-pt016"">pytest-fail-without-message (PT016)<a class=""headerlink"" href=""#pytest-fail-without-message-pt016"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-fail""><code>pytest</code> documentation: <code>pytest.fail</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-assert-in-except/,PT017,pytest-assert-in-except,"Found assertion on exception <code>{name}</code> in <code>except</code> block, use <code>pytest.raises()</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for assert statements in except clauses.
","Why is this bad?#
When testing for exceptions, pytest.raises() should be used instead of
assert statements in except clauses, as it's more explicit and
idiomatic. Further, pytest.raises() will fail if the exception is not
raised, unlike the assert statement.
","----neg----:
def test_foo():
    try:
        1 / 0
    except ZeroDivisionError as e:
        assert e.args
----pos----:
import pytest


def test_foo():
    with pytest.raises(ZeroDivisionError) as exc_info:
        1 / 0
    assert exc_info.value.args
",,"
<h1 id=""pytest-assert-in-except-pt017"">pytest-assert-in-except (PT017)<a class=""headerlink"" href=""#pytest-assert-in-except-pt017"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises""><code>pytest</code> documentation: <code>pytest.raises</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-composite-assertion/,PT018,pytest-composite-assertion,Assertion should be broken down into multiple parts,Rule is stable,Automatic fix available,"What it does#
Checks for assertions that combine multiple independent conditions.
","Why is this bad?#
Composite assertion statements are harder to debug upon failure, as the
failure message will not indicate which condition failed.
","----neg----:
def test_foo():
    assert something and something_else


def test_bar():
    assert not (something or something_else)
----pos----:
def test_foo():
    assert something
    assert something_else


def test_bar():
    assert not something
    assert not something_else
",,"
<h1 id=""pytest-composite-assertion-pt018"">pytest-composite-assertion (PT018)<a class=""headerlink"" href=""#pytest-composite-assertion-pt018"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/pytest-fixture-param-without-value/,PT019,pytest-fixture-param-without-value,"Fixture <code>{name}</code> without value is injected as parameter, use <code>@pytest.mark.usefixtures</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest test functions that should be decorated with
@pytest.mark.usefixtures.
","Why is this bad?#
In pytest, fixture injection is used to activate fixtures in a test
function.
Fixtures can be injected either by passing them as parameters to the test
function, or by using the @pytest.mark.usefixtures decorator.
If the test function depends on the fixture being activated, but does not
use it in the test body or otherwise rely on its return value, prefer
the @pytest.mark.usefixtures decorator, to make the dependency explicit
and avoid the confusion caused by unused arguments.
","----neg----:
import pytest


@pytest.fixture
def _patch_something():
    ...


def test_foo(_patch_something):
    ...
----pos----:
import pytest


@pytest.fixture
def _patch_something():
    ...


@pytest.mark.usefixtures(""_patch_something"")
def test_foo():
    ...
",,"
<h1 id=""pytest-fixture-param-without-value-pt019"">pytest-fixture-param-without-value (PT019)<a class=""headerlink"" href=""#pytest-fixture-param-without-value-pt019"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-usefixtures""><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-deprecated-yield-fixture/,PT020,pytest-deprecated-yield-fixture,"<code>@pytest.yield_fixture</code> is deprecated, use <code>@pytest.fixture</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for pytest.yield_fixture usage.
","Why is this bad?#
pytest.yield_fixture is deprecated. pytest.fixture should be used instead.
","----neg----:
import pytest


@pytest.yield_fixture()
def my_fixture():
    obj = SomeClass()
    yield obj
    obj.cleanup()
----pos----:
import pytest


@pytest.fixture()
def my_fixture():
    obj = SomeClass()
    yield obj
    obj.cleanup()
",,"
<h1 id=""pytest-deprecated-yield-fixture-pt020"">pytest-deprecated-yield-fixture (PT020)<a class=""headerlink"" href=""#pytest-deprecated-yield-fixture-pt020"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/yieldfixture.html""><code>pytest</code> documentation: <code>yield_fixture</code> functions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-fixture-finalizer-callback/,PT021,pytest-fixture-finalizer-callback,Use <code>yield</code> instead of <code>request.addfinalizer</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for unnecessary request.addfinalizer usages in pytest fixtures.
","Why is this bad?#
pytest offers two ways to perform cleanup in fixture code. The first is
sequential (via the yield statement), the second callback-based (via
request.addfinalizer).
The sequential approach is more readable and should be preferred, unless
the fixture uses the ""factory as fixture"" pattern.
","----neg----:
import pytest


@pytest.fixture()
def my_fixture(request):
    resource = acquire_resource()
    request.addfinalizer(resource.release)
    return resource
----pos----:
import pytest


@pytest.fixture()
def my_fixture():
    resource = acquire_resource()
    yield resource
    resource.release()


# ""factory-as-fixture"" pattern
@pytest.fixture()
def my_factory(request):
    def create_resource(arg):
        resource = acquire_resource(arg)
        request.addfinalizer(resource.release)
        return resource

    return create_resource
",,"
<h1 id=""pytest-fixture-finalizer-callback-pt021"">pytest-fixture-finalizer-callback (PT021)<a class=""headerlink"" href=""#pytest-fixture-finalizer-callback-pt021"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/fixtures.html#adding-finalizers-directly""><code>pytest</code> documentation: Adding finalizers directly</a></li>
<li><a href=""https://docs.pytest.org/en/latest/how-to/fixtures.html#factories-as-fixtures""><code>pytest</code> documentation: Factories as fixtures</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-useless-yield-fixture/,PT022,pytest-useless-yield-fixture,"No teardown in fixture <code>{name}</code>, use <code>return</code> instead of <code>yield</code>",Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary yield expressions in pytest fixtures.
","Why is this bad?#
In pytest fixtures, the yield expression should only be used for fixtures
that include teardown code, to clean up the fixture after the test function
has finished executing.
","----neg----:
import pytest


@pytest.fixture()
def my_fixture():
    resource = acquire_resource()
    yield resource
----pos----:
import pytest


@pytest.fixture()
def my_fixture_with_teardown():
    resource = acquire_resource()
    yield resource
    resource.release()


@pytest.fixture()
def my_fixture_without_teardown():
    resource = acquire_resource()
    return resource
",,"
<h1 id=""pytest-useless-yield-fixture-pt022"">pytest-useless-yield-fixture (PT022)<a class=""headerlink"" href=""#pytest-useless-yield-fixture-pt022"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/fixtures.html#teardown-cleanup-aka-fixture-finalization""><code>pytest</code> documentation: Teardown/Cleanup</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-incorrect-mark-parentheses-style/,PT023,pytest-incorrect-mark-parentheses-style,Use <code>@pytest.mark.{mark_name}{expected_parens}</code> over <code>@pytest.mark.{mark_name}{actual_parens}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for argument-free @pytest.mark.<marker>() decorators with or
without parentheses, depending on the lint.flake8-pytest-style.mark-parentheses
setting.
","Why is this bad?#
If a @pytest.mark.<marker>() doesn't take any arguments, the parentheses are
optional.
Either removing those unnecessary parentheses or requiring them for all
fixtures is fine, but it's best to be consistent.
","----neg----:
import pytest


@pytest.mark.foo
def test_something():
    ...
----pos----:
import pytest


@pytest.mark.foo()
def test_something():
    ...
","https://docs.astral.sh/ruff/settings/#lint_flake8-pytest-style_mark-parentheses
lint.flake8-pytest-style.mark-parentheses
None","
<h1 id=""pytest-incorrect-mark-parentheses-style-pt023"">pytest-incorrect-mark-parentheses-style (PT023)<a class=""headerlink"" href=""#pytest-incorrect-mark-parentheses-style-pt023"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#marks""><code>pytest</code> documentation: Marks</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-unnecessary-asyncio-mark-on-fixture/,PT024,pytest-unnecessary-asyncio-mark-on-fixture,<code>pytest.mark.asyncio</code> is unnecessary for fixtures,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary @pytest.mark.asyncio decorators applied to fixtures.
","Why is this bad?#
pytest.mark.asyncio is unnecessary for fixtures.
","----neg----:
import pytest


@pytest.mark.asyncio()
@pytest.fixture()
async def my_fixture():
    return 0
----pos----:
import pytest


@pytest.fixture()
async def my_fixture():
    return 0
",,"
<h1 id=""pytest-unnecessary-asyncio-mark-on-fixture-pt024"">pytest-unnecessary-asyncio-mark-on-fixture (PT024)<a class=""headerlink"" href=""#pytest-unnecessary-asyncio-mark-on-fixture-pt024"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pypi.org/project/pytest-asyncio/""><code>pytest-asyncio</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-erroneous-use-fixtures-on-fixture/,PT025,pytest-erroneous-use-fixtures-on-fixture,<code>pytest.mark.usefixtures</code> has no effect on fixtures,Rule is stable,Automatic fix available,"What it does#
Checks for pytest.mark.usefixtures decorators applied to pytest
fixtures.
","Why is this bad?#
The pytest.mark.usefixtures decorator has no effect on pytest fixtures.
","----neg----:
import pytest


@pytest.fixture()
def a():
    pass


@pytest.mark.usefixtures(""a"")
@pytest.fixture()
def b(a):
    pass
----pos----:
import pytest


@pytest.fixture()
def a():
    pass


@pytest.fixture()
def b(a):
    pass
",,"
<h1 id=""pytest-erroneous-use-fixtures-on-fixture-pt025"">pytest-erroneous-use-fixtures-on-fixture (PT025)<a class=""headerlink"" href=""#pytest-erroneous-use-fixtures-on-fixture-pt025"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-usefixtures""><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-use-fixtures-without-parameters/,PT026,pytest-use-fixtures-without-parameters,Useless <code>pytest.mark.usefixtures</code> without parameters,Rule is stable,Automatic fix available,"What it does#
Checks for @pytest.mark.usefixtures() decorators that aren't passed any
arguments.
","Why is this bad?#
A @pytest.mark.usefixtures() decorator that isn't passed any arguments is
useless and should be removed.
","----neg----:
import pytest


@pytest.mark.usefixtures()
def test_something():
    ...
----pos----:
def test_something():
    ...
",,"
<h1 id=""pytest-use-fixtures-without-parameters-pt026"">pytest-use-fixtures-without-parameters (PT026)<a class=""headerlink"" href=""#pytest-use-fixtures-without-parameters-pt026"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/reference/reference.html#pytest-mark-usefixtures""><code>pytest</code> documentation: <code>pytest.mark.usefixtures</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pytest-unittest-raises-assertion/,PT027,pytest-unittest-raises-assertion,Use <code>pytest.raises</code> instead of unittest-style <code>{assertion}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of exception-related assertion methods from the unittest
module.
","Why is this bad?#
To enforce the assertion style recommended by pytest, pytest.raises is
preferred over the exception-related assertion methods in unittest, like
assertRaises.
","----neg----:
import unittest


class TestFoo(unittest.TestCase):
    def test_foo(self):
        with self.assertRaises(ValueError):
            raise ValueError(""foo"")
----pos----:
import unittest
import pytest


class TestFoo(unittest.TestCase):
    def test_foo(self):
        with pytest.raises(ValueError):
            raise ValueError(""foo"")
",,"
<h1 id=""pytest-unittest-raises-assertion-pt027"">pytest-unittest-raises-assertion (PT027)<a class=""headerlink"" href=""#pytest-unittest-raises-assertion-pt027"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-pytest-style</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.pytest.org/en/latest/how-to/assert.html#assertions-about-expected-exceptions""><code>pytest</code> documentation: Assertions about expected exceptions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/,Q000,bad-quotes-inline-string,Single quotes found but double quotes preferred,Rule is stable,Automatic fix available,"What it does#
Checks for inline strings that use single quotes or double quotes,
depending on the value of the lint.flake8-quotes.inline-quotes option.
","Why is this bad?#
Consistency is good. Use either single or double quotes for inline
strings, but be consistent.
","----neg----:
foo = 'bar'
----pos----:
Assuming inline-quotes is set to double, use instead:----other----:

foo = ""bar""

","https://docs.astral.sh/ruff/settings/#lint_flake8-quotes_inline-quotes
lint.flake8-quotes.inline-quotes
None","
<h1 id=""bad-quotes-inline-string-q000"">bad-quotes-inline-string (Q000)<a class=""headerlink"" href=""#bad-quotes-inline-string-q000"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-quotes</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/,Q001,bad-quotes-multiline-string,Single quote multiline found but double quotes preferred,Rule is stable,Automatic fix available,"What it does#
Checks for multiline strings that use single quotes or double quotes,
depending on the value of the lint.flake8-quotes.multiline-quotes
setting.
","Why is this bad?#
Consistency is good. Use either single or double quotes for multiline
strings, but be consistent.
","----neg----:
foo = '''
bar
'''
----pos----:
Assuming multiline-quotes is set to double, use instead:----other----:

foo = """"""
bar
""""""

","https://docs.astral.sh/ruff/settings/#lint_flake8-quotes_multiline-quotes
lint.flake8-quotes.multiline-quotes
None","
<h1 id=""bad-quotes-multiline-string-q001"">bad-quotes-multiline-string (Q001)<a class=""headerlink"" href=""#bad-quotes-multiline-string-q001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-quotes</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/bad-quotes-docstring/,Q002,bad-quotes-docstring,Single quote docstring found but double quotes preferred,Rule is stable,Automatic fix available,"What it does#
Checks for docstrings that use single quotes or double quotes, depending
on the value of the lint.flake8-quotes.docstring-quotes setting.
","Why is this bad?#
Consistency is good. Use either single or double quotes for docstring
strings, but be consistent.
","----neg----:
'''
bar
'''
----pos----:
Assuming docstring-quotes is set to double, use instead:----other----:

""""""
bar
""""""

","https://docs.astral.sh/ruff/settings/#lint_flake8-quotes_docstring-quotes
lint.flake8-quotes.docstring-quotes
None","
<h1 id=""bad-quotes-docstring-q002"">bad-quotes-docstring (Q002)<a class=""headerlink"" href=""#bad-quotes-docstring-q002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-quotes</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/,Q003,avoidable-escaped-quote,Change outer quotes to avoid escaping inner quotes,Rule is stable,Automatic fix available,"What it does#
Checks for strings that include escaped quotes, and suggests changing
the quote style to avoid the need to escape them.
","Why is this bad?#
It's preferable to avoid escaped quotes in strings. By changing the
outer quote style, you can avoid escaping inner quotes.
","----neg----:
foo = 'bar\'s'
----pos----:
foo = ""bar's""
----other----:
We recommend against using this rule alongside the formatter. The
formatter automatically removes unnecessary escapes, making the rule
redundant.
",,"
<h1 id=""avoidable-escaped-quote-q003"">avoidable-escaped-quote (Q003)<a class=""headerlink"" href=""#avoidable-escaped-quote-q003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-quotes</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-escaped-quote/,Q004,unnecessary-escaped-quote,Unnecessary escape on inner quote character,Rule is stable,Automatic fix available,"What it does#
Checks for strings that include unnecessarily escaped quotes.
","Why is this bad?#
If a string contains an escaped quote that doesn't match the quote
character used for the string, it's unnecessary and can be removed.
","----neg----:
foo = ""bar\'s""
----pos----:
foo = ""bar's""
----other----:
We recommend against using this rule alongside the formatter. The
formatter automatically removes unnecessary escapes, making the rule
redundant.
",,"
<h1 id=""unnecessary-escaped-quote-q004"">unnecessary-escaped-quote (Q004)<a class=""headerlink"" href=""#unnecessary-escaped-quote-q004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-quotes</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-paren-on-raise-exception/,RSE102,unnecessary-paren-on-raise-exception,Unnecessary parentheses on raised exception,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary parentheses on raised exceptions.
","Why is this bad?#
If an exception is raised without any arguments, parentheses are not
required, as the raise statement accepts either an exception instance
or an exception class (which is then implicitly instantiated).
Removing the parentheses makes the code more concise.
Known problems#
Parentheses can only be omitted if the exception is a class, as opposed to
a function call. This rule isn't always capable of distinguishing between
the two.
For example, if you import a function module.get_exception from another
module, and module.get_exception returns an exception object, this rule will
incorrectly mark the parentheses in raise module.get_exception() as
unnecessary.
","----neg----:
raise TypeError()
----pos----:
raise TypeError
",,"
<h1 id=""unnecessary-paren-on-raise-exception-rse102"">unnecessary-paren-on-raise-exception (RSE102)<a class=""headerlink"" href=""#unnecessary-paren-on-raise-exception-rse102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-raise</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement"">Python documentation: The <code>raise</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-return-none/,RET501,unnecessary-return-none,Do not explicitly <code>return None</code> in function if it is the only possible return value,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of a return None statement when None is the only
possible return value.
","Why is this bad?#
Python implicitly assumes return None if an explicit return value is
omitted. Therefore, explicitly returning None is redundant and should be
avoided when it is the only possible return value across all code paths
in a given function.
","----neg----:
def foo(bar):
    if not bar:
        return
    return None
----pos----:
def foo(bar):
    if not bar:
        return
    return
",,"
<h1 id=""unnecessary-return-none-ret501"">unnecessary-return-none (RET501)<a class=""headerlink"" href=""#unnecessary-return-none-ret501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/implicit-return-value/,RET502,implicit-return-value,Do not implicitly <code>return None</code> in function able to return non-<code>None</code> value,Rule is stable,Automatic fix available,"What it does#
Checks for the presence of a return statement with no explicit value,
for functions that return non-None values elsewhere.
","Why is this bad?#
Including a return statement with no explicit value can cause confusion
when other return statements in the function return non-None values.
Python implicitly assumes return None if no other return value is present.
Adding an explicit return None can make the code more readable by clarifying
intent.
","----neg----:
def foo(bar):
    if not bar:
        return
    return 1
----pos----:
def foo(bar):
    if not bar:
        return None
    return 1
",,"
<h1 id=""implicit-return-value-ret502"">implicit-return-value (RET502)<a class=""headerlink"" href=""#implicit-return-value-ret502"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/implicit-return/,RET503,implicit-return,Missing explicit <code>return</code> at the end of function able to return non-<code>None</code> value,Rule is stable,Automatic fix available,"What it does#
Checks for missing explicit return statements at the end of functions
that can return non-None values.
","Why is this bad?#
The lack of an explicit return statement at the end of a function that
can return non-None values can cause confusion. Python implicitly returns
None if no other return value is present. Adding an explicit
return None can make the code more readable by clarifying intent.
","----neg----:
def foo(bar):
    if not bar:
        return 1
----pos----:
def foo(bar):
    if not bar:
        return 1
    return None
",,"
<h1 id=""implicit-return-ret503"">implicit-return (RET503)<a class=""headerlink"" href=""#implicit-return-ret503"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-assign/,RET504,unnecessary-assign,Unnecessary assignment to <code>{name}</code> before <code>return</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for variable assignments that immediately precede a return of the
assigned variable.
","Why is this bad?#
The variable assignment is not necessary, as the value can be returned
directly.
","----neg----:
def foo():
    bar = 1
    return bar
----pos----:
def foo():
    return 1
",,"
<h1 id=""unnecessary-assign-ret504"">unnecessary-assign (RET504)<a class=""headerlink"" href=""#unnecessary-assign-ret504"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/superfluous-else-return/,RET505,superfluous-else-return,Unnecessary <code>{branch}</code> after <code>return</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for else statements with a return statement in the preceding
if block.
","Why is this bad?#
The else statement is not needed as the return statement will always
break out of the enclosing function. Removing the else will reduce
nesting and make the code more readable.
","----neg----:
def foo(bar, baz):
    if bar:
        return 1
    else:
        return baz
----pos----:
def foo(bar, baz):
    if bar:
        return 1
    return baz
",,"
<h1 id=""superfluous-else-return-ret505"">superfluous-else-return (RET505)<a class=""headerlink"" href=""#superfluous-else-return-ret505"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/superfluous-else-raise/,RET506,superfluous-else-raise,Unnecessary <code>{branch}</code> after <code>raise</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for else statements with a raise statement in the preceding if
block.
","Why is this bad?#
The else statement is not needed as the raise statement will always
break out of the current scope. Removing the else will reduce nesting
and make the code more readable.
","----neg----:
def foo(bar, baz):
    if bar == ""Specific Error"":
        raise Exception(bar)
    else:
        raise Exception(baz)
----pos----:
def foo(bar, baz):
    if bar == ""Specific Error"":
        raise Exception(bar)
    raise Exception(baz)
",,"
<h1 id=""superfluous-else-raise-ret506"">superfluous-else-raise (RET506)<a class=""headerlink"" href=""#superfluous-else-raise-ret506"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/superfluous-else-continue/,RET507,superfluous-else-continue,Unnecessary <code>{branch}</code> after <code>continue</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for else statements with a continue statement in the preceding
if block.
","Why is this bad?#
The else statement is not needed, as the continue statement will always
continue onto the next iteration of a loop. Removing the else will reduce
nesting and make the code more readable.
","----neg----:
def foo(bar, baz):
    for i in bar:
        if i < baz:
            continue
        else:
            x = 0
----pos----:
def foo(bar, baz):
    for i in bar:
        if i < baz:
            continue
        x = 0
",,"
<h1 id=""superfluous-else-continue-ret507"">superfluous-else-continue (RET507)<a class=""headerlink"" href=""#superfluous-else-continue-ret507"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/superfluous-else-break/,RET508,superfluous-else-break,Unnecessary <code>{branch}</code> after <code>break</code> statement,Rule is stable,Automatic fix available,"What it does#
Checks for else statements with a break statement in the preceding if
block.
","Why is this bad?#
The else statement is not needed, as the break statement will always
break out of the loop. Removing the else will reduce nesting and make the
code more readable.
","----neg----:
def foo(bar, baz):
    for i in bar:
        if i > baz:
            break
        else:
            x = 0
----pos----:
def foo(bar, baz):
    for i in bar:
        if i > baz:
            break
        x = 0
",,"
<h1 id=""superfluous-else-break-ret508"">superfluous-else-break (RET508)<a class=""headerlink"" href=""#superfluous-else-break-ret508"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-return</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/private-member-access/,SLF001,private-member-access,Private member accessed: <code>{access}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for accesses on ""private"" class members.
","Why is this bad?#
In Python, the convention is such that class members that are prefixed
with a single underscore, or prefixed but not suffixed with a double
underscore, are considered private and intended for internal use.
Using such ""private"" members is considered a misuse of the class, as
there are no guarantees that the member will be present in future
versions, that it will have the same type, or that it will have the same
behavior. Instead, use the class's public interface.
","----neg----:
class Class:
    def __init__(self):
        self._private_member = ""...""


var = Class()
print(var._private_member)
----pos----:
class Class:
    def __init__(self):
        self.public_member = ""...""


var = Class()
print(var.public_member)
","https://docs.astral.sh/ruff/settings/#lint_flake8-self_ignore-names
lint.flake8-self.ignore-names
None","
<h1 id=""private-member-access-slf001"">private-member-access (SLF001)<a class=""headerlink"" href=""#private-member-access-slf001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-self</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-single-and-double-underscore-before-an-object-name""><em>What is the meaning of single or double underscores before an object name?</em></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-slots-in-str-subclass/,SLOT000,no-slots-in-str-subclass,Subclasses of <code>str</code> should define <code>__slots__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for subclasses of str that lack a __slots__ definition.
","Why is this bad?#
In Python, the __slots__ attribute allows you to explicitly define the
attributes (instance variables) that a class can have. By default, Python
uses a dictionary to store an object's attributes, which incurs some memory
overhead. However, when __slots__ is defined, Python uses a more compact
internal structure to store the object's attributes, resulting in memory
savings.
Subclasses of str inherit all the attributes and methods of the built-in
str class. Since strings are typically immutable, they don't require
additional attributes beyond what the str class provides. Defining
__slots__ for subclasses of str prevents the creation of a dictionary
for each instance, reducing memory consumption.
","----neg----:
class Foo(str):
    pass
----pos----:
class Foo(str):
    __slots__ = ()
",,"
<h1 id=""no-slots-in-str-subclass-slot000"">no-slots-in-str-subclass (SLOT000)<a class=""headerlink"" href=""#no-slots-in-str-subclass-slot000"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-slots</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"">Python documentation: <code>__slots__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-slots-in-tuple-subclass/,SLOT001,no-slots-in-tuple-subclass,Subclasses of <code>tuple</code> should define <code>__slots__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for subclasses of tuple that lack a __slots__ definition.
","Why is this bad?#
In Python, the __slots__ attribute allows you to explicitly define the
attributes (instance variables) that a class can have. By default, Python
uses a dictionary to store an object's attributes, which incurs some memory
overhead. However, when __slots__ is defined, Python uses a more compact
internal structure to store the object's attributes, resulting in memory
savings.
Subclasses of tuple inherit all the attributes and methods of the
built-in tuple class. Since tuples are typically immutable, they don't
require additional attributes beyond what the tuple class provides.
Defining __slots__ for subclasses of tuple prevents the creation of a
dictionary for each instance, reducing memory consumption.
","----neg----:
class Foo(tuple):
    pass
----pos----:
class Foo(tuple):
    __slots__ = ()
",,"
<h1 id=""no-slots-in-tuple-subclass-slot001"">no-slots-in-tuple-subclass (SLOT001)<a class=""headerlink"" href=""#no-slots-in-tuple-subclass-slot001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-slots</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"">Python documentation: <code>__slots__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-slots-in-namedtuple-subclass/,SLOT002,no-slots-in-namedtuple-subclass,Subclasses of <code>collections.namedtuple()</code> should define <code>__slots__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for subclasses of collections.namedtuple that lack a __slots__
definition.
","Why is this bad?#
In Python, the __slots__ attribute allows you to explicitly define the
attributes (instance variables) that a class can have. By default, Python
uses a dictionary to store an object's attributes, which incurs some memory
overhead. However, when __slots__ is defined, Python uses a more compact
internal structure to store the object's attributes, resulting in memory
savings.
Subclasses of namedtuple inherit all the attributes and methods of the
built-in namedtuple class. Since tuples are typically immutable, they
don't require additional attributes beyond what the namedtuple class
provides. Defining __slots__ for subclasses of namedtuple prevents the
creation of a dictionary for each instance, reducing memory consumption.
","----neg----:
from collections import namedtuple


class Foo(namedtuple(""foo"", [""str"", ""int""])):
    pass
----pos----:
from collections import namedtuple


class Foo(namedtuple(""foo"", [""str"", ""int""])):
    __slots__ = ()
",,"
<h1 id=""no-slots-in-namedtuple-subclass-slot002"">no-slots-in-namedtuple-subclass (SLOT002)<a class=""headerlink"" href=""#no-slots-in-namedtuple-subclass-slot002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-slots</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"">Python documentation: <code>__slots__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/duplicate-isinstance-call/,SIM101,duplicate-isinstance-call,"Multiple <code>isinstance</code> calls for <code>{name}</code>, merge into a single call",Rule is stable,Automatic fix available,"What it does#
Checks for multiple isinstance calls on the same target.
","Why is this bad?#
To check if an object is an instance of any one of multiple types
or classes, it is unnecessary to use multiple isinstance calls, as
the second argument of the isinstance built-in function accepts a
tuple of types and classes.
Using a single isinstance call implements the same behavior with more
concise code and clearer intent.
","----neg----:
if isinstance(obj, int) or isinstance(obj, float):
    pass
----pos----:
if isinstance(obj, (int, float)):
    pass
",,"
<h1 id=""duplicate-isinstance-call-sim101"">duplicate-isinstance-call (SIM101)<a class=""headerlink"" href=""#duplicate-isinstance-call-sim101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#isinstance"">Python documentation: <code>isinstance</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/collapsible-if/,SIM102,collapsible-if,Use a single <code>if</code> statement instead of nested <code>if</code> statements,Rule is stable,Automatic fix available,"What it does#
Checks for nested if statements that can be collapsed into a single if
statement.
","Why is this bad?#
Nesting if statements leads to deeper indentation and makes code harder to
read. Instead, combine the conditions into a single if statement with an
and operator.
","----neg----:
if foo:
    if bar:
        ...
----pos----:
if foo and bar:
    ...
",,"
<h1 id=""collapsible-if-sim102"">collapsible-if (SIM102)<a class=""headerlink"" href=""#collapsible-if-sim102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-if-statement"">Python documentation: The <code>if</code> statement</a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#boolean-operations"">Python documentation: Boolean operations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/needless-bool/,SIM103,needless-bool,Return the condition <code>{condition}</code> directly,Rule is stable,Automatic fix available,"What it does#
Checks for if statements that can be replaced with bool.
","Why is this bad?#
if statements that return True for a truthy condition and False for
a falsey condition can be replaced with boolean casts.
","----neg----:
if x > 0:
    return True
else:
    return False
----pos----:
return x > 0
----other----:
In preview, this rule will also flag implicit else cases, as in:
if x > 0:
    return True
return False

",,"
<h1 id=""needless-bool-sim103"">needless-bool (SIM103)<a class=""headerlink"" href=""#needless-bool-sim103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"">Python documentation: Truth Value Testing</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/suppressible-exception/,SIM105,suppressible-exception,Use <code>contextlib.suppress({exception})</code> instead of <code>try</code>-<code>except</code>-<code>pass</code>,Rule is stable,Automatic fix available,"What it does#
Checks for try-except-pass blocks that can be replaced with the
contextlib.suppress context manager.
","Why is this bad?#
Using contextlib.suppress is more concise and directly communicates the
intent of the code: to suppress a given exception.
Note that contextlib.suppress is slower than using try-except-pass
directly. For performance-critical code, consider retaining the
try-except-pass pattern.
","----neg----:
try:
    1 / 0
except ZeroDivisionError:
    pass
----pos----:
import contextlib

with contextlib.suppress(ZeroDivisionError):
    1 / 0
",,"
<h1 id=""suppressible-exception-sim105"">suppressible-exception (SIM105)<a class=""headerlink"" href=""#suppressible-exception-sim105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/contextlib.html#contextlib.suppress"">Python documentation: <code>contextlib.suppress</code></a></li>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-try-statement"">Python documentation: <code>try</code> statement</a></li>
<li><a href=""https://www.youtube.com/watch?v=MZAJ8qnC7mk"">a simpler <code>try</code>/<code>except</code> (and why maybe shouldn't)</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/return-in-try-except-finally/,SIM107,return-in-try-except-finally,Don't use <code>return</code> in <code>try</code>-<code>except</code> and <code>finally</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for return statements in try-except and finally blocks.
","Why is this bad?#
The return statement in a finally block will always be executed, even if
an exception is raised in the try or except block. This can lead to
unexpected behavior.
","----neg----:
def squared(n):
    try:
        sqr = n**2
        return sqr
    except Exception:
        return ""An exception occurred""
    finally:
        return -1  # Always returns -1.
----pos----:
def squared(n):
    try:
        return_value = n**2
    except Exception:
        return_value = ""An exception occurred""
    finally:
        return_value = -1
    return return_value
",,"
<h1 id=""return-in-try-except-finally-sim107"">return-in-try-except-finally (SIM107)<a class=""headerlink"" href=""#return-in-try-except-finally-sim107"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/errors.html#defining-clean-up-actions"">Python documentation: Defining Clean-up Actions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-else-block-instead-of-if-exp/,SIM108,if-else-block-instead-of-if-exp,Use ternary operator <code>{contents}</code> instead of <code>if</code>-<code>else</code>-block,Rule is stable,Automatic fix available,"What it does#
Check for if-else-blocks that can be replaced with a ternary operator.
","Why is this bad?#
if-else-blocks that assign a value to a variable in both branches can
be expressed more concisely by using a ternary operator.
","----neg----:
if foo:
    bar = x
else:
    bar = y
----pos----:
bar = x if foo else y
",,"
<h1 id=""if-else-block-instead-of-if-exp-sim108"">if-else-block-instead-of-if-exp (SIM108)<a class=""headerlink"" href=""#if-else-block-instead-of-if-exp-sim108"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"">Python documentation: Conditional expressions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/compare-with-tuple/,SIM109,compare-with-tuple,Use <code>{replacement}</code> instead of multiple equality comparisons,Rule is stable,Automatic fix available,"What it does#
Checks for boolean expressions that contain multiple equality comparisons
to the same value.
","Why is this bad?#
To check if an object is equal to any one of multiple values, it's more
concise to use the in operator with a tuple of values.
","----neg----:
if foo == x or foo == y:
    ...
----pos----:
if foo in (x, y):
    ...
",,"
<h1 id=""compare-with-tuple-sim109"">compare-with-tuple (SIM109)<a class=""headerlink"" href=""#compare-with-tuple-sim109"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#membership-test-operations"">Python documentation: Membership test operations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reimplemented-builtin/,SIM110,reimplemented-builtin,Use <code>{replacement}</code> instead of <code>for</code> loop,Rule is stable,Automatic fix available,"What it does#
Checks for for loops that can be replaced with a builtin function, like
any or all.
","Why is this bad?#
Using a builtin function is more concise and readable. Builtins are also
more efficient than for loops.
","----neg----:
for item in iterable:
    if predicate(item):
        return True
return False
----pos----:
return any(predicate(item) for item in iterable)
",,"
<h1 id=""reimplemented-builtin-sim110"">reimplemented-builtin (SIM110)<a class=""headerlink"" href=""#reimplemented-builtin-sim110"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#any"">Python documentation: <code>any</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#all"">Python documentation: <code>all</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/uncapitalized-environment-variables/,SIM112,uncapitalized-environment-variables,Use capitalized environment variable <code>{expected}</code> instead of <code>{actual}</code>,Rule is stable,Automatic fix available,"What it does#
Check for environment variables that are not capitalized.
","Why is this bad?#
By convention, environment variables should be capitalized.
On Windows, environment variables are case-insensitive and are converted to
uppercase, so using lowercase environment variables can lead to subtle bugs.
","----neg----:
import os

os.environ[""foo""]
----pos----:
import os

os.environ[""FOO""]
",,"
<h1 id=""uncapitalized-environment-variables-sim112"">uncapitalized-environment-variables (SIM112)<a class=""headerlink"" href=""#uncapitalized-environment-variables-sim112"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/os.html#os.environ"">Python documentation: <code>os.environ</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/enumerate-for-loop/,SIM113,enumerate-for-loop,Use <code>enumerate()</code> for index variable <code>{index}</code> in <code>for</code> loop,Rule is stable,Automatic fix not available,"What it does#
Checks for for loops with explicit loop-index variables that can be replaced
with enumerate().
","Why is this bad?#
When iterating over a sequence, it's often desirable to keep track of the
index of each element alongside the element itself. Prefer the enumerate
builtin over manually incrementing a counter variable within the loop, as
enumerate is more concise and idiomatic.
","----neg----:
fruits = [""apple"", ""banana"", ""cherry""]
for fruit in fruits:
    print(f""{i + 1}. {fruit}"")
    i += 1
----pos----:
fruits = [""apple"", ""banana"", ""cherry""]
for i, fruit in enumerate(fruits):
    print(f""{i + 1}. {fruit}"")
",,"
<h1 id=""enumerate-for-loop-sim113"">enumerate-for-loop (SIM113)<a class=""headerlink"" href=""#enumerate-for-loop-sim113"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#enumerate"">Python documentation: <code>enumerate</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-with-same-arms/,SIM114,if-with-same-arms,Combine <code>if</code> branches using logical <code>or</code> operator,Rule is stable,Automatic fix available,"What it does#
Checks for if branches with identical arm bodies.
","Why is this bad?#
If multiple arms of an if statement have the same body, using or
better signals the intent of the statement.
","----neg----:
if x == 1:
    print(""Hello"")
elif x == 2:
    print(""Hello"")
----pos----:
if x == 1 or x == 2:
    print(""Hello"")
",,"
<h1 id=""if-with-same-arms-sim114"">if-with-same-arms (SIM114)<a class=""headerlink"" href=""#if-with-same-arms-sim114"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/open-file-with-context-handler/,SIM115,open-file-with-context-handler,Use context handler for opening files,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the builtin open() function without an associated context
manager.
","Why is this bad?#
If a file is opened without a context manager, it is not guaranteed that
the file will be closed (e.g., if an exception is raised), which can cause
resource leaks.
","----neg----:
file = open(""foo.txt"")
...
file.close()
----pos----:
with open(""foo.txt"") as file:
    ...
",,"
<h1 id=""open-file-with-context-handler-sim115"">open-file-with-context-handler (SIM115)<a class=""headerlink"" href=""#open-file-with-context-handler-sim115"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/if-else-block-instead-of-dict-lookup/,SIM116,if-else-block-instead-of-dict-lookup,Use a dictionary instead of consecutive <code>if</code> statements,Rule is stable,Automatic fix not available,"What it does#
Checks for three or more consecutive if-statements with direct returns
","Why is this bad?#
These can be simplified by using a dictionary
","----neg----:
if x == 1:
    return ""Hello""
elif x == 2:
    return ""Goodbye""
else:
    return ""Goodnight""
----pos----:
return {1: ""Hello"", 2: ""Goodbye""}.get(x, ""Goodnight"")
",,"
<h1 id=""if-else-block-instead-of-dict-lookup-sim116"">if-else-block-instead-of-dict-lookup (SIM116)<a class=""headerlink"" href=""#if-else-block-instead-of-dict-lookup-sim116"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/multiple-with-statements/,SIM117,multiple-with-statements,Use a single <code>with</code> statement with multiple contexts instead of nested <code>with</code> statements,Rule is stable,Automatic fix available,"What it does#
Checks for the unnecessary nesting of multiple consecutive context
managers.
","Why is this bad?#
In Python 3, a single with block can include multiple context
managers.
Combining multiple context managers into a single with statement
will minimize the indentation depth of the code, making it more
readable.
The following context managers are exempt when used as standalone
statements:

anyio.{CancelScope, fail_after, move_on_after}
asyncio.{timeout, timeout_at}
trio.{fail_after, fail_at, move_on_after, move_on_at}

","----neg----:
with A() as a:
    with B() as b:
        pass
----pos----:
with A() as a, B() as b:
    pass
",,"
<h1 id=""multiple-with-statements-sim117"">multiple-with-statements (SIM117)<a class=""headerlink"" href=""#multiple-with-statements-sim117"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#the-with-statement"">Python documentation: The <code>with</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/in-dict-keys/,SIM118,in-dict-keys,Use <code>key {operator} dict</code> instead of <code>key {operator} dict.keys()</code>,Rule is stable,Automatic fix available,"What it does#
Checks for key-existence checks against dict.keys() calls.
","Why is this bad?#
When checking for the existence of a key in a given dictionary, using
key in dict is more readable and efficient than key in dict.keys(),
while having the same semantics.
","----neg----:
key in foo.keys()
----pos----:
key in foo
----other----:
Given key in obj.keys(), obj could be a dictionary, or it could be
another type that defines a .keys() method. In the latter case, removing
the .keys() attribute could lead to a runtime error. The fix is marked
as safe when the type of obj is known to be a dictionary; otherwise, it
is marked as unsafe.
",,"
<h1 id=""in-dict-keys-sim118"">in-dict-keys (SIM118)<a class=""headerlink"" href=""#in-dict-keys-sim118"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"">Python documentation: Mapping Types</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/negate-equal-op/,SIM201,negate-equal-op,Use <code>{left} != {right}</code> instead of <code>not {left} == {right}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for negated == operators.
","Why is this bad?#
Negated == operators are less readable than != operators. When testing
for non-equality, it is more common to use != than ==.
","----neg----:
not a == b
----pos----:
a != b
",,"
<h1 id=""negate-equal-op-sim201"">negate-equal-op (SIM201)<a class=""headerlink"" href=""#negate-equal-op-sim201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/negate-not-equal-op/,SIM202,negate-not-equal-op,Use <code>{left} == {right}</code> instead of <code>not {left} != {right}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for negated != operators.
","Why is this bad?#
Negated != operators are less readable than == operators, as they avoid a
double negation.
","----neg----:
not a != b
----pos----:
a == b
",,"
<h1 id=""negate-not-equal-op-sim202"">negate-not-equal-op (SIM202)<a class=""headerlink"" href=""#negate-not-equal-op-sim202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/double-negation/,SIM208,double-negation,Use <code>{expr}</code> instead of <code>not (not {expr})</code>,Rule is stable,Automatic fix available,"What it does#
Checks for double negations (i.e., multiple not operators).
","Why is this bad?#
A double negation is redundant and less readable than omitting the not
operators entirely.
","----neg----:
not (not a)
----pos----:
a
",,"
<h1 id=""double-negation-sim208"">double-negation (SIM208)<a class=""headerlink"" href=""#double-negation-sim208"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-expr-with-true-false/,SIM210,if-expr-with-true-false,Remove unnecessary <code>True if ... else False</code>,Rule is stable,Automatic fix available,"What it does#
Checks for if expressions that can be replaced with bool() calls.
","Why is this bad?#
if expressions that evaluate to True for a truthy condition an False
for a falsey condition can be replaced with bool() calls, which are more
concise and readable.
","----neg----:
True if a else False
----pos----:
bool(a)
",,"
<h1 id=""if-expr-with-true-false-sim210"">if-expr-with-true-false (SIM210)<a class=""headerlink"" href=""#if-expr-with-true-false-sim210"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"">Python documentation: Truth Value Testing</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-expr-with-false-true/,SIM211,if-expr-with-false-true,Use <code>not ...</code> instead of <code>False if ... else True</code>,Rule is stable,Automatic fix available,"What it does#
Checks for if expressions that can be replaced by negating a given
condition.
","Why is this bad?#
if expressions that evaluate to False for a truthy condition and True
for a falsey condition can be replaced with not operators, which are more
concise and readable.
","----neg----:
False if a else True
----pos----:
not a
",,"
<h1 id=""if-expr-with-false-true-sim211"">if-expr-with-false-true (SIM211)<a class=""headerlink"" href=""#if-expr-with-false-true-sim211"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"">Python documentation: Truth Value Testing</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-expr-with-twisted-arms/,SIM212,if-expr-with-twisted-arms,Use <code>{expr_else} if {expr_else} else {expr_body}</code> instead of <code>{expr_body} if not {expr_else} else {expr_else}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for if expressions that check against a negated condition.
","Why is this bad?#
if expressions that check against a negated condition are more difficult
to read than if expressions that check against the condition directly.
","----neg----:
b if not a else a
----pos----:
a if a else b
",,"
<h1 id=""if-expr-with-twisted-arms-sim212"">if-expr-with-twisted-arms (SIM212)<a class=""headerlink"" href=""#if-expr-with-twisted-arms-sim212"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"">Python documentation: Truth Value Testing</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/expr-and-not-expr/,SIM220,expr-and-not-expr,Use <code>False</code> instead of <code>{name} and not {name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for and expressions that include both an expression and its
negation.
","Why is this bad?#
An and expression that includes both an expression and its negation will
always evaluate to False.
","x and not x
",,"
<h1 id=""expr-and-not-expr-sim220"">expr-and-not-expr (SIM220)<a class=""headerlink"" href=""#expr-and-not-expr-sim220"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#boolean-operations"">Python documentation: Boolean operations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/expr-or-not-expr/,SIM221,expr-or-not-expr,Use <code>True</code> instead of <code>{name} or not {name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for or expressions that include both an expression and its
negation.
","Why is this bad?#
An or expression that includes both an expression and its negation will
always evaluate to True.
","x or not x
",,"
<h1 id=""expr-or-not-expr-sim221"">expr-or-not-expr (SIM221)<a class=""headerlink"" href=""#expr-or-not-expr-sim221"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#boolean-operations"">Python documentation: Boolean operations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/expr-or-true/,SIM222,expr-or-true,Use <code>{expr}</code> instead of <code>{replaced}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for or expressions that contain truthy values.
","Why is this bad?#
If the expression is used as a condition, it can be replaced in-full with
True.
In other cases, the expression can be short-circuited to the first truthy
value.
By using True (or the first truthy value), the code is more concise
and easier to understand, since it no longer contains redundant conditions.
","----neg----:
if x or [1] or y:
    pass

a = x or [1] or y
----pos----:
if True:
    pass

a = x or [1]
",,"
<h1 id=""expr-or-true-sim222"">expr-or-true (SIM222)<a class=""headerlink"" href=""#expr-or-true-sim222"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/expr-and-false/,SIM223,expr-and-false,Use <code>{expr}</code> instead of <code>{replaced}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for and expressions that contain falsey values.
","Why is this bad?#
If the expression is used as a condition, it can be replaced in-full with
False.
In other cases, the expression can be short-circuited to the first falsey
value.
By using False (or the first falsey value), the code is more concise
and easier to understand, since it no longer contains redundant conditions.
","----neg----:
if x and [] and y:
    pass

a = x and [] and y
----pos----:
if False:
    pass

a = x and []
",,"
<h1 id=""expr-and-false-sim223"">expr-and-false (SIM223)<a class=""headerlink"" href=""#expr-and-false-sim223"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/yoda-conditions/,SIM300,yoda-conditions,"Yoda conditions are discouraged, use <code>{suggestion}</code> instead",Rule is stable,Automatic fix available,"What it does#
Checks for conditions that position a constant on the left-hand side of the
comparison operator, rather than the right-hand side.
","Why is this bad?#
These conditions (sometimes referred to as ""Yoda conditions"") are less
readable than conditions that place the variable on the left-hand side of
the comparison operator.
In some languages, Yoda conditions are used to prevent accidental
assignment in conditions (i.e., accidental uses of the = operator,
instead of the == operator). However, Python does not allow assignments
in conditions unless using the := operator, so Yoda conditions provide
no benefit in this regard.
","----neg----:
if ""Foo"" == foo:
    ...
----pos----:
if foo == ""Foo"":
    ...
",,"
<h1 id=""yoda-conditions-sim300"">yoda-conditions (SIM300)<a class=""headerlink"" href=""#yoda-conditions-sim300"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#assignment-statements"">Python documentation: Assignment statements</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-else-block-instead-of-dict-get/,SIM401,if-else-block-instead-of-dict-get,Use <code>{contents}</code> instead of an <code>if</code> block,Rule is stable,Automatic fix available,"What it does#
Checks for if statements that can be replaced with dict.get calls.
","Why is this bad?#
dict.get() calls can be used to replace if statements that assign a
value to a variable in both branches, falling back to a default value if
the key is not found. When possible, using dict.get is more concise and
more idiomatic.
Under preview mode, this rule will
also suggest replacing if-else expressions with dict.get calls.
","----neg----:
if ""bar"" in foo:
    value = foo[""bar""]
else:
    value = 0
----pos----:
value = foo.get(""bar"", 0)
----other----:
If preview mode is enabled:
value = foo[""bar""] if ""bar"" in foo else 0

value = foo.get(""bar"", 0)
",,"
<h1 id=""if-else-block-instead-of-dict-get-sim401"">if-else-block-instead-of-dict-get (SIM401)<a class=""headerlink"" href=""#if-else-block-instead-of-dict-get-sim401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"">Python documentation: Mapping Types</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/dict-get-with-none-default/,SIM910,dict-get-with-none-default,Use <code>{expected}</code> instead of <code>{actual}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for dict.get() calls that pass None as the default value.
","Why is this bad?#
None is the default value for dict.get(), so it is redundant to pass it
explicitly.
","----neg----:
ages = {""Tom"": 23, ""Maria"": 23, ""Dog"": 11}
age = ages.get(""Cat"", None)
----pos----:
ages = {""Tom"": 23, ""Maria"": 23, ""Dog"": 11}
age = ages.get(""Cat"")
",,"
<h1 id=""dict-get-with-none-default-sim910"">dict-get-with-none-default (SIM910)<a class=""headerlink"" href=""#dict-get-with-none-default-sim910"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#dict.get"">Python documentation: <code>dict.get</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/zip-dict-keys-and-values/,SIM911,zip-dict-keys-and-values,Use <code>{expected}</code> instead of <code>{actual}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for use of zip() to iterate over keys and values of a dictionary at once.
","Why is this bad?#
The dict type provides an .items() method which is faster and more readable.
","----neg----:
flag_stars = {""USA"": 50, ""Slovenia"": 3, ""Panama"": 2, ""Australia"": 6}

for country, stars in zip(flag_stars.keys(), flag_stars.values()):
    print(f""{country}'s flag has {stars} stars."")
----pos----:
flag_stars = {""USA"": 50, ""Slovenia"": 3, ""Panama"": 2, ""Australia"": 6}

for country, stars in flag_stars.items():
    print(f""{country}'s flag has {stars} stars."")
",,"
<h1 id=""zip-dict-keys-and-values-sim911"">zip-dict-keys-and-values (SIM911)<a class=""headerlink"" href=""#zip-dict-keys-and-values-sim911"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-simplify</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#dict.items"">Python documentation: <code>dict.items</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/banned-api/,TID251,banned-api,<code>{name}</code> is banned: {message},Rule is stable,Automatic fix not available,"What it does#
Checks for banned imports.
","Why is this bad?#
Projects may want to ensure that specific modules or module members are
not imported or accessed.
Security or other company policies may be a reason to impose
restrictions on importing external Python libraries. In some cases,
projects may adopt conventions around the use of certain modules or
module members that are not enforceable by the language itself.
This rule enforces certain import conventions project-wide automatically.
",,"https://docs.astral.sh/ruff/settings/#lint_flake8-tidy-imports_banned-api
lint.flake8-tidy-imports.banned-api
None","
<h1 id=""banned-api-tid251"">banned-api (TID251)<a class=""headerlink"" href=""#banned-api-tid251"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-tidy-imports</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/relative-imports/,TID252,relative-imports,Prefer absolute imports over relative imports from parent modules,Rule is stable,Automatic fix available,"What it does#
Checks for relative imports.
","Why is this bad?#
Absolute imports, or relative imports from siblings, are recommended by PEP 8:

Absolute imports are recommended, as they are usually more readable and tend to be better behaved...
import mypkg.sibling
from mypkg import sibling
from mypkg.sibling import example

However, explicit relative imports are an acceptable alternative to absolute imports,
especially when dealing with complex package layouts where using absolute imports would be
unnecessarily verbose:
from . import sibling
from .sibling import example


","----neg----:
from .. import foo
----pos----:
from mypkg import foo
","https://docs.astral.sh/ruff/settings/#lint_flake8-tidy-imports_ban-relative-imports
lint.flake8-tidy-imports.ban-relative-imports
None","
<h1 id=""relative-imports-tid252"">relative-imports (TID252)<a class=""headerlink"" href=""#relative-imports-tid252"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-tidy-imports</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/banned-module-level-imports/,TID253,banned-module-level-imports,<code>{name}</code> is banned at the module level,Rule is stable,Automatic fix not available,"What it does#
Checks for module-level imports that should instead be imported lazily
(e.g., within a function definition, or an if TYPE_CHECKING: block, or
some other nested context).
","Why is this bad?#
Some modules are expensive to import. For example, importing torch or
tensorflow can introduce a noticeable delay in the startup time of a
Python program.
In such cases, you may want to enforce that the module is imported lazily
as needed, rather than at the top of the file. This could involve inlining
the import into the function that uses it, rather than importing it
unconditionally, to ensure that the module is only imported when necessary.
","----neg----:
import tensorflow as tf


def show_version():
    print(tf.__version__)
----pos----:
def show_version():
    import tensorflow as tf

    print(tf.__version__)
","https://docs.astral.sh/ruff/settings/#lint_flake8-tidy-imports_banned-module-level-imports
lint.flake8-tidy-imports.banned-module-level-imports
None","
<h1 id=""banned-module-level-imports-tid253"">banned-module-level-imports (TID253)<a class=""headerlink"" href=""#banned-module-level-imports-tid253"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-tidy-imports</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/typing-only-first-party-import/,TCH001,typing-only-first-party-import,Move application import <code>{}</code> into a type-checking block,Rule is stable,Automatic fix available,"What it does#
Checks for first-party imports that are only used for type annotations, but
aren't defined in a type-checking block.
","Why is this bad?#
Unused imports add a performance overhead at runtime, and risk creating
import cycles. If an import is only used in typing-only contexts, it can
instead be imported conditionally under an if TYPE_CHECKING: block to
minimize runtime overhead.
If lint.flake8-type-checking.quote-annotations is set to true,
annotations will be wrapped in quotes if doing so would enable the
corresponding import to be moved into an if TYPE_CHECKING: block.
If a class requires that type annotations be available at runtime (as is
the case for Pydantic, SQLAlchemy, and other libraries), consider using
the lint.flake8-type-checking.runtime-evaluated-base-classes and
lint.flake8-type-checking.runtime-evaluated-decorators settings to mark them
as such.
","----neg----:
from __future__ import annotations

import local_module


def func(sized: local_module.Container) -> int:
    return len(sized)
----pos----:
from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import local_module


def func(sized: local_module.Container) -> int:
    return len(sized)
","https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_quote-annotations
lint.flake8-type-checking.quote-annotations
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-base-classes
lint.flake8-type-checking.runtime-evaluated-base-classes
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-decorators
lint.flake8-type-checking.runtime-evaluated-decorators
None","
<h1 id=""typing-only-first-party-import-tch001"">typing-only-first-party-import (TCH001)<a class=""headerlink"" href=""#typing-only-first-party-import-tch001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/#runtime-annotation-resolution-and-type-checking"">PEP 536</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/typing-only-third-party-import/,TCH002,typing-only-third-party-import,Move third-party import <code>{}</code> into a type-checking block,Rule is stable,Automatic fix available,"What it does#
Checks for third-party imports that are only used for type annotations, but
aren't defined in a type-checking block.
","Why is this bad?#
Unused imports add a performance overhead at runtime, and risk creating
import cycles. If an import is only used in typing-only contexts, it can
instead be imported conditionally under an if TYPE_CHECKING: block to
minimize runtime overhead.
If lint.flake8-type-checking.quote-annotations is set to true,
annotations will be wrapped in quotes if doing so would enable the
corresponding import to be moved into an if TYPE_CHECKING: block.
If a class requires that type annotations be available at runtime (as is
the case for Pydantic, SQLAlchemy, and other libraries), consider using
the lint.flake8-type-checking.runtime-evaluated-base-classes and
lint.flake8-type-checking.runtime-evaluated-decorators settings to mark them
as such.
","----neg----:
from __future__ import annotations

import pandas as pd


def func(df: pd.DataFrame) -> int:
    return len(df)
----pos----:
from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import pandas as pd


def func(df: pd.DataFrame) -> int:
    return len(df)
","https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_quote-annotations
lint.flake8-type-checking.quote-annotations
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-base-classes
lint.flake8-type-checking.runtime-evaluated-base-classes
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-decorators
lint.flake8-type-checking.runtime-evaluated-decorators
None","
<h1 id=""typing-only-third-party-import-tch002"">typing-only-third-party-import (TCH002)<a class=""headerlink"" href=""#typing-only-third-party-import-tch002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/#runtime-annotation-resolution-and-type-checking"">PEP 536</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/typing-only-standard-library-import/,TCH003,typing-only-standard-library-import,Move standard library import <code>{}</code> into a type-checking block,Rule is stable,Automatic fix available,"What it does#
Checks for standard library imports that are only used for type
annotations, but aren't defined in a type-checking block.
","Why is this bad?#
Unused imports add a performance overhead at runtime, and risk creating
import cycles. If an import is only used in typing-only contexts, it can
instead be imported conditionally under an if TYPE_CHECKING: block to
minimize runtime overhead.
If lint.flake8-type-checking.quote-annotations is set to true,
annotations will be wrapped in quotes if doing so would enable the
corresponding import to be moved into an if TYPE_CHECKING: block.
If a class requires that type annotations be available at runtime (as is
the case for Pydantic, SQLAlchemy, and other libraries), consider using
the lint.flake8-type-checking.runtime-evaluated-base-classes and
lint.flake8-type-checking.runtime-evaluated-decorators settings to mark them
as such.
","----neg----:
from __future__ import annotations

from pathlib import Path


def func(path: Path) -> str:
    return str(path)
----pos----:
from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from pathlib import Path


def func(path: Path) -> str:
    return str(path)
","https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_quote-annotations
lint.flake8-type-checking.quote-annotations
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-base-classes
lint.flake8-type-checking.runtime-evaluated-base-classes
None
https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-decorators
lint.flake8-type-checking.runtime-evaluated-decorators
None","
<h1 id=""typing-only-standard-library-import-tch003"">typing-only-standard-library-import (TCH003)<a class=""headerlink"" href=""#typing-only-standard-library-import-tch003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/#runtime-annotation-resolution-and-type-checking"">PEP 536</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/runtime-import-in-type-checking-block/,TCH004,runtime-import-in-type-checking-block,Move import <code>{qualified_name}</code> out of type-checking block. Import is used for more than type hinting.,Rule is stable,Automatic fix available,"What it does#
Checks for runtime imports defined in a type-checking block.
","Why is this bad?#
The type-checking block is not executed at runtime, so the import will not
be available at runtime.
If lint.flake8-type-checking.quote-annotations is set to true,
annotations will be wrapped in quotes if doing so would enable the
corresponding import to remain in the type-checking block.
","----neg----:
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import foo


def bar() -> None:
    foo.bar()  # raises NameError: name 'foo' is not defined
----pos----:
import foo


def bar() -> None:
    foo.bar()
","https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_quote-annotations
lint.flake8-type-checking.quote-annotations
None","
<h1 id=""runtime-import-in-type-checking-block-tch004"">runtime-import-in-type-checking-block (TCH004)<a class=""headerlink"" href=""#runtime-import-in-type-checking-block-tch004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/#runtime-annotation-resolution-and-type-checking"">PEP 535</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/empty-type-checking-block/,TCH005,empty-type-checking-block,Found empty type-checking block,Rule is stable,Automatic fix available,"What it does#
Checks for an empty type-checking block.
","Why is this bad?#
The type-checking block does not do anything and should be removed to avoid
confusion.
","----neg----:
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    pass

print(""Hello, world!"")
----pos----:
print(""Hello, world!"")
",,"
<h1 id=""empty-type-checking-block-tch005"">empty-type-checking-block (TCH005)<a class=""headerlink"" href=""#empty-type-checking-block-tch005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/#runtime-annotation-resolution-and-type-checking"">PEP 535</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/runtime-string-union/,TCH010,runtime-string-union,Invalid string member in <code>X | Y</code>-style union type,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of string literals in X | Y-style union types.
","Why is this bad?#
PEP 604 introduced a new syntax for union type annotations based on the
| operator.
While Python's type annotations can typically be wrapped in strings to
avoid runtime evaluation, the use of a string member within an X | Y-style
union type will cause a runtime error.
Instead, remove the quotes, wrap the entire union in quotes, or use
from __future__ import annotations to disable runtime evaluation of
annotations entirely.
","----neg----:
var: str | ""int""
----pos----:
var: str | int
----other----:
Or, extend the quotes to include the entire union:
var: ""str | int""

",,"
<h1 id=""runtime-string-union-tch010"">runtime-string-union (TCH010)<a class=""headerlink"" href=""#runtime-string-union-tch010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-type-checking</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0563/"">PEP 535</a></li>
<li><a href=""https://peps.python.org/pep-0604/"">PEP 604</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/f-string-in-get-text-func-call/,INT001,f-string-in-get-text-func-call,"f-string is resolved before function call; consider <code>_(""string %s"") % arg</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for f-strings in gettext function calls.
","Why is this bad?#
In the gettext API, the gettext function (often aliased to _) returns
a translation of its input argument by looking it up in a translation
catalog.
Calling gettext with an f-string as its argument can cause unexpected
behavior. Since the f-string is resolved before the function call, the
translation catalog will look up the formatted string, rather than the
f-string template.
Instead, format the value returned by the function call, rather than
its argument.
","----neg----:
from gettext import gettext as _

name = ""Maria""
_(f""Hello, {name}!"")  # Looks for ""Hello, Maria!"".
----pos----:
from gettext import gettext as _

name = ""Maria""
_(""Hello, %s!"") % name  # Looks for ""Hello, %s!"".
",,"
<h1 id=""f-string-in-get-text-func-call-int001"">f-string-in-get-text-func-call (INT001)<a class=""headerlink"" href=""#f-string-in-get-text-func-call-int001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-gettext</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/gettext.html"">Python documentation: gettext</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/format-in-get-text-func-call/,INT002,format-in-get-text-func-call,"<code>format</code> method argument is resolved before function call; consider <code>_(""string %s"") % arg</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for str.format calls in gettext function calls.
","Why is this bad?#
In the gettext API, the gettext function (often aliased to _) returns
a translation of its input argument by looking it up in a translation
catalog.
Calling gettext with a formatted string as its argument can cause
unexpected behavior. Since the formatted string is resolved before the
function call, the translation catalog will look up the formatted string,
rather than the str.format-style template.
Instead, format the value returned by the function call, rather than
its argument.
","----neg----:
from gettext import gettext as _

name = ""Maria""
_(""Hello, %s!"" % name)  # Looks for ""Hello, Maria!"".
----pos----:
from gettext import gettext as _

name = ""Maria""
_(""Hello, %s!"") % name  # Looks for ""Hello, %s!"".
",,"
<h1 id=""format-in-get-text-func-call-int002"">format-in-get-text-func-call (INT002)<a class=""headerlink"" href=""#format-in-get-text-func-call-int002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-gettext</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/gettext.html"">Python documentation: gettext</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/printf-in-get-text-func-call/,INT003,printf-in-get-text-func-call,"printf-style format is resolved before function call; consider <code>_(""string %s"") % arg</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for printf-style formatted strings in gettext function calls.
","Why is this bad?#
In the gettext API, the gettext function (often aliased to _) returns
a translation of its input argument by looking it up in a translation
catalog.
Calling gettext with a formatted string as its argument can cause
unexpected behavior. Since the formatted string is resolved before the
function call, the translation catalog will look up the formatted string,
rather than the printf-style template.
Instead, format the value returned by the function call, rather than
its argument.
","----neg----:
from gettext import gettext as _

name = ""Maria""
_(""Hello, {}!"".format(name))  # Looks for ""Hello, Maria!"".
----pos----:
from gettext import gettext as _

name = ""Maria""
_(""Hello, %s!"") % name  # Looks for ""Hello, %s!"".
",,"
<h1 id=""printf-in-get-text-func-call-int003"">printf-in-get-text-func-call (INT003)<a class=""headerlink"" href=""#printf-in-get-text-func-call-int003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-gettext</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/gettext.html"">Python documentation: gettext</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unused-function-argument/,ARG001,unused-function-argument,Unused function argument: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused arguments in function definitions.
","Why is this bad?#
An argument that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
","----neg----:
def foo(bar, baz):
    return bar * 2
----pos----:
def foo(bar):
    return bar * 2
",,"
<h1 id=""unused-function-argument-arg001"">unused-function-argument (ARG001)<a class=""headerlink"" href=""#unused-function-argument-arg001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-unused-arguments</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-method-argument/,ARG002,unused-method-argument,Unused method argument: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused arguments in instance method definitions.
","Why is this bad?#
An argument that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
","----neg----:
class Class:
    def foo(self, arg1, arg2):
        print(arg1)
----pos----:
class Class:
    def foo(self, arg1):
        print(arg1)
",,"
<h1 id=""unused-method-argument-arg002"">unused-method-argument (ARG002)<a class=""headerlink"" href=""#unused-method-argument-arg002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-unused-arguments</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-class-method-argument/,ARG003,unused-class-method-argument,Unused class method argument: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused arguments in class method definitions.
","Why is this bad?#
An argument that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
","----neg----:
class Class:
    @classmethod
    def foo(cls, arg1, arg2):
        print(arg1)
----pos----:
class Class:
    @classmethod
    def foo(cls, arg1):
        print(arg1)
",,"
<h1 id=""unused-class-method-argument-arg003"">unused-class-method-argument (ARG003)<a class=""headerlink"" href=""#unused-class-method-argument-arg003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-unused-arguments</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-static-method-argument/,ARG004,unused-static-method-argument,Unused static method argument: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused arguments in static method definitions.
","Why is this bad?#
An argument that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
","----neg----:
class Class:
    @staticmethod
    def foo(arg1, arg2):
        print(arg1)
----pos----:
class Class:
    @static
    def foo(arg1):
        print(arg1)
",,"
<h1 id=""unused-static-method-argument-arg004"">unused-static-method-argument (ARG004)<a class=""headerlink"" href=""#unused-static-method-argument-arg004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-unused-arguments</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unused-lambda-argument/,ARG005,unused-lambda-argument,Unused lambda argument: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the presence of unused arguments in lambda expression
definitions.
","Why is this bad?#
An argument that is defined but not used is likely a mistake, and should
be removed to avoid confusion.
","----neg----:
my_list = [1, 2, 3, 4, 5]
squares = map(lambda x, y: x**2, my_list)
----pos----:
my_list = [1, 2, 3, 4, 5]
squares = map(lambda x: x**2, my_list)
",,"
<h1 id=""unused-lambda-argument-arg005"">unused-lambda-argument (ARG005)<a class=""headerlink"" href=""#unused-lambda-argument-arg005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-unused-arguments</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/os-path-abspath/,PTH100,os-path-abspath,<code>os.path.abspath()</code> should be replaced by <code>Path.resolve()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.abspath.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.resolve() can improve readability over the os
module's counterparts (e.g., os.path.abspath()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

file_path = os.path.abspath(""../path/to/file"")

Use instead:
from pathlib import Path

file_path = Path(""../path/to/file"").resolve()

",,,"
<h1 id=""os-path-abspath-pth100"">os-path-abspath (PTH100)<a class=""headerlink"" href=""#os-path-abspath-pth100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve"">Python documentation: <code>Path.resolve</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.abspath"">Python documentation: <code>os.path.abspath</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-chmod/,PTH101,os-chmod,<code>os.chmod()</code> should be replaced by <code>Path.chmod()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.chmod.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.chmod() can improve readability over the os
module's counterparts (e.g., os.chmod()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.chmod(""file.py"", 0o444)

Use instead:
from pathlib import Path

Path(""file.py"").chmod(0o444)

",,,"
<h1 id=""os-chmod-pth101"">os-chmod (PTH101)<a class=""headerlink"" href=""#os-chmod-pth101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.chmod"">Python documentation: <code>Path.chmod</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.chmod"">Python documentation: <code>os.chmod</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-mkdir/,PTH102,os-mkdir,<code>os.mkdir()</code> should be replaced by <code>Path.mkdir()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.mkdir.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.mkdir() can improve readability over the os
module's counterparts (e.g., os.mkdir()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.mkdir(""./directory/"")

Use instead:
from pathlib import Path

Path(""./directory/"").mkdir()

",,,"
<h1 id=""os-mkdir-pth102"">os-mkdir (PTH102)<a class=""headerlink"" href=""#os-mkdir-pth102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir"">Python documentation: <code>Path.mkdir</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.mkdir"">Python documentation: <code>os.mkdir</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-makedirs/,PTH103,os-makedirs,<code>os.makedirs()</code> should be replaced by <code>Path.mkdir(parents=True)</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.makedirs.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.mkdir(parents=True) can improve readability over the
os module's counterparts (e.g., os.makedirs().
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.makedirs(""./nested/directory/"")

Use instead:
from pathlib import Path

Path(""./nested/directory/"").mkdir(parents=True)

",,,"
<h1 id=""os-makedirs-pth103"">os-makedirs (PTH103)<a class=""headerlink"" href=""#os-makedirs-pth103"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir"">Python documentation: <code>Path.mkdir</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.makedirs"">Python documentation: <code>os.makedirs</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-rename/,PTH104,os-rename,<code>os.rename()</code> should be replaced by <code>Path.rename()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.rename.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.rename() can improve readability over the os
module's counterparts (e.g., os.rename()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.rename(""old.py"", ""new.py"")

Use instead:
from pathlib import Path

Path(""old.py"").rename(""new.py"")

",,,"
<h1 id=""os-rename-pth104"">os-rename (PTH104)<a class=""headerlink"" href=""#os-rename-pth104"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rename"">Python documentation: <code>Path.rename</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.rename"">Python documentation: <code>os.rename</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-replace/,PTH105,os-replace,<code>os.replace()</code> should be replaced by <code>Path.replace()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.replace.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.replace() can improve readability over the os
module's counterparts (e.g., os.replace()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.replace(""old.py"", ""new.py"")

Use instead:
from pathlib import Path

Path(""old.py"").replace(""new.py"")

",,,"
<h1 id=""os-replace-pth105"">os-replace (PTH105)<a class=""headerlink"" href=""#os-replace-pth105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.replace"">Python documentation: <code>Path.replace</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.replace"">Python documentation: <code>os.replace</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-rmdir/,PTH106,os-rmdir,<code>os.rmdir()</code> should be replaced by <code>Path.rmdir()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.rmdir.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.rmdir() can improve readability over the os
module's counterparts (e.g., os.rmdir()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.rmdir(""folder/"")

Use instead:
from pathlib import Path

Path(""folder/"").rmdir()

",,,"
<h1 id=""os-rmdir-pth106"">os-rmdir (PTH106)<a class=""headerlink"" href=""#os-rmdir-pth106"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir"">Python documentation: <code>Path.rmdir</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.rmdir"">Python documentation: <code>os.rmdir</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-remove/,PTH107,os-remove,<code>os.remove()</code> should be replaced by <code>Path.unlink()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.remove.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.unlink() can improve readability over the os
module's counterparts (e.g., os.remove()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.remove(""file.py"")

Use instead:
from pathlib import Path

Path(""file.py"").unlink()

",,,"
<h1 id=""os-remove-pth107"">os-remove (PTH107)<a class=""headerlink"" href=""#os-remove-pth107"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink"">Python documentation: <code>Path.unlink</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.remove"">Python documentation: <code>os.remove</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-unlink/,PTH108,os-unlink,<code>os.unlink()</code> should be replaced by <code>Path.unlink()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.unlink.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.unlink() can improve readability over the os
module's counterparts (e.g., os.unlink()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.unlink(""file.py"")

Use instead:
from pathlib import Path

Path(""file.py"").unlink()

",,,"
<h1 id=""os-unlink-pth108"">os-unlink (PTH108)<a class=""headerlink"" href=""#os-unlink-pth108"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink"">Python documentation: <code>Path.unlink</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.unlink"">Python documentation: <code>os.unlink</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-getcwd/,PTH109,os-getcwd,<code>os.getcwd()</code> should be replaced by <code>Path.cwd()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.getcwd and os.getcwdb.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.cwd() can improve readability over the os
module's counterparts (e.g., os.getcwd()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

cwd = os.getcwd()

Use instead:
from pathlib import Path

cwd = Path.cwd()

",,,"
<h1 id=""os-getcwd-pth109"">os-getcwd (PTH109)<a class=""headerlink"" href=""#os-getcwd-pth109"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.cwd"">Python documentation: <code>Path.cwd</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.getcwd"">Python documentation: <code>os.getcwd</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.getcwdb"">Python documentation: <code>os.getcwdb</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-exists/,PTH110,os-path-exists,<code>os.path.exists()</code> should be replaced by <code>Path.exists()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.exists.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.exists() can improve readability over the os
module's counterparts (e.g., os.path.exists()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.exists(""file.py"")

Use instead:
from pathlib import Path

Path(""file.py"").exists()

",,,"
<h1 id=""os-path-exists-pth110"">os-path-exists (PTH110)<a class=""headerlink"" href=""#os-path-exists-pth110"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.exists"">Python documentation: <code>Path.exists</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.exists"">Python documentation: <code>os.path.exists</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-expanduser/,PTH111,os-path-expanduser,<code>os.path.expanduser()</code> should be replaced by <code>Path.expanduser()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.expanduser.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.expanduser() can improve readability over the os
module's counterparts (e.g., as os.path.expanduser()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.expanduser(""~/films/Monty Python"")

Use instead:
from pathlib import Path

Path(""~/films/Monty Python"").expanduser()

",,,"
<h1 id=""os-path-expanduser-pth111"">os-path-expanduser (PTH111)<a class=""headerlink"" href=""#os-path-expanduser-pth111"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.expanduser"">Python documentation: <code>Path.expanduser</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.expanduser"">Python documentation: <code>os.path.expanduser</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-isdir/,PTH112,os-path-isdir,<code>os.path.isdir()</code> should be replaced by <code>Path.is_dir()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.isdir.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.is_dir() can improve readability over the os
module's counterparts (e.g., os.path.isdir()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.isdir(""docs"")

Use instead:
from pathlib import Path

Path(""docs"").is_dir()

",,,"
<h1 id=""os-path-isdir-pth112"">os-path-isdir (PTH112)<a class=""headerlink"" href=""#os-path-isdir-pth112"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_dir"">Python documentation: <code>Path.is_dir</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.isdir"">Python documentation: <code>os.path.isdir</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-isfile/,PTH113,os-path-isfile,<code>os.path.isfile()</code> should be replaced by <code>Path.is_file()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.isfile.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.is_file() can improve readability over the os
module's counterparts (e.g., os.path.isfile()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.isfile(""docs"")

Use instead:
from pathlib import Path

Path(""docs"").is_file()

",,,"
<h1 id=""os-path-isfile-pth113"">os-path-isfile (PTH113)<a class=""headerlink"" href=""#os-path-isfile-pth113"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file"">Python documentation: <code>Path.is_file</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.isfile"">Python documentation: <code>os.path.isfile</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-islink/,PTH114,os-path-islink,<code>os.path.islink()</code> should be replaced by <code>Path.is_symlink()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.islink.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.is_symlink() can improve readability over the os
module's counterparts (e.g., os.path.islink()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.islink(""docs"")

Use instead:
from pathlib import Path

Path(""docs"").is_symlink()

",,,"
<h1 id=""os-path-islink-pth114"">os-path-islink (PTH114)<a class=""headerlink"" href=""#os-path-islink-pth114"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_symlink"">Python documentation: <code>Path.is_symlink</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.islink"">Python documentation: <code>os.path.islink</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-readlink/,PTH115,os-readlink,<code>os.readlink()</code> should be replaced by <code>Path.readlink()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.readlink.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.readlink() can improve readability over the os
module's counterparts (e.g., os.readlink()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.readlink(file_name)

Use instead:
from pathlib import Path

Path(file_name).readlink()

",,,"
<h1 id=""os-readlink-pth115"">os-readlink (PTH115)<a class=""headerlink"" href=""#os-readlink-pth115"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.readline"">Python documentation: <code>Path.readlink</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.readlink"">Python documentation: <code>os.readlink</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-stat/,PTH116,os-stat,"<code>os.stat()</code> should be replaced by <code>Path.stat()</code>, <code>Path.owner()</code>, or <code>Path.group()</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.stat.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.stat() can improve readability over the os
module's counterparts (e.g., os.path.stat()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os
from pwd import getpwuid
from grp import getgrgid

stat = os.stat(file_name)
owner_name = getpwuid(stat.st_uid).pw_name
group_name = getgrgid(stat.st_gid).gr_name

Use instead:
from pathlib import Path

file_path = Path(file_name)
stat = file_path.stat()
owner_name = file_path.owner()
group_name = file_path.group()

",,,"
<h1 id=""os-stat-pth116"">os-stat (PTH116)<a class=""headerlink"" href=""#os-stat-pth116"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.group"">Python documentation: <code>Path.stat</code></a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.group"">Python documentation: <code>Path.group</code></a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.owner"">Python documentation: <code>Path.owner</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.html#os.stat"">Python documentation: <code>os.stat</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-isabs/,PTH117,os-path-isabs,<code>os.path.isabs()</code> should be replaced by <code>Path.is_absolute()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.isabs.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.is_absolute() can improve readability over the os
module's counterparts (e.g.,  as os.path.isabs()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

if os.path.isabs(file_name):
    print(""Absolute path!"")

Use instead:
from pathlib import Path

if Path(file_name).is_absolute():
    print(""Absolute path!"")

",,,"
<h1 id=""os-path-isabs-pth117"">os-path-isabs (PTH117)<a class=""headerlink"" href=""#os-path-isabs-pth117"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.is_absolute"">Python documentation: <code>PurePath.is_absolute</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.isabs"">Python documentation: <code>os.path.isabs</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-join/,PTH118,os-path-join,<code>os.{module}.join()</code> should be replaced by <code>Path</code> with <code>/</code> operator,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.join.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.joinpath() or the / operator can improve
readability over the os module's counterparts (e.g., os.path.join()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.join(os.path.join(ROOT_PATH, ""folder""), ""file.py"")

Use instead:
from pathlib import Path

Path(ROOT_PATH) / ""folder"" / ""file.py""

",,,"
<h1 id=""os-path-join-pth118"">os-path-join (PTH118)<a class=""headerlink"" href=""#os-path-join-pth118"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.joinpath"">Python documentation: <code>PurePath.joinpath</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.join"">Python documentation: <code>os.path.join</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-basename/,PTH119,os-path-basename,<code>os.path.basename()</code> should be replaced by <code>Path.name</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.basename.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.name can improve readability over the os
module's counterparts (e.g., os.path.basename()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.basename(__file__)

Use instead:
from pathlib import Path

Path(__file__).name

",,,"
<h1 id=""os-path-basename-pth119"">os-path-basename (PTH119)<a class=""headerlink"" href=""#os-path-basename-pth119"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.name"">Python documentation: <code>PurePath.name</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.basename"">Python documentation: <code>os.path.basename</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-dirname/,PTH120,os-path-dirname,<code>os.path.dirname()</code> should be replaced by <code>Path.parent</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.dirname.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.parent can improve readability over the os
module's counterparts (e.g., os.path.dirname()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.dirname(__file__)

Use instead:
from pathlib import Path

Path(__file__).parent

",,,"
<h1 id=""os-path-dirname-pth120"">os-path-dirname (PTH120)<a class=""headerlink"" href=""#os-path-dirname-pth120"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parent"">Python documentation: <code>PurePath.parent</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.dirname"">Python documentation: <code>os.path.dirname</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-samefile/,PTH121,os-path-samefile,<code>os.path.samefile()</code> should be replaced by <code>Path.samefile()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.samefile.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.samefile() can improve readability over the os
module's counterparts (e.g., os.path.samefile()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.samefile(""f1.py"", ""f2.py"")

Use instead:
from pathlib import Path

Path(""f1.py"").samefile(""f2.py"")

",,,"
<h1 id=""os-path-samefile-pth121"">os-path-samefile (PTH121)<a class=""headerlink"" href=""#os-path-samefile-pth121"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.samefile"">Python documentation: <code>Path.samefile</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.samefile"">Python documentation: <code>os.path.samefile</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-splitext/,PTH122,os-path-splitext,"<code>os.path.splitext()</code> should be replaced by <code>Path.suffix</code>, <code>Path.stem</code>, and <code>Path.parent</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.splitext.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os. When possible, using Path object
methods such as Path.suffix and Path.stem can improve readability over
the os module's counterparts (e.g., os.path.splitext()).
os.path.splitext() specifically returns a tuple of the file root and
extension (e.g., given splitext('/foo/bar.py'), os.path.splitext()
returns (""foo/bar"", "".py""). These outputs can be reconstructed through a
combination of Path.suffix ("".py""), Path.stem (""bar""), and
Path.parent (""foo"").
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

(root, ext) = os.path.splitext(""foo/bar.py"")

Use instead:
from pathlib import Path

path = Path(""foo/bar.py"")
root = path.parent / path.stem
ext = path.suffix

",,,"
<h1 id=""os-path-splitext-pth122"">os-path-splitext (PTH122)<a class=""headerlink"" href=""#os-path-splitext-pth122"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffix"">Python documentation: <code>Path.suffix</code></a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffixes"">Python documentation: <code>Path.suffixes</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.splitext"">Python documentation: <code>os.path.splitext</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/builtin-open/,PTH123,builtin-open,<code>open()</code> should be replaced by <code>Path.open()</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the open builtin.
","Why is this bad?#
pathlib offers a high-level API for path manipulation. When possible,
using Path object methods such as Path.open() can improve readability
over the open builtin.
Examples#
with open(""f1.py"", ""wb"") as fp:
    ...

Use instead:
from pathlib import Path

with Path(""f1.py"").open(""wb"") as fp:
    ...

",,,"
<h1 id=""builtin-open-pth123"">builtin-open (PTH123)<a class=""headerlink"" href=""#builtin-open-pth123"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.open"">Python documentation: <code>Path.open</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#open"">Python documentation: <code>open</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/py-path/,PTH124,py-path,"<code>py.path</code> is in maintenance mode, use <code>pathlib</code> instead",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of the py.path library.
","Why is this bad?#
The py.path library is in maintenance mode. Instead, prefer the standard
library's pathlib module, or third-party modules like path (formerly
py.path).
Examples#
import py.path

p = py.path.local(""/foo/bar"").join(""baz/qux"")

Use instead:
from pathlib import Path

p = Path(""/foo/bar"") / ""bar"" / ""qux""

",,,"
<h1 id=""py-path-pth124"">py-path (PTH124)<a class=""headerlink"" href=""#py-path-pth124"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html"">Python documentation: <code>Pathlib</code></a></li>
<li><a href=""https://github.com/jaraco/path"">Path repository</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/path-constructor-current-directory/,PTH201,path-constructor-current-directory,Do not pass the current directory explicitly to <code>Path</code>,Rule is stable,Automatic fix available,"What it does#
Checks for pathlib.Path objects that are initialized with the current
directory.
","Why is this bad?#
The Path() constructor defaults to the current directory, so passing it
in explicitly (as ""."") is unnecessary.
","----neg----:
from pathlib import Path

_ = Path(""."")
----pos----:
from pathlib import Path

_ = Path()
",,"
<h1 id=""path-constructor-current-directory-pth201"">path-constructor-current-directory (PTH201)<a class=""headerlink"" href=""#path-constructor-current-directory-pth201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path"">Python documentation: <code>Path</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-getsize/,PTH202,os-path-getsize,<code>os.path.getsize</code> should be replaced by <code>Path.stat().st_size</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.getsize.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os.
When possible, using Path object methods such as Path.stat() can
improve readability over the os module's counterparts (e.g.,
os.path.getsize()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.getsize(__file__)

Use instead:
from pathlib import Path

Path(__file__).stat().st_size

",,,"
<h1 id=""os-path-getsize-pth202"">os-path-getsize (PTH202)<a class=""headerlink"" href=""#os-path-getsize-pth202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat"">Python documentation: <code>Path.stat</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.getsize"">Python documentation: <code>os.path.getsize</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-getatime/,PTH203,os-path-getatime,<code>os.path.getatime</code> should be replaced by <code>Path.stat().st_atime</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.getatime.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os.
When possible, using Path object methods such as Path.stat() can
improve readability over the os module's counterparts (e.g.,
os.path.getatime()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.getatime(__file__)

Use instead:
from pathlib import Path

Path(__file__).stat().st_atime

",,,"
<h1 id=""os-path-getatime-pth203"">os-path-getatime (PTH203)<a class=""headerlink"" href=""#os-path-getatime-pth203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat"">Python documentation: <code>Path.stat</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.getatime"">Python documentation: <code>os.path.getatime</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-getmtime/,PTH204,os-path-getmtime,<code>os.path.getmtime</code> should be replaced by <code>Path.stat().st_mtime</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.getmtime.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os.
When possible, using Path object methods such as Path.stat() can
improve readability over the os module's counterparts (e.g.,
os.path.getmtime()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.getmtime(__file__)

Use instead:
from pathlib import Path

Path(__file__).stat().st_mtime

",,,"
<h1 id=""os-path-getmtime-pth204"">os-path-getmtime (PTH204)<a class=""headerlink"" href=""#os-path-getmtime-pth204"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat"">Python documentation: <code>Path.stat</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.getmtime"">Python documentation: <code>os.path.getmtime</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-path-getctime/,PTH205,os-path-getctime,<code>os.path.getctime</code> should be replaced by <code>Path.stat().st_ctime</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of os.path.getctime.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os.
When possible, using Path object methods such as Path.stat() can
improve readability over the os module's counterparts (e.g.,
os.path.getctime()).
Note that os functions may be preferable if performance is a concern,
e.g., in hot loops.
Examples#
import os

os.path.getctime(__file__)

Use instead:
from pathlib import Path

Path(__file__).stat().st_ctime

",,,"
<h1 id=""os-path-getctime-pth205"">os-path-getctime (PTH205)<a class=""headerlink"" href=""#os-path-getctime-pth205"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat"">Python documentation: <code>Path.stat</code></a></li>
<li><a href=""https://docs.python.org/3/library/os.path.html#os.path.getctime"">Python documentation: <code>os.path.getctime</code></a></li>
<li><a href=""https://peps.python.org/pep-0428/"">PEP 428</a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#correspondence-to-tools-in-the-os-module"">Correspondence between <code>os</code> and <code>pathlib</code></a></li>
<li><a href=""https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"">Why you should be using pathlib</a></li>
<li><a href=""https://treyhunner.com/2019/01/no-really-pathlib-is-great/"">No really, pathlib is great</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/os-sep-split/,PTH206,os-sep-split,Replace <code>.split(os.sep)</code> with <code>Path.parts</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .split(os.sep)
","Why is this bad?#
The pathlib module in the standard library should be used for path
manipulation. It provides a high-level API with the functionality
needed for common operations on Path objects.
","----neg----:
None----pos----:
None----other----:
If not all parts of the path are needed, then the name and parent
attributes of the Path object should be used. Otherwise, the parts
attribute can be used as shown in the last example.
import os

""path/to/file_name.txt"".split(os.sep)[-1]

""path/to/file_name.txt"".split(os.sep)[-2]

# Iterating over the path parts
if any(part in blocklist for part in ""my/file/path"".split(os.sep)):
    ...

from pathlib import Path

Path(""path/to/file_name.txt"").name

Path(""path/to/file_name.txt"").parent.name

# Iterating over the path parts
if any(part in blocklist for part in Path(""my/file/path"").parts):
    ...
",,"
<h1 id=""os-sep-split-pth206"">os-sep-split (PTH206)<a class=""headerlink"" href=""#os-sep-split-pth206"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/glob/,PTH207,glob,Replace <code>{function}</code> with <code>Path.glob</code> or <code>Path.rglob</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of glob and iglob.
","Why is this bad?#
pathlib offers a high-level API for path manipulation, as compared to
the lower-level API offered by os and glob.
When possible, using Path object methods such as Path.glob() can
improve readability over their low-level counterparts (e.g.,
glob.glob()).
Note that glob.glob and Path.glob are not exact equivalents:




glob
Path.glob




Hidden files
Excludes hidden files by default. From Python 3.11 onwards, the include_hidden keyword can be used to include hidden directories.
Includes hidden files by default.


Iterator
iglob returns an iterator. Under the hood, glob simply converts the iterator to a list.
Path.glob returns an iterator.


Working directory
glob takes a root_dir keyword to set the current working directory.
Path.rglob can be used to return the relative path.


Globstar (**)
glob requires the recursive flag to be set to True for the ** pattern to match any files and zero or more directories, subdirectories, and symbolic links.
The ** pattern in Path.glob means ""this directory and all subdirectories, recursively"". In other words, it enables recursive globbing.



","----neg----:
import glob
import os

glob.glob(os.path.join(path, ""requirements*.txt""))
----pos----:
from pathlib import Path

Path(path).glob(""requirements*.txt"")
",,"
<h1 id=""glob-pth207"">glob (PTH207)<a class=""headerlink"" href=""#glob-pth207"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-use-pathlib</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob"">Python documentation: <code>Path.glob</code></a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob"">Python documentation: <code>Path.rglob</code></a></li>
<li><a href=""https://docs.python.org/3/library/glob.html#glob.glob"">Python documentation: <code>glob.glob</code></a></li>
<li><a href=""https://docs.python.org/3/library/glob.html#glob.iglob"">Python documentation: <code>glob.iglob</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-todo-tag/,TD001,invalid-todo-tag,Invalid TODO tag: <code>{tag}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that a TODO comment is labelled with ""TODO"".
","Why is this bad?#
Ambiguous tags reduce code visibility and can lead to dangling TODOs.
For example, if a comment is tagged with ""FIXME"" rather than ""TODO"", it may
be overlooked by future readers.
Note that this rule will only flag ""FIXME"" and ""XXX"" tags as incorrect.
","----neg----:
# FIXME(ruff): this should get fixed!
----pos----:
# TODO(ruff): this is now fixed!
",,"
<h1 id=""invalid-todo-tag-td001"">invalid-todo-tag (TD001)<a class=""headerlink"" href=""#invalid-todo-tag-td001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-todo-author/,TD002,missing-todo-author,Missing author in TODO; try: <code># TODO(&lt;author_name&gt;): ...</code> or <code># TODO @&lt;author_name&gt;: ...</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that a TODO comment includes an author.
","Why is this bad?#
Including an author on a TODO provides future readers with context around
the issue. While the TODO author is not always considered responsible for
fixing the issue, they are typically the individual with the most context.
","----neg----:
# TODO: should assign an author here
----pos----:
Use instead----other----:

# TODO(charlie): now an author is assigned

",,"
<h1 id=""missing-todo-author-td002"">missing-todo-author (TD002)<a class=""headerlink"" href=""#missing-todo-author-td002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-todo-link/,TD003,missing-todo-link,Missing issue link on the line following this TODO,Rule is stable,Automatic fix not available,"What it does#
Checks that a TODO comment is associated with a link to a relevant issue
or ticket.
","Why is this bad?#
Including an issue link near a TODO makes it easier for resolvers
to get context around the issue.
","----neg----:
# TODO: this link has no issue
----pos----:
Use one of these instead:----other----:

# TODO(charlie): this comment has an issue link
# https://github.com/astral-sh/ruff/issues/3870

# TODO(charlie): this comment has a 3-digit issue code
# 003

# TODO(charlie): this comment has an issue code of (up to) 6 characters, then digits
# SIXCHR-003

",,"
<h1 id=""missing-todo-link-td003"">missing-todo-link (TD003)<a class=""headerlink"" href=""#missing-todo-link-td003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-todo-colon/,TD004,missing-todo-colon,Missing colon in TODO,Rule is stable,Automatic fix not available,"What it does#
Checks that a ""TODO"" tag is followed by a colon.
","Why is this bad?#
""TODO"" tags are typically followed by a parenthesized author name, a colon,
a space, and a description of the issue, in that order.
Deviating from this pattern can lead to inconsistent and non-idiomatic
comments.
","----neg----:
# TODO(charlie) fix this colon
----pos----:
Used instead:----other----:

# TODO(charlie): colon fixed

",,"
<h1 id=""missing-todo-colon-td004"">missing-todo-colon (TD004)<a class=""headerlink"" href=""#missing-todo-colon-td004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/missing-todo-description/,TD005,missing-todo-description,Missing issue description after <code>TODO</code>,Rule is stable,Automatic fix not available,"What it does#
Checks that a ""TODO"" tag contains a description of the issue following the
tag itself.
","Why is this bad?#
TODO comments should include a description of the issue to provide context
for future readers.
","----neg----:
# TODO(charlie)
----pos----:
# TODO(charlie): fix some issue
",,"
<h1 id=""missing-todo-description-td005"">missing-todo-description (TD005)<a class=""headerlink"" href=""#missing-todo-description-td005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/invalid-todo-capitalization/,TD006,invalid-todo-capitalization,Invalid TODO capitalization: <code>{tag}</code> should be <code>TODO</code>,Rule is stable,Automatic fix available,"What it does#
Checks that a ""TODO"" tag is properly capitalized (i.e., that the tag is
uppercase).
","Why is this bad?#
Capitalizing the ""TODO"" in a TODO comment is a convention that makes it
easier for future readers to identify TODOs.
","----neg----:
# todo(charlie): capitalize this
----pos----:
# TODO(charlie): this is capitalized
",,"
<h1 id=""invalid-todo-capitalization-td006"">invalid-todo-capitalization (TD006)<a class=""headerlink"" href=""#invalid-todo-capitalization-td006"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/missing-space-after-todo-colon/,TD007,missing-space-after-todo-colon,Missing space after colon in TODO,Rule is stable,Automatic fix not available,"What it does#
Checks that the colon after a ""TODO"" tag is followed by a space.
","Why is this bad?#
""TODO"" tags are typically followed by a parenthesized author name, a colon,
a space, and a description of the issue, in that order.
Deviating from this pattern can lead to inconsistent and non-idiomatic
comments.
","----neg----:
# TODO(charlie):fix this
----pos----:
# TODO(charlie): fix this
",,"
<h1 id=""missing-space-after-todo-colon-td007"">missing-space-after-todo-colon (TD007)<a class=""headerlink"" href=""#missing-space-after-todo-colon-td007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-todos</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/line-contains-fixme/,FIX001,line-contains-fixme,"Line contains FIXME, consider resolving the issue",Rule is stable,Automatic fix not available,"What it does#
Checks for ""FIXME"" comments.
","Why is this bad?#
""FIXME"" comments are used to describe an issue that should be resolved
(usually, a bug or unexpected behavior).
Consider resolving the issue before deploying the code.
Note that if you use ""FIXME"" comments as a form of documentation, this
rule may not be appropriate for your project.
","def speed(distance, time):
    return distance / time  # FIXME: Raises ZeroDivisionError for time = 0.
",,"
<h1 id=""line-contains-fixme-fix001"">line-contains-fixme (FIX001)<a class=""headerlink"" href=""#line-contains-fixme-fix001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-fixme</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/line-contains-todo/,FIX002,line-contains-todo,"Line contains TODO, consider resolving the issue",Rule is stable,Automatic fix not available,"What it does#
Checks for ""TODO"" comments.
","Why is this bad?#
""TODO"" comments are used to describe an issue that should be resolved
(usually, a missing feature, optimization, or refactoring opportunity).
Consider resolving the issue before deploying the code.
Note that if you use ""TODO"" comments as a form of documentation (e.g.,
to provide context for future work),
this rule may not be appropriate for your project.
","def greet(name):
    return f""Hello, {name}!""  # TODO: Add support for custom greetings.
",,"
<h1 id=""line-contains-todo-fix002"">line-contains-todo (FIX002)<a class=""headerlink"" href=""#line-contains-todo-fix002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-fixme</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/line-contains-xxx/,FIX003,line-contains-xxx,"Line contains XXX, consider resolving the issue",Rule is stable,Automatic fix not available,"What it does#
Checks for ""XXX"" comments.
","Why is this bad?#
""XXX"" comments are used to describe an issue that should be resolved.
Consider resolving the issue before deploying the code, or, at minimum,
using a more descriptive comment tag (e.g, ""TODO"").
","def speed(distance, time):
    return distance / time  # XXX: Raises ZeroDivisionError for time = 0.
",,"
<h1 id=""line-contains-xxx-fix003"">line-contains-xxx (FIX003)<a class=""headerlink"" href=""#line-contains-xxx-fix003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-fixme</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/line-contains-hack/,FIX004,line-contains-hack,"Line contains HACK, consider resolving the issue",Rule is stable,Automatic fix not available,"What it does#
Checks for ""HACK"" comments.
","Why is this bad?#
""HACK"" comments are used to describe an issue that should be resolved
(usually, a suboptimal solution or temporary workaround).
Consider resolving the issue before deploying the code.
Note that if you use ""HACK"" comments as a form of documentation, this
rule may not be appropriate for your project.
","import os


def running_windows():  # HACK: Use platform module instead.
    try:
        os.mkdir(""C:\\Windows\\System32\\"")
    except FileExistsError:
        return True
    else:
        os.rmdir(""C:\\Windows\\System32\\"")
        return False
",,"
<h1 id=""line-contains-hack-fix004"">line-contains-hack (FIX004)<a class=""headerlink"" href=""#line-contains-hack-fix004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-fixme</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/commented-out-code/,ERA001,commented-out-code,Found commented-out code,Rule is stable,Automatic fix not available,"What it does#
Checks for commented-out Python code.
","Why is this bad?#
Commented-out code is dead code, and is often included inadvertently.
It should be removed.
Known problems#
Prone to false positives when checking comments that resemble Python code,
but are not actually Python code (#4845).
","# print(""Hello, world!"")
","https://docs.astral.sh/ruff/settings/#lint_task-tags
lint.task-tags
None","
<h1 id=""commented-out-code-era001"">commented-out-code (ERA001)<a class=""headerlink"" href=""#commented-out-code-era001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>eradicate</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-inplace-argument/,PD002,pandas-use-of-inplace-argument,<code>inplace=True</code> should be avoided; it has inconsistent behavior,Rule is stable,Automatic fix available,"What it does#
Checks for inplace=True usages in pandas function and method
calls.
","Why is this bad?#
Using inplace=True encourages mutation rather than immutable data,
which is harder to reason about and may cause bugs. It also removes the
ability to use the method chaining style for pandas operations.
Further, in many cases, inplace=True does not provide a performance
benefit, as pandas will often copy DataFrames in the background.
","----neg----:
df.sort_values(""col1"", inplace=True)
----pos----:
sorted_df = df.sort_values(""col1"")
",,"
<h1 id=""pandas-use-of-inplace-argument-pd002"">pandas-use-of-inplace-argument (PD002)<a class=""headerlink"" href=""#pandas-use-of-inplace-argument-pd002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://towardsdatascience.com/why-you-should-probably-never-use-pandas-inplace-true-9f9f211849e4""><em>Why You Should Probably Never Use pandas inplace=True</em></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-is-null/,PD003,pandas-use-of-dot-is-null,<code>.isna</code> is preferred to <code>.isnull</code>; functionality is equivalent,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .isnull on Pandas objects.
","Why is this bad?#
In the Pandas API, .isna and .isnull are equivalent. For consistency,
prefer .isna over .isnull.
As a name, .isna more accurately reflects the behavior of the method,
since these methods check for NaN and NaT values in addition to None
values.
","----neg----:
import pandas as pd

animals_df = pd.read_csv(""animals.csv"")
pd.isnull(animals_df)
----pos----:
import pandas as pd

animals_df = pd.read_csv(""animals.csv"")
pd.isna(animals_df)
",,"
<h1 id=""pandas-use-of-dot-is-null-pd003"">pandas-use-of-dot-is-null (PD003)<a class=""headerlink"" href=""#pandas-use-of-dot-is-null-pd003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.isnull.html#pandas.isnull"">Pandas documentation: <code>isnull</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.isna.html#pandas.isna"">Pandas documentation: <code>isna</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-not-null/,PD004,pandas-use-of-dot-not-null,<code>.notna</code> is preferred to <code>.notnull</code>; functionality is equivalent,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .notnull on Pandas objects.
","Why is this bad?#
In the Pandas API, .notna and .notnull are equivalent. For consistency,
prefer .notna over .notnull.
As a name, .notna more accurately reflects the behavior of the method,
since these methods check for NaN and NaT values in addition to None
values.
","----neg----:
import pandas as pd

animals_df = pd.read_csv(""animals.csv"")
pd.notnull(animals_df)
----pos----:
import pandas as pd

animals_df = pd.read_csv(""animals.csv"")
pd.notna(animals_df)
",,"
<h1 id=""pandas-use-of-dot-not-null-pd004"">pandas-use-of-dot-not-null (PD004)<a class=""headerlink"" href=""#pandas-use-of-dot-not-null-pd004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.notnull.html#pandas.notnull"">Pandas documentation: <code>notnull</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.notna.html#pandas.notna"">Pandas documentation: <code>notna</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-ix/,PD007,pandas-use-of-dot-ix,<code>.ix</code> is deprecated; use more explicit <code>.loc</code> or <code>.iloc</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .ix on Pandas objects.
","Why is this bad?#
The .ix method is deprecated as its behavior is ambiguous. Specifically,
it's often unclear whether .ix is indexing by label or by ordinal position.
Instead, prefer the .loc method for label-based indexing, and .iloc for
ordinal indexing.
","----neg----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.ix[0]  # 0th row or row with label 0?
----pos----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.iloc[0]  # 0th row.
",,"
<h1 id=""pandas-use-of-dot-ix-pd007"">pandas-use-of-dot-ix (PD007)<a class=""headerlink"" href=""#pandas-use-of-dot-ix-pd007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/pandas-docs/version/0.20/whatsnew.html#deprecate-ix"">Pandas release notes: Deprecate <code>.ix</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html"">Pandas documentation: <code>loc</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html"">Pandas documentation: <code>iloc</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-at/,PD008,pandas-use-of-dot-at,"Use <code>.loc</code> instead of <code>.at</code>. If speed is important, use NumPy.",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .at on Pandas objects.
","Why is this bad?#
The .at method selects a single value from a DataFrame or Series based on
a label index, and is slightly faster than using .loc. However, .loc is
more idiomatic and versatile, as it can be used to select multiple values at
once.
If performance is an important consideration, convert the object to a NumPy
array, which will provide a much greater performance boost than using .at
over .loc.
","----neg----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.at[""Maria""]
----pos----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.loc[""Maria""]
",,"
<h1 id=""pandas-use-of-dot-at-pd008"">pandas-use-of-dot-at (PD008)<a class=""headerlink"" href=""#pandas-use-of-dot-at-pd008"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html"">Pandas documentation: <code>loc</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.at.html"">Pandas documentation: <code>at</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-iat/,PD009,pandas-use-of-dot-iat,"Use <code>.iloc</code> instead of <code>.iat</code>. If speed is important, use NumPy.",Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .iat on Pandas objects.
","Why is this bad?#
The .iat method selects a single value from a DataFrame or Series based
on an ordinal index, and is slightly faster than using .iloc. However,
.iloc is more idiomatic and versatile, as it can be used to select
multiple values at once.
If performance is an important consideration, convert the object to a NumPy
array, which will provide a much greater performance boost than using .iat
over .iloc.
","----neg----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.iat[0]
----pos----:
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.iloc[0]
----other----:
Or, using NumPy:
import numpy as np
import pandas as pd

students_df = pd.read_csv(""students.csv"")
students_df.to_numpy()[0]

",,"
<h1 id=""pandas-use-of-dot-iat-pd009"">pandas-use-of-dot-iat (PD009)<a class=""headerlink"" href=""#pandas-use-of-dot-iat-pd009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html"">Pandas documentation: <code>iloc</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iat.html"">Pandas documentation: <code>iat</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-pivot-or-unstack/,PD010,pandas-use-of-dot-pivot-or-unstack,<code>.pivot_table</code> is preferred to <code>.pivot</code> or <code>.unstack</code>; provides same functionality,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .pivot or .unstack on Pandas objects.
","Why is this bad?#
Prefer .pivot_table to .pivot or .unstack. .pivot_table is more general
and can be used to implement the same behavior as .pivot and .unstack.
","----neg----:
import pandas as pd

df = pd.read_csv(""cities.csv"")
df.pivot(index=""city"", columns=""year"", values=""population"")
----pos----:
import pandas as pd

df = pd.read_csv(""cities.csv"")
df.pivot_table(index=""city"", columns=""year"", values=""population"")
",,"
<h1 id=""pandas-use-of-dot-pivot-or-unstack-pd010"">pandas-use-of-dot-pivot-or-unstack (PD010)<a class=""headerlink"" href=""#pandas-use-of-dot-pivot-or-unstack-pd010"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/user_guide/reshaping.html"">Pandas documentation: Reshaping and pivot tables</a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html#pandas.pivot_table"">Pandas documentation: <code>pivot_table</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-values/,PD011,pandas-use-of-dot-values,Use <code>.to_numpy()</code> instead of <code>.values</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .values on Pandas Series and Index objects.
","Why is this bad?#
The .values attribute is ambiguous as its return type is unclear. As
such, it is no longer recommended by the Pandas documentation.
Instead, use .to_numpy() to return a NumPy array, or .array to return a
Pandas ExtensionArray.
","----neg----:
import pandas as pd

animals = pd.read_csv(""animals.csv"").values  # Ambiguous.
----pos----:
import pandas as pd

animals = pd.read_csv(""animals.csv"").to_numpy()  # Explicit.
",,"
<h1 id=""pandas-use-of-dot-values-pd011"">pandas-use-of-dot-values (PD011)<a class=""headerlink"" href=""#pandas-use-of-dot-values-pd011"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/whatsnew/v0.24.0.html#accessing-the-values-in-a-series-or-index"">Pandas documentation: Accessing the values in a Series or Index</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-read-table/,PD012,pandas-use-of-dot-read-table,Use <code>.read_csv</code> instead of <code>.read_table</code> to read CSV files,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of pd.read_table to read CSV files.
","Why is this bad?#
In the Pandas API, pd.read_csv and pd.read_table are equivalent apart
from their default separator: pd.read_csv defaults to a comma (,),
while pd.read_table defaults to a tab (\t) as the default separator.
Prefer pd.read_csv over pd.read_table when reading comma-separated
data (like CSV files), as it is more idiomatic.
","----neg----:
import pandas as pd

cities_df = pd.read_table(""cities.csv"", sep="","")
----pos----:
import pandas as pd

cities_df = pd.read_csv(""cities.csv"")
",,"
<h1 id=""pandas-use-of-dot-read-table-pd012"">pandas-use-of-dot-read-table (PD012)<a class=""headerlink"" href=""#pandas-use-of-dot-read-table-pd012"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv"">Pandas documentation: <code>read_csv</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.read_table.html#pandas.read_table"">Pandas documentation: <code>read_table</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-dot-stack/,PD013,pandas-use-of-dot-stack,<code>.melt</code> is preferred to <code>.stack</code>; provides same functionality,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of .stack on Pandas objects.
","Why is this bad?#
Prefer .melt to .stack, which has the same functionality but with
support for direct column renaming and no dependence on MultiIndex.
","----neg----:
import pandas as pd

cities_df = pd.read_csv(""cities.csv"")
cities_df.set_index(""city"").stack()
----pos----:
import pandas as pd

cities_df = pd.read_csv(""cities.csv"")
cities_df.melt(id_vars=""city"")
",,"
<h1 id=""pandas-use-of-dot-stack-pd013"">pandas-use-of-dot-stack (PD013)<a class=""headerlink"" href=""#pandas-use-of-dot-stack-pd013"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.melt.html"">Pandas documentation: <code>melt</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html"">Pandas documentation: <code>stack</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-use-of-pd-merge/,PD015,pandas-use-of-pd-merge,Use <code>.merge</code> method instead of <code>pd.merge</code> function. They have equivalent functionality.,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of pd.merge on Pandas objects.
","Why is this bad?#
In Pandas, the .merge method (exposed on, e.g., DataFrame objects) and
the pd.merge function (exposed on the Pandas module) are equivalent.
For consistency, prefer calling .merge on an object over calling
pd.merge on the Pandas module, as the former is more idiomatic.
Further, pd.merge is not a method, but a function, which prohibits it
from being used in method chains, a common pattern in Pandas code.
","----neg----:
import pandas as pd

cats_df = pd.read_csv(""cats.csv"")
dogs_df = pd.read_csv(""dogs.csv"")
rabbits_df = pd.read_csv(""rabbits.csv"")
pets_df = pd.merge(pd.merge(cats_df, dogs_df), rabbits_df)  # Hard to read.
----pos----:
import pandas as pd

cats_df = pd.read_csv(""cats.csv"")
dogs_df = pd.read_csv(""dogs.csv"")
rabbits_df = pd.read_csv(""rabbits.csv"")
pets_df = cats_df.merge(dogs_df).merge(rabbits_df)
",,"
<h1 id=""pandas-use-of-pd-merge-pd015"">pandas-use-of-pd-merge (PD015)<a class=""headerlink"" href=""#pandas-use-of-pd-merge-pd015"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge"">Pandas documentation: <code>merge</code></a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge"">Pandas documentation: <code>pd.merge</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-nunique-constant-series-check/,PD101,pandas-nunique-constant-series-check,Using <code>series.nunique()</code> for checking that a series is constant is inefficient,Rule is stable,Automatic fix not available,"What it does#
Check for uses of .nunique() to check if a Pandas Series is constant
(i.e., contains only one unique value).
","Why is this bad?#
.nunique() is computationally inefficient for checking if a Series is
constant.
Consider, for example, a Series of length n that consists of increasing
integer values (e.g., 1, 2, 3, 4). The .nunique() method will iterate
over the entire Series to count the number of unique values. But in this
case, we can detect that the Series is non-constant after visiting the
first two values, which are non-equal.
In general, .nunique() requires iterating over the entire Series, while a
more efficient approach allows short-circuiting the operation as soon as a
non-equal value is found.
Instead of calling .nunique(), convert the Series to a NumPy array, and
check if all values in the array are equal to the first observed value.
","----neg----:
import pandas as pd

data = pd.Series(range(1000))
if data.nunique() <= 1:
    print(""Series is constant"")
----pos----:
import pandas as pd

data = pd.Series(range(1000))
array = data.to_numpy()
if array.shape[0] == 0 or (array[0] == array).all():
    print(""Series is constant"")
",,"
<h1 id=""pandas-nunique-constant-series-check-pd101"">pandas-nunique-constant-series-check (PD101)<a class=""headerlink"" href=""#pandas-nunique-constant-series-check-pd101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pandas.pydata.org/docs/user_guide/cookbook.html#constant-series"">Pandas Cookbook: ""Constant Series""</a></li>
<li><a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.nunique.html"">Pandas documentation: <code>nunique</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pandas-df-variable-name/,PD901,pandas-df-variable-name,Avoid using the generic variable name <code>df</code> for DataFrames,Rule is stable,Automatic fix not available,"What it does#
Checks for assignments to the variable df.
","Why is this bad?#
Although df is a common variable name for a Pandas DataFrame, it's not a
great variable name for production code, as it's non-descriptive and
prone to name conflicts.
Instead, use a more descriptive variable name.
","----neg----:
import pandas as pd

df = pd.read_csv(""animals.csv"")
----pos----:
import pandas as pd

animals = pd.read_csv(""animals.csv"")
",,"
<h1 id=""pandas-df-variable-name-pd901"">pandas-df-variable-name (PD901)<a class=""headerlink"" href=""#pandas-df-variable-name-pd901"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pandas-vet</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/eval/,PGH001,eval,"<span style=""opacity: 0.5"" title=""This rule has been removed"">No builtin <code>eval()</code> allowed</span>",Rule has been removed,Automatic fix not available,"What it does#
Checks for uses of the builtin eval() function.
","Why is this bad?#
The eval() function is insecure as it enables arbitrary code execution.
","----neg----:
def foo():
    x = eval(input(""Enter a number: ""))
    ...
----pos----:
def foo():
    x = input(""Enter a number: "")
    ...
",,"
<h1 id=""eval-pgh001"">eval (PGH001)<a class=""headerlink"" href=""#eval-pgh001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pygrep-hooks</strong> linter.</p>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<h2 id=""removed"">Removed<a class=""headerlink"" href=""#removed"" title=""Permanent link"">#</a></h2>
<p>This rule is identical to <a href=""https://docs.astral.sh/ruff/rules/suspicious-eval-usage/"">S307</a> which should be used instead.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#eval"">Python documentation: <code>eval</code></a></li>
<li><a href=""https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html""><em>Eval really is dangerous</em> by Ned Batchelder</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/deprecated-log-warn/,PGH002,deprecated-log-warn,"<span style=""opacity: 0.5"" title=""This rule has been removed""><code>warn</code> is deprecated in favor of <code>warning</code></span>",Rule has been removed,Automatic fix available,"What it does#
Check for usages of the deprecated warn method from the logging module.
","Why is this bad?#
The warn method is deprecated. Use warning instead.
","----neg----:
import logging


def foo():
    logging.warn(""Something happened"")
----pos----:
import logging


def foo():
    logging.warning(""Something happened"")
",,"
<h1 id=""deprecated-log-warn-pgh002"">deprecated-log-warn (PGH002)<a class=""headerlink"" href=""#deprecated-log-warn-pgh002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pygrep-hooks</strong> linter.</p>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<p>Fix is sometimes available.</p>
<h2 id=""removed"">Removed<a class=""headerlink"" href=""#removed"" title=""Permanent link"">#</a></h2>
<p>This rule is identical to <a href=""https://docs.astral.sh/ruff/rules/logging-warn/"">G010</a> which should be used instead.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.Logger.warning"">Python documentation: <code>logger.Logger.warning</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/blanket-type-ignore/,PGH003,blanket-type-ignore,Use specific rule codes when ignoring type issues,Rule is stable,Automatic fix not available,"What it does#
Check for type: ignore annotations that suppress all type warnings, as
opposed to targeting specific type warnings.
","Why is this bad?#
Suppressing all warnings can hide issues in the code.
Blanket type: ignore annotations are also more difficult to interpret and
maintain, as the annotation does not clarify which warnings are intended
to be suppressed.
","----neg----:
from foo import secrets  # type: ignore
----pos----:
from foo import secrets  # type: ignore[attr-defined]
",,"
<h1 id=""blanket-type-ignore-pgh003"">blanket-type-ignore (PGH003)<a class=""headerlink"" href=""#blanket-type-ignore-pgh003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pygrep-hooks</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<p>Mypy supports a <a href=""https://mypy.readthedocs.io/en/stable/error_code_list2.html#check-that-type-ignore-include-an-error-code-ignore-without-code"">built-in setting</a>
to enforce that all <code>type: ignore</code> annotations include an error code, akin
to enabling this rule:</p>
<div class=""highlight""><pre><span></span><code><a href=""#__codelineno-2-1"" id=""__codelineno-2-1"" name=""__codelineno-2-1""></a><span class=""k"">[tool.mypy]</span>
<a href=""#__codelineno-2-2"" id=""__codelineno-2-2"" name=""__codelineno-2-2""></a><span class=""n"">enable_error_code</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">[</span><span class=""s2"">""ignore-without-code""</span><span class=""p"">]</span>
</code></pre></div>
"
https://docs.astral.sh/ruff/rules/blanket-noqa/,PGH004,blanket-noqa,Use specific rule codes when using <code>noqa</code>,Rule is stable,Automatic fix not available,"What it does#
Check for noqa annotations that suppress all diagnostics, as opposed to
targeting specific diagnostics.
","Why is this bad?#
Suppressing all diagnostics can hide issues in the code.
Blanket noqa annotations are also more difficult to interpret and
maintain, as the annotation does not clarify which diagnostics are intended
to be suppressed.
","----neg----:
from .base import *  # noqa
----pos----:
from .base import *  # noqa: F403
",,"
<h1 id=""blanket-noqa-pgh004"">blanket-noqa (PGH004)<a class=""headerlink"" href=""#blanket-noqa-pgh004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pygrep-hooks</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.astral.sh/ruff/configuration/#error-suppression"">Ruff documentation</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-mock-access/,PGH005,invalid-mock-access,Mock method should be called: <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for common mistakes when using mock objects.
","Why is this bad?#
The mock module exposes an assertion API that can be used to verify that
mock objects undergo expected interactions. This rule checks for common
mistakes when using this API.
For example, it checks for mock attribute accesses that should be replaced
with mock method calls.
","----neg----:
my_mock.assert_called
----pos----:
my_mock.assert_called()
",,"
<h1 id=""invalid-mock-access-pgh005"">invalid-mock-access (PGH005)<a class=""headerlink"" href=""#invalid-mock-access-pgh005"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>pygrep-hooks</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/type-name-incorrect-variance/,PLC0105,type-name-incorrect-variance,"<code>{kind}</code> name ""{param_name}"" does not reflect its {variance}; consider renaming it to ""{replacement_name}""",Rule is stable,Automatic fix not available,"What it does#
Checks for type names that do not match the variance of their associated
type parameter.
","Why is this bad?#
PEP 484 recommends the use of the _co and _contra suffixes for
covariant and contravariant type parameters, respectively (while invariant
type parameters should not have any such suffix).
","----neg----:
from typing import TypeVar

T = TypeVar(""T"", covariant=True)
U = TypeVar(""U"", contravariant=True)
V_co = TypeVar(""V_co"")
----pos----:
from typing import TypeVar

T_co = TypeVar(""T_co"", covariant=True)
U_contra = TypeVar(""U_contra"", contravariant=True)
V = TypeVar(""V"")
",,"
<h1 id=""type-name-incorrect-variance-plc0105"">type-name-incorrect-variance (PLC0105)<a class=""headerlink"" href=""#type-name-incorrect-variance-plc0105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html"">Python documentation: <code>typing</code> — Support for type hints</a></li>
<li><a href=""https://peps.python.org/pep-0483/#covariance-and-contravariance"">PEP 483 – The Theory of Type Hints: Covariance and Contravariance</a></li>
<li><a href=""https://peps.python.org/pep-0484/#covariance-and-contravariance"">PEP 484 – Type Hints: Covariance and contravariance</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/type-bivariance/,PLC0131,type-bivariance,<code>{kind}</code> cannot be both covariant and contravariant,Rule is stable,Automatic fix not available,"What it does#
Checks for TypeVar and ParamSpec definitions in which the type is
both covariant and contravariant.
","Why is this bad?#
By default, Python's generic types are invariant, but can be marked as
either covariant or contravariant via the covariant and contravariant
keyword arguments. While the API does allow you to mark a type as both
covariant and contravariant, this is not supported by the type system,
and should be avoided.
Instead, change the variance of the type to be either covariant,
contravariant, or invariant. If you want to describe both covariance and
contravariance, consider using two separate type parameters.
For context: an ""invariant"" generic type only accepts values that exactly
match the type parameter; for example, list[Dog] accepts only list[Dog],
not list[Animal] (superclass) or list[Bulldog] (subclass). This is
the default behavior for Python's generic types.
A ""covariant"" generic type accepts subclasses of the type parameter; for
example, Sequence[Animal] accepts Sequence[Dog]. A ""contravariant""
generic type accepts superclasses of the type parameter; for example,
Callable[Dog] accepts Callable[Animal].
","----neg----:
from typing import TypeVar

T = TypeVar(""T"", covariant=True, contravariant=True)
----pos----:
from typing import TypeVar

T_co = TypeVar(""T_co"", covariant=True)
T_contra = TypeVar(""T_contra"", contravariant=True)
",,"
<h1 id=""type-bivariance-plc0131"">type-bivariance (PLC0131)<a class=""headerlink"" href=""#type-bivariance-plc0131"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html"">Python documentation: <code>typing</code> — Support for type hints</a></li>
<li><a href=""https://peps.python.org/pep-0483/#covariance-and-contravariance"">PEP 483 – The Theory of Type Hints: Covariance and Contravariance</a></li>
<li><a href=""https://peps.python.org/pep-0484/#covariance-and-contravariance"">PEP 484 – Type Hints: Covariance and contravariance</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/type-param-name-mismatch/,PLC0132,type-param-name-mismatch,<code>{kind}</code> name <code>{param_name}</code> does not match assigned variable name <code>{var_name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for TypeVar, TypeVarTuple, ParamSpec, and NewType
definitions in which the name of the type parameter does not match the name
of the variable to which it is assigned.
","Why is this bad?#
When defining a TypeVar or a related type parameter, Python allows you to
provide a name for the type parameter. According to PEP 484, the name
provided to the TypeVar constructor must be equal to the name of the
variable to which it is assigned.
","----neg----:
from typing import TypeVar

T = TypeVar(""U"")
----pos----:
from typing import TypeVar

T = TypeVar(""T"")
",,"
<h1 id=""type-param-name-mismatch-plc0132"">type-param-name-mismatch (PLC0132)<a class=""headerlink"" href=""#type-param-name-mismatch-plc0132"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html"">Python documentation: <code>typing</code> — Support for type hints</a></li>
<li><a href=""https://peps.python.org/pep-0484/#generics"">PEP 484 – Type Hints: Generics</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/single-string-slots/,PLC0205,single-string-slots,Class <code>__slots__</code> should be a non-string iterable,Rule is stable,Automatic fix not available,"What it does#
Checks for single strings assigned to __slots__.
","Why is this bad?#
In Python, the __slots__ attribute allows you to explicitly define the
attributes (instance variables) that a class can have. By default, Python
uses a dictionary to store an object's attributes, which incurs some memory
overhead. However, when __slots__ is defined, Python uses a more compact
internal structure to store the object's attributes, resulting in memory
savings.
Any string iterable may be assigned to __slots__ (most commonly, a
tuple of strings). If a string is assigned to __slots__, it is
interpreted as a single attribute name, rather than an iterable of attribute
names. This can cause confusion, as users that iterate over the __slots__
value may expect to iterate over a sequence of attributes, but would instead
iterate over the characters of the string.
To use a single string attribute in __slots__, wrap the string in an
iterable container type, like a tuple.
","----neg----:
class Person:
    __slots__: str = ""name""

    def __init__(self, name: str) -> None:
        self.name = name
----pos----:
class Person:
    __slots__: tuple[str, ...] = (""name"",)

    def __init__(self, name: str) -> None:
        self.name = name
",,"
<h1 id=""single-string-slots-plc0205"">single-string-slots (PLC0205)<a class=""headerlink"" href=""#single-string-slots-plc0205"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"">Python documentation: <code>__slots__</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/iteration-over-set/,PLC0208,iteration-over-set,Use a sequence type instead of a <code>set</code> when iterating over values,Rule is stable,Automatic fix available,"What it does#
Checks for iterations over set literals.
","Why is this bad?#
Iterating over a set is less efficient than iterating over a sequence
type, like list or tuple.
","----neg----:
for number in {1, 2, 3}:
    ...
----pos----:
for number in (1, 2, 3):
    ...
",,"
<h1 id=""iteration-over-set-plc0208"">iteration-over-set (PLC0208)<a class=""headerlink"" href=""#iteration-over-set-plc0208"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#set"">Python documentation: <code>set</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/useless-import-alias/,PLC0414,useless-import-alias,Import alias does not rename original package,Rule is stable,Automatic fix available,"What it does#
Checks for import aliases that do not rename the original package.
","Why is this bad?#
The import alias is redundant and should be removed to avoid confusion.
","----neg----:
import numpy as numpy
----pos----:
import numpy as np
",,"
<h1 id=""useless-import-alias-plc0414"">useless-import-alias (PLC0414)<a class=""headerlink"" href=""#useless-import-alias-plc0414"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/import-outside-top-level/,PLC0415,import-outside-top-level,<code>import</code> should be at the top-level of a file,Rule is in preview,Automatic fix not available,"What it does#
Checks for import statements outside of a module's top-level scope, such
as within a function or class definition.
","Why is this bad?#
PEP 8 recommends placing imports not only at the top-level of a module,
but at the very top of the file, ""just after any module comments and
docstrings, and before module globals and constants.""
import statements have effects that are global in scope; defining them at
the top level has a number of benefits. For example, it makes it easier to
identify the dependencies of a module, and ensures that any invalid imports
are caught regardless of whether a specific function is called or class is
instantiated.
An import statement would typically be placed within a function only to
avoid a circular dependency, to defer a costly module load, or to avoid
loading a dependency altogether in a certain runtime environment.
","----neg----:
def print_python_version():
    import platform

    print(python.python_version())
----pos----:
import platform


def print_python_version():
    print(python.python_version())
",,"
<h1 id=""import-outside-top-level-plc0415"">import-outside-top-level (PLC0415)<a class=""headerlink"" href=""#import-outside-top-level-plc0415"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/compare-to-empty-string/,PLC1901,compare-to-empty-string,<code>{existing}</code> can be simplified to <code>{replacement}</code> as an empty string is falsey,Rule is in preview,Automatic fix not available,"What it does#
Checks for comparisons to empty strings.
","Why is this bad?#
An empty string is falsy, so it is unnecessary to compare it to """". If
the value can be something else Python considers falsy, such as None,
0, or another empty container, then the code is not equivalent.
Known problems#
High false positive rate, as the check is context-insensitive and does not
consider the type of the variable being compared (#4282).
","----neg----:
x: str = ...

if x == """":
    print(""x is empty"")
----pos----:
x: str = ...

if not x:
    print(""x is empty"")
",,"
<h1 id=""compare-to-empty-string-plc1901"">compare-to-empty-string (PLC1901)<a class=""headerlink"" href=""#compare-to-empty-string-plc1901"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"">Python documentation: Truth Value Testing</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/non-ascii-name/,PLC2401,non-ascii-name,"{kind} name <code>{name}</code> contains a non-ASCII character, consider renaming it",Rule is in preview,Automatic fix not available,"What it does#
Checks for the use of non-ASCII characters in variable names.
","Why is this bad?#
The use of non-ASCII characters in variable names can cause confusion
and compatibility issues (see: PEP 672).
","----neg----:
ápple_count: int
----pos----:
apple_count: int
",,"
<h1 id=""non-ascii-name-plc2401"">non-ascii-name (PLC2401)<a class=""headerlink"" href=""#non-ascii-name-plc2401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/non-ascii-import-name/,PLC2403,non-ascii-import-name,"Module alias <code>{name}</code> contains a non-ASCII character, use an ASCII-only alias",Rule is in preview,Automatic fix not available,"What it does#
Checks for the use of non-ASCII characters in import statements.
","Why is this bad?#
The use of non-ASCII characters in import statements can cause confusion
and compatibility issues (see: PEP 672).
","----neg----:
import bár
----pos----:
import bar
----other----:
If the module is third-party, use an ASCII-only alias:
import bár as bar

",,"
<h1 id=""non-ascii-import-name-plc2403"">non-ascii-import-name (PLC2403)<a class=""headerlink"" href=""#non-ascii-import-name-plc2403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/import-private-name/,PLC2701,import-private-name,Private name import <code>{name}</code> from external module <code>{module}</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for import statements that import a private name (a name starting
with an underscore _) from another module.
","Why is this bad?#
PEP 8 states that names starting with an underscore are private. Thus,
they are not intended to be used outside of the module in which they are
defined.
Further, as private imports are not considered part of the public API, they
are prone to unexpected changes, especially outside of semantic versioning.
Instead, consider using the public API of the module.
This rule ignores private name imports that are exclusively used in type
annotations. Ideally, types would be public; however, this is not always
possible when using third-party libraries.
Known problems#
Does not ignore private name imports from within the module that defines
the private name if the module is defined with PEP 420 namespace packages
(i.e., directories that omit the __init__.py file). Namespace packages
must be configured via the namespace-packages setting.
","from foo import _bar
","https://docs.astral.sh/ruff/settings/#namespace-packages
namespace-packages
None","
<h1 id=""import-private-name-plc2701"">import-private-name (PLC2701)<a class=""headerlink"" href=""#import-private-name-plc2701"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0008/#naming-conventions"">PEP 8: Naming Conventions</a></li>
<li><a href=""https://semver.org/"">Semantic Versioning</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-dunder-call/,PLC2801,unnecessary-dunder-call,Unnecessary dunder call to <code>{method}</code>. {replacement}.,Rule is in preview,Automatic fix available,"What it does#
Checks for explicit use of dunder methods, like __str__ and __add__.
","Why is this bad?#
Dunder names are not meant to be called explicitly and, in most cases, can
be replaced with builtins or operators.
","----neg----:
three = (3.0).__str__()
twelve = ""1"".__add__(""2"")


def is_greater_than_two(x: int) -> bool:
    return x.__gt__(2)
----pos----:
three = str(3.0)
twelve = ""1"" + ""2""


def is_greater_than_two(x: int) -> bool:
    return x > 2
",,"
<h1 id=""unnecessary-dunder-call-plc2801"">unnecessary-dunder-call (PLC2801)<a class=""headerlink"" href=""#unnecessary-dunder-call-plc2801"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-direct-lambda-call/,PLC3002,unnecessary-direct-lambda-call,Lambda expression called directly. Execute the expression inline instead.,Rule is stable,Automatic fix not available,"What it does#
Checks for unnecessary direct calls to lambda expressions.
","Why is this bad?#
Calling a lambda expression directly is unnecessary. The expression can be
executed inline instead to improve readability.
","----neg----:
area = (lambda r: 3.14 * r**2)(radius)
----pos----:
area = 3.14 * radius**2
",,"
<h1 id=""unnecessary-direct-lambda-call-plc3002"">unnecessary-direct-lambda-call (PLC3002)<a class=""headerlink"" href=""#unnecessary-direct-lambda-call-plc3002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#lambda"">Python documentation: Lambdas</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/yield-in-init/,PLE0100,yield-in-init,<code>__init__</code> method is a generator,Rule is stable,Automatic fix not available,"What it does#
Checks for __init__ methods that are turned into generators by the
inclusion of yield or yield from expressions.
","Why is this bad?#
The __init__ method is the constructor for a given Python class,
responsible for initializing, rather than creating, new objects.
The __init__ method has to return None. By including a yield or
yield from expression in an __init__, the method will return a
generator object when called at runtime, resulting in a runtime error.
","class InitIsGenerator:
    def __init__(self, i):
        yield i
",,"
<h1 id=""yield-in-init-ple0100"">yield-in-init (PLE0100)<a class=""headerlink"" href=""#yield-in-init-ple0100"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://codeql.github.com/codeql-query-help/python/py-init-method-is-generator/"">CodeQL: <code>py-init-method-is-generator</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/return-in-init/,PLE0101,return-in-init,Explicit return in <code>__init__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for __init__ methods that return values.
","Why is this bad?#
The __init__ method is the constructor for a given Python class,
responsible for initializing, rather than creating, new objects.
The __init__ method has to return None. Returning any value from
an __init__ method will result in a runtime error.
","----neg----:
class Example:
    def __init__(self):
        return []
----pos----:
class Example:
    def __init__(self):
        self.value = []
",,"
<h1 id=""return-in-init-ple0101"">return-in-init (PLE0101)<a class=""headerlink"" href=""#return-in-init-ple0101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://codeql.github.com/codeql-query-help/python/py-explicit-return-in-init/"">CodeQL: <code>py-explicit-return-in-init</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/nonlocal-and-global/,PLE0115,nonlocal-and-global,Name <code>{name}</code> is both <code>nonlocal</code> and <code>global</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for variables which are both declared as both nonlocal and
global.
","Why is this bad?#
A nonlocal variable is a variable that is defined in the nearest
enclosing scope, but not in the global scope, while a global variable is
a variable that is defined in the global scope.
Declaring a variable as both nonlocal and global is contradictory and
will raise a SyntaxError.
","----neg----:
counter = 0


def increment():
    global counter
    nonlocal counter
    counter += 1
----pos----:
counter = 0


def increment():
    global counter
    counter += 1
",,"
<h1 id=""nonlocal-and-global-ple0115"">nonlocal-and-global (PLE0115)<a class=""headerlink"" href=""#nonlocal-and-global-ple0115"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-global-statement"">Python documentation: The <code>global</code> statement</a></li>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#nonlocal"">Python documentation: The <code>nonlocal</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/continue-in-finally/,PLE0116,continue-in-finally,<code>continue</code> not supported inside <code>finally</code> clause,Rule is stable,Automatic fix not available,"What it does#
Checks for continue statements inside finally
","Why is this bad?#
continue statements were not allowed within finally clauses prior to
Python 3.8. Using a continue statement within a finally clause can
cause a SyntaxError.
","----neg----:
while True:
    try:
        pass
    finally:
        continue
----pos----:
while True:
    try:
        pass
    except Exception:
        pass
    else:
        continue
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""continue-in-finally-ple0116"">continue-in-finally (PLE0116)<a class=""headerlink"" href=""#continue-in-finally-ple0116"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/nonlocal-without-binding/,PLE0117,nonlocal-without-binding,Nonlocal name <code>{name}</code> found without binding,Rule is stable,Automatic fix not available,"What it does#
Checks for nonlocal names without bindings.
","Why is this bad?#
nonlocal names must be bound to a name in an outer scope.
","----neg----:
class Foo:
    def get_bar(self):
        nonlocal bar
        ...
----pos----:
class Foo:
    bar = 1

    def get_bar(self):
        nonlocal bar
        ...
",,"
<h1 id=""nonlocal-without-binding-ple0117"">nonlocal-without-binding (PLE0117)<a class=""headerlink"" href=""#nonlocal-without-binding-ple0117"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#nonlocal"">Python documentation: The <code>nonlocal</code> statement</a></li>
<li><a href=""https://peps.python.org/pep-3104/"">PEP 3104</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/load-before-global-declaration/,PLE0118,load-before-global-declaration,Name <code>{name}</code> is used prior to global declaration on {row},Rule is stable,Automatic fix not available,"What it does#
Checks for uses of names that are declared as global prior to the
relevant global declaration.
","Why is this bad?#
The global declaration applies to the entire scope. Using a name that's
declared as global in a given scope prior to the relevant global
declaration is a syntax error.
","----neg----:
counter = 1


def increment():
    print(f""Adding 1 to {counter}"")
    global counter
    counter += 1
----pos----:
counter = 1


def increment():
    global counter
    print(f""Adding 1 to {counter}"")
    counter += 1
",,"
<h1 id=""load-before-global-declaration-ple0118"">load-before-global-declaration (PLE0118)<a class=""headerlink"" href=""#load-before-global-declaration-ple0118"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-global-statement"">Python documentation: The <code>global</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/non-slot-assignment/,PLE0237,non-slot-assignment,Attribute <code>{name}</code> is not defined in class's <code>__slots__</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for assignments to attributes that are not defined in __slots__.
","Why is this bad?#
When using __slots__, only the specified attributes are allowed.
Attempting to assign to an attribute that is not defined in __slots__
will result in an AttributeError at runtime.
Known problems#
This rule can't detect __slots__ implementations in superclasses, and
so limits its analysis to classes that inherit from (at most) object.
","----neg----:
class Student:
    __slots__ = (""name"",)

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname  # [assigning-non-slot]
        self.setup()

    def setup(self):
        pass
----pos----:
class Student:
    __slots__ = (""name"", ""surname"")

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.setup()

    def setup(self):
        pass
",,"
<h1 id=""non-slot-assignment-ple0237"">non-slot-assignment (PLE0237)<a class=""headerlink"" href=""#non-slot-assignment-ple0237"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/duplicate-bases/,PLE0241,duplicate-bases,Duplicate base <code>{base}</code> for class <code>{class}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for duplicate base classes in class definitions.
","Why is this bad?#
Including duplicate base classes will raise a TypeError at runtime.
","----neg----:
class Foo:
    pass


class Bar(Foo, Foo):
    pass
----pos----:
class Foo:
    pass


class Bar(Foo):
    pass
",,"
<h1 id=""duplicate-bases-ple0241"">duplicate-bases (PLE0241)<a class=""headerlink"" href=""#duplicate-bases-ple0241"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/compound_stmts.html#class-definitions"">Python documentation: Class definitions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unexpected-special-method-signature/,PLE0302,unexpected-special-method-signature,"The special method <code>{}</code> expects {}, {} {} given",Rule is stable,Automatic fix not available,"What it does#
Checks for ""special"" methods that have an unexpected method signature.
","Why is this bad?#
""Special"" methods, like __len__, are expected to adhere to a specific,
standard function signature. Implementing a ""special"" method using a
non-standard function signature can lead to unexpected and surprising
behavior for users of a given class.
","----neg----:
class Bookshelf:
    def __init__(self):
        self._books = [""Foo"", ""Bar"", ""Baz""]

    def __len__(self, index):  # __len__ does not except an index parameter
        return len(self._books)

    def __getitem__(self, index):
        return self._books[index]
----pos----:
class Bookshelf:
    def __init__(self):
        self._books = [""Foo"", ""Bar"", ""Baz""]

    def __len__(self):
        return len(self._books)

    def __getitem__(self, index):
        return self._books[index]
",,"
<h1 id=""unexpected-special-method-signature-ple0302"">unexpected-special-method-signature (PLE0302)<a class=""headerlink"" href=""#unexpected-special-method-signature-ple0302"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html"">Python documentation: Data model</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-bool-return-type/,PLE0304,invalid-bool-return-type,<code>__bool__</code> does not return <code>bool</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for __bool__ implementations that return a type other than bool.
","Why is this bad?#
The __bool__ method should return a bool object. Returning a different
type may cause unexpected behavior.
","----neg----:
class Foo:
    def __bool__(self):
        return 2
----pos----:
class Foo:
    def __bool__(self):
        return True
",,"
<h1 id=""invalid-bool-return-type-ple0304"">invalid-bool-return-type (PLE0304)<a class=""headerlink"" href=""#invalid-bool-return-type-ple0304"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#object.__bool__"">Python documentation: The <code>__bool__</code> method</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-str-return-type/,PLE0307,invalid-str-return-type,<code>__str__</code> does not return <code>str</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for __str__ implementations that return a type other than str.
","Why is this bad?#
The __str__ method should return a str object. Returning a different
type may cause unexpected behavior.
","----neg----:
class Foo:
    def __str__(self):
        return True
----pos----:
class Foo:
    def __str__(self):
        return ""Foo""
",,"
<h1 id=""invalid-str-return-type-ple0307"">invalid-str-return-type (PLE0307)<a class=""headerlink"" href=""#invalid-str-return-type-ple0307"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#object.__str__"">Python documentation: The <code>__str__</code> method</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-all-object/,PLE0604,invalid-all-object,"Invalid object in <code>__all__</code>, must contain only strings",Rule is stable,Automatic fix not available,"What it does#
Checks for the inclusion of invalid objects in __all__.
","Why is this bad?#
In Python, __all__ should contain a sequence of strings that represent
the names of all ""public"" symbols exported by a module.
Assigning anything other than a tuple or list of strings to __all__
is invalid.
","----neg----:
__all__ = [Foo, 1, None]
----pos----:
__all__ = [""Foo"", ""Bar"", ""Baz""]
",,"
<h1 id=""invalid-all-object-ple0604"">invalid-all-object (PLE0604)<a class=""headerlink"" href=""#invalid-all-object-ple0604"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-import-statement"">Python documentation: The <code>import</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-all-format/,PLE0605,invalid-all-format,"Invalid format for <code>__all__</code>, must be <code>tuple</code> or <code>list</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for invalid assignments to __all__.
","Why is this bad?#
In Python, __all__ should contain a sequence of strings that represent
the names of all ""public"" symbols exported by a module.
Assigning anything other than a tuple or list of strings to __all__
is invalid.
","----neg----:
__all__ = ""Foo""
----pos----:
__all__ = (""Foo"",)
",,"
<h1 id=""invalid-all-format-ple0605"">invalid-all-format (PLE0605)<a class=""headerlink"" href=""#invalid-all-format-ple0605"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-import-statement"">Python documentation: The <code>import</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/potential-index-error/,PLE0643,potential-index-error,Potential IndexError,Rule is in preview,Automatic fix not available,"What it does#
Checks for hard-coded sequence accesses that are known to be out of bounds.
","Why is this bad?#
Attempting to access a sequence with an out-of-bounds index will cause an
IndexError to be raised at runtime. When the sequence and index are
defined statically (e.g., subscripts on list and tuple literals, with
integer indexes), such errors can be detected ahead of time.
","print([0, 1, 2][3])
",,"
<h1 id=""potential-index-error-ple0643"">potential-index-error (PLE0643)<a class=""headerlink"" href=""#potential-index-error-ple0643"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/misplaced-bare-raise/,PLE0704,misplaced-bare-raise,Bare <code>raise</code> statement is not inside an exception handler,Rule is in preview,Automatic fix not available,"What it does#
Checks for bare raise statements outside of exception handlers.
","Why is this bad?#
A bare raise statement without an exception object will re-raise the last
exception that was active in the current scope, and is typically used
within an exception handler to re-raise the caught exception.
If a bare raise is used outside of an exception handler, it will generate
an error due to the lack of an active exception.
Note that a bare raise within a  finally block will work in some cases
(namely, when the exception is raised within the try block), but should
be avoided as it can lead to confusing behavior.
","----neg----:
from typing import Any


def is_some(obj: Any) -> bool:
    if obj is None:
        raise
----pos----:
from typing import Any


def is_some(obj: Any) -> bool:
    if obj is None:
        raise ValueError(""`obj` cannot be `None`"")
",,"
<h1 id=""misplaced-bare-raise-ple0704"">misplaced-bare-raise (PLE0704)<a class=""headerlink"" href=""#misplaced-bare-raise-ple0704"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/repeated-keyword-argument/,PLE1132,repeated-keyword-argument,Repeated keyword argument: <code>{duplicate_keyword}</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for repeated keyword arguments in function calls.
","Why is this bad?#
Python does not allow repeated keyword arguments in function calls. If a
function is called with the same keyword argument multiple times, the
interpreter will raise an exception.
","func(1, 2, c=3, **{""c"": 4})
",,"
<h1 id=""repeated-keyword-argument-ple1132"">repeated-keyword-argument (PLE1132)<a class=""headerlink"" href=""#repeated-keyword-argument-ple1132"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/glossary.html#term-argument"">Python documentation: Argument</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/dict-iter-missing-items/,PLE1141,dict-iter-missing-items,Unpacking a dictionary in iteration without calling <code>.items()</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for dictionary unpacking in a for loop without calling .items().
","Why is this bad?#
When iterating over a dictionary in a for loop, if a dictionary is unpacked
without calling .items(), it could lead to a runtime error if the keys are not
a tuple of two elements.
It is likely that you're looking for an iteration over (key, value) pairs which
can only be achieved when calling .items().
","----neg----:
data = {""Paris"": 2_165_423, ""New York City"": 8_804_190, ""Tokyo"": 13_988_129}

for city, population in data:
    print(f""{city} has population {population}."")
----pos----:
data = {""Paris"": 2_165_423, ""New York City"": 8_804_190, ""Tokyo"": 13_988_129}

for city, population in data.items():
    print(f""{city} has population {population}."")
",,"
<h1 id=""dict-iter-missing-items-ple1141"">dict-iter-missing-items (PLE1141)<a class=""headerlink"" href=""#dict-iter-missing-items-ple1141"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/await-outside-async/,PLE1142,await-outside-async,<code>await</code> should be used within an async function,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of await outside of async functions.
","Why is this bad?#
Using await outside of an async function is a syntax error.
","----neg----:
import asyncio


def foo():
    await asyncio.sleep(1)
----pos----:
import asyncio


async def foo():
    await asyncio.sleep(1)
",,"
<h1 id=""await-outside-async-ple1142"">await-outside-async (PLE1142)<a class=""headerlink"" href=""#await-outside-async-ple1142"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#await"">Python documentation: Await expression</a></li>
<li><a href=""https://peps.python.org/pep-0492/#await-expression"">PEP 492</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/logging-too-many-args/,PLE1205,logging-too-many-args,Too many arguments for <code>logging</code> format string,Rule is stable,Automatic fix not available,"What it does#
Checks for too many positional arguments for a logging format string.
","Why is this bad?#
A TypeError will be raised if the statement is run.
","----neg----:
import logging

try:
    function()
except Exception as e:
    logging.error(""Error occurred: %s"", type(e), e)
    raise
----pos----:
import logging

try:
    function()
except Exception as e:
    logging.error(""%s error occurred: %s"", type(e), e)
    raise
",,"
<h1 id=""logging-too-many-args-ple1205"">logging-too-many-args (PLE1205)<a class=""headerlink"" href=""#logging-too-many-args-ple1205"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/logging-too-few-args/,PLE1206,logging-too-few-args,Not enough arguments for <code>logging</code> format string,Rule is stable,Automatic fix not available,"What it does#
Checks for too few positional arguments for a logging format string.
","Why is this bad?#
A TypeError will be raised if the statement is run.
","----neg----:
import logging

try:
    function()
except Exception as e:
    logging.error(""%s error occurred: %s"", e)
    raise
----pos----:
import logging

try:
    function()
except Exception as e:
    logging.error(""%s error occurred: %s"", type(e), e)
    raise
",,"
<h1 id=""logging-too-few-args-ple1206"">logging-too-few-args (PLE1206)<a class=""headerlink"" href=""#logging-too-few-args-ple1206"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-string-format-character/,PLE1300,bad-string-format-character,Unsupported format character '{format_char}',Rule is stable,Automatic fix not available,"What it does#
Checks for unsupported format types in format strings.
","Why is this bad?#
An invalid format string character will result in an error at runtime.
","# `z` is not a valid format type.
print(""%z"" % ""1"")

print(""{:z}"".format(""1""))
",,"
<h1 id=""bad-string-format-character-ple1300"">bad-string-format-character (PLE1300)<a class=""headerlink"" href=""#bad-string-format-character-ple1300"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-string-format-type/,PLE1307,bad-string-format-type,Format type does not match argument type,Rule is stable,Automatic fix not available,"What it does#
Checks for mismatched argument types in ""old-style"" format strings.
","Why is this bad?#
The format string is not checked at compile time, so it is easy to
introduce bugs by mistyping the format string.
","----neg----:
print(""%d"" % ""1"")
----pos----:
print(""%d"" % 1)
",,"
<h1 id=""bad-string-format-type-ple1307"">bad-string-format-type (PLE1307)<a class=""headerlink"" href=""#bad-string-format-type-ple1307"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-str-strip-call/,PLE1310,bad-str-strip-call,String <code>{strip}</code> call contains duplicate characters (did you mean <code>{removal}</code>?),Rule is stable,Automatic fix not available,"What it does#
Checks duplicate characters in str.strip calls.
","Why is this bad?#
All characters in str.strip calls are removed from both the leading and
trailing ends of the string. Including duplicate characters in the call
is redundant and often indicative of a mistake.
In Python 3.9 and later, you can use str.removeprefix and
str.removesuffix to remove an exact prefix or suffix from a string,
respectively, which should be preferred when possible.
","----neg----:
# Evaluates to ""foo"".
""bar foo baz"".strip(""bar baz "")
----pos----:
# Evaluates to ""foo"".
""bar foo baz"".strip(""abrz "")  # ""foo""
----other----:
Or:
# Evaluates to ""foo"".
""bar foo baz"".removeprefix(""bar "").removesuffix("" baz"")

","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""bad-str-strip-call-ple1310"">bad-str-strip-call (PLE1310)<a class=""headerlink"" href=""#bad-str-strip-call-ple1310"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.strip"">Python documentation: <code>str.strip</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-envvar-value/,PLE1507,invalid-envvar-value,Invalid type for initial <code>os.getenv</code> argument; expected <code>str</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for os.getenv calls with an invalid key argument.
","Why is this bad?#
os.getenv only supports strings as the first argument (key).
If the provided argument is not a string, os.getenv will throw a
TypeError at runtime.
","----neg----:
os.getenv(1)
----pos----:
os.getenv(""1"")
",,"
<h1 id=""invalid-envvar-value-ple1507"">invalid-envvar-value (PLE1507)<a class=""headerlink"" href=""#invalid-envvar-value-ple1507"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/singledispatch-method/,PLE1519,singledispatch-method,<code>@singledispatch</code> decorator should not be used on methods,Rule is in preview,Automatic fix available,"What it does#
Checks for @singledispatch decorators on class and instance methods.
","Why is this bad?#
The @singledispatch decorator is intended for use with functions, not methods.
Instead, use the @singledispatchmethod decorator, or migrate the method to a
standalone function or @staticmethod.
","----neg----:
from functools import singledispatch


class Class:
    @singledispatch
    def method(self, arg):
        ...
----pos----:
from functools import singledispatchmethod


class Class:
    @singledispatchmethod
    def method(self, arg):
        ...
----other----:
This rule's fix is marked as unsafe, as migrating from @singledispatch to
@singledispatchmethod may change the behavior of the code.
",,"
<h1 id=""singledispatch-method-ple1519"">singledispatch-method (PLE1519)<a class=""headerlink"" href=""#singledispatch-method-ple1519"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/singledispatchmethod-function/,PLE1520,singledispatchmethod-function,<code>@singledispatchmethod</code> decorator should not be used on non-method functions,Rule is in preview,Automatic fix available,"What it does#
Checks for @singledispatchmethod decorators on functions or static
methods.
","Why is this bad?#
The @singledispatchmethod decorator is intended for use with class and
instance methods, not functions.
Instead, use the @singledispatch decorator.
","----neg----:
from functools import singledispatchmethod


@singledispatchmethod
def func(arg):
    ...
----pos----:
from functools import singledispatchmethod


@singledispatch
def func(arg):
    ...
----other----:
This rule's fix is marked as unsafe, as migrating from @singledispatchmethod to
@singledispatch may change the behavior of the code.
",,"
<h1 id=""singledispatchmethod-function-ple1520"">singledispatchmethod-function (PLE1520)<a class=""headerlink"" href=""#singledispatchmethod-function-ple1520"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/yield-from-in-async-function/,PLE1700,yield-from-in-async-function,<code>yield from</code> statement in async function; use <code>async for</code> instead,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of yield from in async functions.
","Why is this bad?#
Python doesn't support the use of yield from in async functions, and will
raise a SyntaxError in such cases.
Instead, considering refactoring the code to use an async for loop instead.
","----neg----:
async def numbers():
    yield from [1, 2, 3, 4, 5]
----pos----:
async def numbers():
    async for number in [1, 2, 3, 4, 5]:
        yield number
",,"
<h1 id=""yield-from-in-async-function-ple1700"">yield-from-in-async-function (PLE1700)<a class=""headerlink"" href=""#yield-from-in-async-function-ple1700"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bidirectional-unicode/,PLE2502,bidirectional-unicode,Contains control characters that can permit obfuscated code,Rule is stable,Automatic fix not available,"What it does#
Checks for bidirectional unicode characters.
","Why is this bad?#
The interaction between bidirectional unicode characters and the
surrounding code can be surprising to those that are unfamiliar
with right-to-left writing systems.
In some cases, bidirectional unicode characters can also be used to
obfuscate code and introduce or mask security vulnerabilities.
","s = ""א"" * 100  #  ""א"" is assigned
print(s)  # prints a 100-character string
",,"
<h1 id=""bidirectional-unicode-ple2502"">bidirectional-unicode (PLE2502)<a class=""headerlink"" href=""#bidirectional-unicode-ple2502"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0672/#bidirectional-text"">PEP 672</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-character-backspace/,PLE2510,invalid-character-backspace,"Invalid unescaped character backspace, use ""\b"" instead",Rule is stable,Automatic fix available,"What it does#
Checks for strings that contain the control character BS.
","Why is this bad?#
Control characters are displayed differently by different text editors and
terminals.
By using the \b sequence in lieu of the BS control character, the
string will contain the same value, but will render visibly in all editors.
","----neg----:
x = """"
----pos----:
x = ""\b""
",,"
<h1 id=""invalid-character-backspace-ple2510"">invalid-character-backspace (PLE2510)<a class=""headerlink"" href=""#invalid-character-backspace-ple2510"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-character-sub/,PLE2512,invalid-character-sub,"Invalid unescaped character SUB, use ""\x1A"" instead",Rule is stable,Automatic fix available,"What it does#
Checks for strings that contain the raw control character SUB.
","Why is this bad?#
Control characters are displayed differently by different text editors and
terminals.
By using the \x1A sequence in lieu of the SUB control character, the
string will contain the same value, but will render visibly in all editors.
","----neg----:
x = """"
----pos----:
x = ""\x1A""
",,"
<h1 id=""invalid-character-sub-ple2512"">invalid-character-sub (PLE2512)<a class=""headerlink"" href=""#invalid-character-sub-ple2512"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-character-esc/,PLE2513,invalid-character-esc,"Invalid unescaped character ESC, use ""\x1B"" instead",Rule is stable,Automatic fix available,"What it does#
Checks for strings that contain the raw control character ESC.
","Why is this bad?#
Control characters are displayed differently by different text editors and
terminals.
By using the \x1B sequence in lieu of the SUB control character, the
string will contain the same value, but will render visibly in all editors.
","----neg----:
x = """"
----pos----:
x = ""\x1B""
",,"
<h1 id=""invalid-character-esc-ple2513"">invalid-character-esc (PLE2513)<a class=""headerlink"" href=""#invalid-character-esc-ple2513"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-character-nul/,PLE2514,invalid-character-nul,"Invalid unescaped character NUL, use ""\0"" instead",Rule is stable,Automatic fix available,"What it does#
Checks for strings that contain the raw control character NUL (0 byte).
","Why is this bad?#
Control characters are displayed differently by different text editors and
terminals.
By using the \0 sequence in lieu of the NUL control character, the
string will contain the same value, but will render visibly in all editors.
","----neg----:
x = """"
----pos----:
x = ""\0""
",,"
<h1 id=""invalid-character-nul-ple2514"">invalid-character-nul (PLE2514)<a class=""headerlink"" href=""#invalid-character-nul-ple2514"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-character-zero-width-space/,PLE2515,invalid-character-zero-width-space,"Invalid unescaped character zero-width-space, use ""\u200B"" instead",Rule is stable,Automatic fix available,"What it does#
Checks for strings that contain the zero width space character.
","Why is this bad?#
This character is rendered invisibly in some text editors and terminals.
By using the \u200B sequence, the string will contain the same value,
but will render visibly in all editors.
","----neg----:
x = ""Dear Sir/Madam""
----pos----:
x = ""Dear Sir\u200B/\u200BMadam""  # zero width space
",,"
<h1 id=""invalid-character-zero-width-space-ple2515"">invalid-character-zero-width-space (PLE2515)<a class=""headerlink"" href=""#invalid-character-zero-width-space-ple2515"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/comparison-with-itself/,PLR0124,comparison-with-itself,"Name compared with itself, consider replacing <code>{actual}</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for operations that compare a name to itself.
","Why is this bad?#
Comparing a name to itself always results in the same value, and is likely
a mistake.
","----neg----:
foo == foo
----pos----:
In some cases, self-comparisons are used to determine whether a float is
NaN. Instead, prefer math.isnan:----other----:

import math

math.isnan(foo)

",,"
<h1 id=""comparison-with-itself-plr0124"">comparison-with-itself (PLR0124)<a class=""headerlink"" href=""#comparison-with-itself-plr0124"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/comparison-of-constant/,PLR0133,comparison-of-constant,"Two constants compared in a comparison, consider replacing <code>{left_constant} {} {right_constant}</code>",Rule is stable,Automatic fix not available,"What it does#
Checks for comparisons between constants.
","Why is this bad?#
Comparing two constants will always resolve to the same value, so the
comparison is redundant. Instead, the expression should be replaced
with the result of the comparison.
","----neg----:
foo = 1 == 1
----pos----:
foo = True
",,"
<h1 id=""comparison-of-constant-plr0133"">comparison-of-constant (PLR0133)<a class=""headerlink"" href=""#comparison-of-constant-plr0133"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-classmethod-decorator/,PLR0202,no-classmethod-decorator,Class method defined without decorator,Rule is in preview,Automatic fix available,"What it does#
Checks for the use of a classmethod being made without the decorator.
","Why is this bad?#
When it comes to consistency and readability, it's preferred to use the decorator.
","----neg----:
class Foo:
    def bar(cls):
        ...

    bar = classmethod(bar)
----pos----:
class Foo:
    @classmethod
    def bar(cls):
        ...
",,"
<h1 id=""no-classmethod-decorator-plr0202"">no-classmethod-decorator (PLR0202)<a class=""headerlink"" href=""#no-classmethod-decorator-plr0202"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/no-staticmethod-decorator/,PLR0203,no-staticmethod-decorator,Static method defined without decorator,Rule is in preview,Automatic fix available,"What it does#
Checks for the use of a staticmethod being made without the decorator.
","Why is this bad?#
When it comes to consistency and readability, it's preferred to use the decorator.
","----neg----:
class Foo:
    def bar(arg1, arg2):
        ...

    bar = staticmethod(bar)
----pos----:
class Foo:
    @staticmethod
    def bar(arg1, arg2):
        ...
",,"
<h1 id=""no-staticmethod-decorator-plr0203"">no-staticmethod-decorator (PLR0203)<a class=""headerlink"" href=""#no-staticmethod-decorator-plr0203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/property-with-parameters/,PLR0206,property-with-parameters,Cannot have defined parameters for properties,Rule is stable,Automatic fix not available,"What it does#
Checks for property definitions that accept function parameters.
","Why is this bad?#
Properties cannot be called with parameters.
If you need to pass parameters to a property, create a method with the
desired parameters and call that method instead.
","----neg----:
class Cat:
    @property
    def purr(self, volume):
        ...
----pos----:
class Cat:
    @property
    def purr(self):
        ...

    def purr_volume(self, volume):
        ...
",,"
<h1 id=""property-with-parameters-plr0206"">property-with-parameters (PLR0206)<a class=""headerlink"" href=""#property-with-parameters-plr0206"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#property"">Python documentation: <code>property</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/manual-from-import/,PLR0402,manual-from-import,Use <code>from {module} import {name}</code> in lieu of alias,Rule is stable,Automatic fix available,"What it does#
Checks for submodule imports that are aliased to the submodule name.
","Why is this bad?#
Using the from keyword to import the submodule is more concise and
readable.
","----neg----:
import concurrent.futures as futures
----pos----:
from concurrent import futures
",,"
<h1 id=""manual-from-import-plr0402"">manual-from-import (PLR0402)<a class=""headerlink"" href=""#manual-from-import-plr0402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/import.html#submodules"">Python documentation: Submodules</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/too-many-public-methods/,PLR0904,too-many-public-methods,Too many public methods ({methods} > {max_methods}),Rule is in preview,Automatic fix not available,"What it does#
Checks for classes with too many public methods
By default, this rule allows up to 20 public methods, as configured by
the lint.pylint.max-public-methods option.
","Why is this bad?#
Classes with many public methods are harder to understand
and maintain.
Instead, consider refactoring the class into separate classes.
","----neg----:
None----pos----:
None----other----:
Assuming that pylint.max-public-settings is set to 5:
class Linter:
    def __init__(self):
        pass

    def pylint(self):
        pass

    def pylint_settings(self):
        pass

    def flake8(self):
        pass

    def flake8_settings(self):
        pass

    def pydocstyle(self):
        pass

    def pydocstyle_settings(self):
        pass

class Linter:
    def __init__(self):
        self.pylint = Pylint()
        self.flake8 = Flake8()
        self.pydocstyle = Pydocstyle()

    def lint(self):
        pass


class Pylint:
    def lint(self):
        pass

    def settings(self):
        pass


class Flake8:
    def lint(self):
        pass

    def settings(self):
        pass


class Pydocstyle:
    def lint(self):
        pass

    def settings(self):
        pass
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-public-methods
lint.pylint.max-public-methods
None","
<h1 id=""too-many-public-methods-plr0904"">too-many-public-methods (PLR0904)<a class=""headerlink"" href=""#too-many-public-methods-plr0904"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/too-many-return-statements/,PLR0911,too-many-return-statements,Too many return statements ({returns} > {max_returns}),Rule is stable,Automatic fix not available,"What it does#
Checks for functions or methods with too many return statements.
By default, this rule allows up to six return statements, as configured by
the lint.pylint.max-returns option.
","Why is this bad?#
Functions or methods with many return statements are harder to understand
and maintain, and often indicative of complex logic.
","----neg----:
def capital(country: str) -> str | None:
    if country == ""England"":
        return ""London""
    elif country == ""France"":
        return ""Paris""
    elif country == ""Poland"":
        return ""Warsaw""
    elif country == ""Romania"":
        return ""Bucharest""
    elif country == ""Spain"":
        return ""Madrid""
    elif country == ""Thailand"":
        return ""Bangkok""
    else:
        return None
----pos----:
def capital(country: str) -> str | None:
    capitals = {
        ""England"": ""London"",
        ""France"": ""Paris"",
        ""Poland"": ""Warsaw"",
        ""Romania"": ""Bucharest"",
        ""Spain"": ""Madrid"",
        ""Thailand"": ""Bangkok"",
    }
    return capitals.get(country)
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-returns
lint.pylint.max-returns
None","
<h1 id=""too-many-return-statements-plr0911"">too-many-return-statements (PLR0911)<a class=""headerlink"" href=""#too-many-return-statements-plr0911"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/too-many-branches/,PLR0912,too-many-branches,Too many branches ({branches} > {max_branches}),Rule is stable,Automatic fix not available,"What it does#
Checks for functions or methods with too many branches.
By default, this rule allows up to 12 branches. This can be configured
using the lint.pylint.max-branches option.
","Why is this bad?#
Functions or methods with many branches are harder to understand
and maintain than functions or methods with fewer branches.
","----neg----:
def capital(country):
    if country == ""Australia"":
        return ""Canberra""
    elif country == ""Brazil"":
        return ""Brasilia""
    elif country == ""Canada"":
        return ""Ottawa""
    elif country == ""England"":
        return ""London""
    elif country == ""France"":
        return ""Paris""
    elif country == ""Germany"":
        return ""Berlin""
    elif country == ""Poland"":
        return ""Warsaw""
    elif country == ""Romania"":
        return ""Bucharest""
    elif country == ""Spain"":
        return ""Madrid""
    elif country == ""Thailand"":
        return ""Bangkok""
    elif country == ""Turkey"":
        return ""Ankara""
    elif country == ""United States"":
        return ""Washington""
    else:
        return ""Unknown""  # 13th branch
----pos----:
def capital(country):
    capitals = {
        ""Australia"": ""Canberra"",
        ""Brazil"": ""Brasilia"",
        ""Canada"": ""Ottawa"",
        ""England"": ""London"",
        ""France"": ""Paris"",
        ""Germany"": ""Berlin"",
        ""Poland"": ""Warsaw"",
        ""Romania"": ""Bucharest"",
        ""Spain"": ""Madrid"",
        ""Thailand"": ""Bangkok"",
        ""Turkey"": ""Ankara"",
        ""United States"": ""Washington"",
    }
    city = capitals.get(country, ""Unknown"")
    return city
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-branches
lint.pylint.max-branches
None","
<h1 id=""too-many-branches-plr0912"">too-many-branches (PLR0912)<a class=""headerlink"" href=""#too-many-branches-plr0912"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/too-many-arguments/,PLR0913,too-many-arguments,Too many arguments in function definition ({c_args} > {max_args}),Rule is stable,Automatic fix not available,"What it does#
Checks for function definitions that include too many arguments.
By default, this rule allows up to five arguments, as configured by the
lint.pylint.max-args option.
","Why is this bad?#
Functions with many arguments are harder to understand, maintain, and call.
Consider refactoring functions with many arguments into smaller functions
with fewer arguments, or using objects to group related arguments.
","----neg----:
def calculate_position(x_pos, y_pos, z_pos, x_vel, y_vel, z_vel, time):
    new_x = x_pos + x_vel * time
    new_y = y_pos + y_vel * time
    new_z = z_pos + z_vel * time
    return new_x, new_y, new_z
----pos----:
from typing import NamedTuple


class Vector(NamedTuple):
    x: float
    y: float
    z: float


def calculate_position(pos: Vector, vel: Vector, time: float) -> Vector:
    return Vector(*(p + v * time for p, v in zip(pos, vel)))
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-args
lint.pylint.max-args
None","
<h1 id=""too-many-arguments-plr0913"">too-many-arguments (PLR0913)<a class=""headerlink"" href=""#too-many-arguments-plr0913"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/too-many-locals/,PLR0914,too-many-locals,Too many local variables ({current_amount}/{max_amount}),Rule is in preview,Automatic fix not available,"What it does#
Checks for functions that include too many local variables.
By default, this rule allows up to fifteen locals, as configured by the
lint.pylint.max-locals option.
","Why is this bad?#
Functions with many local variables are harder to understand and maintain.
Consider refactoring functions with many local variables into smaller
functions with fewer assignments.
",,"https://docs.astral.sh/ruff/settings/#lint_pylint_max-locals
lint.pylint.max-locals
None","
<h1 id=""too-many-locals-plr0914"">too-many-locals (PLR0914)<a class=""headerlink"" href=""#too-many-locals-plr0914"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/too-many-statements/,PLR0915,too-many-statements,Too many statements ({statements} > {max_statements}),Rule is stable,Automatic fix not available,"What it does#
Checks for functions or methods with too many statements.
By default, this rule allows up to 50 statements, as configured by the
lint.pylint.max-statements option.
","Why is this bad?#
Functions or methods with many statements are harder to understand
and maintain.
Instead, consider refactoring the function or method into smaller
functions or methods, or identifying generalizable patterns and
replacing them with generic logic or abstractions.
","----neg----:
def is_even(number: int) -> bool:
    if number == 0:
        return True
    elif number == 1:
        return False
    elif number == 2:
        return True
    elif number == 3:
        return False
    elif number == 4:
        return True
    elif number == 5:
        return False
    else:
        ...
----pos----:
def is_even(number: int) -> bool:
    return number % 2 == 0
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-statements
lint.pylint.max-statements
None","
<h1 id=""too-many-statements-plr0915"">too-many-statements (PLR0915)<a class=""headerlink"" href=""#too-many-statements-plr0915"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/too-many-boolean-expressions/,PLR0916,too-many-boolean-expressions,Too many Boolean expressions ({expressions} > {max_expressions}),Rule is in preview,Automatic fix not available,"What it does#
Checks for too many Boolean expressions in an if statement.
By default, this rule allows up to 5 expressions. This can be configured
using the lint.pylint.max-bool-expr option.
","Why is this bad?#
if statements with many Boolean expressions are harder to understand
and maintain. Consider assigning the result of the Boolean expression,
or any of its sub-expressions, to a variable.
","if a and b and c and d and e and f and g and h:
    ...
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-bool-expr
lint.pylint.max-bool-expr
None","
<h1 id=""too-many-boolean-expressions-plr0916"">too-many-boolean-expressions (PLR0916)<a class=""headerlink"" href=""#too-many-boolean-expressions-plr0916"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/too-many-positional/,PLR0917,too-many-positional,Too many positional arguments ({c_pos}/{max_pos}),Rule is in preview,Automatic fix not available,"What it does#
Checks for function definitions that include too many positional arguments.
By default, this rule allows up to five arguments, as configured by the
lint.pylint.max-positional-args option.
","Why is this bad?#
Functions with many arguments are harder to understand, maintain, and call.
This is especially true for functions with many positional arguments, as
providing arguments positionally is more error-prone and less clear to
readers than providing arguments by name.
Consider refactoring functions with many arguments into smaller functions
with fewer arguments, using objects to group related arguments, or
migrating to keyword-only arguments.
","----neg----:
def plot(x, y, z, color, mark, add_trendline):
    ...


plot(1, 2, 3, ""r"", ""*"", True)
----pos----:
def plot(x, y, z, *, color, mark, add_trendline):
    ...


plot(1, 2, 3, color=""r"", mark=""*"", add_trendline=True)
","https://docs.astral.sh/ruff/settings/#lint_pylint_max-positional-args
lint.pylint.max-positional-args
None","
<h1 id=""too-many-positional-plr0917"">too-many-positional (PLR0917)<a class=""headerlink"" href=""#too-many-positional-plr0917"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/repeated-isinstance-calls/,PLR1701,repeated-isinstance-calls,Merge <code>isinstance</code> calls: <code>{expression}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for repeated isinstance calls on the same object.
","Why is this bad?#
Repeated isinstance calls on the same object can be merged into a
single call.
","----neg----:
def is_number(x):
    return isinstance(x, int) or isinstance(x, float) or isinstance(x, complex)
----pos----:
def is_number(x):
    return isinstance(x, (int, float, complex))
----other----:
Or, for Python 3.10 and later:
def is_number(x):
    return isinstance(x, int | float | complex)

","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""repeated-isinstance-calls-plr1701"">repeated-isinstance-calls (PLR1701)<a class=""headerlink"" href=""#repeated-isinstance-calls-plr1701"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#isinstance"">Python documentation: <code>isinstance</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/too-many-nested-blocks/,PLR1702,too-many-nested-blocks,Too many nested blocks ({nested_blocks} > {max_nested_blocks}),Rule is in preview,Automatic fix not available,"What it does#
Checks for functions or methods with too many nested blocks.
By default, this rule allows up to five nested blocks.
This can be configured using the lint.pylint.max-nested-blocks option.
","Why is this bad?#
Functions or methods with too many nested blocks are harder to understand
and maintain.
",,"https://docs.astral.sh/ruff/settings/#lint_pylint_max-nested-blocks
lint.pylint.max-nested-blocks
None","
<h1 id=""too-many-nested-blocks-plr1702"">too-many-nested-blocks (PLR1702)<a class=""headerlink"" href=""#too-many-nested-blocks-plr1702"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/redefined-argument-from-local/,PLR1704,redefined-argument-from-local,Redefining argument with the local name <code>{name}</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for variables defined in for, try, with statements
that redefine function parameters.
","Why is this bad?#
Redefined variables can cause unexpected behavior because of overridden function parameters.
If nested functions are declared, an inner function's body can override an outer function's parameters.
","----neg----:
def show(host_id=10.11):
    for host_id, host in [[12.13, ""Venus""], [14.15, ""Mars""]]:
        print(host_id, host)
----pos----:
def show(host_id=10.11):
    for inner_host_id, host in [[12.13, ""Venus""], [14.15, ""Mars""]]:
        print(host_id, inner_host_id, host)
",,"
<h1 id=""redefined-argument-from-local-plr1704"">redefined-argument-from-local (PLR1704)<a class=""headerlink"" href=""#redefined-argument-from-local-plr1704"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pylint.readthedocs.io/en/latest/user_guide/messages/refactor/redefined-argument-from-local.html"">Pylint documentation</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/and-or-ternary/,PLR1706,and-or-ternary,"<span style=""opacity: 0.5"" title=""This rule has been removed"">Consider using if-else expression</span>",Rule has been removed,Automatic fix not available,"What it does#
Checks for uses of the known pre-Python 2.5 ternary syntax.
","Why is this bad?#
Prior to the introduction of the if-expression (ternary) operator in Python
2.5, the only way to express a conditional expression was to use the and
and or operators.
The if-expression construct is clearer and more explicit, and should be
preferred over the use of and and or for ternary expressions.
","----neg----:
x, y = 1, 2
maximum = x >= y and x or y
----pos----:
x, y = 1, 2
maximum = x if x >= y else y
",,"
<h1 id=""and-or-ternary-plr1706"">and-or-ternary (PLR1706)<a class=""headerlink"" href=""#and-or-ternary-plr1706"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<h2 id=""removal"">Removal<a class=""headerlink"" href=""#removal"" title=""Permanent link"">#</a></h2>
<p>This rule was removed from Ruff because it was common for it to introduce behavioral changes.
See <a href=""https://github.com/astral-sh/ruff/issues/9007"">#9007</a> for more information.</p>
"
https://docs.astral.sh/ruff/rules/useless-return/,PLR1711,useless-return,Useless <code>return</code> statement at end of function,Rule is stable,Automatic fix available,"What it does#
Checks for functions that end with an unnecessary return or
return None, and contain no other return statements.
","Why is this bad?#
Python implicitly assumes a None return at the end of a function, making
it unnecessary to explicitly write return None.
","----neg----:
def f():
    print(5)
    return None
----pos----:
def f():
    print(5)
",,"
<h1 id=""useless-return-plr1711"">useless-return (PLR1711)<a class=""headerlink"" href=""#useless-return-plr1711"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/repeated-equality-comparison/,PLR1714,repeated-equality-comparison,Consider merging multiple comparisons: <code>{expression}</code>. Use a <code>set</code> if the elements are hashable.,Rule is stable,Automatic fix available,"What it does#
Checks for repeated equality comparisons that can rewritten as a membership
test.
","Why is this bad?#
To check if a variable is equal to one of many values, it is common to
write a series of equality comparisons (e.g.,
foo == ""bar"" or foo == ""baz"").
Instead, prefer to combine the values into a collection and use the in
operator to check for membership, which is more performant and succinct.
If the items are hashable, use a set for efficiency; otherwise, use a
tuple.
","----neg----:
foo == ""bar"" or foo == ""baz"" or foo == ""qux""
----pos----:
foo in {""bar"", ""baz"", ""qux""}
",,"
<h1 id=""repeated-equality-comparison-plr1714"">repeated-equality-comparison (PLR1714)<a class=""headerlink"" href=""#repeated-equality-comparison-plr1714"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#membership-test-operations"">Python documentation: Membership test operations</a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#set"">Python documentation: <code>set</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/sys-exit-alias/,PLR1722,sys-exit-alias,Use <code>sys.exit()</code> instead of <code>{name}</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of the exit() and quit().
","Why is this bad?#
exit and quit come from the site module, which is typically imported
automatically during startup. However, it is not guaranteed to be
imported, and so using these functions may result in a NameError at
runtime. Generally, these constants are intended to be used in an interactive
interpreter, and not in programs.
Prefer sys.exit(), as the sys module is guaranteed to exist in all
contexts.
","----neg----:
if __name__ == ""__main__"":
    exit()
----pos----:
import sys

if __name__ == ""__main__"":
    sys.exit()
",,"
<h1 id=""sys-exit-alias-plr1722"">sys-exit-alias (PLR1722)<a class=""headerlink"" href=""#sys-exit-alias-plr1722"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module"">Python documentation: Constants added by the <code>site</code> module</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-dict-index-lookup/,PLR1733,unnecessary-dict-index-lookup,Unnecessary lookup of dictionary value by key,Rule is in preview,Automatic fix available,"What it does#
Checks for key-based dict accesses during .items() iterations.
","Why is this bad?#
When iterating over a dict via .items(), the current value is already
available alongside its key. Using the key to look up the value is
unnecessary.
","----neg----:
FRUITS = {""apple"": 1, ""orange"": 10, ""berry"": 22}

for fruit_name, fruit_count in FRUITS.items():
    print(FRUITS[fruit_name])
----pos----:
FRUITS = {""apple"": 1, ""orange"": 10, ""berry"": 22}

for fruit_name, fruit_count in FRUITS.items():
    print(fruit_count)
",,"
<h1 id=""unnecessary-dict-index-lookup-plr1733"">unnecessary-dict-index-lookup (PLR1733)<a class=""headerlink"" href=""#unnecessary-dict-index-lookup-plr1733"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-list-index-lookup/,PLR1736,unnecessary-list-index-lookup,Unnecessary lookup of list item by index,Rule is in preview,Automatic fix available,"What it does#
Checks for index-based list accesses during enumerate iterations.
","Why is this bad?#
When iterating over a list with enumerate, the current item is already
available alongside its index. Using the index to look up the item is
unnecessary.
","----neg----:
letters = [""a"", ""b"", ""c""]

for index, letter in enumerate(letters):
    print(letters[index])
----pos----:
letters = [""a"", ""b"", ""c""]

for index, letter in enumerate(letters):
    print(letter)
",,"
<h1 id=""unnecessary-list-index-lookup-plr1736"">unnecessary-list-index-lookup (PLR1736)<a class=""headerlink"" href=""#unnecessary-list-index-lookup-plr1736"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/magic-value-comparison/,PLR2004,magic-value-comparison,"Magic value used in comparison, consider replacing <code>{value}</code> with a constant variable",Rule is stable,Automatic fix not available,"What it does#
Checks for the use of unnamed numerical constants (""magic"") values in
comparisons.
","Why is this bad?#
The use of ""magic"" values can make code harder to read and maintain, as
readers will have to infer the meaning of the value from the context.
Such values are discouraged by PEP 8.
For convenience, this rule excludes a variety of common values from the
""magic"" value definition, such as 0, 1, """", and ""__main__"".
","----neg----:
def apply_discount(price: float) -> float:
    if price <= 100:
        return price / 2
    else:
        return price
----pos----:
MAX_DISCOUNT = 100


def apply_discount(price: float) -> float:
    if price <= MAX_DISCOUNT:
        return price / 2
    else:
        return price
",,"
<h1 id=""magic-value-comparison-plr2004"">magic-value-comparison (PLR2004)<a class=""headerlink"" href=""#magic-value-comparison-plr2004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/empty-comment/,PLR2044,empty-comment,Line with empty comment,Rule is in preview,Automatic fix available,"What it does#
Checks for a # symbol appearing on a line not followed by an actual comment.
","Why is this bad?#
Empty comments don't provide any clarity to the code, and just add clutter.
Either add a comment or delete the empty comment.
","----neg----:
class Foo:  #
    pass
----pos----:
class Foo:
    pass
",,"
<h1 id=""empty-comment-plr2044"">empty-comment (PLR2044)<a class=""headerlink"" href=""#empty-comment-plr2044"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://pylint.pycqa.org/en/latest/user_guide/messages/refactor/empty-comment.html"">Pylint documentation</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/collapsible-else-if/,PLR5501,collapsible-else-if,"Use <code>elif</code> instead of <code>else</code> then <code>if</code>, to reduce indentation",Rule is stable,Automatic fix available,"What it does#
Checks for else blocks that consist of a single if statement.
","Why is this bad?#
If an else block contains a single if statement, it can be collapsed
into an elif, thus reducing the indentation level.
","----neg----:
def check_sign(value: int) -> None:
    if value > 0:
        print(""Number is positive."")
    else:
        if value < 0:
            print(""Number is negative."")
        else:
            print(""Number is zero."")
----pos----:
def check_sign(value: int) -> None:
    if value > 0:
        print(""Number is positive."")
    elif value < 0:
        print(""Number is negative."")
    else:
        print(""Number is zero."")
",,"
<h1 id=""collapsible-else-if-plr5501"">collapsible-else-if (PLR5501)<a class=""headerlink"" href=""#collapsible-else-if-plr5501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/controlflow.html#if-statements"">Python documentation: <code>if</code> Statements</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/literal-membership/,PLR6201,literal-membership,Use a <code>set</code> literal when testing for membership,Rule is in preview,Automatic fix available,"What it does#
Checks for membership tests on list and tuple literals.
","Why is this bad?#
When testing for membership in a static sequence, prefer a set literal
over a list or tuple, as Python optimizes set membership tests.
","----neg----:
1 in [1, 2, 3]
----pos----:
1 in {1, 2, 3}
----other----:
This rule's fix is marked as unsafe, as the use of a set literal will
error at runtime if the sequence contains unhashable elements (like lists
or dictionaries). While Ruff will attempt to infer the hashability of the
elements, it may not always be able to do so.
",,"
<h1 id=""literal-membership-plr6201"">literal-membership (PLR6201)<a class=""headerlink"" href=""#literal-membership-plr6201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/whatsnew/3.2.html#optimizations"">What’s New In Python 3.2</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/no-self-use/,PLR6301,no-self-use,"Method <code>{method_name}</code> could be a function, class method, or static method",Rule is in preview,Automatic fix not available,"What it does#
Checks for the presence of unused self parameter in methods definitions.
","Why is this bad?#
Unused self parameters are usually a sign of a method that could be
replaced by a function, class method, or static method.
","----neg----:
class Person:
    def greeting(self):
        print(""Greetings friend!"")
----pos----:
def greeting():
    print(""Greetings friend!"")
",,"
<h1 id=""no-self-use-plr6301"">no-self-use (PLR6301)<a class=""headerlink"" href=""#no-self-use-plr6301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-lambda/,PLW0108,unnecessary-lambda,Lambda may be unnecessary; consider inlining inner function,Rule is in preview,Automatic fix available,"What it does#
Checks for lambda definitions that consist of a single function call
with the same arguments as the lambda itself.
","Why is this bad?#
When a lambda is used to wrap a function call, and merely propagates
the lambda arguments to that function, it can typically be replaced with
the function itself, removing a level of indirection.
","----neg----:
df.apply(lambda x: str(x))
----pos----:
df.apply(str)
----other----:
This rule's fix is marked as unsafe in cases in which the lambda body itself
contains an effect.
For example, replacing lambda x, y: (func()(x, y)) with func() would
lead to a change in behavior, as func() would be evaluated eagerly when
defining the lambda, rather than when the lambda is called.
When the lambda body contains no visible effects, the fix is considered
safe.
",,"
<h1 id=""unnecessary-lambda-plw0108"">unnecessary-lambda (PLW0108)<a class=""headerlink"" href=""#unnecessary-lambda-plw0108"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/nan-comparison/,PLW0117,nan-comparison,Comparing against a NaN value; use <code>math.isnan</code> instead,Rule is in preview,Automatic fix not available,"What it does#
Checks for comparisons against NaN values.
","Why is this bad?#
Comparing against a NaN value can lead to unexpected results. For example,
float(""NaN"") == float(""NaN"") will return False and, in general,
x == float(""NaN"") will always return False, even if x is NaN.
To determine whether a value is NaN, use math.isnan or np.isnan
instead of comparing against NaN directly.
","----neg----:
if x == float(""NaN""):
    pass
----pos----:
import math

if math.isnan(x):
    pass
",,"
<h1 id=""nan-comparison-plw0117"">nan-comparison (PLW0117)<a class=""headerlink"" href=""#nan-comparison-plw0117"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/useless-else-on-loop/,PLW0120,useless-else-on-loop,<code>else</code> clause on loop without a <code>break</code> statement; remove the <code>else</code> and dedent its contents,Rule is stable,Automatic fix available,"What it does#
Checks for else clauses on loops without a break statement.
","Why is this bad?#
When a loop includes an else statement, the code inside the else clause
will be executed if the loop terminates ""normally"" (i.e., without a
break).
If a loop always terminates ""normally"" (i.e., does not contain a
break), then the else clause is redundant, as the code inside the
else clause will always be executed.
In such cases, the code inside the else clause can be moved outside the
loop entirely, and the else clause can be removed.
","----neg----:
for item in items:
    print(item)
else:
    print(""All items printed"")
----pos----:
for item in items:
    print(item)
print(""All items printed"")
",,"
<h1 id=""useless-else-on-loop-plw0120"">useless-else-on-loop (PLW0120)<a class=""headerlink"" href=""#useless-else-on-loop-plw0120"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops"">Python documentation: <code>break</code> and <code>continue</code> Statements, and <code>else</code> Clauses on Loops</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/self-assigning-variable/,PLW0127,self-assigning-variable,Self-assignment of variable <code>{name}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for self-assignment of variables.
","Why is this bad?#
Self-assignment of variables is redundant and likely a mistake.
","----neg----:
country = ""Poland""
country = country
----pos----:
country = ""Poland""
",,"
<h1 id=""self-assigning-variable-plw0127"">self-assigning-variable (PLW0127)<a class=""headerlink"" href=""#self-assigning-variable-plw0127"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/redeclared-assigned-name/,PLW0128,redeclared-assigned-name,Redeclared variable <code>{name}</code> in assignment,Rule is in preview,Automatic fix not available,"What it does#
Checks for declared assignments to the same variable multiple times
in the same assignment.
","Why is this bad?#
Assigning a variable multiple times in the same assignment is redundant,
as the final assignment to the variable is what the value will be.
","----neg----:
a, b, a = (1, 2, 3)
print(a)  # 3
----pos----:
# this is assuming you want to assign 3 to `a`
_, b, a = (1, 2, 3)
print(a)  # 3
",,"
<h1 id=""redeclared-assigned-name-plw0128"">redeclared-assigned-name (PLW0128)<a class=""headerlink"" href=""#redeclared-assigned-name-plw0128"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/assert-on-string-literal/,PLW0129,assert-on-string-literal,Asserting on an empty string literal will never pass,Rule is stable,Automatic fix not available,"What it does#
Checks for assert statements that use a string literal as the first
argument.
","Why is this bad?#
An assert on a non-empty string literal will always pass, while an
assert on an empty string literal will always fail.
","assert ""always true""
",,"
<h1 id=""assert-on-string-literal-plw0129"">assert-on-string-literal (PLW0129)<a class=""headerlink"" href=""#assert-on-string-literal-plw0129"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/named-expr-without-context/,PLW0131,named-expr-without-context,Named expression used without context,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of named expressions (e.g., a := 42) that can be
replaced by regular assignment statements (e.g., a = 42).
","Why is this bad?#
While a top-level named expression is syntactically and semantically valid,
it's less clear than a regular assignment statement. Named expressions are
intended to be used in comprehensions and generator expressions, where
assignment statements are not allowed.
","----neg----:
(a := 42)
----pos----:
a = 42
",,"
<h1 id=""named-expr-without-context-plw0131"">named-expr-without-context (PLW0131)<a class=""headerlink"" href=""#named-expr-without-context-plw0131"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/useless-exception-statement/,PLW0133,useless-exception-statement,Missing <code>raise</code> statement on exception,Rule is in preview,Automatic fix available,"What it does#
Checks for an exception that is not raised.
","Why is this bad?#
It's unnecessary to create an exception without raising it. For example,
ValueError(""..."") on its own will have no effect (unlike
raise ValueError(""..."")) and is likely a mistake.
Known problems#
This rule only detects built-in exceptions, like ValueError, and does
not catch user-defined exceptions.
","----neg----:
ValueError(""..."")
----pos----:
raise ValueError(""..."")
----other----:
This rule's fix is marked as unsafe, as converting a useless exception
statement to a raise statement will change the program's behavior.
",,"
<h1 id=""useless-exception-statement-plw0133"">useless-exception-statement (PLW0133)<a class=""headerlink"" href=""#useless-exception-statement-plw0133"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/super-without-brackets/,PLW0245,super-without-brackets,<code>super</code> call is missing parentheses,Rule is in preview,Automatic fix available,"What it does#
Checks for super calls without parentheses.
","Why is this bad?#
When super is used without parentheses, it is not an actual call, and
thus has no effect.
","----neg----:
class Animal:
    @staticmethod
    def speak():
        return ""This animal says something.""


class Dog(Animal):
    @staticmethod
    def speak():
        original_speak = super.speak()
        return f""{original_speak} But as a dog, it barks!""
----pos----:
class Animal:
    @staticmethod
    def speak():
        return ""This animal says something.""


class Dog(Animal):
    @staticmethod
    def speak():
        original_speak = super().speak()
        return f""{original_speak} But as a dog, it barks!""
",,"
<h1 id=""super-without-brackets-plw0245"">super-without-brackets (PLW0245)<a class=""headerlink"" href=""#super-without-brackets-plw0245"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/import-self/,PLW0406,import-self,Module <code>{name}</code> imports itself,Rule is stable,Automatic fix not available,"What it does#
Checks for import statements that import the current module.
","Why is this bad?#
Importing a module from itself is a circular dependency.
","# file: this_file.py
from this_file import foo


def foo():
    ...
",,"
<h1 id=""import-self-plw0406"">import-self (PLW0406)<a class=""headerlink"" href=""#import-self-plw0406"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/global-variable-not-assigned/,PLW0602,global-variable-not-assigned,Using global for <code>{name}</code> but no assignment is done,Rule is stable,Automatic fix not available,"What it does#
Checks for global variables that are not assigned a value in the current
scope.
","Why is this bad?#
The global keyword allows an inner scope to modify a variable declared
in the outer scope. If the variable is not modified within the inner scope,
there is no need to use global.
","----neg----:
DEBUG = True


def foo():
    global DEBUG
    if DEBUG:
        print(""foo() called"")
    ...
----pos----:
DEBUG = True


def foo():
    if DEBUG:
        print(""foo() called"")
    ...
",,"
<h1 id=""global-variable-not-assigned-plw0602"">global-variable-not-assigned (PLW0602)<a class=""headerlink"" href=""#global-variable-not-assigned-plw0602"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/simple_stmts.html#the-global-statement"">Python documentation: The <code>global</code> statement</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/global-statement/,PLW0603,global-statement,Using the global statement to update <code>{name}</code> is discouraged,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of global statements to update identifiers.
","Why is this bad?#
Pylint discourages the use of global variables as global mutable
state is a common source of bugs and confusing behavior.
","----neg----:
var = 1


def foo():
    global var  # [global-statement]
    var = 10
    print(var)


foo()
print(var)
----pos----:
var = 1


def foo():
    print(var)
    return 10


var = foo()
print(var)
",,"
<h1 id=""global-statement-plw0603"">global-statement (PLW0603)<a class=""headerlink"" href=""#global-statement-plw0603"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/global-at-module-level/,PLW0604,global-at-module-level,<code>global</code> at module level is redundant,Rule is in preview,Automatic fix not available,"What it does#
Checks for uses of the global keyword at the module level.
","Why is this bad?#
The global keyword is used within functions to indicate that a name
refers to a global variable, rather than a local variable.
At the module level, all names are global by default, so the global
keyword is redundant.
",,,"
<h1 id=""global-at-module-level-plw0604"">global-at-module-level (PLW0604)<a class=""headerlink"" href=""#global-at-module-level-plw0604"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/binary-op-exception/,PLW0711,binary-op-exception,Exception to catch is the result of a binary <code>and</code> operation,Rule is stable,Automatic fix not available,"What it does#
Checks for except clauses that attempt to catch multiple
exceptions with a binary operation (and or or).
","Why is this bad?#
A binary operation will not catch multiple exceptions. Instead, the binary
operation will be evaluated first, and the result of that operation will
be caught (for an or operation, this is typically the first exception in
the list). This is almost never the desired behavior.
","----neg----:
try:
    pass
except A or B:
    pass
----pos----:
try:
    pass
except (A, B):
    pass
",,"
<h1 id=""binary-op-exception-plw0711"">binary-op-exception (PLW0711)<a class=""headerlink"" href=""#binary-op-exception-plw0711"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-open-mode/,PLW1501,bad-open-mode,<code>{mode}</code> is not a valid mode for <code>open</code>,Rule is in preview,Automatic fix not available,"What it does#
Check for an invalid mode argument in open calls.
","Why is this bad?#
The open function accepts a mode argument that specifies how the file
should be opened (e.g., read-only, write-only, append-only, etc.).
Python supports a variety of open modes: r, w, a, and x, to control
reading, writing, appending, and creating, respectively, along with
b (binary mode), + (read and write), and U (universal newlines),
the latter of which is only valid alongside r. This rule detects both
invalid combinations of modes and invalid characters in the mode string
itself.
","----neg----:
with open(""file"", ""rwx"") as f:
    return f.read()
----pos----:
with open(""file"", ""r"") as f:
    return f.read()
",,"
<h1 id=""bad-open-mode-plw1501"">bad-open-mode (PLW1501)<a class=""headerlink"" href=""#bad-open-mode-plw1501"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#open"">Python documentation: <code>open</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-envvar-default/,PLW1508,invalid-envvar-default,Invalid type for environment variable default; expected <code>str</code> or <code>None</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for os.getenv calls with invalid default values.
","Why is this bad?#
If an environment variable is set, os.getenv will return its value as
a string. If the environment variable is not set, os.getenv will
return None, or the default value if one is provided.
If the default value is not a string or None, then it will be
inconsistent with the return type of os.getenv, which can lead to
confusing behavior.
","----neg----:
import os

int(os.getenv(""FOO"", 1))
----pos----:
import os

int(os.getenv(""FOO"", ""1""))
",,"
<h1 id=""invalid-envvar-default-plw1508"">invalid-envvar-default (PLW1508)<a class=""headerlink"" href=""#invalid-envvar-default-plw1508"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/subprocess-popen-preexec-fn/,PLW1509,subprocess-popen-preexec-fn,<code>preexec_fn</code> argument is unsafe when using threads,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of subprocess.Popen with a preexec_fn argument.
","Why is this bad?#
The preexec_fn argument is unsafe within threads as it can lead to
deadlocks. Furthermore, preexec_fn is targeted for deprecation.
Instead, consider using task-specific arguments such as env,
start_new_session, and process_group. These are not prone to deadlocks
and are more explicit.
","----neg----:
import os, subprocess

subprocess.Popen(foo, preexec_fn=os.setsid)
subprocess.Popen(bar, preexec_fn=os.setpgid(0, 0))
----pos----:
import subprocess

subprocess.Popen(foo, start_new_session=True)
subprocess.Popen(bar, process_group=0)  # Introduced in Python 3.11
",,"
<h1 id=""subprocess-popen-preexec-fn-plw1509"">subprocess-popen-preexec-fn (PLW1509)<a class=""headerlink"" href=""#subprocess-popen-preexec-fn-plw1509"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html#popen-constructor"">Python documentation: <code>subprocess.Popen</code></a></li>
<li><a href=""https://discuss.python.org/t/why-preexec-fn-in-subprocess-popen-may-lead-to-deadlock/16908/2"">Why <code>preexec_fn</code> in <code>subprocess.Popen</code> may lead to deadlock?</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/subprocess-run-without-check/,PLW1510,subprocess-run-without-check,<code>subprocess.run</code> without explicit <code>check</code> argument,Rule is stable,Automatic fix available,"What it does#
Checks for uses of subprocess.run without an explicit check argument.
","Why is this bad?#
By default, subprocess.run does not check the return code of the process
it runs. This can lead to silent failures.
Instead, consider using check=True to raise an exception if the process
fails, or set check=False explicitly to mark the behavior as intentional.
","----neg----:
import subprocess

subprocess.run([""ls"", ""nonexistent""])  # No exception raised.
----pos----:
import subprocess

subprocess.run([""ls"", ""nonexistent""], check=True)  # Raises exception.
----other----:
Or:
import subprocess

subprocess.run([""ls"", ""nonexistent""], check=False)  # Explicitly no check.

Fix safety#
This rule's fix is marked as unsafe for function calls that contain
**kwargs, as adding a check keyword argument to such a call may lead
to a duplicate keyword argument error.
",,"
<h1 id=""subprocess-run-without-check-plw1510"">subprocess-run-without-check (PLW1510)<a class=""headerlink"" href=""#subprocess-run-without-check-plw1510"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/subprocess.html#subprocess.run"">Python documentation: <code>subprocess.run</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unspecified-encoding/,PLW1514,unspecified-encoding,<code>{function_name}</code> in text mode without explicit <code>encoding</code> argument,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of open and related calls without an explicit encoding
argument.
","Why is this bad?#
Using open in text mode without an explicit encoding can lead to
non-portable code, with differing behavior across platforms.
Instead, consider using the encoding parameter to enforce a specific
encoding. PEP 597 recommends using locale.getpreferredencoding(False)
as the default encoding on versions earlier than Python 3.10, and
encoding=""locale"" on Python 3.10 and later.
","----neg----:
open(""file.txt"")
----pos----:
open(""file.txt"", encoding=""utf-8"")
",,"
<h1 id=""unspecified-encoding-plw1514"">unspecified-encoding (PLW1514)<a class=""headerlink"" href=""#unspecified-encoding-plw1514"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#open"">Python documentation: <code>open</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/eq-without-hash/,PLW1641,eq-without-hash,Object does not implement <code>__hash__</code> method,Rule is in preview,Automatic fix not available,"What it does#
Checks for classes that implement __eq__ but not __hash__.
","Why is this bad?#
A class that implements __eq__ but not __hash__ will have its hash
method implicitly set to None. This will cause the class to be
unhashable, will in turn cause issues when using the class as a key in a
dictionary or a member of a set.
Known problems#
Does not check for __hash__ implementations in superclasses.
","----neg----:
class Person:
    def __init__(self):
        self.name = ""monty""

    def __eq__(self, other):
        return isinstance(other, Person) and other.name == self.name
----pos----:
class Person:
    def __init__(self):
        self.name = ""monty""

    def __eq__(self, other):
        return isinstance(other, Person) and other.name == self.name

    def __hash__(self):
        return hash(self.name)
",,"
<h1 id=""eq-without-hash-plw1641"">eq-without-hash (PLW1641)<a class=""headerlink"" href=""#eq-without-hash-plw1641"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/useless-with-lock/,PLW2101,useless-with-lock,Threading lock directly created in <code>with</code> statement has no effect,Rule is in preview,Automatic fix not available,"What it does#
Checks for direct uses of lock objects in with statements.
","Why is this bad?#
Creating a lock (via threading.Lock or similar) in a with statement
has no effect, as locks are only relevant when shared between threads.
Instead, assign the lock to a variable outside the with statement,
and share that variable between threads.
","----neg----:
import threading

counter = 0


def increment():
    global counter

    with threading.Lock():
        counter += 1
----pos----:
import threading

counter = 0
lock = threading.Lock()


def increment():
    global counter

    with lock:
        counter += 1
",,"
<h1 id=""useless-with-lock-plw2101"">useless-with-lock (PLW2101)<a class=""headerlink"" href=""#useless-with-lock-plw2101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/threading.html#lock-objects"">Python documentation: <code>Lock Objects</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redefined-loop-name/,PLW2901,redefined-loop-name,Outer {outer_kind} variable <code>{name}</code> overwritten by inner {inner_kind} target,Rule is stable,Automatic fix not available,"What it does#
Checks for variables defined in for loops and with statements that
get overwritten within the body, for example by another for loop or
with statement or by direct assignment.
","Why is this bad?#
Redefinition of a loop variable inside the loop's body causes its value
to differ from the original loop iteration for the remainder of the
block, in a way that will likely cause bugs.
In Python, unlike many other languages, for loops and with
statements don't define their own scopes. Therefore, a nested loop that
uses the same target variable name as an outer loop will reuse the same
actual variable, and the value from the last iteration will ""leak out""
into the remainder of the enclosing loop.
While this mistake is easy to spot in small examples, it can be hidden
in larger blocks of code, where the definition and redefinition of the
variable may not be visible at the same time.
","for i in range(10):
    i = 9
    print(i)  # prints 9 every iteration

for i in range(10):
    for i in range(10):  # original value overwritten
        pass
    print(i)  # also prints 9 every iteration

with path1.open() as f:
    with path2.open() as f:
        f = path2.open()
    print(f.readline())  # prints a line from path2
",,"
<h1 id=""redefined-loop-name-plw2901"">redefined-loop-name (PLW2901)<a class=""headerlink"" href=""#redefined-loop-name-plw2901"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/bad-dunder-method-name/,PLW3201,bad-dunder-method-name,Bad or misspelled dunder method name <code>{name}</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for misspelled and unknown dunder names in method definitions.
","Why is this bad?#
Misspelled dunder name methods may cause your code to not function
as expected.
Since dunder methods are associated with customizing the behavior
of a class in Python, introducing a dunder method such as __foo__
that diverges from standard Python dunder methods could potentially
confuse someone reading the code.
This rule will detect all methods starting and ending with at least
one underscore (e.g., _str_), but ignores known dunder methods (like
__init__), as well as methods that are marked with @override.
Additional dunder methods names can be allowed via the
lint.pylint.allow-dunder-method-names setting.
","----neg----:
class Foo:
    def __init_(self):
        ...
----pos----:
class Foo:
    def __init__(self):
        ...
","https://docs.astral.sh/ruff/settings/#lint_pylint_allow-dunder-method-names
lint.pylint.allow-dunder-method-names
None","
<h1 id=""bad-dunder-method-name-plw3201"">bad-dunder-method-name (PLW3201)<a class=""headerlink"" href=""#bad-dunder-method-name-plw3201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/nested-min-max/,PLW3301,nested-min-max,Nested <code>{func}</code> calls can be flattened,Rule is stable,Automatic fix available,"What it does#
Checks for nested min and max calls.
","Why is this bad?#
Nested min and max calls can be flattened into a single call to improve
readability.
","----neg----:
minimum = min(1, 2, min(3, 4, 5))
maximum = max(1, 2, max(3, 4, 5))
diff = maximum - minimum
----pos----:
minimum = min(1, 2, 3, 4, 5)
maximum = max(1, 2, 3, 4, 5)
diff = maximum - minimum
",,"
<h1 id=""nested-min-max-plw3301"">nested-min-max (PLW3301)<a class=""headerlink"" href=""#nested-min-max-plw3301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Pylint</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#min"">Python documentation: <code>min</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#max"">Python documentation: <code>max</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/raise-vanilla-class/,TRY002,raise-vanilla-class,Create your own exception,Rule is stable,Automatic fix not available,"What it does#
Checks for code that raises Exception directly.
","Why is this bad?#
Handling such exceptions requires the use of except Exception, which
captures any raised exception, including failed assertions,
division by zero, and more.
Prefer to raise your own exception, or a more specific built-in
exception, so that you can avoid over-capturing exceptions that you
don't intend to handle.
","----neg----:
def main_function():
    if not cond:
        raise Exception()


def consumer_func():
    try:
        do_step()
        prepare()
        main_function()
    except Exception:
        logger.error(""Oops"")
----pos----:
def main_function():
    if not cond:
        raise CustomException()


def consumer_func():
    try:
        do_step()
        prepare()
        main_function()
    except CustomException:
        logger.error(""Main function failed"")
    except Exception:
        logger.error(""Oops"")
",,"
<h1 id=""raise-vanilla-class-try002"">raise-vanilla-class (TRY002)<a class=""headerlink"" href=""#raise-vanilla-class-try002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/raise-vanilla-args/,TRY003,raise-vanilla-args,Avoid specifying long messages outside the exception class,Rule is stable,Automatic fix not available,"What it does#
Checks for long exception messages that are not defined in the exception
class itself.
","Why is this bad?#
By formatting an exception message at the raise site, the exception class
becomes less reusable, and may now raise inconsistent messages depending on
where it is raised.
If the exception message is instead defined within the exception class, it
will be consistent across all raise invocations.
This rule is not enforced for some built-in exceptions that are commonly
raised with a message and would be unusual to subclass, such as
NotImplementedError.
","----neg----:
class CantBeNegative(Exception):
    pass


def foo(x):
    if x < 0:
        raise CantBeNegative(f""{x} is negative"")
----pos----:
class CantBeNegative(Exception):
    def __init__(self, number):
        super().__init__(f""{number} is negative"")


def foo(x):
    if x < 0:
        raise CantBeNegative(x)
",,"
<h1 id=""raise-vanilla-args-try003"">raise-vanilla-args (TRY003)<a class=""headerlink"" href=""#raise-vanilla-args-try003"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/type-check-without-type-error/,TRY004,type-check-without-type-error,Prefer <code>TypeError</code> exception for invalid type,Rule is stable,Automatic fix not available,"What it does#
Checks for type checks that do not raise TypeError.
","Why is this bad?#
The Python documentation states that TypeError should be raised upon
encountering an inappropriate type.
","----neg----:
def foo(n: int):
    if isinstance(n, int):
        pass
    else:
        raise ValueError(""n must be an integer"")
----pos----:
def foo(n: int):
    if isinstance(n, int):
        pass
    else:
        raise TypeError(""n must be an integer"")
",,"
<h1 id=""type-check-without-type-error-try004"">type-check-without-type-error (TRY004)<a class=""headerlink"" href=""#type-check-without-type-error-try004"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/exceptions.html#TypeError"">Python documentation: <code>TypeError</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reraise-no-cause/,TRY200,reraise-no-cause,"<span style=""opacity: 0.5"" title=""This rule has been removed"">Use <code>raise from</code> to specify exception cause</span>",Rule has been removed,Automatic fix not available,"What it does#
Checks for exceptions that are re-raised without specifying the cause via
the from keyword.
","Why is this bad?#
The from keyword sets the __cause__ attribute of the exception, which
stores the ""cause"" of the exception. The availability of an exception
""cause"" is useful for debugging.
","----neg----:
def reciprocal(n):
    try:
        return 1 / n
    except ZeroDivisionError:
        raise ValueError()
----pos----:
def reciprocal(n):
    try:
        return 1 / n
    except ZeroDivisionError as exc:
        raise ValueError() from exc
",,"
<h1 id=""reraise-no-cause-try200"">reraise-no-cause (TRY200)<a class=""headerlink"" href=""#reraise-no-cause-try200"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<h2 id=""removed"">Removed<a class=""headerlink"" href=""#removed"" title=""Permanent link"">#</a></h2>
<p>This rule is identical to <a href=""https://docs.astral.sh/ruff/rules/raise-without-from-inside-except/"">B904</a> which should be used instead.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/exceptions.html#exception-context"">Python documentation: Exception context</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/verbose-raise/,TRY201,verbose-raise,Use <code>raise</code> without specifying exception name,Rule is stable,Automatic fix available,"What it does#
Checks for needless exception names in raise statements.
","Why is this bad?#
It's redundant to specify the exception name in a raise statement if the
exception is being re-raised.
","----neg----:
def foo():
    try:
        ...
    except ValueError as exc:
        raise exc
----pos----:
def foo():
    try:
        ...
    except ValueError:
        raise
----other----:
This rule's fix is marked as unsafe, as it doesn't properly handle bound
exceptions that are shadowed between the except and raise statements.
",,"
<h1 id=""verbose-raise-try201"">verbose-raise (TRY201)<a class=""headerlink"" href=""#verbose-raise-try201"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/try-consider-else/,TRY300,try-consider-else,Consider moving this statement to an <code>else</code> block,Rule is stable,Automatic fix not available,"What it does#
Checks for return statements in try blocks.
","Why is this bad?#
The try-except statement has an else clause for code that should
run only if no exceptions were raised. Using the else clause is more
explicit than using a return statement inside of a try block.
","----neg----:
import logging


def reciprocal(n):
    try:
        rec = 1 / n
        print(f""reciprocal of {n} is {rec}"")
        return rec
    except ZeroDivisionError:
        logging.exception(""Exception occurred"")
----pos----:
import logging


def reciprocal(n):
    try:
        rec = 1 / n
    except ZeroDivisionError:
        logging.exception(""Exception occurred"")
    else:
        print(f""reciprocal of {n} is {rec}"")
        return rec
",,"
<h1 id=""try-consider-else-try300"">try-consider-else (TRY300)<a class=""headerlink"" href=""#try-consider-else-try300"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/errors.html"">Python documentation: Errors and Exceptions</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/raise-within-try/,TRY301,raise-within-try,Abstract <code>raise</code> to an inner function,Rule is stable,Automatic fix not available,"What it does#
Checks for raise statements within try blocks. The only raises
caught are those that throw exceptions caught by the try statement itself.
","Why is this bad?#
Raising and catching exceptions within the same try block is redundant,
as the code can be refactored to avoid the try block entirely.
Alternatively, the raise can be moved within an inner function, making
the exception reusable across multiple call sites.
","----neg----:
def bar():
    pass


def foo():
    try:
        a = bar()
        if not a:
            raise ValueError
    except ValueError:
        raise
----pos----:
def bar():
    raise ValueError


def foo():
    try:
        a = bar()  # refactored `bar` to raise `ValueError`
    except ValueError:
        raise
",,"
<h1 id=""raise-within-try-try301"">raise-within-try (TRY301)<a class=""headerlink"" href=""#raise-within-try-try301"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/useless-try-except/,TRY302,useless-try-except,Remove exception handler; error is immediately re-raised,Rule is stable,Automatic fix not available,"What it does#
Checks for immediate uses of raise within exception handlers.
","Why is this bad?#
Capturing an exception, only to immediately reraise it, has no effect.
Instead, remove the error-handling code and let the exception propagate
upwards without the unnecessary try-except block.
","----neg----:
def foo():
    try:
        bar()
    except NotImplementedError:
        raise
----pos----:
def foo():
    bar()
",,"
<h1 id=""useless-try-except-try302"">useless-try-except (TRY302)<a class=""headerlink"" href=""#useless-try-except-try302"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/error-instead-of-exception/,TRY400,error-instead-of-exception,Use <code>logging.exception</code> instead of <code>logging.error</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of logging.error instead of logging.exception when
logging an exception.
","Why is this bad?#
logging.exception logs the exception and the traceback, while
logging.error only logs the exception. The former is more appropriate
when logging an exception, as the traceback is often useful for debugging.
","----neg----:
import logging


def func():
    try:
        raise NotImplementedError
    except NotImplementedError:
        logging.error(""Exception occurred"")
----pos----:
import logging


def func():
    try:
        raise NotImplementedError
    except NotImplementedError:
        logging.exception(""Exception occurred"")
----other----:
This rule's fix is marked as safe when run against logging.error calls,
but unsafe when marked against other logger-like calls (e.g.,
logger.error), since the rule is prone to false positives when detecting
logger-like calls outside of the logging module.
",,"
<h1 id=""error-instead-of-exception-try400"">error-instead-of-exception (TRY400)<a class=""headerlink"" href=""#error-instead-of-exception-try400"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/logging.html#logging.exception"">Python documentation: <code>logging.exception</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/verbose-log-message/,TRY401,verbose-log-message,Redundant exception object included in <code>logging.exception</code> call,Rule is stable,Automatic fix not available,"What it does#
Checks for excessive logging of exception objects.
","Why is this bad?#
When logging exceptions via logging.exception, the exception object
is logged automatically. Including the exception object in the log
message is redundant and can lead to excessive logging.
","----neg----:
try:
    ...
except ValueError as e:
    logger.exception(f""Found an error: {e}"")
----pos----:
try:
    ...
except ValueError:
    logger.exception(""Found an error"")
",,"
<h1 id=""verbose-log-message-try401"">verbose-log-message (TRY401)<a class=""headerlink"" href=""#verbose-log-message-try401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>tryceratops</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/static-join-to-f-string/,FLY002,static-join-to-f-string,Consider <code>{expression}</code> instead of string join,Rule is stable,Automatic fix available,"What it does#
Checks for str.join calls that can be replaced with f-strings.
","Why is this bad?#
f-strings are more readable and generally preferred over str.join calls.
","----neg----:
"" "".join((foo, bar))
----pos----:
f""{foo} {bar}""
",,"
<h1 id=""static-join-to-f-string-fly002"">static-join-to-f-string (FLY002)<a class=""headerlink"" href=""#static-join-to-f-string-fly002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flynt</strong> linter.</p>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/lexical_analysis.html#f-strings"">Python documentation: f-strings</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/numpy-deprecated-type-alias/,NPY001,numpy-deprecated-type-alias,"Type alias <code>np.{type_name}</code> is deprecated, replace with builtin type",Rule is stable,Automatic fix available,"What it does#
Checks for deprecated NumPy type aliases.
","Why is this bad?#
NumPy's np.int has long been an alias of the builtin int. The same
goes for np.float, np.bool, and others. These aliases exist
primarily for historic reasons, and have been a cause of
frequent confusion for newcomers.
These aliases were deprecated in 1.20, and removed in 1.24.
Examples#
import numpy as np

np.bool

Use instead:
bool

",,,"
<h1 id=""numpy-deprecated-type-alias-npy001"">numpy-deprecated-type-alias (NPY001)<a class=""headerlink"" href=""#numpy-deprecated-type-alias-npy001"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/numpy-legacy-random/,NPY002,numpy-legacy-random,Replace legacy <code>np.random.{method_name}</code> call with <code>np.random.Generator</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for the use of legacy np.random function calls.
","Why is this bad?#
According to the NumPy documentation's Legacy Random Generation:

The RandomState provides access to legacy generators... This class
should only be used if it is essential to have randoms that are
identical to what would have been produced by previous versions of
NumPy.

The members exposed directly on the random module are convenience
functions that alias to methods on a global singleton RandomState
instance. NumPy recommends using a dedicated Generator instance
rather than the random variate generation methods exposed directly on
the random module, as the new Generator is both faster and has
better statistical properties.
See the documentation on Random Sampling and NEP 19 for further
details.
Examples#
import numpy as np

np.random.seed(1337)
np.random.normal()

Use instead:
rng = np.random.default_rng(1337)
rng.normal()

",,,"
<h1 id=""numpy-legacy-random-npy002"">numpy-legacy-random (NPY002)<a class=""headerlink"" href=""#numpy-legacy-random-npy002"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/numpy-deprecated-function/,NPY003,numpy-deprecated-function,<code>np.{existing}</code> is deprecated; use <code>np.{replacement}</code> instead,Rule is stable,Automatic fix available,"What it does#
Checks for uses of deprecated NumPy functions.
","Why is this bad?#
When NumPy functions are deprecated, they are usually replaced with
newer, more efficient versions, or with functions that are more
consistent with the rest of the NumPy API.
Prefer newer APIs over deprecated ones.
Examples#
import numpy as np

np.alltrue([True, False])

Use instead:
import numpy as np

np.all([True, False])

",,,"
<h1 id=""numpy-deprecated-function-npy003"">numpy-deprecated-function (NPY003)<a class=""headerlink"" href=""#numpy-deprecated-function-npy003"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/numpy2-deprecation/,NPY201,numpy2-deprecation,<code>np.{existing}</code> will be removed in NumPy 2.0. {migration_guide},Rule is stable,Automatic fix available,"What it does#
Checks for uses of NumPy functions and constants that were removed from
the main namespace in NumPy 2.0.
","Why is this bad?#
NumPy 2.0 includes an overhaul of NumPy's Python API, intended to remove
redundant aliases and routines, and establish unambiguous mechanisms for
accessing constants, dtypes, and functions.
As part of this overhaul, a variety of deprecated NumPy functions and
constants were removed from the main namespace.
The majority of these functions and constants can be automatically replaced
by other members of the NumPy API or by equivalents from the Python
standard library. With the exception of renaming numpy.byte_bounds to
numpy.lib.array_utils.byte_bounds, all such replacements are backwards
compatible with earlier versions of NumPy.
This rule flags all uses of removed members, along with automatic fixes for
any backwards-compatible replacements.
Examples#
import numpy as np

arr1 = [np.Infinity, np.NaN, np.nan, np.PINF, np.inf]
arr2 = [np.float_(1.5), np.float64(5.1)]
np.round_(arr2)

Use instead:
import numpy as np

arr1 = [np.inf, np.nan, np.nan, np.inf, np.inf]
arr2 = [np.float64(1.5), np.float64(5.1)]
np.round(arr2)

",,,"
<h1 id=""numpy2-deprecation-npy201"">numpy2-deprecation (NPY201)<a class=""headerlink"" href=""#numpy2-deprecation-npy201"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/airflow-variable-name-task-id-mismatch/,AIR001,airflow-variable-name-task-id-mismatch,"Task variable name should match the <code>task_id</code>: ""{task_id}""",Rule is stable,Automatic fix not available,"What it does#
Checks that the task variable name matches the task_id value for
Airflow Operators.
","Why is this bad?#
When initializing an Airflow Operator, for consistency, the variable
name should match the task_id value. This makes it easier to
follow the flow of the DAG.
","----neg----:
from airflow.operators import PythonOperator


incorrect_name = PythonOperator(task_id=""my_task"")
----pos----:
from airflow.operators import PythonOperator


my_task = PythonOperator(task_id=""my_task"")
",,"
<h1 id=""airflow-variable-name-task-id-mismatch-air001"">airflow-variable-name-task-id-mismatch (AIR001)<a class=""headerlink"" href=""#airflow-variable-name-task-id-mismatch-air001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Airflow</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-list-cast/,PERF101,unnecessary-list-cast,Do not cast an iterable to <code>list</code> before iterating over it,Rule is stable,Automatic fix available,"What it does#
Checks for explicit casts to list on for-loop iterables.
","Why is this bad?#
Using a list() call to eagerly iterate over an already-iterable type
(like a tuple, list, or set) is inefficient, as it forces Python to create
a new list unnecessarily.
Removing the list() call will not change the behavior of the code, but
may improve performance.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
items = (1, 2, 3)
for i in list(items):
    print(i)
----pos----:
items = (1, 2, 3)
for i in items:
    print(i)
",,"
<h1 id=""unnecessary-list-cast-perf101"">unnecessary-list-cast (PERF101)<a class=""headerlink"" href=""#unnecessary-list-cast-perf101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/incorrect-dict-iterator/,PERF102,incorrect-dict-iterator,When using only the {subset} of a dict use the <code>{subset}()</code> method,Rule is stable,Automatic fix available,"What it does#
Checks for uses of dict.items() that discard either the key or the value
when iterating over the dictionary.
","Why is this bad?#
If you only need the keys or values of a dictionary, you should use
dict.keys() or dict.values() respectively, instead of dict.items().
These specialized methods are more efficient than dict.items(), as they
avoid allocating tuples for every item in the dictionary. They also
communicate the intent of the code more clearly.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
obj = {""a"": 1, ""b"": 2}
for key, value in obj.items():
    print(value)
----pos----:
obj = {""a"": 1, ""b"": 2}
for value in obj.values():
    print(value)
----other----:
The fix does not perform any type analysis and, as such, may suggest an
incorrect fix if the object in question does not duck-type as a mapping
(e.g., if it is missing a .keys() or .values() method, or if those
methods behave differently than they do on standard mapping types).
",,"
<h1 id=""incorrect-dict-iterator-perf102"">incorrect-dict-iterator (PERF102)<a class=""headerlink"" href=""#incorrect-dict-iterator-perf102"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/try-except-in-loop/,PERF203,try-except-in-loop,<code>try</code>-<code>except</code> within a loop incurs performance overhead,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of except handling via try-except within for and
while loops.
","Why is this bad?#
Exception handling via try-except blocks incurs some performance
overhead, regardless of whether an exception is raised.
When possible, refactor your code to put the entire loop into the
try-except block, rather than wrapping each iteration in a separate
try-except block.
This rule is only enforced for Python versions prior to 3.11, which
introduced ""zero cost"" exception handling.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
string_numbers: list[str] = [""1"", ""2"", ""three"", ""4"", ""5""]

int_numbers: list[int] = []
for num in string_numbers:
    try:
        int_numbers.append(int(num))
    except ValueError as e:
        print(f""Couldn't convert to integer: {e}"")
        break
----pos----:
string_numbers: list[str] = [""1"", ""2"", ""three"", ""4"", ""5""]

int_numbers: list[int] = []
try:
    for num in string_numbers:
        int_numbers.append(int(num))
except ValueError as e:
    print(f""Couldn't convert to integer: {e}"")
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""try-except-in-loop-perf203"">try-except-in-loop (PERF203)<a class=""headerlink"" href=""#try-except-in-loop-perf203"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/manual-list-comprehension/,PERF401,manual-list-comprehension,Use a list comprehension to create a transformed list,Rule is stable,Automatic fix not available,"What it does#
Checks for for loops that can be replaced by a list comprehension.
","Why is this bad?#
When creating a transformed list from an existing list using a for-loop,
prefer a list comprehension. List comprehensions are more readable and
more performant.
Using the below as an example, the list comprehension is ~10% faster on
Python 3.11, and ~25% faster on Python 3.10.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
original = list(range(10000))
filtered = []
for i in original:
    if i % 2:
        filtered.append(i)
----pos----:
original = list(range(10000))
filtered = [x for x in original if x % 2]
----other----:
If you're appending to an existing list, use the extend method instead:
original = list(range(10000))
filtered.extend(x for x in original if x % 2)

",,"
<h1 id=""manual-list-comprehension-perf401"">manual-list-comprehension (PERF401)<a class=""headerlink"" href=""#manual-list-comprehension-perf401"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/manual-list-copy/,PERF402,manual-list-copy,Use <code>list</code> or <code>list.copy</code> to create a copy of a list,Rule is stable,Automatic fix not available,"What it does#
Checks for for loops that can be replaced by a making a copy of a list.
","Why is this bad?#
When creating a copy of an existing list using a for-loop, prefer
list or list.copy instead. Making a direct copy is more readable and
more performant.
Using the below as an example, the list-based copy is ~2x faster on
Python 3.11.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
original = list(range(10000))
filtered = []
for i in original:
    filtered.append(i)
----pos----:
original = list(range(10000))
filtered = list(original)
",,"
<h1 id=""manual-list-copy-perf402"">manual-list-copy (PERF402)<a class=""headerlink"" href=""#manual-list-copy-perf402"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/manual-dict-comprehension/,PERF403,manual-dict-comprehension,Use a dictionary comprehension instead of a for-loop,Rule is in preview,Automatic fix not available,"What it does#
Checks for for loops that can be replaced by a dictionary comprehension.
","Why is this bad?#
When creating or extending a dictionary in a for-loop, prefer a dictionary
comprehension. Comprehensions are more readable and more performant.
For example, when comparing {x: x for x in list(range(1000))} to the for
loop version, the comprehension is ~10% faster on Python 3.11.
Note that, as with all perflint rules, this is only intended as a
micro-optimization, and will have a negligible impact on performance in
most cases.
","----neg----:
pairs = ((""a"", 1), (""b"", 2))
result = {}
for x, y in pairs:
    if y % 2:
        result[x] = y
----pos----:
pairs = ((""a"", 1), (""b"", 2))
result = {x: y for x, y in pairs if y % 2}
----other----:
If you're appending to an existing dictionary, use the update method instead:
pairs = ((""a"", 1), (""b"", 2))
result.update({x: y for x, y in pairs if y % 2})

",,"
<h1 id=""manual-dict-comprehension-perf403"">manual-dict-comprehension (PERF403)<a class=""headerlink"" href=""#manual-dict-comprehension-perf403"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>Perflint</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/read-whole-file/,FURB101,read-whole-file,<code>open</code> and <code>read</code> should be replaced by <code>Path({filename}).{suggestion}</code>,Rule is in preview,Automatic fix not available,"What it does#
Checks for uses of open and read that can be replaced by pathlib
methods, like Path.read_text and Path.read_bytes.
","Why is this bad?#
When reading the entire contents of a file into a variable, it's simpler
and more concise to use pathlib methods like Path.read_text and
Path.read_bytes instead of open and read calls via with statements.
","----neg----:
with open(filename) as f:
    contents = f.read()
----pos----:
from pathlib import Path

contents = Path(filename).read_text()
",,"
<h1 id=""read-whole-file-furb101"">read-whole-file (FURB101)<a class=""headerlink"" href=""#read-whole-file-furb101"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_bytes"">Python documentation: <code>Path.read_bytes</code></a></li>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text"">Python documentation: <code>Path.read_text</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/print-empty-string/,FURB105,print-empty-string,Unnecessary empty string passed to <code>print</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for print calls with unnecessary empty strings as positional
arguments and unnecessary sep keyword arguments.
","Why is this bad?#
Prefer calling print without any positional arguments, which is
equivalent and more concise.
Similarly, when printing one or fewer items, the sep keyword argument,
(used to define the string that separates the print arguments) can be
omitted, as it's redundant when there are no items to separate.
","----neg----:
print("""")
----pos----:
print()
",,"
<h1 id=""print-empty-string-furb105"">print-empty-string (FURB105)<a class=""headerlink"" href=""#print-empty-string-furb105"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#print"">Python documentation: <code>print</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/repeated-append/,FURB113,repeated-append,Use <code>{suggestion}</code> instead of repeatedly calling <code>{name}.append()</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for consecutive calls to append.
","Why is this bad?#
Consecutive calls to append can be less efficient than batching them into
a single extend. Each append resizes the list individually, whereas an
extend can resize the list once for all elements.
Known problems#
This rule is prone to false negatives due to type inference limitations,
as it will only detect lists that are instantiated as literals or annotated
with a type annotation.
","----neg----:
nums = [1, 2, 3]

nums.append(4)
nums.append(5)
nums.append(6)
----pos----:
nums = [1, 2, 3]

nums.extend((4, 5, 6))
",,"
<h1 id=""repeated-append-furb113"">repeated-append (FURB113)<a class=""headerlink"" href=""#repeated-append-furb113"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"">Python documentation: More on Lists</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reimplemented-operator/,FURB118,reimplemented-operator,Use <code>operator.{operator}</code> instead of defining a function,Rule is in preview,Automatic fix available,"What it does#
Checks for lambda expressions and function definitions that can be replaced
with a function from the operator module.
","Why is this bad?#
The operator module provides functions that implement the same functionality
as the corresponding operators. For example, operator.add is equivalent to
lambda x, y: x + y. Using the functions from the operator module is more
concise and communicates the intent of the code more clearly.
","----neg----:
import functools

nums = [1, 2, 3]
sum = functools.reduce(lambda x, y: x + y, nums)
----pos----:
import functools
import operator

nums = [1, 2, 3]
sum = functools.reduce(operator.add, nums)
",,"
<h1 id=""reimplemented-operator-furb118"">reimplemented-operator (FURB118)<a class=""headerlink"" href=""#reimplemented-operator-furb118"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
"
https://docs.astral.sh/ruff/rules/readlines-in-for/,FURB129,readlines-in-for,"Instead of calling <code>readlines()</code>, iterate over file object directly",Rule is in preview,Automatic fix available,"What it does#
Checks for uses of readlines() when iterating over a file line-by-line.
","Why is this bad?#
Rather than iterating over all lines in a file by calling readlines(),
it's more convenient and performant to iterate over the file object
directly.
","----neg----:
with open(""file.txt"") as fp:
    for line in fp.readlines():
        ...
----pos----:
with open(""file.txt"") as fp:
    for line in fp:
        ...
",,"
<h1 id=""readlines-in-for-furb129"">readlines-in-for (FURB129)<a class=""headerlink"" href=""#readlines-in-for-furb129"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/io.html#io.IOBase.readlines"">Python documentation: <code>io.IOBase.readlines</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/delete-full-slice/,FURB131,delete-full-slice,Prefer <code>clear</code> over deleting a full slice,Rule is in preview,Automatic fix available,"What it does#
Checks for del statements that delete the entire slice of a list or
dictionary.
","Why is this bad?#
It is faster and more succinct to remove all items via the clear()
method.
Known problems#
This rule is prone to false negatives due to type inference limitations,
as it will only detect lists and dictionaries that are instantiated as
literals or annotated with a type annotation.
","----neg----:
names = {""key"": ""value""}
nums = [1, 2, 3]

del names[:]
del nums[:]
----pos----:
names = {""key"": ""value""}
nums = [1, 2, 3]

names.clear()
nums.clear()
",,"
<h1 id=""delete-full-slice-furb131"">delete-full-slice (FURB131)<a class=""headerlink"" href=""#delete-full-slice-furb131"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html?highlight=list#mutable-sequence-types"">Python documentation: Mutable Sequence Types</a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html?highlight=list#dict.clear"">Python documentation: <code>dict.clear()</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/check-and-remove-from-set/,FURB132,check-and-remove-from-set,Use <code>{suggestion}</code> instead of check and <code>remove</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of set.remove that can be replaced with set.discard.
","Why is this bad?#
If an element should be removed from a set if it is present, it is more
succinct and idiomatic to use discard.
Known problems#
This rule is prone to false negatives due to type inference limitations,
as it will only detect sets that are instantiated as literals or annotated
with a type annotation.
","----neg----:
nums = {123, 456}

if 123 in nums:
    nums.remove(123)
----pos----:
nums = {123, 456}

nums.discard(123)
",,"
<h1 id=""check-and-remove-from-set-furb132"">check-and-remove-from-set (FURB132)<a class=""headerlink"" href=""#check-and-remove-from-set-furb132"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html?highlight=list#frozenset.discard"">Python documentation: <code>set.discard()</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/if-expr-min-max/,FURB136,if-expr-min-max,Replace <code>if</code> expression with <code>{min_max}</code> call,Rule is in preview,Automatic fix available,"What it does#
Checks for if expressions that can be replaced with min() or max()
calls.
","Why is this bad?#
An if expression that selects the lesser or greater of two
sub-expressions can be replaced with a min() or max() call
respectively. When possible, prefer min() and max(), as they're more
concise and readable than the equivalent if expression.
","----neg----:
highest_score = score1 if score1 > score2 else score2
----pos----:
highest_score = max(score2, score1)
",,"
<h1 id=""if-expr-min-max-furb136"">if-expr-min-max (FURB136)<a class=""headerlink"" href=""#if-expr-min-max-furb136"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3.11/library/functions.html#min"">Python documentation: <code>min</code></a></li>
<li><a href=""https://docs.python.org/3.11/library/functions.html#max"">Python documentation: <code>max</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/reimplemented-starmap/,FURB140,reimplemented-starmap,Use <code>itertools.starmap</code> instead of the generator,Rule is in preview,Automatic fix available,"What it does#
Checks for generator expressions, list and set comprehensions that can
be replaced with itertools.starmap.
","Why is this bad?#
When unpacking values from iterators to pass them directly to
a function, prefer itertools.starmap.
Using itertools.starmap is more concise and readable. Furthermore, it is
more efficient than generator expressions, and in some versions of Python,
it is more efficient than comprehensions.
Known problems#
Since Python 3.12, itertools.starmap is less efficient than
comprehensions (#7771). This is due to PEP 709, which made
comprehensions faster.
","----neg----:
scores = [85, 100, 60]
passing_scores = [60, 80, 70]


def passed_test(score: int, passing_score: int) -> bool:
    return score >= passing_score


passed_all_tests = all(
    passed_test(score, passing_score)
    for score, passing_score in zip(scores, passing_scores)
)
----pos----:
from itertools import starmap


scores = [85, 100, 60]
passing_scores = [60, 80, 70]


def passed_test(score: int, passing_score: int) -> bool:
    return score >= passing_score


passed_all_tests = all(starmap(passed_test, zip(scores, passing_scores)))
",,"
<h1 id=""reimplemented-starmap-furb140"">reimplemented-starmap (FURB140)<a class=""headerlink"" href=""#reimplemented-starmap-furb140"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/itertools.html#itertools.starmap"">Python documentation: <code>itertools.starmap</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/slice-copy/,FURB145,slice-copy,Prefer <code>copy</code> method over slicing,Rule is in preview,Automatic fix available,"What it does#
Checks for unbounded slice expressions to copy a list.
","Why is this bad?#
The list.copy method is more readable and consistent with copying other
types.
Known problems#
This rule is prone to false negatives due to type inference limitations,
as it will only detect lists that are instantiated as literals or annotated
with a type annotation.
","----neg----:
a = [1, 2, 3]
b = a[:]
----pos----:
a = [1, 2, 3]
b = a.copy()
",,"
<h1 id=""slice-copy-furb145"">slice-copy (FURB145)<a class=""headerlink"" href=""#slice-copy-furb145"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"">Python documentation: Mutable Sequence Types</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-enumerate/,FURB148,unnecessary-enumerate,"<code>enumerate</code> value is unused, use <code>for x in range(len(y))</code> instead",Rule is in preview,Automatic fix available,"What it does#
Checks for uses of enumerate that discard either the index or the value
when iterating over a sequence.
","Why is this bad?#
The built-in enumerate function is useful when you need both the index and
value of a sequence.
If you only need the index or values of a sequence, you should iterate over
range(len(...)) or the sequence itself, respectively, instead. This is
more efficient and communicates the intent of the code more clearly.
Known problems#
This rule is prone to false negatives due to type inference limitations;
namely, it will only suggest a fix using the len builtin function if the
sequence passed to enumerate is an instantiated as a list, set, dict, or
tuple literal, or annotated as such with a type annotation.
The len builtin function is not defined for all object types (such as
generators), and so refactoring to use len over enumerate is not always
safe.
","----neg----:
for index, _ in enumerate(sequence):
    print(index)

for _, value in enumerate(sequence):
    print(value)
----pos----:
for index in range(len(sequence)):
    print(index)

for value in sequence:
    print(value)
",,"
<h1 id=""unnecessary-enumerate-furb148"">unnecessary-enumerate (FURB148)<a class=""headerlink"" href=""#unnecessary-enumerate-furb148"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#enumerate"">Python documentation: <code>enumerate</code></a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#range"">Python documentation: <code>range</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#len"">Python documentation: <code>len</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/math-constant/,FURB152,math-constant,Replace <code>{literal}</code> with <code>math.{constant}</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for literals that are similar to constants in math module.
","Why is this bad?#
Hard-coding mathematical constants like π increases code duplication,
reduces readability, and may lead to a lack of precision.
","----neg----:
A = 3.141592 * r**2
----pos----:
A = math.pi * r**2
",,"
<h1 id=""math-constant-furb152"">math-constant (FURB152)<a class=""headerlink"" href=""#math-constant-furb152"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/math.html#constants"">Python documentation: <code>math</code> constants</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/bit-count/,FURB161,bit-count,Use of <code>bin({existing}).count('1')</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of bin(...).count(""1"") to perform a population count.
","Why is this bad?#
In Python 3.10, a bit_count() method was added to the int class,
which is more concise and efficient than converting to a binary
representation via bin(...).
","----neg----:
x = bin(123).count(""1"")
y = bin(0b1111011).count(""1"")
----pos----:
x = (123).bit_count()
y = 0b1111011.bit_count()
","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""bit-count-furb161"">bit-count (FURB161)<a class=""headerlink"" href=""#bit-count-furb161"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#int.bit_count"">Python documentation:<code>int.bit_count</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/redundant-log-base/,FURB163,redundant-log-base,Prefer <code>math.{log_function}({arg})</code> over <code>math.log</code> with a redundant base,Rule is in preview,Automatic fix available,"What it does#
Checks for math.log calls with a redundant base.
","Why is this bad?#
The default base of math.log is e, so specifying it explicitly is
redundant.
Instead of passing 2 or 10 as the base, use math.log2 or math.log10
respectively, as these dedicated variants are typically more accurate
than math.log.
","----neg----:
import math

math.log(4, math.e)
math.log(4, 2)
math.log(4, 10)
----pos----:
import math

math.log(4)
math.log2(4)
math.log10(4)
",,"
<h1 id=""redundant-log-base-furb163"">redundant-log-base (FURB163)<a class=""headerlink"" href=""#redundant-log-base-furb163"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/math.html#math.log"">Python documentation: <code>math.log</code></a></li>
<li><a href=""https://docs.python.org/3/library/math.html#math.log2"">Python documentation: <code>math.log2</code></a></li>
<li><a href=""https://docs.python.org/3/library/math.html#math.log10"">Python documentation: <code>math.log10</code></a></li>
<li><a href=""https://docs.python.org/3/library/math.html#math.e"">Python documentation: <code>math.e</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/regex-flag-alias/,FURB167,regex-flag-alias,Use of regular expression alias <code>re.{alias}</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for the use of shorthand aliases for regular expression flags
(e.g., re.I instead of re.IGNORECASE).
","Why is this bad?#
The regular expression module provides descriptive names for each flag,
along with single-letter aliases. Prefer the descriptive names, as they
are more readable and self-documenting.
","----neg----:
import re

if re.match(""^hello"", ""hello world"", re.I):
    ...
----pos----:
import re

if re.match(""^hello"", ""hello world"", re.IGNORECASE):
    ...
",,"
<h1 id=""regex-flag-alias-furb167"">regex-flag-alias (FURB167)<a class=""headerlink"" href=""#regex-flag-alias-furb167"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/isinstance-type-none/,FURB168,isinstance-type-none,Prefer <code>is</code> operator over <code>isinstance</code> to check if an object is <code>None</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of isinstance that check if an object is of type None.
","Why is this bad?#
There is only ever one instance of None, so it is more efficient and
readable to use the is operator to check if an object is None.
","----neg----:
isinstance(obj, type(None))
----pos----:
obj is None
",,"
<h1 id=""isinstance-type-none-furb168"">isinstance-type-none (FURB168)<a class=""headerlink"" href=""#isinstance-type-none-furb168"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#isinstance"">Python documentation: <code>isinstance</code></a></li>
<li><a href=""https://docs.python.org/3/library/constants.html#None"">Python documentation: <code>None</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#type"">Python documentation: <code>type</code></a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#is-not"">Python documentation: Identity comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/type-none-comparison/,FURB169,type-none-comparison,Compare the identities of <code>{object}</code> and <code>None</code> instead of their respective types,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of type that compare the type of an object to the type of
None.
","Why is this bad?#
There is only ever one instance of None, so it is more efficient and
readable to use the is operator to check if an object is None.
","----neg----:
type(obj) is type(None)
----pos----:
obj is None
",,"
<h1 id=""type-none-comparison-furb169"">type-none-comparison (FURB169)<a class=""headerlink"" href=""#type-none-comparison-furb169"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#isinstance"">Python documentation: <code>isinstance</code></a></li>
<li><a href=""https://docs.python.org/3/library/constants.html#None"">Python documentation: <code>None</code></a></li>
<li><a href=""https://docs.python.org/3/library/functions.html#type"">Python documentation: <code>type</code></a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#is-not"">Python documentation: Identity comparisons</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/single-item-membership-test/,FURB171,single-item-membership-test,Membership test against single-item container,Rule is in preview,Automatic fix available,"What it does#
Checks for membership tests against single-item containers.
","Why is this bad?#
Performing a membership test against a container (like a list or set)
with a single item is less readable and less efficient than comparing
against the item directly.
","----neg----:
1 in [1]
----pos----:
1 == 1
",,"
<h1 id=""single-item-membership-test-furb171"">single-item-membership-test (FURB171)<a class=""headerlink"" href=""#single-item-membership-test-furb171"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#comparisons"">Python documentation: Comparisons</a></li>
<li><a href=""https://docs.python.org/3/reference/expressions.html#membership-test-operations"">Python documentation: Membership test operations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/implicit-cwd/,FURB177,implicit-cwd,Prefer <code>Path.cwd()</code> over <code>Path().resolve()</code> for current-directory lookups,Rule is in preview,Automatic fix not available,"What it does#
Checks for current-directory lookups using Path().resolve().
","Why is this bad?#
When looking up the current directory, prefer Path.cwd() over
Path().resolve(), as Path.cwd() is more explicit in its intent.
","----neg----:
cwd = Path().resolve()
----pos----:
cwd = Path.cwd()
",,"
<h1 id=""implicit-cwd-furb177"">implicit-cwd (FURB177)<a class=""headerlink"" href=""#implicit-cwd-furb177"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.cwd"">Python documentation: <code>Path.cwd</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/meta-class-abc-meta/,FURB180,meta-class-abc-meta,Use of <code>metaclass=abc.ABCMeta</code> to define abstract base class,Rule is in preview,Automatic fix available,"What it does#
Checks for uses of metaclass=abc.ABCMeta to define abstract base classes
(ABCs).
","Why is this bad?#
Instead of class C(metaclass=abc.ABCMeta): ..., use class C(ABC): ...
to define an abstract base class. Inheriting from the ABC wrapper class
is semantically identical to setting metaclass=abc.ABCMeta, but more
succinct.
","----neg----:
class C(metaclass=ABCMeta):
    pass
----pos----:
class C(ABC):
    pass
",,"
<h1 id=""meta-class-abc-meta-furb180"">meta-class-abc-meta (FURB180)<a class=""headerlink"" href=""#meta-class-abc-meta-furb180"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/abc.html#abc.ABC"">Python documentation: <code>abc.ABC</code></a></li>
<li><a href=""https://docs.python.org/3/library/abc.html#abc.ABCMeta"">Python documentation: <code>abc.ABCMeta</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/hashlib-digest-hex/,FURB181,hashlib-digest-hex,Use of hashlib's <code>.digest().hex()</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for the use of .digest().hex() on a hashlib hash, like sha512.
","Why is this bad?#
When generating a hex digest from a hash, it's preferable to use the
.hexdigest() method, rather than calling .digest() and then .hex(),
as the former is more concise and readable.
","----neg----:
from hashlib import sha512

hashed = sha512(b""some data"").digest().hex()
----pos----:
from hashlib import sha512

hashed = sha512(b""some data"").hexdigest()
----other----:
This rule's fix is marked as unsafe, as the target of the .digest() call
could be a user-defined class that implements a .hex() method, rather
than a hashlib hash object.
",,"
<h1 id=""hashlib-digest-hex-furb181"">hashlib-digest-hex (FURB181)<a class=""headerlink"" href=""#hashlib-digest-hex-furb181"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/hashlib.html"">Python documentation: <code>hashlib</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/list-reverse-copy/,FURB187,list-reverse-copy,Use of assignment of <code>reversed</code> on list <code>{name}</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for list reversals that can be performed in-place in lieu of
creating a new list.
","Why is this bad?#
When reversing a list, it's more efficient to use the in-place method
.reverse() instead of creating a new list, if the original list is
no longer needed.
","----neg----:
l = [1, 2, 3]
l = reversed(l)

l = [1, 2, 3]
l = list(reversed(l))

l = [1, 2, 3]
l = l[::-1]
----pos----:
l = [1, 2, 3]
l.reverse()
",,"
<h1 id=""list-reverse-copy-furb187"">list-reverse-copy (FURB187)<a class=""headerlink"" href=""#list-reverse-copy-furb187"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>refurb</strong> linter.</p>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"">Python documentation: More on Lists</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/direct-logger-instantiation/,LOG001,direct-logger-instantiation,Use <code>logging.getLogger()</code> to instantiate loggers,Rule is stable,Automatic fix available,"What it does#
Checks for direct instantiation of logging.Logger, as opposed to using
logging.getLogger().
","Why is this bad?#
The Logger Objects documentation states that:

Note that Loggers should NEVER be instantiated directly, but always
through the module-level function logging.getLogger(name).

If a logger is directly instantiated, it won't be added to the logger
tree, and will bypass all configuration. Messages logged to it will
only be sent to the ""handler of last resort"", skipping any filtering
or formatting.
","----neg----:
import logging

logger = logging.Logger(__name__)
----pos----:
import logging

logger = logging.getLogger(__name__)
",,"
<h1 id=""direct-logger-instantiation-log001"">direct-logger-instantiation (LOG001)<a class=""headerlink"" href=""#direct-logger-instantiation-log001"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/invalid-get-logger-argument/,LOG002,invalid-get-logger-argument,Use <code>__name__</code> with <code>logging.getLogger()</code>,Rule is stable,Automatic fix available,"What it does#
Checks for any usage of __cached__ and __file__ as an argument to
logging.getLogger().
","Why is this bad?#
The logging documentation recommends this pattern:
logging.getLogger(__name__)

Here, __name__ is the fully qualified module name, such as foo.bar,
which is the intended format for logger names.
This rule detects probably-mistaken usage of similar module-level dunder constants:

__cached__ - the pathname of the module's compiled version, such as foo/__pycache__/bar.cpython-311.pyc.
__file__ - the pathname of the module, such as foo/bar.py.

","----neg----:
import logging

logger = logging.getLogger(__file__)
----pos----:
import logging

logger = logging.getLogger(__name__)
",,"
<h1 id=""invalid-get-logger-argument-log002"">invalid-get-logger-argument (LOG002)<a class=""headerlink"" href=""#invalid-get-logger-argument-log002"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/exception-without-exc-info/,LOG007,exception-without-exc-info,Use of <code>logging.exception</code> with falsy <code>exc_info</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for uses of logging.exception() with exc_info set to False.
","Why is this bad?#
The logging.exception() method captures the exception automatically, but
accepts an optional exc_info argument to override this behavior. Setting
exc_info to False disables the automatic capture of the exception and
stack trace.
Instead of setting exc_info to False, prefer logging.error(), which
has equivalent behavior to logging.exception() with exc_info set to
False, but is clearer in intent.
","----neg----:
logging.exception(""..."", exc_info=False)
----pos----:
logging.error(""..."")
",,"
<h1 id=""exception-without-exc-info-log007"">exception-without-exc-info (LOG007)<a class=""headerlink"" href=""#exception-without-exc-info-log007"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging</strong> linter.</p>
"
https://docs.astral.sh/ruff/rules/undocumented-warn/,LOG009,undocumented-warn,Use of undocumented <code>logging.WARN</code> constant,Rule is stable,Automatic fix available,"What it does#
Checks for uses of logging.WARN.
","Why is this bad?#
The logging.WARN constant is an undocumented alias for logging.WARNING.
Although it’s not explicitly deprecated, logging.WARN is not mentioned
in the logging documentation. Prefer logging.WARNING instead.
","----neg----:
import logging


logging.basicConfig(level=logging.WARN)
----pos----:
import logging


logging.basicConfig(level=logging.WARNING)
",,"
<h1 id=""undocumented-warn-log009"">undocumented-warn (LOG009)<a class=""headerlink"" href=""#undocumented-warn-log009"" title=""Permanent link"">#</a></h1>
<p>Derived from the <strong>flake8-logging</strong> linter.</p>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-string/,RUF001,ambiguous-unicode-character-string,String contains ambiguous {}. Did you mean {}?,Rule is stable,Automatic fix not available,"What it does#
Checks for ambiguous Unicode characters in strings.
","Why is this bad?#
Some Unicode characters are visually similar to ASCII characters, but have
different code points. For example, GREEK CAPITAL LETTER ALPHA (U+0391)
is visually similar, but not identical, to the ASCII character A.
The use of ambiguous Unicode characters can confuse readers, cause subtle
bugs, and even make malicious code look harmless.
In preview, this rule will also flag Unicode characters that are
confusable with other, non-preferred Unicode characters. For example, the
spec recommends GREEK CAPITAL LETTER OMEGA over OHM SIGN.
You can omit characters from being flagged as ambiguous via the
lint.allowed-confusables setting.
","----neg----:
print(""Ηello, world!"")  # ""Η"" is the Greek eta (`U+0397`).
----pos----:
print(""Hello, world!"")  # ""H"" is the Latin capital H (`U+0048`).
","https://docs.astral.sh/ruff/settings/#lint_allowed-confusables
lint.allowed-confusables
None","
<h1 id=""ambiguous-unicode-character-string-ruf001"">ambiguous-unicode-character-string (RUF001)<a class=""headerlink"" href=""#ambiguous-unicode-character-string-ruf001"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-docstring/,RUF002,ambiguous-unicode-character-docstring,Docstring contains ambiguous {}. Did you mean {}?,Rule is stable,Automatic fix not available,"What it does#
Checks for ambiguous Unicode characters in docstrings.
","Why is this bad?#
Some Unicode characters are visually similar to ASCII characters, but have
different code points. For example, GREEK CAPITAL LETTER ALPHA (U+0391)
is visually similar, but not identical, to the ASCII character A.
The use of ambiguous Unicode characters can confuse readers, cause subtle
bugs, and even make malicious code look harmless.
In preview, this rule will also flag Unicode characters that are
confusable with other, non-preferred Unicode characters. For example, the
spec recommends GREEK CAPITAL LETTER OMEGA over OHM SIGN.
You can omit characters from being flagged as ambiguous via the
lint.allowed-confusables setting.
","----neg----:
""""""A lovely docstring (with a `U+FF09` parenthesis）.""""""
----pos----:
""""""A lovely docstring (with no strange parentheses).""""""
","https://docs.astral.sh/ruff/settings/#lint_allowed-confusables
lint.allowed-confusables
None","
<h1 id=""ambiguous-unicode-character-docstring-ruf002"">ambiguous-unicode-character-docstring (RUF002)<a class=""headerlink"" href=""#ambiguous-unicode-character-docstring-ruf002"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/ambiguous-unicode-character-comment/,RUF003,ambiguous-unicode-character-comment,Comment contains ambiguous {}. Did you mean {}?,Rule is stable,Automatic fix not available,"What it does#
Checks for ambiguous Unicode characters in comments.
","Why is this bad?#
Some Unicode characters are visually similar to ASCII characters, but have
different code points. For example, GREEK CAPITAL LETTER ALPHA (U+0391)
is visually similar, but not identical, to the ASCII character A.
The use of ambiguous Unicode characters can confuse readers, cause subtle
bugs, and even make malicious code look harmless.
In preview, this rule will also flag Unicode characters that are
confusable with other, non-preferred Unicode characters. For example, the
spec recommends GREEK CAPITAL LETTER OMEGA over OHM SIGN.
You can omit characters from being flagged as ambiguous via the
lint.allowed-confusables setting.
","----neg----:
foo()  # nоqa  # ""о"" is Cyrillic (`U+043E`)
----pos----:
foo()  # noqa  # ""o"" is Latin (`U+006F`)
","https://docs.astral.sh/ruff/settings/#lint_allowed-confusables
lint.allowed-confusables
None","
<h1 id=""ambiguous-unicode-character-comment-ruf003"">ambiguous-unicode-character-comment (RUF003)<a class=""headerlink"" href=""#ambiguous-unicode-character-comment-ruf003"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/collection-literal-concatenation/,RUF005,collection-literal-concatenation,Consider <code>{expression}</code> instead of concatenation,Rule is stable,Automatic fix available,"What it does#
Checks for uses of the + operator to concatenate collections.
","Why is this bad?#
In Python, the + operator can be used to concatenate collections (e.g.,
x + y to concatenate the lists x and y).
However, collections can be concatenated more efficiently using the
unpacking operator (e.g., [*x, *y] to concatenate x and y).
Prefer the unpacking operator to concatenate collections, as it is more
readable and flexible. The * operator can unpack any iterable, whereas
+ operates only on particular sequences which, in many cases, must be of
the same type.
","----neg----:
foo = [2, 3, 4]
bar = [1] + foo + [5, 6]
----pos----:
foo = [2, 3, 4]
bar = [1, *foo, 5, 6]
",,"
<h1 id=""collection-literal-concatenation-ruf005"">collection-literal-concatenation (RUF005)<a class=""headerlink"" href=""#collection-literal-concatenation-ruf005"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://peps.python.org/pep-0448/"">PEP 448 – Additional Unpacking Generalizations</a></li>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range"">Python documentation: Sequence Types — <code>list</code>, <code>tuple</code>, <code>range</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/asyncio-dangling-task/,RUF006,asyncio-dangling-task,Store a reference to the return value of <code>{expr}.{method}</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for asyncio.create_task and asyncio.ensure_future calls
that do not store a reference to the returned result.
","Why is this bad?#
Per the asyncio documentation, the event loop only retains a weak
reference to tasks. If the task returned by asyncio.create_task and
asyncio.ensure_future is not stored in a variable, or a collection,
or otherwise referenced, it may be garbage collected at any time. This
can lead to unexpected and inconsistent behavior, as your tasks may or
may not run to completion.
","----neg----:
import asyncio

for i in range(10):
    # This creates a weak reference to the task, which may be garbage
    # collected at any time.
    asyncio.create_task(some_coro(param=i))
----pos----:
import asyncio

background_tasks = set()

for i in range(10):
    task = asyncio.create_task(some_coro(param=i))

    # Add task to the set. This creates a strong reference.
    background_tasks.add(task)

    # To prevent keeping references to finished tasks forever,
    # make each task remove its own reference from the set after
    # completion:
    task.add_done_callback(background_tasks.discard)
",,"
<h1 id=""asyncio-dangling-task-ruf006"">asyncio-dangling-task (RUF006)<a class=""headerlink"" href=""#asyncio-dangling-task-ruf006"" title=""Permanent link"">#</a></h1>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://textual.textualize.io/blog/2023/02/11/the-heisenbug-lurking-in-your-async-code/""><em>The Heisenbug lurking in your async code</em></a></li>
<li><a href=""https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task"">The Python Standard Library</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/pairwise-over-zipped/,RUF007,pairwise-over-zipped,Prefer <code>itertools.pairwise()</code> over <code>zip()</code> when iterating over successive pairs,Rule is stable,Automatic fix not available,"What it does#
Checks for use of zip() to iterate over successive pairs of elements.
","Why is this bad?#
When iterating over successive pairs of elements, prefer
itertools.pairwise() over zip().
itertools.pairwise() is more readable and conveys the intent of the code
more clearly.
","----neg----:
letters = ""ABCD""
zip(letters, letters[1:])  # (""A"", ""B""), (""B"", ""C""), (""C"", ""D"")
----pos----:
from itertools import pairwise

letters = ""ABCD""
pairwise(letters)  # (""A"", ""B""), (""B"", ""C""), (""C"", ""D"")
",,"
<h1 id=""pairwise-over-zipped-ruf007"">pairwise-over-zipped (RUF007)<a class=""headerlink"" href=""#pairwise-over-zipped-ruf007"" title=""Permanent link"">#</a></h1>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/itertools.html#itertools.pairwise"">Python documentation: <code>itertools.pairwise</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/mutable-dataclass-default/,RUF008,mutable-dataclass-default,Do not use mutable default values for dataclass attributes,Rule is stable,Automatic fix not available,"What it does#
Checks for mutable default values in dataclass attributes.
","Why is this bad?#
Mutable default values share state across all instances of the dataclass.
This can lead to bugs when the attributes are changed in one instance, as
those changes will unexpectedly affect all other instances.
Instead of sharing mutable defaults, use the field(default_factory=...)
pattern.
If the default value is intended to be mutable, it must be annotated with
typing.ClassVar; otherwise, a ValueError will be raised.
Examples#
from dataclasses import dataclass


@dataclass
class A:
    # A list without a `default_factory` or `ClassVar` annotation
    # will raise a `ValueError`.
    mutable_default: list[int] = []

Use instead:
from dataclasses import dataclass, field


@dataclass
class A:
    mutable_default: list[int] = field(default_factory=list)

Or:
from dataclasses import dataclass
from typing import ClassVar


@dataclass
class A:
    mutable_default: ClassVar[list[int]] = []

",,,"
<h1 id=""mutable-dataclass-default-ruf008"">mutable-dataclass-default (RUF008)<a class=""headerlink"" href=""#mutable-dataclass-default-ruf008"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/function-call-in-dataclass-default-argument/,RUF009,function-call-in-dataclass-default-argument,Do not perform function call <code>{name}</code> in dataclass defaults,Rule is stable,Automatic fix not available,"What it does#
Checks for function calls in dataclass attribute defaults.
","Why is this bad?#
Function calls are only performed once, at definition time. The returned
value is then reused by all instances of the dataclass. This can lead to
unexpected behavior when the function call returns a mutable object, as
changes to the object will be shared across all instances.
If a field needs to be initialized with a mutable object, use the
field(default_factory=...) pattern.
Examples#
from dataclasses import dataclass


def simple_list() -> list[int]:
    return [1, 2, 3, 4]


@dataclass
class A:
    mutable_default: list[int] = simple_list()

Use instead:
from dataclasses import dataclass, field


def creating_list() -> list[int]:
    return [1, 2, 3, 4]


@dataclass
class A:
    mutable_default: list[int] = field(default_factory=creating_list)

",,"https://docs.astral.sh/ruff/settings/#lint_flake8-bugbear_extend-immutable-calls
lint.flake8-bugbear.extend-immutable-calls
None","
<h1 id=""function-call-in-dataclass-default-argument-ruf009"">function-call-in-dataclass-default-argument (RUF009)<a class=""headerlink"" href=""#function-call-in-dataclass-default-argument-ruf009"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/explicit-f-string-type-conversion/,RUF010,explicit-f-string-type-conversion,Use explicit conversion flag,Rule is stable,Automatic fix available,"What it does#
Checks for uses of str(), repr(), and ascii() as explicit type
conversions within f-strings.
","Why is this bad?#
f-strings support dedicated conversion flags for these types, which are
more succinct and idiomatic.
Note that, in many cases, calling str() within an f-string is
unnecessary and can be removed entirely, as the value will be converted
to a string automatically, the notable exception being for classes that
implement a custom __format__ method.
","----neg----:
a = ""some string""
f""{repr(a)}""
----pos----:
a = ""some string""
f""{a!r}""
",,"
<h1 id=""explicit-f-string-type-conversion-ruf010"">explicit-f-string-type-conversion (RUF010)<a class=""headerlink"" href=""#explicit-f-string-type-conversion-ruf010"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/ruff-static-key-dict-comprehension/,RUF011,ruff-static-key-dict-comprehension,"<span style=""opacity: 0.5"" title=""This rule has been removed"">Dictionary comprehension uses static key</span>",Rule has been removed,Automatic fix not available,"What it does#
Checks for dictionary comprehensions that use a static key, like a string
literal or a variable defined outside the comprehension.
","Why is this bad?#
Using a static key (like a string literal) in a dictionary comprehension
is usually a mistake, as it will result in a dictionary with only one key,
despite the comprehension iterating over multiple values.
","----neg----:
data = [""some"", ""Data""]
{""key"": value.upper() for value in data}
----pos----:
data = [""some"", ""Data""]
{value: value.upper() for value in data}
",,"
<h1 id=""ruff-static-key-dict-comprehension-ruf011"">ruff-static-key-dict-comprehension (RUF011)<a class=""headerlink"" href=""#ruff-static-key-dict-comprehension-ruf011"" title=""Permanent link"">#</a></h1>
<p><strong>Warning: This rule has been removed and its documentation is only available for historical reasons.</strong></p>
<h2 id=""removed"">Removed<a class=""headerlink"" href=""#removed"" title=""Permanent link"">#</a></h2>
<p>This rule was implemented in <code>flake8-bugbear</code> and has been remapped to <a href=""https://docs.astral.sh/ruff/rules/static-key-dict-comprehension/"">B035</a></p>
"
https://docs.astral.sh/ruff/rules/mutable-class-default/,RUF012,mutable-class-default,Mutable class attributes should be annotated with <code>typing.ClassVar</code>,Rule is stable,Automatic fix not available,"What it does#
Checks for mutable default values in class attributes.
","Why is this bad?#
Mutable default values share state across all instances of the class,
while not being obvious. This can lead to bugs when the attributes are
changed in one instance, as those changes will unexpectedly affect all
other instances.
When mutable values are intended, they should be annotated with
typing.ClassVar. When mutability is not required, values should be
immutable types, like tuple or frozenset.
Examples#
class A:
    mutable_default: list[int] = []
    immutable_default: list[int] = []

Use instead:
from typing import ClassVar


class A:
    mutable_default: ClassVar[list[int]] = []
    immutable_default: tuple[int, ...] = ()

",,,"
<h1 id=""mutable-class-default-ruf012"">mutable-class-default (RUF012)<a class=""headerlink"" href=""#mutable-class-default-ruf012"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/implicit-optional/,RUF013,implicit-optional,PEP 484 prohibits implicit <code>Optional</code>,Rule is stable,Automatic fix available,"What it does#
Checks for the use of implicit Optional in type annotations when the
default parameter value is None.
","Why is this bad?#
Implicit Optional is prohibited by PEP 484. It is confusing and
inconsistent with the rest of the type system.
It's recommended to use Optional[T] instead. For Python 3.10 and later,
you can also use T | None.
","----neg----:
def foo(arg: int = None):
    pass
----pos----:
from typing import Optional


def foo(arg: Optional[int] = None):
    pass
----other----:
Or, for Python 3.10 and later:
def foo(arg: int | None = None):
    pass

If you want to use the | operator in Python 3.9 and earlier, you can
use future imports:
from __future__ import annotations


def foo(arg: int | None = None):
    pass

Limitations#
Type aliases are not supported and could result in false negatives.
For example, the following code will not be flagged:
Text = str | bytes


def foo(arg: Text = None):
    pass

","https://docs.astral.sh/ruff/settings/#target-version
target-version
None","
<h1 id=""implicit-optional-ruf013"">implicit-optional (RUF013)<a class=""headerlink"" href=""#implicit-optional-ruf013"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
"
https://docs.astral.sh/ruff/rules/unnecessary-iterable-allocation-for-first-element/,RUF015,unnecessary-iterable-allocation-for-first-element,Prefer <code>next({iterable})</code> over single element slice,Rule is stable,Automatic fix available,"What it does#
Checks the following constructs, all of which can be replaced by
next(iter(...)):

list(...)[0]
tuple(...)[0]
list(i for i in ...)[0]
[i for i in ...][0]
list(...).pop(0)

","Why is this bad?#
Calling e.g. list(...) will create a new list of the entire collection,
which can be very expensive for large collections. If you only need the
first element of the collection, you can use next(...) or
next(iter(...) to lazily fetch the first element. The same is true for
the other constructs.
","----neg----:
head = list(x)[0]
head = [x * x for x in range(10)][0]
----pos----:
head = next(iter(x))
head = next(x * x for x in range(10))
----other----:
This rule's fix is marked as unsafe, as migrating from (e.g.) list(...)[0]
to next(iter(...)) can change the behavior of your program in two ways:

First, all above-mentioned constructs will eagerly evaluate the entire
    collection, while next(iter(...)) will only evaluate the first
    element. As such, any side effects that occur during iteration will be
    delayed.
Second, accessing members of a collection via square bracket notation
    [0] of the pop() function will raise IndexError if the collection
    is empty, while next(iter(...)) will raise StopIteration.

",,"
<h1 id=""unnecessary-iterable-allocation-for-first-element-ruf015"">unnecessary-iterable-allocation-for-first-element (RUF015)<a class=""headerlink"" href=""#unnecessary-iterable-allocation-for-first-element-ruf015"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://realpython.com/python-iterators-iterables/#when-to-use-an-iterator-in-python"">Iterators and Iterables in Python: Run Efficient Iterations</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-index-type/,RUF016,invalid-index-type,Slice in indexed access to type <code>{value_type}</code> uses type <code>{index_type}</code> instead of an integer,Rule is stable,Automatic fix not available,"What it does#
Checks for indexed access to lists, strings, tuples, bytes, and comprehensions
using a type other than an integer or slice.
","Why is this bad?#
Only integers or slices can be used as indices to these types. Using
other types will result in a TypeError at runtime and a SyntaxWarning at
import time.
","----neg----:
var = [1, 2, 3][""x""]
----pos----:
var = [1, 2, 3][0]
",,"
<h1 id=""invalid-index-type-ruf016"">invalid-index-type (RUF016)<a class=""headerlink"" href=""#invalid-index-type-ruf016"" title=""Permanent link"">#</a></h1>
"
https://docs.astral.sh/ruff/rules/quadratic-list-summation/,RUF017,quadratic-list-summation,Avoid quadratic list summation,Rule is stable,Automatic fix available,"What it does#
Checks for the use of sum() to flatten lists of lists, which has
quadratic complexity.
","Why is this bad?#
The use of sum() to flatten lists of lists is quadratic in the number of
lists, as sum() creates a new list for each element in the summation.
Instead, consider using another method of flattening lists to avoid
quadratic complexity. The following methods are all linear in the number of
lists:

functools.reduce(operator.iconcat, lists, [])
list(itertools.chain.from_iterable(lists))
[item for sublist in lists for item in sublist]

","----neg----:
lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
joined = sum(lists, [])
----pos----:
import functools
import operator


lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
functools.reduce(operator.iconcat, lists, [])
",,"
<h1 id=""quadratic-list-summation-ruf017"">quadratic-list-summation (RUF017)<a class=""headerlink"" href=""#quadratic-list-summation-ruf017"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python""><em>How Not to Flatten a List of Lists in Python</em></a></li>
<li><a href=""https://stackoverflow.com/questions/952914/how-do-i-make-a-flat-list-out-of-a-list-of-lists/953097#953097""><em>How do I make a flat list out of a list of lists?</em></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/assignment-in-assert/,RUF018,assignment-in-assert,Avoid assignment expressions in <code>assert</code> statements,Rule is stable,Automatic fix not available,"What it does#
Checks for named assignment expressions (e.g., x := 0) in assert
statements.
","Why is this bad?#
Named assignment expressions (also known as ""walrus operators"") are used to
assign a value to a variable as part of a larger expression.
Named assignments are syntactically valid in assert statements. However,
when the Python interpreter is run under the -O flag, assert statements
are not executed. In this case, the named assignment will also be ignored,
which may result in unexpected behavior (e.g., undefined variable
accesses).
Examples#
assert (x := 0) == 0

Use instead:
x = 0
assert x == 0

",,,"
<h1 id=""assignment-in-assert-ruf018"">assignment-in-assert (RUF018)<a class=""headerlink"" href=""#assignment-in-assert-ruf018"" title=""Permanent link"">#</a></h1>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/using/cmdline.html#cmdoption-O"">Python documentation: <code>-O</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-key-check/,RUF019,unnecessary-key-check,Unnecessary key check before dictionary access,Rule is stable,Automatic fix available,"What it does#
Checks for unnecessary key checks prior to accessing a dictionary.
","Why is this bad?#
When working with dictionaries, the get can be used to access a value
without having to check if the dictionary contains the relevant key,
returning None if the key is not present.
Examples#
if ""key"" in dct and dct[""key""]:
    ...

Use instead:
if dct.get(""key""):
    ...

",,,"
<h1 id=""unnecessary-key-check-ruf019"">unnecessary-key-check (RUF019)<a class=""headerlink"" href=""#unnecessary-key-check-ruf019"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
"
https://docs.astral.sh/ruff/rules/never-union/,RUF020,never-union,<code>{never_like} | T</code> is equivalent to <code>T</code>,Rule is stable,Automatic fix available,"What it does#
Checks for uses of typing.NoReturn and typing.Never in union types.
","Why is this bad?#
typing.NoReturn and typing.Never are special types, used to indicate
that a function never returns, or that a type has no values.
Including typing.NoReturn or typing.Never in a union type is redundant,
as, e.g., typing.Never | T is equivalent to T.
","----neg----:
from typing import Never


def func() -> Never | int:
    ...
----pos----:
def func() -> int:
    ...
",,"
<h1 id=""never-union-ruf020"">never-union (RUF020)<a class=""headerlink"" href=""#never-union-ruf020"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.Never"">Python documentation: <code>typing.Never</code></a></li>
<li><a href=""https://docs.python.org/3/library/typing.html#typing.NoReturn"">Python documentation: <code>typing.NoReturn</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/parenthesize-chained-operators/,RUF021,parenthesize-chained-operators,"Parenthesize <code>a and b</code> expressions when chaining <code>and</code> and <code>or</code> together, to make the precedence clear",Rule is in preview,Automatic fix available,"What it does#
Checks for chained operators where adding parentheses could improve the
clarity of the code.
","Why is this bad?#
and always binds more tightly than or when chaining the two together,
but this can be hard to remember (and sometimes surprising).
Adding parentheses in these situations can greatly improve code readability,
with no change to semantics or performance.
For example:
a, b, c = 1, 0, 2
x = a or b and c

d, e, f = 0, 1, 2
y = d and e or f

Use instead:
a, b, c = 1, 0, 2
x = a or (b and c)

d, e, f = 0, 1, 2
y = (d and e) or f

",,,"
<h1 id=""parenthesize-chained-operators-ruf021"">parenthesize-chained-operators (RUF021)<a class=""headerlink"" href=""#parenthesize-chained-operators-ruf021"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unsorted-dunder-all/,RUF022,unsorted-dunder-all,<code>__all__</code> is not sorted,Rule is in preview,Automatic fix available,"What it does#
Checks for __all__ definitions that are not ordered
according to an ""isort-style"" sort.
An isort-style sort orders items first according to their casing:
SCREAMING_SNAKE_CASE names (conventionally used for global constants)
come first, followed by CamelCase names (conventionally used for
classes), followed by anything else. Within each category,
a natural sort
is used to order the elements.
","Why is this bad?#
Consistency is good. Use a common convention for __all__ to make your
code more readable and idiomatic.
","----neg----:
import sys

__all__ = [
    ""b"",
    ""c"",
    ""a"",
]

if sys.platform == ""win32"":
    __all__ += [""z"", ""y""]
----pos----:
import sys

__all__ = [
    ""a"",
    ""b"",
    ""c"",
]

if sys.platform == ""win32"":
    __all__ += [""y"", ""z""]
----other----:
This rule's fix is marked as always being safe, in that
it should never alter the semantics of any Python code.
However, note that for multiline __all__ definitions
that include comments on their own line, it can be hard
to tell where the comments should be moved to when sorting
the contents of __all__. While this rule's fix will
never delete a comment, it might sometimes move a
comment to an unexpected location.
",,"
<h1 id=""unsorted-dunder-all-ruf022"">unsorted-dunder-all (RUF022)<a class=""headerlink"" href=""#unsorted-dunder-all-ruf022"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unsorted-dunder-slots/,RUF023,unsorted-dunder-slots,<code>{}.__slots__</code> is not sorted,Rule is in preview,Automatic fix available,"What it does#
Checks for __slots__ definitions that are not ordered according to a
natural sort.
","Why is this bad?#
Consistency is good. Use a common convention for this special variable
to make your code more readable and idiomatic.
","----neg----:
class Dog:
    __slots__ = ""name"", ""breed""
----pos----:
class Dog:
    __slots__ = ""breed"", ""name""
",,"
<h1 id=""unsorted-dunder-slots-ruf023"">unsorted-dunder-slots (RUF023)<a class=""headerlink"" href=""#unsorted-dunder-slots-ruf023"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/mutable-fromkeys-value/,RUF024,mutable-fromkeys-value,Do not pass mutable objects as values to <code>dict.fromkeys</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for mutable objects passed as a value argument to dict.fromkeys.
","Why is this bad?#
All values in the dictionary created by the dict.fromkeys method
refer to the same instance of the provided object. If that object is
modified, all values are modified, which can lead to unexpected behavior.
For example, if the empty list ([]) is provided as the default value,
all values in the dictionary will use the same list; as such, appending to
any one entry will append to all entries.
Instead, use a comprehension to generate a dictionary with distinct
instances of the default value.
","----neg----:
cities = dict.fromkeys([""UK"", ""Poland""], [])
cities[""UK""].append(""London"")
cities[""Poland""].append(""Poznan"")
print(cities)  # {'UK': ['London', 'Poznan'], 'Poland': ['London', 'Poznan']}
----pos----:
cities = {country: [] for country in [""UK"", ""Poland""]}
cities[""UK""].append(""London"")
cities[""Poland""].append(""Poznan"")
print(cities)  # {'UK': ['London'], 'Poland': ['Poznan']}
----other----:
This rule's fix is marked as unsafe, as the edit will change the behavior of
the program by using a distinct object for every value in the dictionary,
rather than a shared mutable instance. In some cases, programs may rely on
the previous behavior.
",,"
<h1 id=""mutable-fromkeys-value-ruf024"">mutable-fromkeys-value (RUF024)<a class=""headerlink"" href=""#mutable-fromkeys-value-ruf024"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.python.org/3/library/stdtypes.html#dict.fromkeys"">Python documentation: <code>dict.fromkeys</code></a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/unnecessary-dict-comprehension-for-iterable/,RUF025,unnecessary-dict-comprehension-for-iterable,Unnecessary dict comprehension for iterable; use <code>dict.fromkeys</code> instead,Rule is in preview,Automatic fix available,"What it does#
Checks for unnecessary dict comprehension when creating a dictionary from
an iterable.
","Why is this bad?#
It's unnecessary to use a dict comprehension to build a dictionary from
an iterable when the value is static.
Prefer dict.fromkeys(iterable) over {value: None for value in iterable},
as dict.fromkeys is more readable and efficient.
Examples#
{a: None for a in iterable}
{a: 1 for a in iterable}

Use instead:
dict.fromkeys(iterable)
dict.fromkeys(iterable, 1)

",,,"
<h1 id=""unnecessary-dict-comprehension-for-iterable-ruf025"">unnecessary-dict-comprehension-for-iterable (RUF025)<a class=""headerlink"" href=""#unnecessary-dict-comprehension-for-iterable-ruf025"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/default-factory-kwarg/,RUF026,default-factory-kwarg,<code>default_factory</code> is a positional-only argument to <code>defaultdict</code>,Rule is in preview,Automatic fix available,"What it does#
Checks for incorrect usages of default_factory as a keyword argument when
initializing a defaultdict.
","Why is this bad?#
The defaultdict constructor accepts a callable as its first argument.
For example, it's common to initialize a defaultdict with int or list
via defaultdict(int) or defaultdict(list), to create a dictionary that
returns 0 or [] respectively when a key is missing.
The default factory must be provided as a positional argument, as all
keyword arguments to defaultdict are interpreted as initial entries in
the dictionary. For example, defaultdict(foo=1, bar=2) will create a
dictionary with {""foo"": 1, ""bar"": 2} as its initial entries.
As such, defaultdict(default_factory=list) will create a dictionary with
{""default_factory"": list} as its initial entry, instead of a dictionary
that returns [] when a key is missing. Specifying a default_factory
keyword argument is almost always a mistake, and one that type checkers
can't reliably detect.
Fix safety#
This rule's fix is marked as unsafe, as converting default_factory from a
keyword to a positional argument will change the behavior of the code, even
if the keyword argument was used erroneously.
Examples#
defaultdict(default_factory=int)
defaultdict(default_factory=list)

Use instead:
defaultdict(int)
defaultdict(list)

",,,"
<h1 id=""default-factory-kwarg-ruf026"">default-factory-kwarg (RUF026)<a class=""headerlink"" href=""#default-factory-kwarg-ruf026"" title=""Permanent link"">#</a></h1>
<p>Fix is sometimes available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/missing-f-string-syntax/,RUF027,missing-f-string-syntax,Possible f-string without an <code>f</code> prefix,Rule is in preview,Automatic fix available,"What it does#
Checks for strings that contain f-string syntax but are not f-strings.
","Why is this bad?#
An f-string missing an f at the beginning won't format anything, and instead
treat the interpolation syntax as literal.
Since there are many possible string literals which contain syntax similar to f-strings yet are not intended to be,
this lint will disqualify any literal that satisfies any of the following conditions:

The string literal is a standalone expression. For example, a docstring.
The literal is part of a function call with argument names that match at least one variable (for example: format(""Message: {value}"", value = ""Hello World""))
The literal (or a parent expression of the literal) has a direct method call on it (for example: ""{value}"".format(...))
The string has no {...} expression sections, or uses invalid f-string syntax.
The string references variables that are not in scope, or it doesn't capture variables at all.
Any format specifiers in the potential f-string are invalid.

","----neg----:
name = ""Sarah""
dayofweek = ""Tuesday""
msg = ""Hello {name}! It is {dayofweek} today!""
----pos----:
name = ""Sarah""
dayofweek = ""Tuesday""
msg = f""Hello {name}! It is {dayofweek} today!""
",,"
<h1 id=""missing-f-string-syntax-ruf027"">missing-f-string-syntax (RUF027)<a class=""headerlink"" href=""#missing-f-string-syntax-ruf027"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/invalid-formatter-suppression-comment/,RUF028,invalid-formatter-suppression-comment,This suppression comment is invalid because {},Rule is in preview,Automatic fix available,"What it does#
Checks for formatter suppression comments that are ineffective or incompatible
with Ruff's formatter.
","Why is this bad?#
Suppression comments that do not actually prevent formatting could cause unintended changes
when the formatter is run.
Examples#
In the following example, all suppression comments would cause
a rule violation.
def decorator():
    pass


@decorator
# fmt: off
def example():
    if True:
        # fmt: skip
        expression = [
            # fmt: off
            1,
            2,
        ]
        # yapf: disable
    # fmt: on
    # yapf: enable

",,,"
<h1 id=""invalid-formatter-suppression-comment-ruf028"">invalid-formatter-suppression-comment (RUF028)<a class=""headerlink"" href=""#invalid-formatter-suppression-comment-ruf028"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<p>This rule is unstable and in <a href=""../../preview/"">preview</a>. The <code>--preview</code> flag is required for use.</p>
"
https://docs.astral.sh/ruff/rules/unused-noqa/,RUF100,unused-noqa,Unused <code>noqa</code> directive,Rule is stable,Automatic fix available,"What it does#
Checks for noqa directives that are no longer applicable.
","Why is this bad?#
A noqa directive that no longer matches any diagnostic violations is
likely included by mistake, and should be removed to avoid confusion.
","----neg----:
import foo  # noqa: F401


def bar():
    foo.bar()
----pos----:
import foo


def bar():
    foo.bar()
","https://docs.astral.sh/ruff/settings/#lint_external
lint.external
None","
<h1 id=""unused-noqa-ruf100"">unused-noqa (RUF100)<a class=""headerlink"" href=""#unused-noqa-ruf100"" title=""Permanent link"">#</a></h1>
<p>Fix is always available.</p>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://docs.astral.sh/ruff/linter/#error-suppression"">Ruff error suppression</a></li>
</ul>
"
https://docs.astral.sh/ruff/rules/invalid-pyproject-toml/,RUF200,invalid-pyproject-toml,Failed to parse pyproject.toml: {message},Rule is stable,Automatic fix not available,"What it does#
Checks for any pyproject.toml that does not conform to the schema from the relevant PEPs.
","Why is this bad?#
Your project may contain invalid metadata or configuration without you noticing
","----neg----:
[project]
name = ""crab""
version = ""1.0.0""
authors = [""Ferris the Crab <[email protected]>""]
----pos----:
[project]
name = ""crab""
version = ""1.0.0""
authors = [
  { email = ""[email protected]"" },
  { name = ""Ferris the Crab""}
]
",,"
<h1 id=""invalid-pyproject-toml-ruf200"">invalid-pyproject-toml (RUF200)<a class=""headerlink"" href=""#invalid-pyproject-toml-ruf200"" title=""Permanent link"">#</a></h1>
<h2 id=""references"">References<a class=""headerlink"" href=""#references"" title=""Permanent link"">#</a></h2>
<ul>
<li><a href=""https://packaging.python.org/en/latest/specifications/declaring-project-metadata/"">Specification of <code>[project]</code> in pyproject.toml</a></li>
<li><a href=""https://peps.python.org/pep-0518/"">Specification of <code>[build-system]</code> in pyproject.toml</a></li>
<li><a href=""https://peps.python.org/pep-0639"">Draft but implemented license declaration extensions</a></li>
</ul>
"
