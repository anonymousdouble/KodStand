{
    "\n2.2 File encoding: UTF-8\nSource files are encoded in UTF-8 .": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n2.2 File encoding: UTF-8\nSource files are encoded in UTF-8 .\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "The given Google Java Style Guide rule can be parsed as follows:\n\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n\nThis representation shows that the rule is mandatory and specifies that braces should be used with `if`, `else`, `for`, `do`, and `while` statements, even when the body is empty or contains only a single statement."
    ],
    "\n2.3.1 Whitespace characters\nAside from the line terminator sequence, the ASCII horizontal space character ( 0x20 ) is the only whitespace character that appears anywhere in a source file. This implies that:\n All other whitespace characters in string and character literals are escaped. \n Tab characters are not used for indentation.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n2.3.1 Whitespace characters\nAside from the line terminator sequence, the ASCII horizontal space character ( 0x20 ) is the only whitespace character that appears anywhere in a source file. This implies that:\n All other whitespace characters in string and character literals are escaped. \n Tab characters are not used for indentation.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [ASCII horizontal space character (0x20)] is [Whitespace character] \nAnd\nMandatory: [All] other [Whitespace characters] in [string and character literals] are [escaped]\nAnd\nMandatory: [Tab characters] are not used for [indentation]"
    ],
    "\n2.3.2 Special escape sequences\nFor any character that has a special escape sequence ( `\\b` , `\\t` , `\\n` , `\\f` , `\\r` , `\\\"` , `\\'` and `\\\\` ), that sequence is used rather than the corresponding octal (e.g. `\\012` ) or Unicode (e.g. `\\u000a` ) escape.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n2.3.2 Special escape sequences\nFor any character that has a special escape sequence ( `\\b` , `\\t` , `\\n` , `\\f` , `\\r` , `\\\"` , `\\'` and `\\\\` ), that sequence is used rather than the corresponding octal (e.g. `\\012` ) or Unicode (e.g. `\\u000a` ) escape.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [Special escape sequences] have [sequence] is [used] rather than [octal escape] or [Unicode escape]"
    ],
    "\n2.3.3 Non-ASCII characters\nFor the remaining non-ASCII characters, either the actual Unicode character (e.g. `\u922d\u7008 ) or the equivalent Unicode escape (e.g. `\\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.\n Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.\n Examples:\n Example \n Discussion \n `StringunitAbbrev=\"\u6e2ds\";` \n Best: perfectly clear even without a comment. \n `StringunitAbbrev=\"\\u03bcs\";//\"\u6e2ds\"` \n Allowed, but there's no reason to do this. \n `StringunitAbbrev=\"\\u03bcs\";//Greeklettermu,\"s\"` \n Allowed, but awkward and prone to mistakes. \n `StringunitAbbrev=\"\\u03bcs\";` \n Poor: the reader has no idea what this is. \n `return'\\ufeff'+content;//byteordermark` \n Good: use escapes for non-printable characters, and comment if necessary.\n Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n2.3.3 Non-ASCII characters\nFor the remaining non-ASCII characters, either the actual Unicode character (e.g. `\u922d\u7008 ) or the equivalent Unicode escape (e.g. `\\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.\n Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.\n Examples:\n Example \n Discussion \n `StringunitAbbrev=\"\u6e2ds\";` \n Best: perfectly clear even without a comment. \n `StringunitAbbrev=\"\\u03bcs\";//\"\u6e2ds\"` \n Allowed, but there's no reason to do this. \n `StringunitAbbrev=\"\\u03bcs\";//Greeklettermu,\"s\"` \n Allowed, but awkward and prone to mistakes. \n `StringunitAbbrev=\"\\u03bcs\";` \n Poor: the reader has no idea what this is. \n `return'\\ufeff'+content;//byteordermark` \n Good: use escapes for non-printable characters, and comment if necessary.\n Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [Non-ASCII characters] have [actual Unicode character] or [equivalent Unicode escape]\nOr\nMandatory: [choice] is [actual Unicode character] or [equivalent Unicode escape] for [Non-ASCII characters]\nOr\nOptional: [Unicode escapes] outside [string literals] and [comments] are [discouraged]"
    ],
    "\n3 Source file structure\nA source file consists of, in order : \n License or copyright information, if present \n Package statement \n Import statements \n Exactly one top-level class\n \n\n Exactly one blank line separates each section that is present.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3 Source file structure\nA source file consists of, in order : \n License or copyright information, if present \n Package statement \n Import statements \n Exactly one top-level class\n \n\n Exactly one blank line separates each section that is present.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]"
    ],
    "\n3.1 License or copyright information, if present\nIf license or copyright information belongs in a file, it belongs here.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3.1 License or copyright information, if present\nIf license or copyright information belongs in a file, it belongs here.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "The Google Java Style Guide provided contains rules for coding conventions and practices when writing Java code. Each sentence in the guide can be classified as a rule, and some are mandatory while others are optional. \n\nFor example, the sentence \"4.1.1 Use of optional braces\" can be parsed as follows:\n\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n\nThis representation shows that the use of braces with certain statements is mandatory, even when the body is empty or contains only a single statement. Other optional braces, such as those in a lambda expression, remain optional."
    ],
    "\n3.2 Package statement\nThe package statement is not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to package statements.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3.2 Package statement\nThe package statement is not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to package statements.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [PackageStatement] is not [line-wrapped]"
    ],
    "\n3.3.1 No wildcard imports\nWildcard imports , static or otherwise, are not used .": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3.3.1 No wildcard imports\nWildcard imports , static or otherwise, are not used .\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null]\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]"
    ],
    "\n3.3.2 No line-wrapping\nImport statements are not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to import statements.": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3.3.2 No line-wrapping\nImport statements are not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to import statements.\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [ImportStatement] is not [Line-wrapped]"
    ],
    "\n3.3.3 Ordering and spacing\nImports are ordered as follows:\n All static imports in a single block. \n All non-static imports in a single block.\n If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.\n Within each block the imported names appear in ASCII sort order. ( Note: this is not the same as the import statements being in ASCII sort order, since '.' sorts before ';'.)": [
        "Analyze the following Google Java Style Guide, please parse the style using the given Grammar to make its semantics clear and correct.\n\n1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.\n2. When parsing the rule using a given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. \n\nGoogle Java Style Guide:\n\n3.3.3 Ordering and spacing\nImports are ordered as follows:\n All static imports in a single block. \n All non-static imports in a single block.\n If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.\n Within each block the imported names appear in ASCII sort order. ( Note: this is not the same as the import statements being in ASCII sort order, since '.' sorts before ';'.)\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nFor Example, Analyze the following Google Java Style Guide, please parse the style using the given Grammar. \n\nGoogle Java Style Guide:\n4.1.1 Use of optional braces\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional.\n\n\nFinal RuleSet Representation:\nMandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\nOr\nMandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] \n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] \nOr\nMandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1\n\u2014> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]\n",
        "Mandatory: [All] [static imports] in a single block\nAnd\nMandatory: [All] [non-static imports] in a single block\nAnd\nMandatory: [If] there are [both] [static] and [non-static imports], a single blank line separates the two blocks\nAnd\nMandatory: [There] are [no] other blank lines between import statements\nAnd\nMandatory: [Within] each block the imported names appear in ASCII sort order"
    ]
}