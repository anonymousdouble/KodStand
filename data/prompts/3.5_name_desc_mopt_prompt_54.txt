Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
4.8.5.1 Type-use annotations
Type-use annotations appear immediately before the annotated type. An annotation is a type-use annotation if it is meta-annotated with @Target(ElementType.TYPE_USE). Example:
 final @Nullable String name;
 

 public @Nullable Person getPersonByName(String name);

CheckStyle Rules:
[Rule]
AnnotationLocation
[Description]
Checks location of annotation on language elements.
By default, Check enforce to locate annotations immediately after documentation block
and before target element, annotation should be located on separate line from target
element. This check also verifies that the annotations are on the same indenting level as
the annotated element if they are not on the same line.


Attention: Elements that cannot have JavaDoc comments like local variables are not in the
scope of this check even though a token type like VARIABLE_DEF would match
them.


Attention: Annotations among modifiers are ignored (looks like false-negative)
as there might be a problem with annotations for return types:


public @Nullable Long getStartTimeOrNull() { ... }

Such annotations are better to keep close to type.
Due to limitations, Checkstyle can not examine the target of an annotation.


Example:



@Override
@Nullable
public String getNameIfPresent() { ... }
[Options]
allowSamelineMultipleAnnotations, Allow annotation(s) to be located on the same line as target element.
allowSamelineParameterizedAnnotation, Allow one and only parameterized annotation to be located on the same line as target element.
allowSamelineSingleParameterlessAnnotation, Allow single parameterless annotation to be located on the same line as target element.
tokens, tokens to check
[Rule]
ModifierOrder
[Description]
Checks that the order of modifiers conforms to the suggestions in
the Java
Language specification, ¡ì 8.1.1, 8.3.1, 8.4.3 and

9.4. The correct order is:



public


protected


private


abstract


default


static


sealed


non-sealed


final


transient


volatile


synchronized


native


strictfp



In additional, modifiers are checked to ensure all annotations are
declared before all other modifiers.


Rationale: Code is easier to read if everybody follows a standard.


ATTENTION: We skip

type annotations from validation.
[Options]
[Rule]
PackageAnnotation
[Description]
Checks that all package annotations are in the package-info.java file.


For Java SE8 and above, placement of package annotations in the package-info.java
file is enforced by the compiler and this check is not necessary.


For Java SE7 and below, the Java Language Specification highly recommends
but doesn't require that annotations are placed in the package-info.java file,
and this check can help to enforce that placement.


See
Java Language Specification, ¡ì7.4.1 for more info.
[Options]
[Rule]
InterfaceIsType
[Description]
Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to
define types.


According to Bloch, an interface should describe a type.
It is therefore inappropriate to define an interface that does not
contain any methods but only constants. The Standard interface
javax.swing.SwingConstants
is an example of an interface that would be flagged by this check.


The check can be configured to also disallow marker interfaces like
java.io.Serializable, that do not contain methods or
constants at all.
[Options]
allowMarkerInterfaces, Control whether marker interfaces like Serializable are allowed.
[Rule]
OneTopLevelClass
[Description]
Checks that each top-level class, interface, enum
or annotation resides in a source file of its own.
Official description of a 'top-level' term:
7.6. Top Level Type Declarations.
If file doesn't contain public class, interface, enum or annotation,
top-level type is the first type in file.
[Options]
[Rule]
DesignForExtension
[Description]
Checks that classes are designed for extension (subclass creation).


Nothing wrong could be with founded classes.
This check makes sense only for library projects (not application projects)
which care of ideal OOP-design to make sure that class works in all cases even misusage.
Even in library projects this check most likely will find classes that are designed
for extension by somebody. User needs to use suppressions extensively to got a benefit
from this check, and keep in suppressions all confirmed/known classes that are deigned
for inheritance intentionally to let the check catch only new classes, and bring this to
team/user attention.


ATTENTION: Only user can decide whether a class is designed for extension or not.
The check just shows all classes which are possibly designed for extension.
If smth inappropriate is found please use suppression.


ATTENTION: If the method which can be overridden in a subclass has a javadoc comment
(a good practice is to explain its self-use of overridable methods) the check will not
rise a violation. The violation can also be skipped if the method which can be overridden
in a subclass has one or more annotations that are specified in ignoredAnnotations
option. Note, that by default @Override annotation is not included in the
ignoredAnnotations set as in a subclass the method which has the annotation can also be
overridden in its subclass.


Problem is described at "Effective Java, 2nd Edition by Joshua Bloch" book, chapter
"Item 17: Design and document for inheritance or else prohibit it".


Some quotes from book:

The class must document its self-use of overridable methods.
By convention, a method that invokes overridable methods contains a description
of these invocations at the end of its documentation comment. The description
begins with the phrase ¡°This implementation.¡±

The best solution to this problem is to prohibit subclassing in classes that
are not designed and documented to be safely subclassed.

If a concrete class does not implement a standard interface, then you may
inconvenience some programmers by prohibiting inheritance. If you feel that you
must allow inheritance from such a class, one reasonable approach is to ensure
that the class never invokes any of its overridable methods and to document this
fact. In other words, eliminate the class¡¯s self-use of overridable methods entirely.
In doing so, you¡¯ll create a class that is reasonably safe to subclass. Overriding a
method will never affect the behavior of any other method.


The check finds classes that have overridable methods (public or protected methods
that are non-static, not-final, non-abstract) and have non-empty implementation.


Rationale: This library design style protects superclasses against
being broken by subclasses. The downside is that subclasses are
limited in their flexibility, in particular they cannot prevent
execution of code in the superclass, but that also means that
subclasses cannot corrupt the state of the superclass by forgetting
to call the superclass's method.


More specifically,
it enforces a programming style where superclasses provide empty
"hooks" that can be implemented by subclasses.


Example of code that cause violation as it is designed for extension:



public abstract class Plant {
private String roots;
private String trunk;

protected void validate() {
if (roots == null) throw new IllegalArgumentException("No roots!");
if (trunk == null) throw new IllegalArgumentException("No trunk!");
}

public abstract void grow();
}

public class Tree extends Plant {
private List leaves;

@Overrides
protected void validate() {
super.validate();
if (leaves == null) throw new IllegalArgumentException("No leaves!");
}

public void grow() {
validate();
}
}


Example of code without violation:



public abstract class Plant {
private String roots;
private String trunk;

private void validate() {
if (roots == null) throw new IllegalArgumentException("No roots!");
if (trunk == null) throw new IllegalArgumentException("No trunk!");
validateEx();
}

protected void validateEx() { }

public abstract void grow();
}
[Options]
ignoredAnnotations, Specify annotations which allow the check to skip the method from validation.
requiredJavadocPhrase, Specify the comment text pattern which qualifies a method as designed for extension. Supports multi-line regex.
[Rule]
ClassMemberImpliedModifier
[Description]
Checks for implicit modifiers on nested types in classes and records.


This check is effectively the opposite of
RedundantModifier.
It checks the modifiers on nested types in classes and records, ensuring that certain
modifiers are explicitly specified even though they are actually redundant.


Nested enums, interfaces, and records within a class are always static and as
such the compiler does not require the static modifier. This check provides
the ability to enforce that the static modifier is explicitly coded and not
implicitly added by the compiler.



public final class Person {
enum Age {  // violation
CHILD, ADULT
}
}


Rationale for this check:
Nested enums, interfaces, and records are treated differently from nested classes as they
are only allowed to be static. Developers should not need to remember this
rule, and this check provides the means to enforce that the modifier is coded explicitly.
[Options]
violateImpliedStaticOnNestedEnum, Control whether to enforce that static is explicitly coded on nested enums in classes and records.
violateImpliedStaticOnNestedInterface, Control whether to enforce that static is explicitly coded on nested interfaces in classes and records.
violateImpliedStaticOnNestedRecord, Control whether to enforce that static is explicitly coded on nested records in classes and records.
[Rule]
MissingDeprecated
[Description]
Verifies that the annotation @Deprecated and the Javadoc tag
@deprecated are both present when either of them is present.


Both ways of flagging deprecation serve their own purpose.
The @Deprecated annotation is used for compilers and development tools.
The @deprecated javadoc tag is used to document why something is deprecated
and what, if any, alternatives exist.


In order to properly mark something as deprecated both forms of
deprecation should be present.


Package deprecation is an exception to the rule of always using the
javadoc tag and annotation to deprecate.  It is not clear if the
javadoc tool will support it or not as newer versions keep flip-flopping
on if it is supported or will cause an error.
See
JDK-8160601.
The deprecated javadoc tag is currently the only way to say why the package
is deprecated and what to use instead.  Until this is resolved, if you
don't want to print violations on package-info, you can use a
filter to ignore these files until
the javadoc tool faithfully supports it. An example config using
SuppressionSingleFilter is:



<!-- required till https://bugs.openjdk.org/browse/JDK-8160601 -->
<module name="SuppressionSingleFilter">
<property name="checks" value="MissingDeprecatedCheck"/>
<property name="files" value="package-info\.java"/>
</module>
[Options]
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
OuterTypeFilename
[Description]
Checks that the outer type name and the file name match. For example,
the class Foo must be in a file named
Foo.java.
[Options]
[Rule]
HideUtilityClassConstructor
[Description]
Makes sure that utility classes (classes that contain only static
methods or fields in their API) do not have a public constructor.


Rationale: Instantiating utility classes does not make sense. Hence,
the constructors should either be private or (if you want to allow
subclassing) protected. A common mistake is forgetting to hide the
default constructor.


If you make the constructor protected you may want to consider the
following constructor implementation technique to disallow
instantiating subclasses:



public class StringUtils // not final to allow subclassing
{
protected StringUtils() {
// prevents calls from subclass
throw new UnsupportedOperationException();
}

public static int count(char c, String s) {
// ...
}
}
[Options]

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
