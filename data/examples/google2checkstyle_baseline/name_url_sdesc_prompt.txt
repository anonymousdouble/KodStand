Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
2.3.3 Non-ASCII characters
For the remaining non-ASCII characters, either the actual Unicode character (e.g. `¡Þ` ) or the equivalent Unicode escape (e.g. `\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.
 Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.
 Examples:
 Example 
 Discussion 
 `StringunitAbbrev="¦Ìs";` 
 Best: perfectly clear even without a comment. 
 `StringunitAbbrev="\u03bcs";//"¦Ìs"` 
 Allowed, but there's no reason to do this. 
 `StringunitAbbrev="\u03bcs";//Greeklettermu,"s"` 
 Allowed, but awkward and prone to mistakes. 
 `StringunitAbbrev="\u03bcs";` 
 Poor: the reader has no idea what this is. 
 `return'\ufeff'+content;//byteordermark` 
 Good: use escapes for non-printable characters, and comment if necessary.
 Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .

CheckStyle Rules:
[Rule]
MissingDeprecated
[URL]
https://checkstyle.org/checks/annotation/missingdeprecated.html#MissingDeprecated
[Description]
Verifies that the annotation @Deprecated and the Javadoc tag @deprecated are both present when either of them is present.
[Description]
Detects duplicated keys in properties files.
[Rule]
JavadocTagContinuationIndentation
[URL]
https://checkstyle.org/checks/javadoc/javadoctagcontinuationindentation.html#JavadocTagContinuationIndentation
[Description]
Checks the indentation of the continuation lines in block tags.
[Rule]
LambdaParameterName
[URL]
https://checkstyle.org/checks/naming/lambdaparametername.html#LambdaParameterName
[Description]
Checks lambda parameter names.
[Rule]
AbstractClassName
[URL]
https://checkstyle.org/checks/naming/abstractclassname.html#AbstractClassName
[Description]
Ensures that the names of abstract classes conforming to some pattern and check that abstract modifier exists.
[Rule]
WhitespaceAround
[URL]
https://checkstyle.org/checks/whitespace/whitespacearound.html#WhitespaceAround
[Description]
Checks that a token is surrounded by whitespace.
[Rule]
NonEmptyAtclauseDescription
[URL]
https://checkstyle.org/checks/javadoc/nonemptyatclausedescription.html#NonEmptyAtclauseDescription
[Description]
Checks that the block tag is followed by description.
[Rule]
ImportOrder
[URL]
https://checkstyle.org/checks/imports/importorder.html#ImportOrder
[Description]
Checks the ordering/grouping of imports.
[Rule]
NoFinalizer
[URL]
https://checkstyle.org/checks/coding/nofinalizer.html#NoFinalizer
[Description]
Checks that there is no method finalize with zero parameters.
[Rule]
MagicNumber
[URL]
https://checkstyle.org/checks/coding/magicnumber.html#MagicNumber
[Description]
Checks that there are no "magic numbers" where a magic number is a numeric literal that is not defined as a constant.
[Rule]
AvoidEscapedUnicodeCharacters
[URL]
https://checkstyle.org/checks/misc/avoidescapedunicodecharacters.html#AvoidEscapedUnicodeCharacters
[Description]
Restricts using Unicode escapes (such as \u221e).
[Rule]
AbbreviationAsWordInName
[URL]
https://checkstyle.org/checks/naming/abbreviationaswordinname.html#AbbreviationAsWordInName
[Description]
Validates abbreviations (consecutive capital letters) length in identifier name, it also allows to enforce camel case naming.
[Rule]
EmptyBlock
[URL]
https://checkstyle.org/checks/blocks/emptyblock.html#EmptyBlock
[Description]
Checks for empty blocks.
[Rule]
NoWhitespaceAfter
[URL]
https://checkstyle.org/checks/whitespace/nowhitespaceafter.html#NoWhitespaceAfter
[Description]
Checks that there is no whitespace after a token.

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>"
    "</module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
