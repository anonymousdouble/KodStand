[
    {
        "title": "Avoid forEach",
        "belongs to": "Avoid forEach",
        "cases": [
            {
                "description": "Avoid `forEach` when mutating data. Use `map` , `reduce` or `filter` instead of `forEach` when mutating data. This minimizes mutations in functions, which aligns with the Airbnb style guide .",
                "example": "// bad\nusers.forEach((user, index) => {\n  user.id = index;\n});\n\n// good\nconst usersWithId = users.map((user, index) => {\n  return Object.assign({}, user, { id: index });\n});\n"
            }
        ]
    },
    {
        "title": "Limit number of parameters",
        "belongs to": "Limit number of parameters",
        "cases": [
            {
                "description": "If your function or method has more than 3 parameters, use an object as a parameter instead.",
                "example": "// bad\nfunction a(p1, p2, p3, p4) {\n  // ...\n};\n\n// good\nfunction a({ p1, p2, p3, p4 }) {\n  // ...\n};\n"
            }
        ]
    },
    {
        "title": "Avoid classes to handle DOM events",
        "belongs to": "Avoid classes to handle DOM events",
        "cases": [
            {
                "description": "If the only purpose of the class is to bind a DOM event and handle the callback, prefer using a function.",
                "example": "// bad\nclass myClass {\n  constructor(config) {\n    this.config = config;\n  }\n\n  init() {\n    document.addEventListener('click', () => {});\n  }\n}\n\n// good\n\nconst myFunction = () => {\n  document.addEventListener('click', () => {\n    // handle callback here\n  });\n}\n"
            }
        ]
    },
    {
        "title": "Pass element container to constructor",
        "belongs to": "Pass element container to constructor",
        "cases": [
            {
                "description": "When your class manipulates the DOM, receive the element container as a parameter. This is more maintainable and performant.",
                "example": "// bad\nclass a {\n  constructor() {\n    document.querySelector('.b');\n  }\n}\n\n// good\nclass a {\n  constructor(options) {\n    options.container.querySelector('.b');\n  }\n}\n"
            }
        ]
    },
    {
        "title": "Converting Strings to Integers",
        "belongs to": "Converting Strings to Integers",
        "cases": [
            {
                "description": "When converting strings to integers, `Number` is semantic and can be more readable. Both are allowable, but `Number` has a slight maintainability advantage.\nWARNING: \n`parseInt` \nmust include the radix argument .",
                "example": "// bad (missing radix argument)\nparseInt('10');\n\n// good\nparseInt(\"106\", 10);\n\n// good\nNumber(\"106\");\n\n// bad (missing radix argument)\nthings.map(parseInt);\n\n// good\nthings.map(Number);\n",
                "appendix": "note \nIf the String could represent a non-integer (i.e., it includes a decimal), do not use `parseInt` . Consider `Number` or `parseFloat` instead."
            }
        ]
    },
    {
        "title": "CSS Selectors - Use js- prefix",
        "belongs to": "CSS Selectors - Use js- prefix",
        "cases": [
            {
                "description": "If a CSS class is only being used in JavaScript as a reference to the element, prefix the class name with `js-` .",
                "example": "// bad\n<button class=\"add-user\"></button>\n\n// good\n<button class=\"js-add-user\"></button>\n"
            }
        ]
    },
    {
        "title": "ES Module Syntax",
        "belongs to": "ES Module Syntax",
        "cases": [
            {
                "description": "For most JavaScript files, use ES module syntax to import or export from modules. Prefer named exports, as they improve name consistency.",
                "example": "// bad (with exceptions, see below)\nexport default SomeClass;\nimport SomeClass from 'file';\n\n// good\nexport { SomeClass };\nimport { SomeClass } from 'file';\n",
                "appendix": "Using default exports is acceptable in a few particular circumstances:\nVue Single File Components (SFCs) \nVuex mutation files\nFor more information, see RFC 20 ."
            }
        ]
    },
    {
        "title": "CommonJS Module Syntax",
        "belongs to": "CommonJS Module Syntax",
        "cases": [
            {
                "description": "Our Node configuration requires CommonJS module syntax. Prefer named exports.",
                "example": "// bad\nmodule.exports = SomeClass;\nconst SomeClass = require('./some_class');\n\n// good\nmodule.exports = { SomeClass };\nconst { SomeClass } = require('./some_class');\n"
            }
        ]
    },
    {
        "title": "Absolute vs relative paths for modules",
        "belongs to": "Absolute vs relative paths for modules",
        "cases": [
            {
                "description": "Use relative paths if the module you are importing is less than two levels up.",
                "example": "// bad\nimport GitLabStyleGuide from '~/guides/GitLabStyleGuide';\n\n// good\nimport GitLabStyleGuide from '../GitLabStyleGuide';\n"
            },
            {
                "description": "If the module you are importing is two or more levels up, use an absolute path instead:",
                "example": "// bad\nimport GitLabStyleGuide from '../../../guides/GitLabStyleGuide';\n\n// good\nimport GitLabStyleGuide from '~/GitLabStyleGuide';\n",
                "appendix": "Additionally, do not add to global namespace ."
            }
        ]
    },
    {
        "title": "Do not use DOMContentLoaded in non-page modules",
        "belongs to": "Do not use DOMContentLoaded in non-page modules",
        "cases": [
            {
                "description": "Imported modules should act the same each time they are loaded. `DOMContentLoaded` events are only allowed on modules loaded in the `/pages/*` directory because those are loaded dynamically with webpack."
            }
        ]
    },
    {
        "title": "Avoid XSS",
        "belongs to": "Avoid XSS",
        "cases": [
            {
                "description": "Do not use `innerHTML` , `append()` or `html()` to set content. It opens up too many vulnerabilities."
            }
        ]
    },
    {
        "title": "ESLint",
        "belongs to": "ESLint",
        "cases": [
            {
                "description": "ESLint behavior can be found in our tooling guide ."
            }
        ]
    },
    {
        "title": "IIFEs",
        "belongs to": "IIFEs",
        "cases": [
            {
                "description": "Avoid using IIFEs (Immediately-Invoked Function Expressions). Although we have a lot of examples of files which wrap their contents in IIFEs, this is no longer necessary after the transition from Sprockets to webpack. Do not use them anymore and feel free to remove them when refactoring legacy code."
            }
        ]
    },
    {
        "title": "Global namespace",
        "belongs to": "Global namespace",
        "cases": [
            {
                "description": "Avoid adding to the global namespace.",
                "example": "// bad\nwindow.MyClass = class { /* ... */ };\n\n// good\nexport default class MyClass { /* ... */ }\n"
            }
        ]
    },
    {
        "title": "Side effects",
        "belongs to": "Side effects",
        "cases": []
    },
    {
        "title": "Top-level side effects",
        "belongs to": "Side effects/Top-level side effects",
        "cases": [
            {
                "description": "Top-level side effects are forbidden in any script which contains `export` :",
                "example": "// bad\nexport default class MyClass { /* ... */ }\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  new MyClass();\n}\n"
            }
        ]
    },
    {
        "title": "Avoid side effects in constructors",
        "belongs to": "Side effects/Avoid side effects in constructors",
        "cases": [
            {
                "description": "Avoid making asynchronous calls, API requests or DOM manipulations in the `constructor` . Move them into separate functions instead. This makes tests easier to write and avoids violating the Single Responsibility Principle .",
                "example": "// bad\nclass myClass {\n  constructor(config) {\n    this.config = config;\n    axios.get(this.config.endpoint)\n  }\n}\n\n// good\nclass myClass {\n  constructor(config) {\n    this.config = config;\n  }\n\n  makeRequest() {\n    axios.get(this.config.endpoint)\n  }\n}\nconst instance = new myClass();\ninstance.makeRequest();\n"
            }
        ]
    },
    {
        "title": "Pure Functions and Data Mutation",
        "belongs to": "Pure Functions and Data Mutation",
        "cases": [
            {
                "description": "Strive to write many small pure functions and minimize where mutations occur",
                "example": "  // bad\n  const values = {foo: 1};\n\n  function impureFunction(items) {\n    const bar = 1;\n\n    items.foo = items.a * bar + 2;\n\n    return items.a;\n  }\n\n  const c = impureFunction(values);\n\n  // good\n  var values = {foo: 1};\n\n  function pureFunction (foo) {\n    var bar = 1;\n\n    foo = foo * bar + 2;\n\n    return foo;\n  }\n\n  var c = pureFunction(values.foo);\n"
            }
        ]
    },
    {
        "title": "Export constants as primitives",
        "belongs to": "Export constants as primitives",
        "cases": [
            {
                "description": "Prefer exporting constant primitives with a common namespace over exporting objects. This allows for better compile-time reference checks and helps to avoid accidental `undefined` s at runtime. In addition, it helps in reducing bundle sizes.\nOnly export the constants as a collection (array, or object) when there is a need to iterate over them, for instance, for a prop validator.",
                "example": "  // bad\n  export const VARIANT = {\n    WARNING: 'warning',\n    ERROR: 'error',\n  };\n\n  // good\n  export const VARIANT_WARNING = 'warning';\n  export const VARIANT_ERROR = 'error';\n\n  // good, if the constants need to be iterated over\n  export const VARIANTS = [VARIANT_WARNING, VARIANT_ERROR];\n"
            }
        ]
    },
    {
        "title": "Error handling",
        "belongs to": "Error handling",
        "cases": [
            {
                "description": "For internal server errors when the server returns `500` , you should return a generic error message.\nWhen the backend returns errors, the errors should be suitable to display back to the user.\nIf for some reason, it is difficult to do so, as a last resort, you can select particular error messages with prefixing:\nEnsure that the backend prefixes the error messages to be displayed with:",
                "example": "Gitlab::Utils::ErrorMessage.to_user_facing('Example user-facing error-message')\n",
                "appendix": "Use the error message utility function contained in `app/assets/javascripts/lib/utils/error_message.js` ."
            },
            {
                "description": "This utility accepts two parameters: the error object received from the server response and a default error message. The utility examines the message in the error object for a prefix that indicates whether the message is meant to be user-facing or not. If the message is intended to be user-facing, the utility returns it as is. Otherwise, it returns the default error message passed as a parameter.",
                "example": "import { parseErrorMessage } from '~/lib/utils/error_message';\n\nonError(error) {\n  const errorMessage = parseErrorMessage(error, genericErrorText);\n}\n",
                "appendix": "Note that this prefixing must not be used for API responses. Instead follow the REST API , or GraphQL guides on how to consume error objects."
            }
        ]
    }
]