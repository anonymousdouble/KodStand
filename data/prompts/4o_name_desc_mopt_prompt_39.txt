Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
5.2.6 Parameter names
Parameter names are written in lowerCamelCase .
 One-character parameter names in public methods should be avoided.

CheckStyle Rules:
[Rule]
CatchParameterName
[Description]
Checks that catch parameter names conform to a specified pattern.


Default pattern has the following characteristic:


allows names beginning with two lowercase letters followed by at least one uppercase
or lowercase letter
allows e abbreviation (suitable for exceptions end errors)
allows ex abbreviation (suitable for exceptions)
allows t abbreviation (suitable for throwables)
prohibits numbered abbreviations like e1 or t2
prohibits one letter prefixes like pException
prohibits two letter abbreviations like ie or ee
prohibits any other characters than letters
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
ParameterAssignment
[Description]
Disallows assignment of parameters.

Rationale: Parameter assignment is often considered poor programming
practice. Forcing developers to declare parameters as final is often
onerous. Having a check ensure that parameters are never assigned
would give the best of both worlds.
[Options]
[Rule]
ParameterName
[Description]
Checks that method parameter names conform to a specified pattern.
By using accessModifiers property it is possible
to specify different formats for methods at different visibility levels.


To validate catch parameters please use

CatchParameterName
.


To validate lambda parameters please use

LambdaParameterName
.
[Options]
accessModifiers, Access modifiers of methods where parameters are checked.
format, Sets the pattern to match valid identifiers.
ignoreOverridden, Allows to skip methods with Override annotation from validation.
[Rule]
AbbreviationAsWordInName
[Description]
Validates abbreviations (consecutive capital letters) length in identifier name,
it also allows to enforce camel case naming. Please read more at

Google Style Guide
to get to know how to avoid long abbreviations in names.

'_' is considered as word separator in identifier name.

allowedAbbreviationLength specifies how many consecutive capital letters are
allowed in the identifier.
A value of 3 indicates that up to 4 consecutive capital letters are allowed,
one after the other, before a violation is printed. The identifier 'MyTEST' would be
allowed, but 'MyTESTS' would not be.
A value of 0 indicates that only 1 consecutive capital letter is allowed. This
is what should be used to enforce strict camel casing. The identifier 'MyTest' would
be allowed, but 'MyTEst' would not be.


ignoreFinal, ignoreStatic, and ignoreStaticFinal
control whether variables with the respective modifiers are to be ignored.
Note that a variable that is both static and final will always be considered under
ignoreStaticFinal only, regardless of the values of ignoreFinal
and ignoreStatic. So for example if ignoreStatic is true but
ignoreStaticFinal is false, then static final variables will not be ignored.
[Options]
allowedAbbreviationLength, Indicate the number of consecutive capital letters allowed in targeted identifiers (abbreviations in the classes, interfaces, variables and methods names, ... ).
allowedAbbreviations, Specify abbreviations that must be skipped for checking.
ignoreFinal, Allow to skip variables with final modifier.
ignoreOverriddenMethods, Allow to ignore methods tagged with @Override annotation (that usually mean inherited name).
ignoreStatic, Allow to skip variables with static modifier.
ignoreStaticFinal, Allow to skip variables with both static and final modifiers.
tokens, tokens to check
[Rule]
LambdaParameterName
[Description]
Checks lambda parameter names.
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
MemberName
[Description]
Checks that instance variable names conform to a specified pattern.
[Options]
applyToPackage, Control if check should apply to package-private members.
applyToPrivate, Control if check should apply to private members.
applyToProtected, Control if check should apply to protected members.
applyToPublic, Control if check should apply to public members.
format, Sets the pattern to match valid identifiers.
[Rule]
HiddenField
[Description]
Checks that a local variable or a parameter does not shadow a field
that is defined in the same class.
[Options]
ignoreAbstractMethods, Control whether to ignore parameters of abstract methods.
ignoreConstructorParameter, Control whether to ignore constructor parameters.
ignoreFormat, Define the RegExp for names of variables and parameters to ignore.
ignoreSetter, Allow to ignore the parameter of a property setter method.
setterCanReturnItsClass, Allow to expand the definition of a setter method to include methods that return the class' instance.
tokens, tokens to check
[Rule]
AvoidInlineConditionals
[Description]
Detects inline conditionals. Here is one example of an inline conditional:



String a = getParameter("a");
String b = (a==null || a.length()<1) ? null : a.substring(1);


Rationale: Some developers find inline conditionals hard to read, so
their employer's coding standards forbid them.
[Options]
[Rule]
FinalParameters
[Description]
Checks that parameters for methods, constructors, catch and for-each blocks are
final. Interface, abstract, and native methods are not checked: the final
keyword does not make sense for interface, abstract, and native method
parameters as there is no code that could modify the parameter.


Rationale: Changing the value of parameters during the execution of
the method's algorithm can be confusing and should be avoided. A
great way to let the Java compiler prevent this coding style is to
declare parameters final.
[Options]
ignorePrimitiveTypes, Ignore primitive types as parameters.
tokens, tokens to check
[Rule]
ConstantName
[Description]
Checks that constant names conform to a specified pattern.
A constant is a static and final field or an
interface/annotation field, except serialVersionUID and
serialPersistentFields.
[Options]
applyToPackage, Control if check should apply to package-private members.
applyToPrivate, Control if check should apply to private members.
applyToProtected, Control if check should apply to protected members.
applyToPublic, Control if check should apply to public members.
format, Sets the pattern to match valid identifiers.

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
