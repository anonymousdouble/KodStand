[
    {
        "title": "1 Introduction",
        "belongs to": "1 Introduction",
        "cases": [
            {
                "description": "This document serves as the complete definition of Google's coding standards for\nsource code in the Java™ Programming Language. A Java source file is described as being in\nGoogle Style if and only if it adheres to the rules herein.\nLike other programming style guides, the issues covered span not only aesthetic issues of\nformatting, but other types of conventions or coding standards as well. However, this document\nfocuses primarily on the hard-and-fast rules that we follow universally, and\navoids giving advice that isn't clearly enforceable (whether by human or tool)."
            }
        ]
    },
    {
        "title": "1.1 Terminology notes",
        "belongs to": "1 Introduction/1.1 Terminology notes",
        "cases": [
            {
                "description": "In this document, unless otherwise clarified:\nThe term class is used inclusively to mean an \"ordinary\" class, enum class,\ninterface or annotation type ( `@interface`). \nThe term member (of a class) is used inclusively to mean a nested class, field,\nmethod, or constructor ; that is, all top-level contents of a class except initializers\nand comments. \nThe term comment always refers to implementation comments. We do not\nuse the phrase \"documentation comments\", and instead use the common term \"Javadoc.\"\nOther \"terminology notes\" will appear occasionally throughout the document."
            }
        ]
    },
    {
        "title": "1.2 Guide notes",
        "belongs to": "1 Introduction/1.2 Guide notes",
        "cases": [
            {
                "description": "Example code in this document is non-normative . That is, while the examples\nare in Google Style, they may not illustrate the only stylish way to represent the\ncode. Optional formatting choices made in examples should not be enforced as rules."
            }
        ]
    },
    {
        "title": "2 Source file basics",
        "belongs to": "2 Source file basics",
        "cases": []
    },
    {
        "title": "2.1 File name",
        "belongs to": "2 Source file basics/2.1 File name",
        "cases": [
            {
                "description": "The source file name consists of the case-sensitive name of the top-level class it contains\n(of which there is exactly one ), plus the `.java`extension."
            }
        ]
    },
    {
        "title": "2.2 File encoding: UTF-8",
        "belongs to": "2 Source file basics/2.2 File encoding: UTF-8",
        "cases": [
            {
                "description": "Source files are encoded in UTF-8 ."
            }
        ]
    },
    {
        "title": "2.3 Special characters",
        "belongs to": "2 Source file basics/2.3 Special characters",
        "cases": []
    },
    {
        "title": "2.3.1 Whitespace characters",
        "belongs to": "2 Source file basics/2.3 Special characters/2.3.1 Whitespace characters",
        "cases": [
            {
                "description": "Aside from the line terminator sequence, the ASCII horizontal space\ncharacter ( 0x20 ) is the only whitespace character that appears\nanywhere in a source file. This implies that:\nAll other whitespace characters in string and character literals are escaped. \nTab characters are not used for indentation."
            }
        ]
    },
    {
        "title": "2.3.2 Special escape sequences",
        "belongs to": "2 Source file basics/2.3 Special characters/2.3.2 Special escape sequences",
        "cases": [
            {
                "description": "For any character that has a special escape sequence ( `\\b`, `\\t`, `\\n`, `\\f`, `\\r`, `\\\"`, `\\'`and `\\\\`), that sequence\nis used rather than the corresponding octal\n(e.g. `\\012`) or Unicode\n(e.g. `\\u000a`) escape."
            }
        ]
    },
    {
        "title": "2.3.3 Non-ASCII characters",
        "belongs to": "2 Source file basics/2.3 Special characters/2.3.3 Non-ASCII characters",
        "cases": [
            {
                "description": "For the remaining non-ASCII characters, either the actual Unicode character\n(e.g. `∞`) or the equivalent Unicode escape\n(e.g. `\\u221e`) is used. The choice depends only on\nwhich makes the code easier to read and understand , although Unicode escapes\noutside string literals and comments are strongly discouraged.\nTip: In the Unicode escape case, and occasionally even when actual\nUnicode characters are used, an explanatory comment can be very helpful.\nExamples:\nExample \nDiscussion \n\n\n\n`StringunitAbbrev=\"μs\";`\n\nBest: perfectly clear even without a comment. \n\n\n\n`StringunitAbbrev=\"\\u03bcs\";//\"μs\"`\n\nAllowed, but there's no reason to do this. \n\n\n\n`StringunitAbbrev=\"\\u03bcs\";//Greeklettermu,\"s\"`\n\nAllowed, but awkward and prone to mistakes. \n\n\n\n`StringunitAbbrev=\"\\u03bcs\";`\n\nPoor: the reader has no idea what this is. \n\n\n\n`return'\\ufeff'+content;//byteordermark`\n\nGood: use escapes for non-printable characters, and comment if necessary.\nTip: Never make your code less readable simply out of fear that\nsome programs might not handle non-ASCII characters properly. If that should happen, those\nprograms are broken and they must be fixed ."
            }
        ]
    },
    {
        "title": "3 Source file structure",
        "belongs to": "3 Source file structure",
        "cases": [
            {
                "description": "A source file consists of, in order : \n\nLicense or copyright information, if present \nPackage statement \nImport statements \nExactly one top-level class\nExactly one blank line separates each section that is present."
            }
        ]
    },
    {
        "title": "3.1 License or copyright information, if present",
        "belongs to": "3 Source file structure/3.1 License or copyright information, if present",
        "cases": [
            {
                "description": "If license or copyright information belongs in a file, it belongs here."
            }
        ]
    },
    {
        "title": "3.2 Package statement",
        "belongs to": "3 Source file structure/3.2 Package statement",
        "cases": [
            {
                "description": "The package statement is not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to package statements."
            }
        ]
    },
    {
        "title": "3.3 Import statements",
        "belongs to": "3 Source file structure/3.3 Import statements",
        "cases": []
    },
    {
        "title": "3.3.1 No wildcard imports",
        "belongs to": "3 Source file structure/3.3 Import statements/3.3.1 No wildcard imports",
        "cases": [
            {
                "description": "Wildcard imports , static or otherwise, are not used ."
            }
        ]
    },
    {
        "title": "3.3.2 No line-wrapping",
        "belongs to": "3 Source file structure/3.3 Import statements/3.3.2 No line-wrapping",
        "cases": [
            {
                "description": "Import statements are not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to import\nstatements."
            }
        ]
    },
    {
        "title": "3.3.3 Ordering and spacing",
        "belongs to": "3 Source file structure/3.3 Import statements/3.3.3 Ordering and spacing",
        "cases": [
            {
                "description": "Imports are ordered as follows:\nAll static imports in a single block. \nAll non-static imports in a single block.\nIf there are both static and non-static imports, a single blank line separates the two\nblocks. There are no other blank lines between import statements.\nWithin each block the imported names appear in ASCII sort order. ( Note: this is not the same as the import statements being in ASCII sort order, since '.'\nsorts before ';'.)"
            }
        ]
    },
    {
        "title": "3.3.4 No static import for classes",
        "belongs to": "3 Source file structure/3.3 Import statements/3.3.4 No static import for classes",
        "cases": [
            {
                "description": "Static import is not used for static nested classes. They are imported with\nnormal imports."
            }
        ]
    },
    {
        "title": "3.4 Class declaration",
        "belongs to": "3 Source file structure/3.3 Import statements/3.4 Class declaration",
        "cases": []
    },
    {
        "title": "3.4.1 Exactly one top-level class declaration",
        "belongs to": "3 Source file structure/3.3 Import statements/3.4 Class declaration/3.4.1 Exactly one top-level class declaration",
        "cases": [
            {
                "description": "Each top-level class resides in a source file of its own."
            }
        ]
    },
    {
        "title": "3.4.2 Ordering of class contents",
        "belongs to": "3 Source file structure/3.3 Import statements/3.4 Class declaration/3.4.2 Ordering of class contents",
        "cases": [
            {
                "description": "The order you choose for the members and initializers of your class can have a great effect on\nlearnability. However, there's no single correct recipe for how to do it; different classes may\norder their contents in different ways.\nWhat is important is that each class uses \nsome logical order , which its\nmaintainer could explain if asked. For example, new methods are not just habitually added to the end\nof the class, as that would yield \"chronological by date added\" ordering, which is not a logical\nordering."
            }
        ]
    },
    {
        "title": "3.4.2.1 Overloads: never split",
        "belongs to": "3 Source file structure/3.3 Import statements/3.4 Class declaration/3.4.2 Ordering of class contents/3.4.2.1 Overloads: never split",
        "cases": [
            {
                "description": "Methods of a class that share the same name appear in a single contiguous group with no other\nmembers in between. The same applies to multiple constructors (which always have the same name).\nThis rule applies even when modifiers such as `static`or `private`differ between the methods."
            }
        ]
    },
    {
        "title": "4 Formatting",
        "belongs to": "4 Formatting",
        "cases": [
            {
                "description": "Terminology Note: \nblock-like construct refers to\nthe body of a class, method or constructor. Note that, by Section 4.8.3.1 on array initializers , any array initializer may optionally be treated as if it were a block-like construct."
            }
        ]
    },
    {
        "title": "4.1 Braces",
        "belongs to": "4 Formatting/4.1 Braces",
        "cases": []
    },
    {
        "title": "4.1.1 Use of optional braces",
        "belongs to": "4 Formatting/4.1 Braces/4.1.1 Use of optional braces",
        "cases": [
            {
                "description": "Braces are used with `if`, `else`, `for`, `do`and `while`statements, even when the\nbody is empty or contains only a single statement.\nOther optional braces, such as those in a lambda expression, remain optional."
            }
        ]
    },
    {
        "title": "4.1.2 Nonempty blocks: K & R style",
        "belongs to": "4 Formatting/4.1 Braces/4.1.2 Nonempty blocks: K & R style",
        "cases": [
            {
                "description": "Braces follow the Kernighan and Ritchie style\n(\" Egyptian brackets \")\nfor nonempty blocks and block-like constructs:\nNo line break before the opening brace, except as detailed below. \nLine break after the opening brace. \nLine break before the closing brace. \nLine break after the closing brace, only if that brace terminates a statement or\nterminates the body of a method, constructor, or named class.\nFor example, there is no line break after the brace if it is followed by `else`or a comma.\nException: In places where these rules allow a single statement ending with a semicolon\n( `;`), a block of statements can appear, and the opening\nbrace of this block is preceded by a line break. Blocks like these are typically introduced to\nlimit the scope of local variables, for example inside switch statements.\nExamples:",
                "example": "return () -> {\n  while (condition()) {\n    method();\n  }\n};\n\nreturn new MyClass() {\n  @Override public void method() {\n    if (condition()) {\n      try {\n        something();\n      } catch (ProblemException e) {\n        recover();\n      }\n    } else if (otherCondition()) {\n      somethingElse();\n    } else {\n      lastThing();\n    }\n    {\n      int x = foo();\n      frob(x);\n    }\n  }\n};\n"
            },
            {
                "description": "A few exceptions for enum classes are given in Section 4.8.1, Enum classes ."
            }
        ]
    },
    {
        "title": "4.1.3 Empty blocks: may be concise",
        "belongs to": "4 Formatting/4.1 Braces/4.1.3 Empty blocks: may be concise",
        "cases": [
            {
                "description": "An empty block or block-like construct may be in K & R style (as described in Section 4.1.2 ). Alternatively, it may be closed immediately\nafter it is opened, with no characters or line break in between\n( `{}`), unless it is part of a multi-block statement (one that directly contains multiple blocks: `if/else`or `try/catch/finally`).\nExamples:",
                "example": "  // This is acceptable\n  void doNothing() {}\n\n  // This is equally acceptable\n  void doNothingElse() {\n  }\n\n  // This is not acceptable: No concise empty blocks in a multi-block statement\n  try {\n    doSomething();\n  } catch (Exception e) {}\n"
            }
        ]
    },
    {
        "title": "4.2 Block indentation: +2 spaces",
        "belongs to": "4 Formatting/4.1 Braces/4.2 Block indentation: +2 spaces",
        "cases": [
            {
                "description": "Each time a new block or block-like construct is opened, the indent increases by two\nspaces. When the block ends, the indent returns to the previous indent level. The indent level\napplies to both code and comments throughout the block. (See the example in Section 4.1.2, Nonempty blocks: K & R Style .)"
            }
        ]
    },
    {
        "title": "4.3 One statement per line",
        "belongs to": "4 Formatting/4.1 Braces/4.3 One statement per line",
        "cases": [
            {
                "description": "Each statement is followed by a line break."
            }
        ]
    },
    {
        "title": "4.4 Column limit: 100",
        "belongs to": "4 Formatting/4.1 Braces/4.4 Column limit: 100",
        "cases": [
            {
                "description": "Java code has a column limit of 100 characters. A \"character\" means any Unicode code point.\nExcept as noted below, any line that would exceed this limit must be line-wrapped, as explained in\nSection 4.5, Line-wrapping .\nEach Unicode code point counts as one character, even if its display width is\ngreater or less. For example, if using fullwidth characters ,\nyou may choose to wrap the line earlier than where this rule strictly requires.\nExceptions:\nLines where obeying the column limit is not possible (for example, a long URL in Javadoc,\nor a long JSNI method reference). \n\n`package`and `import`statements (see Sections\n3.2 Package statement and\n3.3 Import statements ). \nCommand lines in a comment that may be copied-and-pasted into a shell. \nVery long identifiers, on the rare occasions they are called for, are allowed to exceed the\ncolumn limit. In that case, the valid wrapping for the surrounding code is as produced by google-java-format ."
            }
        ]
    },
    {
        "title": "4.5 Line-wrapping",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping",
        "cases": [
            {
                "description": "Terminology Note: When code that might otherwise legally\noccupy a single line is divided into multiple lines, this activity is called line-wrapping .\nThere is no comprehensive, deterministic formula showing exactly how to line-wrap in\nevery situation. Very often there are several valid ways to line-wrap the same piece of code.\nNote: While the typical reason for line-wrapping is to avoid\noverflowing the column limit, even code that would in fact fit within the column limit may be line-wrapped at the author's discretion.\nTip: Extracting a method or local variable may solve the problem\nwithout the need to line-wrap."
            }
        ]
    },
    {
        "title": "4.5.1 Where to break",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.5.1 Where to break",
        "cases": [
            {
                "description": "The prime directive of line-wrapping is: prefer to break at a higher syntactic level . Also:\nWhen a line is broken at a non-assignment operator the break comes before the symbol. (Note that this is not the same practice used in Google style for other languages,\nsuch as C++ and JavaScript.) \nThis also applies to the following \"operator-like\" symbols: \nthe dot separator ( `.`) \nthe two colons of a method reference\n( `::`) \nan ampersand in a type bound\n( `<TextendsFoo&Bar>`) \na pipe in a catch block\n( `catch(FooException|BarExceptione)`). \n\n\n\n\nWhen a line is broken at an assignment operator the break typically comes after the symbol, but either way is acceptable. \nThis also applies to the \"assignment-operator-like\" colon in an enhanced `for`(\"foreach\") statement. \n\n\nA method or constructor name stays attached to the open parenthesis\n( `(`) that follows it. \nA comma ( `,`) stays attached to the token that\nprecedes it. \nA line is never broken adjacent to the arrow in a lambda, except that a\nbreak may come immediately after the arrow if the body of the lambda consists\nof a single unbraced expression. Examples:",
                "example": "MyLambda<String, Long, Object> lambda =\n    (String label, Long value, Object obj) -> {\n        ...\n    };\n\nPredicate<String> predicate = str ->\n    longExpressionInvolving(str);\n"
            },
            {
                "description": "Note: The primary goal for line wrapping is to have clear\ncode, not necessarily code that fits in the smallest number of lines."
            }
        ]
    },
    {
        "title": "4.5.2 Indent continuation lines at least +4 spaces",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.5.2 Indent continuation lines at least +4 spaces",
        "cases": [
            {
                "description": "When line-wrapping, each line after the first (each continuation line ) is indented\nat least +4 from the original line.\nWhen there are multiple continuation lines, indentation may be varied beyond +4 as\ndesired. In general, two continuation lines use the same indentation level if and only if they\nbegin with syntactically parallel elements.\nSection 4.6.3 on Horizontal alignment addresses\nthe discouraged practice of using a variable number of spaces to align certain tokens with\nprevious lines."
            }
        ]
    },
    {
        "title": "4.6 Whitespace",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace",
        "cases": []
    },
    {
        "title": "4.6.1 Vertical Whitespace",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.6.1 Vertical Whitespace",
        "cases": [
            {
                "description": "A single blank line always appears:\nBetween consecutive members or initializers of a class: fields, constructors,\nmethods, nested classes, static initializers, and instance initializers. \n\n\nException: A blank line between two consecutive\nfields (having no other code between them) is optional. Such blank lines are used as needed to\ncreate logical groupings of fields. \n\n\n\nException: Blank lines between enum constants are\ncovered in Section 4.8.1 . \n\n\n\nAs required by other sections of this document (such as Section 3, Source file structure , and Section 3.3, Import statements ).\nA single blank line may also appear anywhere it improves readability, for example between\nstatements to organize the code into logical subsections. A blank line before the first member or\ninitializer, or after the last member or initializer of the class, is neither encouraged nor\ndiscouraged.\nMultiple consecutive blank lines are permitted, but never required (or encouraged)."
            }
        ]
    },
    {
        "title": "4.6.2 Horizontal whitespace",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.6.2 Horizontal whitespace",
        "cases": [
            {
                "description": "Beyond where required by the language or other style rules, and apart from literals, comments and\nJavadoc, a single ASCII space also appears in the following places only .\nSeparating any reserved word, such as `if`, `for`or `catch`, from an open parenthesis\n( `(`)\nthat follows it on that line \nSeparating any reserved word, such as `else`or `catch`, from a closing curly brace\n( `}`) that precedes it on that line \nBefore any open curly brace\n( `{`), with two exceptions: \n\n`@SomeAnnotation({a,b})`(no space is used) \n\n`String[][]x={{\"foo\"}};`(no space is required\nbetween `{{`, by item 9 below) \n\n\nOn both sides of any binary or ternary operator. This also applies to the following\n\"operator-like\" symbols: \nthe ampersand in a conjunctive type bound: `<TextendsFoo&Bar>`\n\nthe pipe for a catch block that handles multiple exceptions: `catch(FooException|BarExceptione)`\n\nthe colon ( `:`) in an enhanced `for`(\"foreach\") statement \nthe arrow in a lambda expression: `(Stringstr)->str.length()`\n\nbut not \nthe two colons ( `::`) of a method reference, which\nis written like `Object::toString`\n\nthe dot separator ( `.`), which is written like `object.toString()`\n\n\n\nAfter `,:;`or the closing parenthesis\n( `)`) of a cast \nBetween any content and a double slash ( `//`) which\nbegins a comment. Multiple spaces are allowed. \nBetween a double slash ( `//`) which begins a comment\nand the comment's text. Multiple spaces are allowed. \nBetween the type and variable of a declaration: `List<String>list`\n\n\nOptional just inside both braces of an array initializer \n\n`newint[]{5,6}`and `newint[]{5,6}`are both valid \n\n\nBetween a type annotation and `[]`or `...`.\nThis rule is never interpreted as requiring or forbidding additional space at the start or\nend of a line; it addresses only interior space."
            }
        ]
    },
    {
        "title": "4.6.3 Horizontal alignment: never required",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.6.3 Horizontal alignment: never required",
        "cases": [
            {
                "description": "Terminology Note: \nHorizontal alignment is the\npractice of adding a variable number of additional spaces in your code with the goal of making\ncertain tokens appear directly below certain other tokens on previous lines.\nThis practice is permitted, but is never required by Google Style. It is not\neven required to maintain horizontal alignment in places where it was already used.\nHere is an example without alignment, then using alignment:",
                "example": "private int x; // this is fine\nprivate Color color; // this too\n\nprivate int   x;      // permitted, but future edits\nprivate Color color;  // may leave it unaligned\n"
            },
            {
                "description": "Tip: Alignment can aid readability, but it creates problems for\nfuture maintenance. Consider a future change that needs to touch just one line. This change may\nleave the formerly-pleasing formatting mangled, and that is allowed . More often\nit prompts the coder (perhaps you) to adjust whitespace on nearby lines as well, possibly\ntriggering a cascading series of reformattings. That one-line change now has a \"blast radius.\"\nThis can at worst result in pointless busywork, but at best it still corrupts version history\ninformation, slows down reviewers and exacerbates merge conflicts."
            }
        ]
    },
    {
        "title": "4.7 Grouping parentheses: recommended",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.7 Grouping parentheses: recommended",
        "cases": [
            {
                "description": "Optional grouping parentheses are omitted only when author and reviewer agree that there is no\nreasonable chance the code will be misinterpreted without them, nor would they have made the code\neasier to read. It is not reasonable to assume that every reader has the entire Java\noperator precedence table memorized."
            }
        ]
    },
    {
        "title": "4.8 Specific constructs",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs",
        "cases": []
    },
    {
        "title": "4.8.1 Enum classes",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.1 Enum classes",
        "cases": [
            {
                "description": "After each comma that follows an enum constant, a line break is optional. Additional blank\nlines (usually just one) are also allowed. This is one possibility:",
                "example": "private enum Answer {\n  YES {\n    @Override public String toString() {\n      return \"yes\";\n    }\n  },\n\n  NO,\n  MAYBE\n}\n"
            },
            {
                "description": "An enum class with no methods and no documentation on its constants may optionally be formatted\nas if it were an array initializer (see Section 4.8.3.1 on array initializers ).",
                "example": "private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }\n"
            },
            {
                "description": "Since enum classes are classes , all other rules for formatting classes apply."
            }
        ]
    },
    {
        "title": "4.8.2 Variable declarations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations",
        "cases": []
    },
    {
        "title": "4.8.2.1 One variable per declaration",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.2.1 One variable per declaration",
        "cases": [
            {
                "description": "Every variable declaration (field or local) declares only one variable: declarations such as `inta,b;`are not used.\nException: Multiple variable declarations are acceptable in the header of a `for`loop."
            }
        ]
    },
    {
        "title": "4.8.2.2 Declared when needed",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.2.2 Declared when needed",
        "cases": [
            {
                "description": "Local variables are not habitually declared at the start of their containing\nblock or block-like construct. Instead, local variables are declared close to the point they are\nfirst used (within reason), to minimize their scope. Local variable declarations typically have\ninitializers, or are initialized immediately after declaration."
            }
        ]
    },
    {
        "title": "4.8.3 Arrays",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays",
        "cases": []
    },
    {
        "title": "4.8.3.1 Array initializers: can be \"block-like\"",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.3.1 Array initializers: can be \"block-like\"",
        "cases": [
            {
                "description": "Any array initializer may optionally be formatted as if it were a \"block-like\nconstruct.\" For example, the following are all valid ( not an exhaustive\nlist):",
                "example": "new int[] {           new int[] {\n  0, 1, 2, 3            0,\n}                       1,\n                        2,\nnew int[] {             3,\n  0, 1,               }\n  2, 3\n}                     new int[]\n                          {0, 1, 2, 3}\n"
            }
        ]
    },
    {
        "title": "4.8.3.2 No C-style array declarations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.3.2 No C-style array declarations",
        "cases": [
            {
                "description": "The square brackets form a part of the type , not the variable: `String[]args`, not `Stringargs[]`."
            }
        ]
    },
    {
        "title": "4.8.4 Switch statements",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements",
        "cases": [
            {
                "description": "Terminology Note: Inside the braces of a switch block are one or more statement groups . Each statement group consists of\none or more switch labels (either `caseFOO:`or `default:`), followed by one or more statements (or, for\nthe last statement group, zero or more statements)."
            }
        ]
    },
    {
        "title": "4.8.4.1 Indentation",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.4.1 Indentation",
        "cases": [
            {
                "description": "As with any other block, the contents of a switch block are indented +2.\nAfter a switch label, there is a line break, and the indentation level is increased +2, exactly\nas if a block were being opened. The following switch label returns to the previous indentation\nlevel, as if a block had been closed."
            }
        ]
    },
    {
        "title": "4.8.4.2 Fall-through: commented",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.4.2 Fall-through: commented",
        "cases": [
            {
                "description": "Within a switch block, each statement group either terminates abruptly (with a `break`, `continue`, `return`or thrown exception), or is marked with a comment\nto indicate that execution will or might continue into the next statement group. Any\ncomment that communicates the idea of fall-through is sufficient (typically `//fallthrough`). This special comment is not required in\nthe last statement group of the switch block. Example:",
                "example": "switch (input) {\n  case 1:\n  case 2:\n    prepareOneOrTwo();\n    // fall through\n  case 3:\n    handleOneTwoOrThree();\n    break;\n  default:\n    handleLargeNumber(input);\n}\n"
            },
            {
                "description": "Notice that no comment is needed after `case1:`, only\nat the end of the statement group."
            }
        ]
    },
    {
        "title": "4.8.4.3 Presence of the\n     \n      default\n     \n     label",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.4.3 Presence of the\n     \n      default\n     \n     label",
        "cases": [
            {
                "description": "Each switch statement includes a `default`statement\ngroup, even if it contains no code.\nException: A switch statement for an `enum`type may omit\nthe `default`statement group, if it includes\nexplicit cases covering all possible values of that type. This enables IDEs or other static\nanalysis tools to issue a warning if any cases were missed."
            }
        ]
    },
    {
        "title": "4.8.5 Annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations",
        "cases": []
    },
    {
        "title": "4.8.5.1 Type-use annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.5.1 Type-use annotations",
        "cases": [
            {
                "description": "Type-use annotations appear immediately before the annotated type. An annotation is a type-use\nannotation if it is meta-annotated with `@Target(ElementType.TYPE_USE)`. Example:",
                "example": "final @Nullable String name;\n\npublic @Nullable Person getPersonByName(String name);\n"
            }
        ]
    },
    {
        "title": "4.8.5.2 Class annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.5.2 Class annotations",
        "cases": [
            {
                "description": "Annotations applying to a class appear immediately after the\ndocumentation block, and each annotation is listed on a line of its own (that is, one annotation\nper line). These line breaks do not constitute line-wrapping (Section\n4.5, Line-wrapping ), so the indentation level is not\nincreased. Example:",
                "example": "@Deprecated\n@CheckReturnValue\npublic final class Frozzler { ... }\n"
            }
        ]
    },
    {
        "title": "4.8.5.3 Method and constructor annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.5.3 Method and constructor annotations",
        "cases": [
            {
                "description": "The rules for annotations on method and constructor declarations are the same as the previous section . Example:",
                "example": "@Deprecated\n@Override\npublic String getNameIfPresent() { ... }\n"
            },
            {
                "description": "Exception: A single parameterless annotation may instead appear together with the first line of the signature, for example:",
                "example": "@Override public int hashCode() { ... }\n"
            }
        ]
    },
    {
        "title": "4.8.5.4 Field annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.5.4 Field annotations",
        "cases": [
            {
                "description": "Annotations applying to a field also appear immediately after the documentation block, but in\nthis case, multiple annotations (possibly parameterized) may be listed on the same line;\nfor example:",
                "example": "@Partial @Mock DataLoader loader;\n"
            }
        ]
    },
    {
        "title": "4.8.5.5 Parameter and local variable annotations",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.5.5 Parameter and local variable annotations",
        "cases": [
            {
                "description": "There are no specific rules for formatting annotations on parameters or local variables (except,\nof course, when the annotation is a type-use annotation)."
            }
        ]
    },
    {
        "title": "4.8.6 Comments",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.6 Comments",
        "cases": [
            {
                "description": "This section addresses implementation comments . Javadoc is addressed separately in\nSection 7, Javadoc .\nAny line break may be preceded by arbitrary whitespace followed by an implementation comment.\nSuch a comment renders the line non-blank."
            }
        ]
    },
    {
        "title": "4.8.6.1 Block comment style",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.6 Comments/4.8.6.1 Block comment style",
        "cases": [
            {
                "description": "Block comments are indented at the same level as the surrounding code. They may be in `/*...*/`style or `//...`style. For multi-line `/*...*/`comments, subsequent lines must start with `*`aligned with the `*`on the previous line.",
                "example": "/*\n * This is          // And so           /* Or you can\n * okay.            // is this.          * even do this. */\n */\n"
            },
            {
                "description": "Comments are not enclosed in boxes drawn with asterisks or other characters.\nTip: When writing multi-line comments, use the `/*...*/`style if you want automatic code formatters to\nre-wrap the lines when necessary (paragraph-style). Most formatters don't re-wrap lines in `//...`style comment blocks."
            }
        ]
    },
    {
        "title": "4.8.7 Modifiers",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.6 Comments/4.8.7 Modifiers",
        "cases": [
            {
                "description": "Class and member modifiers, when present, appear in the order\nrecommended by the Java Language Specification:",
                "example": "public protected private abstract default static final transient volatile synchronized native strictfp\n"
            }
        ]
    },
    {
        "title": "4.8.8 Numeric Literals",
        "belongs to": "4 Formatting/4.1 Braces/4.5 Line-wrapping/4.6 Whitespace/4.8 Specific constructs/4.8.2 Variable declarations/4.8.3 Arrays/4.8.4 Switch statements/4.8.5 Annotations/4.8.6 Comments/4.8.8 Numeric Literals",
        "cases": [
            {
                "description": "`long`-valued integer literals use an uppercase `L`suffix, never\nlowercase (to avoid confusion with the digit `1`). For example, `3000000000L`rather than `3000000000l`."
            }
        ]
    },
    {
        "title": "5 Naming",
        "belongs to": "5 Naming",
        "cases": []
    },
    {
        "title": "5.1 Rules common to all identifiers",
        "belongs to": "5 Naming/5.1 Rules common to all identifiers",
        "cases": [
            {
                "description": "Identifiers use only ASCII letters and digits, and, in a small number of cases noted below,\nunderscores. Thus each valid identifier name is matched by the regular expression `\\w+`.\nIn Google Style, special prefixes or suffixes are not used. For example, these\nnames are not Google Style: `name_`, `mName`, `s_name`and `kName`."
            }
        ]
    },
    {
        "title": "5.2 Rules by identifier type",
        "belongs to": "5 Naming/5.2 Rules by identifier type",
        "cases": []
    },
    {
        "title": "5.2.1 Package names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.1 Package names",
        "cases": [
            {
                "description": "Package names use only lowercase letters and digits (no underscores). Consecutive words are\nsimply concatenated together. For example, `com.example.deepspace`, not `com.example.deepSpace`or `com.example.deep_space`."
            }
        ]
    },
    {
        "title": "5.2.2 Class names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.2 Class names",
        "cases": [
            {
                "description": "Class names are written in UpperCamelCase .\nClass names are typically nouns or noun phrases. For example, `Character`or `ImmutableList`. Interface names may also be nouns or\nnoun phrases (for example, `List`), but may sometimes be\nadjectives or adjective phrases instead (for example, `Readable`).\nThere are no specific rules or even well-established conventions for naming annotation types.\nA test class has a name that ends with `Test`,\nfor example, `HashIntegrationTest`.\nIf it covers a single class, its name is the name of that class\nplus `Test`, for example `HashImplTest`."
            }
        ]
    },
    {
        "title": "5.2.3 Method names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.3 Method names",
        "cases": [
            {
                "description": "Method names are written in lowerCamelCase .\nMethod names are typically verbs or verb phrases. For example, `sendMessage`or `stop`.\nUnderscores may appear in JUnit test method names to separate logical components of the\nname, with each component written in lowerCamelCase , for\nexample `transferMoney_deductsFromSource`. There is no One\nCorrect Way to name test methods."
            }
        ]
    },
    {
        "title": "5.2.4 Constant names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.4 Constant names",
        "cases": [
            {
                "description": "Constant names use `UPPER_SNAKE_CASE`: all uppercase\nletters, with each word separated from the next by a single underscore. But what is a\nconstant, exactly?\nConstants are static final fields whose contents are deeply immutable and whose methods have no\ndetectable side effects. Examples include primitives, strings, immutable value classes, and anything\nset to `null`. If any of the instance's observable state can change, it is not a\nconstant. Merely intending to never mutate the object is not enough. Examples:",
                "example": "// Constants\nstatic final int NUMBER = 5;\nstatic final ImmutableList<String> NAMES = ImmutableList.of(\"Ed\", \"Ann\");\nstatic final Map<String, Integer> AGES = ImmutableMap.of(\"Ed\", 35, \"Ann\", 32);\nstatic final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutable\nstatic final SomeMutableType[] EMPTY_ARRAY = {};\n\n// Not constants\nstatic String nonFinal = \"non-final\";\nfinal String nonStatic = \"non-static\";\nstatic final Set<String> mutableCollection = new HashSet<String>();\nstatic final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);\nstatic final ImmutableMap<String, SomeMutableType> mutableValues =\n    ImmutableMap.of(\"Ed\", mutableInstance, \"Ann\", mutableInstance2);\nstatic final Logger logger = Logger.getLogger(MyClass.getName());\nstatic final String[] nonEmptyArray = {\"these\", \"can\", \"change\"};\n"
            },
            {
                "description": "These names are typically nouns or noun phrases."
            }
        ]
    },
    {
        "title": "5.2.5 Non-constant field names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.5 Non-constant field names",
        "cases": [
            {
                "description": "Non-constant field names (static or otherwise) are written\nin lowerCamelCase .\nThese names are typically nouns or noun phrases. For example, `computedValues`or `index`."
            }
        ]
    },
    {
        "title": "5.2.6 Parameter names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.6 Parameter names",
        "cases": [
            {
                "description": "Parameter names are written in lowerCamelCase .\nOne-character parameter names in public methods should be avoided."
            }
        ]
    },
    {
        "title": "5.2.7 Local variable names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.7 Local variable names",
        "cases": [
            {
                "description": "Local variable names are written in lowerCamelCase .\nEven when final and immutable, local variables are not considered to be constants, and should not\nbe styled as constants."
            }
        ]
    },
    {
        "title": "5.2.8 Type variable names",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.2.8 Type variable names",
        "cases": [
            {
                "description": "Each type variable is named in one of two styles:\nA single capital letter, optionally followed by a single numeral (such as `E`, `T`, `X`, `T2`) \nA name in the form used for classes (see Section 5.2.2, Class names ), followed by the capital letter `T`(examples: `RequestT`, `FooBarT`)."
            }
        ]
    },
    {
        "title": "5.3 Camel case: defined",
        "belongs to": "5 Naming/5.2 Rules by identifier type/5.3 Camel case: defined",
        "cases": [
            {
                "description": "Sometimes there is more than one reasonable way to convert an English phrase into camel case,\nsuch as when acronyms or unusual constructs like \"IPv6\" or \"iOS\" are present. To improve\npredictability, Google Style specifies the following (nearly) deterministic scheme.\nBeginning with the prose form of the name:\nConvert the phrase to plain ASCII and remove any apostrophes. For example, \"Müller's\nalgorithm\" might become \"Muellers algorithm\". \nDivide this result into words, splitting on spaces and any remaining punctuation (typically\nhyphens). \n\nRecommended: if any word already has a conventional camel-case appearance in common\nusage, split this into its constituent parts (e.g., \"AdWords\" becomes \"ad words\"). Note\nthat a word such as \"iOS\" is not really in camel case per se ; it defies any convention, so this recommendation does not apply. \n\n\nNow lowercase everything (including acronyms), then uppercase only the first\ncharacter of: \n... each word, to yield upper camel case , or \n... each word except the first, to yield lower camel case \n\n\n\nFinally, join all the words into a single identifier.\nNote that the casing of the original words is almost entirely disregarded. Examples:\nProse form \nCorrect \nIncorrect \n\n\n\"XML HTTP request\" \n\n`XmlHttpRequest`\n\n\n`XMLHTTPRequest`\n\n\n\n\"new customer ID\" \n\n`newCustomerId`\n\n\n`newCustomerID`\n\n\n\n\"inner stopwatch\" \n\n`innerStopwatch`\n\n\n`innerStopWatch`\n\n\n\n\"supports IPv6 on iOS?\" \n\n`supportsIpv6OnIos`\n\n\n`supportsIPv6OnIOS`\n\n\n\n\"YouTube importer\" \n\n`YouTubeImporter`\n\n`YoutubeImporter`*\n*Acceptable, but not recommended.\nNote: Some words are ambiguously hyphenated in the English\nlanguage: for example \"nonempty\" and \"non-empty\" are both correct, so the method names `checkNonempty`and `checkNonEmpty`are likewise both correct."
            }
        ]
    },
    {
        "title": "6 Programming Practices",
        "belongs to": "6 Programming Practices",
        "cases": []
    },
    {
        "title": "6.1\n     \n      @Override\n     \n     : always used",
        "belongs to": "6 Programming Practices/6.1\n     \n      @Override\n     \n     : always used",
        "cases": [
            {
                "description": "A method is marked with the `@Override`annotation\nwhenever it is legal. This includes a class method overriding a superclass method, a class method\nimplementing an interface method, and an interface method respecifying a superinterface\nmethod.\nException: \n`@Override`may be omitted when the parent method is `@Deprecated`."
            }
        ]
    },
    {
        "title": "6.2 Caught exceptions: not ignored",
        "belongs to": "6 Programming Practices/6.2 Caught exceptions: not ignored",
        "cases": [
            {
                "description": "Except as noted below, it is very rarely correct to do nothing in response to a caught\nexception. (Typical responses are to log it, or if it is considered \"impossible\", rethrow it as an `AssertionError`.)\nWhen it truly is appropriate to take no action whatsoever in a catch block, the reason this is\njustified is explained in a comment.",
                "example": "try {\n  int i = Integer.parseInt(response);\n  return handleNumericResponse(i);\n} catch (NumberFormatException ok) {\n  // it's not numeric; that's fine, just continue\n}\nreturn handleTextResponse(response);\n"
            },
            {
                "description": "Exception: In tests, a caught exception may be ignored\nwithout comment if its name is or begins with `expected`. The\nfollowing is a very common idiom for ensuring that the code under test does throw an\nexception of the expected type, so a comment is unnecessary here.",
                "example": "try {\n  emptyStack.pop();\n  fail();\n} catch (NoSuchElementException expected) {\n}\n"
            }
        ]
    },
    {
        "title": "6.3 Static members: qualified using class",
        "belongs to": "6 Programming Practices/6.3 Static members: qualified using class",
        "cases": [
            {
                "description": "When a reference to a static class member must be qualified, it is qualified with that class's\nname, not with a reference or expression of that class's type.",
                "example": "Foo aFoo = ...;\nFoo.aStaticMethod(); // good\naFoo.aStaticMethod(); // bad\nsomethingThatYieldsAFoo().aStaticMethod(); // very bad\n"
            }
        ]
    },
    {
        "title": "6.4 Finalizers: not used",
        "belongs to": "6 Programming Practices/6.4 Finalizers: not used",
        "cases": [
            {
                "description": "It is extremely rare to override `Object.finalize`.\nTip: Don't do it. If you absolutely must, first read and understand \nEffective Java Item 8 ,\n\n\"Avoid finalizers and cleaners\" very carefully, and then don't do it."
            }
        ]
    },
    {
        "title": "7 Javadoc",
        "belongs to": "7 Javadoc",
        "cases": []
    },
    {
        "title": "7.1 Formatting",
        "belongs to": "7 Javadoc/7.1 Formatting",
        "cases": []
    },
    {
        "title": "7.1.1 General form",
        "belongs to": "7 Javadoc/7.1 Formatting/7.1.1 General form",
        "cases": [
            {
                "description": "The basic formatting of Javadoc blocks is as seen in this example:",
                "example": "/**\n * Multiple lines of Javadoc text are written here,\n * wrapped normally...\n */\npublic int method(String p1) { ... }\n"
            },
            {
                "description": "... or in this single-line example:",
                "example": "/** An especially short bit of Javadoc. */\n"
            },
            {
                "description": "The basic form is always acceptable. The single-line form may be substituted when the entirety\nof the Javadoc block (including comment markers) can fit on a single line. Note that this only\napplies when there are no block tags such as `@return`."
            }
        ]
    },
    {
        "title": "7.1.2 Paragraphs",
        "belongs to": "7 Javadoc/7.1 Formatting/7.1.2 Paragraphs",
        "cases": [
            {
                "description": "One blank line—that is, a line containing only the aligned leading asterisk\n( `*`)—appears between paragraphs, and before the group of block tags if present.\nEach paragraph except the first has `<p>`immediately before the first word, with\nno space after it. HTML tags for other block-level elements, such as `<ul>`or `<table>`, are not preceded with `<p>`."
            }
        ]
    },
    {
        "title": "7.1.3 Block tags",
        "belongs to": "7 Javadoc/7.1 Formatting/7.1.3 Block tags",
        "cases": [
            {
                "description": "Any of the standard \"block tags\" that are used appear in the order `@param`, `@return`, `@throws`, `@deprecated`, and these four types never\nappear with an empty description. When a block tag doesn't fit on a single line, continuation lines\nare indented four (or more) spaces from the position of the `@`."
            }
        ]
    },
    {
        "title": "7.2 The summary fragment",
        "belongs to": "7 Javadoc/7.1 Formatting/7.2 The summary fragment",
        "cases": [
            {
                "description": "Each Javadoc block begins with a brief summary fragment . This\nfragment is very important: it is the only part of the text that appears in certain contexts such as\nclass and method indexes.\nThis is a fragment—a noun phrase or verb phrase, not a complete sentence. It does not begin with `A{@codeFoo}isa...`, or `Thismethodreturns...`, nor does it form a complete imperative sentence\nlike `Savetherecord.`. However, the fragment is capitalized and\npunctuated as if it were a complete sentence.\nTip: A common mistake is to write simple Javadoc in the form `/**@returnthecustomerID*/`. This is\nincorrect, and should be changed to `/**ReturnsthecustomerID.*/`."
            }
        ]
    },
    {
        "title": "7.3 Where Javadoc is used",
        "belongs to": "7 Javadoc/7.1 Formatting/7.3 Where Javadoc is used",
        "cases": [
            {
                "description": "At the minimum , Javadoc is present for every `public`class, and every `public`or `protected`member of such a class, with a few exceptions\nnoted below.\nAdditional Javadoc content may also be present, as explained in Section 7.3.4, Non-required Javadoc ."
            }
        ]
    },
    {
        "title": "7.3.1 Exception: self-explanatory members",
        "belongs to": "7 Javadoc/7.1 Formatting/7.3 Where Javadoc is used/7.3.1 Exception: self-explanatory members",
        "cases": [
            {
                "description": "Javadoc is optional for \"simple, obvious\" members like `getFoo()`, in cases where there really and truly is nothing else worthwhile to say but \"Returns the foo\".\nImportant: it is not appropriate to cite this exception to justify\nomitting relevant information that a typical reader might need to know. For example, for a method\nnamed `getCanonicalName`, don't omit its documentation\n(with the rationale that it would say only `/**Returnsthecanonicalname.*/`) if a typical reader may have no idea\nwhat the term \"canonical name\" means!"
            }
        ]
    },
    {
        "title": "7.3.2 Exception: overrides",
        "belongs to": "7 Javadoc/7.1 Formatting/7.3 Where Javadoc is used/7.3.2 Exception: overrides",
        "cases": [
            {
                "description": "Javadoc is not always present on a method that overrides a supertype method."
            }
        ]
    },
    {
        "title": "7.3.4 Non-required Javadoc",
        "belongs to": "7 Javadoc/7.1 Formatting/7.3 Where Javadoc is used/7.3.4 Non-required Javadoc",
        "cases": [
            {
                "description": "Other classes and members have Javadoc as needed or desired .\nWhenever an implementation comment would be used to define the overall purpose or behavior of a\nclass or member, that comment is written as Javadoc instead (using `/**`).\nNon-required Javadoc is not strictly required to follow the formatting rules of Sections\n7.1.1, 7.1.2, 7.1.3, and 7.2, though it is of course recommended."
            }
        ]
    }
]