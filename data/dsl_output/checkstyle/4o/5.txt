Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

1. Analyze whether each sentence of Description of CheckStyle Rule is a rule and then classify it as mandatory or optional. If the rule is same as an option, do not need to parse it as a rule. If the rule is subjective, do not classify it as a rule. 
2. Analyze whether each option is a rule. If option is a configurable term, using {{OptionName}} to represent the term. If the option is to configure violation messages or reporting granularity, do not classify it as a rule. If the option is a rule, parse rule for each value of the option.
3. When parsing a rule using the given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. 

CheckStyle Rule:
Rulename
JavadocVariable
Description

Checks that a variable has a Javadoc comment. Ignores serialVersionUID
fields.
Options
Properties



name
description
type
default value
since


excludeScope
Specify the visibility scope where Javadoc comments are not checked.
Scope
null
3.4


ignoreNamePattern
Specify the regexp to define variable names to ignore.
Pattern
null
5.8


scope
Specify the visibility scope where Javadoc comments are checked.
Scope
private
3.0


tokens
tokens to check
subset of tokens

ENUM_CONSTANT_DEF
.



ENUM_CONSTANT_DEF
.

3.0

Grammar:
RuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups
Rule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means if Rule1 then Rule2
ExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule # means rules not applied to TermList | Rule
Operator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'
TermList ::= Term [, Term]*
Modifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...
Term :: = JavaTerm | Modifier* Term | Term of Term
JavaTerm means the formal expression using such format [XXX] "XXX" represent a JavaTerm


For Example, Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

CheckStyle Rule:
Rulename:
NeedBraces

Description
Checks for braces around code blocks.

Options:
allowEmptyLoopBody, Allow loops with empty bodies., boolean, false
allowSingleLineStatement, Allow single-line statements without braces., boolean, false
tokens, tokens to check, subset of tokens

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
,
LITERAL_CASE
,
LITERAL_DEFAULT
,
LAMBDA
.
,

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
.

Final RuleSet Representation:
Basic Rule:
{{tokens}} has [Brace] 

Option Rule:
allowEmptyLoopBody option:
False: Mandatory: [body] of {{tokens}} is not [Null]
True: Optional: [body] of {{tokens}} is [Null]

allowSingleLineStatement option:
False: Mandatory: Number of [statement] of [body] of [tokens] is 1 -> [tokens] has [Brace] 
True: Optional: Number of [statement] of [body] of [tokens] is 1 -> [tokens] not has [Brace]

=======================================================
Based on the provided CheckStyle Rule for `JavadocVariable`, let's analyze it using the given Grammar:

1. Description Analysis:
   - The description provides information about the rule `JavadocVariable`.
   - The sentences in the description are not rules themselves but rather provide context and explanation about the purpose of the rule.
   - The description does not contain specific mandatory or optional rules.

2. Option Analysis:
   - `excludeScope` option:
     - Rule: Mandatory: [Javadoc] of {{variable}} is [Null] for [Scope] is not [excludeScope]
     - Rule: Mandatory: [Javadoc] of {{variable}} is not [Null] for [Scope] is [excludeScope]
   - `ignoreNamePattern` option:
     - Rule: Mandatory: [Javadoc] of {{variable}} is [Null] for [Name] does not match [ignoreNamePattern]
     - Rule: Mandatory: [Javadoc] of {{variable}} is not [Null] for [Name] matches [ignoreNamePattern]
   - `scope` option:
     - Rule: Mandatory: [Javadoc] of {{variable}} is [Null] for [Scope] is not [scope]
     - Rule: Mandatory: [Javadoc] of {{variable}} is not [Null] for [Scope] is [scope]
   - `tokens` option:
     - Rule: Mandatory: [Javadoc] of {{variable}} is [Null] for [Token] is not [ENUM_CONSTANT_DEF]
     - Rule: Mandatory: [Javadoc] of {{variable}} is not [Null] for [Token] is [ENUM_CONSTANT_DEF]

3. Final RuleSet Representation:
   - Basic Rule:
     - [Javadoc] of {{variable}} has [Null]
   - Option Rules:
     - `excludeScope` option:
       - Mandatory: [Javadoc] of {{variable}} is [Null] for [Scope] is not [excludeScope]
       - Mandatory: [Javadoc] of {{variable}} is not [Null] for [Scope] is [excludeScope]
     - `ignoreNamePattern` option:
       - Mandatory: [Javadoc] of {{variable}} is [Null] for [Name] does not match [ignoreNamePattern]
       - Mandatory: [Javadoc] of {{variable}} is not [Null] for [Name] matches [ignoreNamePattern]
     - `scope` option:
       - Mandatory: [Javadoc] of {{variable}} is [Null] for [Scope] is not [scope]
       - Mandatory: [Javadoc] of {{variable}} is not [Null] for [Scope] is [scope]
     - `tokens` option:
       - Mandatory: [Javadoc] of {{variable}} is [Null] for [Token] is not [ENUM_CONSTANT_DEF]
       - Mandatory: [Javadoc] of {{variable}} is not [Null] for [Token] is [ENUM_CONSTANT_DEF]

This analysis provides a structured representation of the `JavadocVariable` rule in terms of its description, options, and corresponding rules for each option.