[
    {
        "title": "1 Angular Language Rules",
        "belongs to": "1 Angular Language Rules",
        "cases": [
            {
                "description": "",
                "example": []
            }
        ]
    },
    {
        "title": "Manage dependencies with Closure's goog.require and goog.provide",
        "belongs to": "1 Angular Language Rules/Manage dependencies with Closure's goog.require and goog.provide",
        "cases": [
            {
                "description": "Choose a namespace for your project, and use goog.provide and goog.require.",
                "example": [
                    "\ngoog.provide('hello.about.AboutCtrl');\ngoog.provide('hello.versions.Versions');\n"
                ]
            },
            {
                "description": "Why?\n    Google BUILD rules integrate nicely with closure provide/require.",
                "example": []
            }
        ]
    },
    {
        "title": "Modules",
        "belongs to": "1 Angular Language Rules/Modules",
        "cases": [
            {
                "description": "Your main application module should be in your root client directory. A module should never be\n    altered other than the one where it is defined.Modules may either be defined in the same file as their components (this works well for a module\n    that contains exactly one service) or in a separate file for wiring pieces together.Why?\n    A module should be consistent for anyone that wants to include it as a reusable component.\n    If a module can mean different things depending on which files are included, it is not consistent.\n",
                "example": []
            }
        ]
    },
    {
        "title": "\n    Modules should reference other modules using the Angular Module's \"name\" property\n",
        "belongs to": "1 Angular Language Rules/\n    Modules should reference other modules using the Angular Module's \"name\" property\n",
        "cases": [
            {
                "description": "For example:",
                "example": [
                    "\n// file submodulea.js:\n  goog.provide('my.submoduleA');\n\n  my.submoduleA = angular.module('my.submoduleA', []);\n  // ...\n\n// file app.js\n  goog.require('my.submoduleA');\n\n  Yes: my.application.module = angular.module('hello', [my.submoduleA.name]);\n  \n      No: my.application.module = angular.module('hello', ['my.submoduleA']);\n  "
                ]
            },
            {
                "description": "Why?\n    Using a property of my.submoduleA prevents Closure presubmit failures complaining that the file is\n    required but never used. Using the .name property avoids duplicating strings.",
                "example": []
            }
        ]
    },
    {
        "title": "Use a common externs file",
        "belongs to": "1 Angular Language Rules/Use a common externs file",
        "cases": [
            {
                "description": "This maximally allows the JS compiler to enforce type safety in the presence of externally\n    provided types from Angular, and means you don't have to worry about Angular vars being obfuscated\n    in a confusing way. Note to readers outside Google: the current externs file is located in an internal-to-Google\n    directory, but an example can be found on github \n        here.",
                "example": []
            }
        ]
    },
    {
        "title": "JSCompiler Flags",
        "belongs to": "1 Angular Language Rules/JSCompiler Flags",
        "cases": [
            {
                "description": "Reminder: According to the JS style guide, customer facing code must be compiled.Recommended: Use the JSCompiler (the closure compiler that works with js_binary by\n    default) and ANGULAR_COMPILER_FLAGS_FULL from //javascript/angular/build_defs/build_defs for\n    your base flags.\nNote - if you are using @export for methods, you will need to add the compiler flag",
                "example": [
                    "\n\"--generate_exports\",\n"
                ]
            },
            {
                "description": "If you are using @export for properties, you will need to add the flags:",
                "example": [
                    "\n\"--generate_exports\",\n\"--remove_unused_prototype_props_in_externs=false\",\n\"--export_local_property_definitions\",\n"
                ]
            },
            {
                "description": "",
                "example": []
            }
        ]
    },
    {
        "title": "Controllers and Scopes",
        "belongs to": "1 Angular Language Rules/Controllers and Scopes",
        "cases": [
            {
                "description": "Controllers are classes. Methods should be defined on MyCtrl.prototype.Google Angular applications should use the 'controller as' style to export the controller\n    onto the scope. This is fully implemented in Angular 1.2 and can be mimicked in pre-Angular 1.2\n    builds.\nPre Angular 1.2, this looks like:",
                "example": [
                    "\n/**\n * Home controller.\n *\n * @param {!angular.Scope} $scope\n * @constructor\n * @ngInject\n * @export\n */\nhello.mainpage.HomeCtrl = function($scope) {\n  /** @export */\n  $scope.homeCtrl = this; // This is a bridge until Angular 1.2 controller-as\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.myColor = 'blue';\n};\n\n\n/**\n * @param {number} a\n * @param {number} b\n * @export\n */\nhello.mainpage.HomeCtrl.prototype.add = function(a, b) {\n  return a + b;\n};\n"
                ]
            },
            {
                "description": "And the template:",
                "example": [
                    "\n<div ng-controller=\"hello.mainpage.HomeCtrl\"/>\n  <span ng-class=\"homeCtrl.myColor\">I'm in a color!</span>\n  <span>{{homeCtrl.add(5, 6)}}</span>\n</div>\n"
                ]
            },
            {
                "description": "After Angular 1.2, this looks like:",
                "example": [
                    "\n/**\n * Home controller.\n *\n * @constructor\n * @ngInject\n * @export\n */\nhello.mainpage.HomeCtrl = function() {\n  /**\n   * @type {string}\n   * @export\n   */\n  this.myColor = 'blue';\n};\n\n\n/**\n * @param {number} a\n * @param {number} b\n * @export\n */\nhello.mainpage.HomeCtrl.prototype.add = function(a, b) {\n  return a + b;\n};\n"
                ]
            },
            {
                "description": "If you are compiling with property renaming, expose properties and methods using the @export\n    annotation. Remember to @export the constructor as well.And in the template:",
                "example": [
                    "\n<div ng-controller=\"hello.mainpage.HomeCtrl as homeCtrl\"/>\n  <span ng-class=\"homeCtrl.myColor\">I'm in a color!</span>\n  <span>{{homeCtrl.add(5, 6)}}</span>\n</div>\n"
                ]
            },
            {
                "description": "Why?\n    Putting methods and properties directly onto the controller, instead of building up a scope\n    object, fits better with the Google Closure class style. Additionally, using 'controller as'\n    makes it obvious which controller you are accessing when multiple controllers apply to an element.\n    Since there is always a '.' in the bindings, you don't have to worry about prototypal inheritance\n    masking primitives.",
                "example": []
            }
        ]
    },
    {
        "title": "Directives",
        "belongs to": "1 Angular Language Rules/Directives",
        "cases": [
            {
                "description": "All DOM manipulation should be done inside directives. Directives should be kept small and use\n    composition. Files defining directives should goog.provide a static function which returns the\n    directive definition object.",
                "example": [
                    "\ngoog.provide('hello.pane.paneDirective');\n\n/**\n * Description and usage\n * @return {angular.Directive} Directive definition object.\n */\nhello.pane.paneDirective = function() {\n  // ...\n};\n"
                ]
            },
            {
                "description": "Exception: DOM manipulation may occur in services for DOM elements disconnected from the\n    rest of the view, e.g. dialogs or keyboard shortcuts.",
                "example": []
            }
        ]
    },
    {
        "title": "Services",
        "belongs to": "1 Angular Language Rules/Services",
        "cases": [
            {
                "description": "Services registered on the module with module.service are classes.\n    Use module.service instead of module.provider or\n    module.factory unless you need to do initialization beyond just creating a\n    new instance of the class.",
                "example": [
                    "\n/**\n * @param {!angular.$http} $http The Angular http service.\n * @constructor\n */\nhello.request.Request = function($http) {\n  /** @type {!angular.$http} */\n  this.http_ = $http;\n};\n\nhello.request.Request.prototype.get = function() {/*...*/};\n"
                ]
            },
            {
                "description": "In the module:",
                "example": [
                    "\nmodule.service('request', hello.request.Request);\n"
                ]
            },
            {
                "description": "",
                "example": []
            }
        ]
    },
    {
        "title": "2 Angular Style Rules",
        "belongs to": "2 Angular Style Rules",
        "cases": [
            {
                "description": "",
                "example": []
            }
        ]
    },
    {
        "title": "Reserve $ for Angular properties and services",
        "belongs to": "2 Angular Style Rules/Reserve $ for Angular properties and services",
        "cases": [
            {
                "description": "Do not use $ to prepend your own object properties and service identifiers. Consider this style\n    of naming reserved by AngularJS and jQuery.Yes:",
                "example": [
                    "\n  $scope.myModel = { value: 'foo' }\n  myModule.service('myService', function() { /*...*/ });\n  var MyCtrl = function($http) {this.http_ = $http;};\n"
                ]
            },
            {
                "description": "No:",
                "example": [
                    "\n  $scope.$myModel = { value: 'foo' } // BAD\n  $scope.myModel = { $value: 'foo' } // BAD\n  myModule.service('$myService', function() { ... }); // BAD\n  var MyCtrl = function($http) {this.$http_ = $http;}; // BAD\n"
                ]
            },
            {
                "description": "Why?\n    It's useful to distinguish between Angular / jQuery builtins and things you add yourself.\n    In addition, $ is not an acceptable character for variables names in the JS style guide.\n",
                "example": []
            }
        ]
    },
    {
        "title": "Custom elements",
        "belongs to": "2 Angular Style Rules/Custom elements",
        "cases": [
            {
                "description": "For custom elements (e.g. <ng-include src=\"template\"></ng-include>), IE8\n    requires special support (html5shiv-like hacks) to enable css styling.  Be aware of this\n    restriction in apps targeting old versions of IE.",
                "example": []
            }
        ]
    },
    {
        "title": "3 Angular Tips, Tricks, and Best Practices",
        "belongs to": "3 Angular Tips, Tricks, and Best Practices",
        "cases": [
            {
                "description": "These are not strict style guide rules, but are placed here as reference for folks getting\n    started with Angular at Google.",
                "example": []
            }
        ]
    },
    {
        "title": "Testing",
        "belongs to": "3 Angular Tips, Tricks, and Best Practices/Testing",
        "cases": [
            {
                "description": "Angular is designed for test-driven development.The recommended unit testing setup is Jasmine + Karma (though you could use closure tests\n    or js_test)Angular provides easy adapters to load modules and use the injector in Jasmine tests.\n\nmodule\ninject\n\n",
                "example": []
            }
        ]
    },
    {
        "title": "Consider using the Best Practices for App Structure",
        "belongs to": "3 Angular Tips, Tricks, and Best Practices/Consider using the Best Practices for App Structure",
        "cases": [
            {
                "description": "\n    This  directory structure doc describes how to structure your application with controllers in\n    nested subdirectories and all components (e.g. services and directives) in a 'components' dir.\n",
                "example": []
            }
        ]
    },
    {
        "title": "Be aware of how scope inheritance works",
        "belongs to": "3 Angular Tips, Tricks, and Best Practices/Be aware of how scope inheritance works",
        "cases": [
            {
                "description": "See \n    The Nuances of Scope Prototypal Inheritance",
                "example": []
            }
        ]
    },
    {
        "title": "Use @ngInject for easy dependency injection compilation",
        "belongs to": "3 Angular Tips, Tricks, and Best Practices/Use @ngInject for easy dependency injection compilation",
        "cases": [
            {
                "description": "This removes the need to add myCtrl['$inject'] = ... to prevent minification from\n    messing up Angular's dependency injection.Usage:",
                "example": [
                    "\n/**\n * My controller.\n * @param {!angular.$http} $http\n * @param {!my.app.myService} myService\n * @constructor\n * @export\n * @ngInject\n */\nmy.app.MyCtrl = function($http, myService) {\n  //...\n};\n"
                ]
            },
            {
                "description": "",
                "example": []
            }
        ]
    },
    {
        "title": "4 Best practices links and docs",
        "belongs to": "4 Best practices links and docs",
        "cases": [
            {
                "description": "\n\n        Best Practices from Angular on GitHub\n\n        Meetup video (not Google specific)\n\n    Last modified Feb 07 2013\n",
                "example": []
            }
        ]
    }
]