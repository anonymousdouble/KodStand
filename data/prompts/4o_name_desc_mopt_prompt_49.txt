Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
7.2 The summary fragment
Each Javadoc block begins with a brief summary fragment . This fragment is very important: it is the only part of the text that appears in certain contexts such as class and method indexes.
 This is a fragment¡ªa noun phrase or verb phrase, not a complete sentence. It does not begin with `A{@codeFoo}isa...` , or `Thismethodreturns...` , nor does it form a complete imperative sentence like `Savetherecord.` . However, the fragment is capitalized and punctuated as if it were a complete sentence.
 Tip: A common mistake is to write simple Javadoc in the form `/**@returnthecustomerID*/` . This is incorrect, and should be changed to `/**ReturnsthecustomerID.*/` .

CheckStyle Rules:
[Rule]
SummaryJavadoc
[Description]
Checks that

Javadoc summary sentence does not contain phrases that are not recommended to use.
Summaries that contain only the {@inheritDoc} tag are skipped. Summaries
that contain a non-empty {@code {@return}} are allowed. Check also violate Javadoc that
does not contain first sentence, though with {@code {@return}} a period is not required
as the Javadoc tool adds it.
[Options]
forbiddenSummaryFragments, Specify the regexp for forbidden summary fragments.
period, Specify the period symbol at the end of first javadoc sentence.
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
JavadocContentLocation
[Description]
Checks that the Javadoc content begins from the same position
for all Javadoc comments in the project. Any leading asterisks and spaces
are not counted as the beginning of the content and are therefore ignored.


It is possible to enforce two different styles:



{@code first_line} - Javadoc content starts from the first line:



/** Summary text.
* More details.
*/
public void method();



{@code second_line} - Javadoc content starts from the second line:



/**
* Summary text.
* More details.
*/
public void method();
[Options]
location, Specify the policy on placement of the Javadoc content.
[Rule]
JavadocParagraph
[Description]
Checks the Javadoc paragraph.


Checks that:



There is one blank line between each of two paragraphs.


Each paragraph but the first has <p> immediately before the first word, with
no space after.
[Options]
allowNewlineParagraph, Control whether the <p> tag should be placed immediately before the first word.
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
SingleLineJavadoc
[Description]
Checks that a Javadoc block can fit in a single-line and doesn't
contain block tags. Javadoc comment that contains at least one block tag
should be formatted in a few lines.
[Options]
ignoreInlineTags, Control whether
inline tags must be ignored.
ignoredTags, Specify
block tags which are ignored by the check.
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
JavadocStyle
[Description]
Validates Javadoc comments to help ensure they are well formed.


The following checks are performed:



Ensures the first sentence ends with proper punctuation
(That is a period, question mark, or exclamation mark, by default).
Note that this check is not applied to inline @return tags,
because the Javadoc tools automatically appends a period to the end of the tag
content.
Javadoc automatically places the first sentence in the
method summary table and index. Without proper punctuation
the Javadoc may be malformed. All items eligible for the
{@inheritDoc} tag are exempt from this
requirement.


Check text for Javadoc statements that do not have any
description. This includes both completely empty Javadoc,
and Javadoc with only tags such as @param and @return.


Check text for incomplete HTML tags. Verifies that HTML
tags have corresponding end tags and issues an "Unclosed
HTML tag found:" error if not. An "Extra HTML tag found:"
error is issued if an end tag is found without a previous
open tag.


Check that a package Javadoc comment is well-formed (as
described above).


Check for allowed HTML tags. The list of allowed HTML tags
is "a", "abbr", "acronym", "address", "area", "b", "bdo", "big",
"blockquote", "br", "caption", "cite", "code", "colgroup", "dd",
"del", "dfn", "div", "dl", "dt", "em", "fieldset", "font", "h1",
"h2", "h3", "h4", "h5", "h6", "hr", "i", "img", "ins", "kbd", "li",
"ol", "p", "pre", "q", "samp", "small", "span", "strong", "sub",
"sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "tt",
"u", "ul", "var".



These checks were patterned after the checks made by the
DocCheck
doclet available from Sun. Note: Original Sun's DocCheck tool does not exist anymore.
[Options]
checkEmptyJavadoc, Control whether to check if the Javadoc is missing a describing text.
checkFirstSentence, Control whether to check the first sentence for proper end of sentence.
checkHtml, Control whether to check for incomplete HTML tags.
endOfSentenceFormat, Specify the format for matching the end of a sentence.
excludeScope, Specify the visibility scope where Javadoc comments are not checked.
scope, Specify the visibility scope where Javadoc comments are checked.
tokens, tokens to check
[Rule]
NonEmptyAtclauseDescription
[Description]
Checks that the block tag is followed by description.
[Options]
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
javadocTokens, javadoc tokens to check
[Rule]
InvalidJavadocPosition
[Description]
Checks that Javadocs are located at the correct position.
As specified at

Documentation Comment Specification for the Standard Doclet,
Javadocs are recognized only when placed immediately before module, package, class,
interface, constructor, method, or field declarations. Any other position, like
in the body of a method, will be ignored by the javadoc tool and is considered
invalid by this check.
[Options]
[Rule]
JavadocMissingLeadingAsterisk
[Description]
Checks if the javadoc has

leading asterisks

on each line.


The check does not require asterisks on the first line, nor on the last line
if it is blank. All other lines in a Javadoc should start with *,
including blank lines and code blocks.
[Options]
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
JavadocMissingWhitespaceAfterAsterisk
[Description]
Checks that there is at least one whitespace after the leading asterisk.
Although spaces after asterisks are optional in the Javadoc comments, their absence
makes the documentation difficult to read. It is the de facto standard to put at least
one whitespace after the leading asterisk.
[Options]
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.
[Rule]
JavadocBlockTagLocation
[Description]
Checks that a

javadoc block tag appears only at the beginning of a line, ignoring
leading asterisks and white space. A block tag is a token that starts
with @ symbol and is preceded by a whitespace. This check
ignores block tags in comments and inside inline tags {@code } and
{@literal }.


Rationale: according to

the specification all javadoc block tags should be placed at the
beginning of a line. Tags that are not placed at the beginning are treated
as plain text. To recognize intentional tag placement to text area
it is better to escape the @ symbol, and all non-escaped
tags should be located at the beginning of the line. See NOTE section
for details on how to escape.
[Options]
tags, Specify the javadoc tags to process.
violateExecutionOnNonTightHtml, Control when to print violations if the Javadoc being examined by this check violates the tight html rules defined at
Tight-HTML Rules.

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
