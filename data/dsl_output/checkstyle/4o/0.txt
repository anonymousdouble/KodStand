Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

1. Analyze whether each sentence of Description of CheckStyle Rule is a rule and then classify it as mandatory or optional. If the rule is same as an option, do not need to parse it as a rule. If the rule is subjective, do not classify it as a rule. 
2. Analyze whether each option is a rule. If option is a configurable term, using {{OptionName}} to represent the term. If the option is to configure violation messages or reporting granularity, do not classify it as a rule. If the option is a rule, parse rule for each value of the option.
3. When parsing a rule using the given Grammar, pay attention to map to suitable formal Java term and select appropriate real operator characters. 

CheckStyle Rule:
Rulename
PackageDeclaration
Description

Ensures that a class has a package declaration, and (optionally) whether
the package name matches the directory name for the source file.


Rationale: Classes that live in the null package cannot be
imported. Many novice developers are not aware of this.


Packages provide logical namespace to classes and should be stored in
the form of directory levels to provide physical grouping to your classes.
These directories are added to the classpath so that your classes
are visible to JVM when it runs the code.
Options
Properties



name
description
type
default value
since


matchDirectoryStructure
Control whether to check for directory and package name match.
boolean
true
7.6.1

Grammar:
RuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups
Rule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means if Rule1 then Rule2
ExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule # means rules not applied to TermList | Rule
Operator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'
TermList ::= Term [, Term]*
Modifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...
Term :: = JavaTerm | Modifier* Term | Term of Term
JavaTerm means the formal expression using such format [XXX] "XXX" represent a JavaTerm


For Example, Analyze the following CheckStyle Rule, please parse the CheckStyle Rule using the given Grammar to make its semantics clear and correct. CheckStyle Rule consists of Description and configurable Options. 

CheckStyle Rule:
Rulename:
NeedBraces

Description
Checks for braces around code blocks.

Options:
allowEmptyLoopBody, Allow loops with empty bodies., boolean, false
allowSingleLineStatement, Allow single-line statements without braces., boolean, false
tokens, tokens to check, subset of tokens

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
,
LITERAL_CASE
,
LITERAL_DEFAULT
,
LAMBDA
.
,

LITERAL_DO
,
LITERAL_ELSE
,
LITERAL_FOR
,
LITERAL_IF
,
LITERAL_WHILE
.

Final RuleSet Representation:
Basic Rule:
{{tokens}} has [Brace] 

Option Rule:
allowEmptyLoopBody option:
False: Mandatory: [body] of {{tokens}} is not [Null]
True: Optional: [body] of {{tokens}} is [Null]

allowSingleLineStatement option:
False: Mandatory: Number of [statement] of [body] of [tokens] is 1 -> [tokens] has [Brace] 
True: Optional: Number of [statement] of [body] of [tokens] is 1 -> [tokens] not has [Brace]

=======================================================
Basic Rule:
{{tokens}} has [Brace]

Option Rule:
allowEmptyLoopBody option:
False: Mandatory: [body] of {{tokens}} is not [Null]
True: Optional: [body] of {{tokens}} is [Null]

allowSingleLineStatement option:
False: Mandatory: Number of [statement] of [body] of [tokens] is 1 -> [tokens] has [Brace]
True: Optional: Number of [statement] of [body] of [tokens] is 1 -> [tokens] not has [Brace]