Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
2.3.3 Non-ASCII characters
For the remaining non-ASCII characters, either the actual Unicode character (e.g. `¡Þ` ) or the equivalent Unicode escape (e.g. `\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.
 Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.
 Examples:
 Example 
 Discussion 
 `StringunitAbbrev="¦Ìs";` 
 Best: perfectly clear even without a comment. 
 `StringunitAbbrev="\u03bcs";//"¦Ìs"` 
 Allowed, but there's no reason to do this. 
 `StringunitAbbrev="\u03bcs";//Greeklettermu,"s"` 
 Allowed, but awkward and prone to mistakes. 
 `StringunitAbbrev="\u03bcs";` 
 Poor: the reader has no idea what this is. 
 `return'\ufeff'+content;//byteordermark` 
 Good: use escapes for non-printable characters, and comment if necessary.
 Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .

CheckStyle Rules:
[Rule]
PackageDeclaration
[Rule]
VisibilityModifier
[Rule]
Indentation
[Rule]
OneTopLevelClass
[Rule]
MissingDeprecated
[Rule]
JavadocVariable
[Rule]
NoEnumTrailingComma
[Rule]
UniqueProperties
[Rule]
JavadocTagContinuationIndentation
[Rule]
LambdaParameterName
[Rule]
SuperFinalize
[Rule]
EmptyForIteratorPad
[Rule]
OneStatementPerLine
[Rule]
InterfaceTypeParameterName
[Rule]
MissingJavadocMethod
[Rule]
JavaNCSS
[Rule]
UnnecessaryParentheses
[Rule]
FallThrough
[Rule]
JavadocType
[Rule]
NPathComplexity
[Rule]
TrailingComment
[Rule]
PackageAnnotation
[Rule]
BooleanExpressionComplexity
[Rule]
UnusedImports
[Rule]
HideUtilityClassConstructor
[Rule]
NestedIfDepth
[Rule]
NoWhitespaceBeforeCaseDefaultColon
[Rule]
ThrowsCount
[Rule]
CommentsIndentation
[Rule]
UnnecessarySemicolonInEnumeration
[Rule]
MethodLength
[Rule]
OrderedProperties
[Rule]
TypecastParenPad
[Rule]
TypeName
[Rule]
UnnecessarySemicolonAfterOuterTypeDeclaration
[Rule]
VariableDeclarationUsageDistance
[Rule]
InvalidJavadocPosition
[Rule]
MissingJavadocType
[Rule]
RegexpHeader
[Rule]
EmptyCatchBlock
[Rule]
RecordComponentName
[Rule]
CovariantEquals
[Rule]
OperatorWrap
[Rule]
AvoidInlineConditionals
[Rule]
MemberName
[Rule]
OverloadMethodsDeclarationOrder
[Rule]
AvoidDoubleBraceInitialization
[Rule]
AvoidNoArgumentSuperConstructorCall
[Rule]
MethodTypeParameterName
[Rule]
MissingOverride
[Rule]
ClassMemberImpliedModifier
[Rule]
ClassDataAbstractionCoupling
[Rule]
AnnotationUseStyle
[Rule]
ClassTypeParameterName
[Rule]
ParameterNumber
[Rule]
IllegalInstantiation
[Rule]
AvoidStaticImport
[Rule]
MatchXpath
[Rule]
IllegalTokenText
[Rule]
Translation
[Rule]
MissingCtor
[Rule]
ExecutableStatementCount
[Rule]
JavadocContentLocation
[Rule]
RegexpMultiline
[Rule]
AtclauseOrder
[Rule]
InnerTypeLast
[Rule]
FinalLocalVariable
[Rule]
WhitespaceAfter
[Rule]
ClassFanOutComplexity
[Rule]
RegexpSinglelineJava
[Rule]
SingleLineJavadoc
[Rule]
NoLineWrap
[Rule]
MethodCount
[Rule]
AnnotationLocation
[Rule]
RedundantModifier
[Rule]
JavadocPackage
[Rule]
DesignForExtension
[Rule]
CatchParameterName
[Rule]
MissingSwitchDefault
[Rule]
StringLiteralEquality
[Rule]
ArrayTypeStyle
[Rule]
NoArrayTrailingComma
[Rule]
FileLength
[Rule]
SimplifyBooleanExpression
[Rule]
IllegalToken
[Rule]
InnerAssignment
[Rule]
MissingJavadocPackage
[Rule]
AvoidNestedBlocks
[Rule]
MethodParamPad
[Rule]
LeftCurly
[Rule]
ImportControl
[Rule]
RecordTypeParameterName
[Rule]
UpperEll
[Rule]
ParameterAssignment
[Rule]
NoClone
[Rule]
CustomImportOrder
[Rule]
InterfaceIsType
[Rule]
UnnecessarySemicolonAfterTypeMemberDeclaration
[Rule]
ReturnCount
[Rule]
LocalFinalVariableName
[Rule]
PatternVariableName
[Rule]
OuterTypeNumber
[Rule]
UnnecessarySemicolonInTryWithResources
[Rule]
EmptyForInitializerPad
[Rule]
ExplicitInitialization
[Rule]
IllegalType
[Rule]
FinalParameters
[Rule]
IllegalImport
[Rule]
RequireEmptyLineBeforeBlockTagGroup
[Rule]
NeedBraces
[Rule]
TodoComment
[Rule]
DescendantToken
[Rule]
EmptyStatement
[Rule]
SingleSpaceSeparator
[Rule]
RegexpSingleline
[Rule]
RecordComponentNumber
[Rule]
Regexp
[Rule]
UncommentedMain
[Rule]
EmptyLineSeparator
[Rule]
HiddenField
[Rule]
SuppressWarnings
[Rule]
JavadocMissingLeadingAsterisk
[Rule]
JavadocMethod
[Rule]
SimplifyBooleanReturn
[Rule]
SummaryJavadoc
[Rule]
EqualsHashCode
[Rule]
UnusedLocalVariable
[Rule]
JavadocParagraph
[Rule]
NoWhitespaceBefore
[Rule]
LambdaBodyLength
[Rule]
JavadocStyle
[Rule]
NestedForDepth
[Rule]
RedundantImport
[Rule]
ParenPad
[Rule]
LineLength
[Rule]
JavadocBlockTagLocation
[Rule]
ModifierOrder
[Rule]
DefaultComesLast
[Rule]
NoCodeInFile
[Rule]
MultipleStringLiterals
[Rule]
AbstractClassName
[Rule]
WhitespaceAround
[Rule]
NonEmptyAtclauseDescription
[Rule]
ImportOrder
[Rule]
NoFinalizer
[Rule]
MagicNumber
[Rule]
AvoidEscapedUnicodeCharacters
[Rule]
AbbreviationAsWordInName
[Rule]
EmptyBlock
[Rule]
NoWhitespaceAfter
[Rule]
ConstantName
[Rule]
AnnotationOnSameLine
[Rule]
InterfaceMemberImpliedModifier
[Rule]
IllegalCatch
[Rule]
ModifiedControlVariable
[Rule]
FinalClass
[Rule]
IllegalThrows
[Rule]
IllegalIdentifierName
[Rule]
ParameterName
[Rule]
SeparatorWrap
[Rule]
NewlineAtEndOfFile
[Rule]
MutableException
[Rule]
ArrayTrailingComma
[Rule]
DeclarationOrder
[Rule]
AvoidStarImport
[Rule]
JavadocMissingWhitespaceAfterAsterisk
[Rule]
StaticVariableName
[Rule]
Header
[Rule]
RegexpOnFilename
[Rule]
FileTabCharacter
[Rule]
EqualsAvoidNull
[Rule]
SuperClone
[Rule]
WriteTag
[Rule]
CyclomaticComplexity
[Rule]
AnonInnerLength
[Rule]
OuterTypeFilename
[Rule]
LocalVariableName
[Rule]
NestedTryDepth
[Rule]
MethodName
[Rule]
GenericWhitespace
[Rule]
RightCurly
[Rule]
PackageName
[Rule]
RequireThis
[Rule]
MultipleVariableDeclarations

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>"
    "</module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
