import os,json
import re
import shutil

import util

from openai import OpenAI
from retry import retry
from gpt_wrapper import GPTAgent
# rule=rule_description, DSL_Syntax=dsl
def preprocess_promt(rule: str, DSL_Syntax: str, style="Google Java Style Guide",grammar="Grammar",example=""):
    #then determine formal term of Java for objects of style and determine the appropriate operators between terms. Pay attention to
    prompt = '''Analyze the following {{Style}}, please parse the style using the given {{grammar}} to make its semantics clear and correct.

1. Analyze whether each sentence is a rule and then classify it as mandatory or optional. If the rule is subjective, do not classify it as a rule.
2. When parsing the rule using a given {{grammar}}, pay attention to map to suitable formal Java term and select appropriate real operator characters. 

{{Style}}:
{{Description}}

{{grammar}}:
{{Syntax}}

{{Example}}'''
    # '''

    prompt = prompt.replace("{{Example}}", example)
    prompt = prompt.replace("{{Style}}", style)
    prompt = prompt.replace("{{Syntax}}", DSL_Syntax)
    prompt = prompt.replace("{{Description}}", rule)
    prompt = prompt.replace("{{grammar}}", grammar)

    return prompt

'''
class GPTAgent:

    def __init__(self) -> None:
        self.client = OpenAI(
            api_key="sk-proj-vrNPSb5ttqXsOV39pl7FT3BlbkFJ93LlRultIv7DLd7Pwe8e"

        )
        # self.client = OpenAI(
        #     base_url="https://api.xty.app/v1",
        #     api_key="sk-proj-vrNPSb5ttqXsOV39pl7FT3BlbkFJ93LlRultIv7DLd7Pwe8e",
        #     http_client=httpx.Client(
        #             base_url="https://api.xty.app/v1",
        #             follow_redirects=True,
        #     ),
        # )

    @retry(delay=0, tries=6, backoff=1, max_delay=120)
    def ask(self, content):
        messages = []
        messages.append({"role": "user", "content": content})
        completion = self.client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=messages,
            temperature=0,
            response_format={"type": "json_object"}
        )
        # print(completion)
        return completion.choices[0].message.content

    def get_response(self, prompt):
        
        # Answer: You respond with Yes or No for whether exists an ESLint configuration for the given style convention
        # Configuration:
        # rule-name: ['error', {
        #   option1: value1,
        #   ...
        #   optionn: valuen
        # }]
        
        answer = self.ask(prompt)
        return answer
        # if len(eslint_rules_simple) > 0:
        #     # question = "Given a rule:\n\n"
        #     # question += rule
        #     # question += "Can you find a corresponding rule in the following rule set?\n\n"
        #     # question += eslint_rules_simple
        #     answer = self.wrapper.ask(prompt)
        #     print(answer)
'''
def get_all_gpt_res_for_java_checkstyle(rule_list,dsl, examples=None,style="Google Java Style Guide",model="gpt-4o"):
    '''
    1. parse each rule of style guide as a string
    2. parse all rules of style tool as a string
    3. get and save GPT results
    '''

    agent = GPTAgent()

    # generated by /Users/zhangzejunzhangzejun/PycharmProjects/KodStand-main/code/extract_googlestyle_rules.py
    # rule_list = util.load_json(util.data_root +"rule/google_java_style/","google_java_style")
    data_dir = util.data_root + "rule/google/"

    # all_rules = util.load_csv(data_dir + "javaguide_refine.csv")
    # all_rules = util.load_csv(util.data_root + "GoogleJavaStyle/googlejavastyle 2.csv")

    # html
    '''
    GPT results_rule_name_descr_options
    GPT results_rule_name_descr	
    GPT results_html
    '''
    # util.save_json(util.data_root + "style_tool_rules/", "checkstyle_name_des_options", all_checkstyle_details)

    # generated by /Users/zhangzejunzhangzejun/PycharmProjects/KodStand-main/code/extract_checkstyle_rules_infor_process_to_control_length_gpt.py
    # check_style_rule_list = util.load_json(util.data_root + "style_tool_rules/", "checkstyle_name_des_options_process_control_length")
    # check_style_rule_list = ["\n".join(["Rulename", rule_name, description, options]) if options else "\n".join(
    #     ["Rulename", rule_name, description]) for url, rule_name, description, options in check_style_rule_list]
    # checkstyle_str = "\n".join(check_style_rule_list)
    # print(">>>>checkstyle_str: ",checkstyle_str)
    # util.save_json(util.data_root + "style_tool_rules/", "checkstyle_name_des_options", all_checkstyle_details)
    # print(">>>all_rules: ", len(all_rules))
    # for ind,each in enumerate(examples):
    #     examples[ind][0] = preprocess_promt(rule=each[0], DSL_Syntax=dsl, style=style)

    for ind, rule_description in enumerate(rule_list[:]):
        # if ind > 10:
        #     # continue
        #     break
        # rule_description = "\n".join([rule_name, description])
        # print("")
        print(">>>>>>rule: ", rule_description)

        prompt= preprocess_promt(rule=rule_description,example=examples,DSL_Syntax=dsl, style=style)
        print(">>>>>prompt: ",prompt)
        answer = agent.get_response(prompt, model=model)
        print(">>>>>>answer: ", ind,answer)
        # util.save_json(util.data_root + gpt_answer_dir, str(ind), {ind: answer})
        util.save_json(gpt_answer_dir, str(ind), {ind: answer})

        # break

if __name__ == "__main__":
    gpt_answer_dir=util.data_root + "gpt_dsl_answer/GoogleJavaStyle_Simple_DSL_syntax_SplitSentence_example4/"
    all_rules = util.load_csv(util.data_root + "GoogleJavaStyle/javastyle_myanalyze.csv")
    rule_list = ["\n".join([rule_name, description]) for ind, (url, rule_name, description,*remain) in enumerate(all_rules) if ind>0]
    dsl = '''RuleSet ::= Rule [And|OR Rule]*
Rule ::= [Term* | Number | Name | Order] operator Term* [operator Term*]* 
Modifier ::= some | each | all | except | first | last | ...
Operator ::= —> | of | have | not have | is | is not | start | end | before | after | between| > |  < | = | != | ...
Term :: = JavaTerm | Modifier* Term* 
(Note JavaTerm is formal term description in Java)
'''
    dsl = '''RuleSet ::= Rule [And|Or Rule]*
Rule ::= OrderRule | NumberRule | ValueRule | SequenceRule | InclusionRule | ConditionRule
OrderRule ::= 'Order ' valueOperator TermList
NumberRule ::= 'Number of' TermList numberOperator TermList
SequenceRule ::= TermList positionOperator TermList
ValueRule ::= TermList valueOperator TermList
InclusionRule ::= TermList inclusionOperator TermList
ConditionRule ::= Rule '—>' Rule  # means if Rule then Rule
numberOperator ::=  '>=' | '<=' | '=' | '!='
positionOperator ::=  'before' | 'after' | 'between' | 'not before' | 'not after' | 'not between'
inclusionOperator ::=  'have' | 'not have'
valueOperator ::=  'is' | 'is not'
TermList ::=  Term [, Term]*
Modifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...
Term :: = JavaTerm | Modifier* Term | Term of Term
JavaTerm :: = formal term description in Java
    '''
    dsl = '''RuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups
Rule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means if Rule1 then Rule2
ExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule
Operator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'
TermList ::= Term [, Term]*
Modifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...
Term :: = JavaTerm | Modifier* Term | Term of Term
JavaTerm means the formal expression using such format [XXX] "XXX" represent a JavaTerm
'''
#     dsl = '''RuleSet ::= Rule [And|OR Rule]*
# Rule ::= [Number | Name | Order] of modifier* Term* operator modifier* Term*  [operator modifier* Term*]*
# modifier ::= some | each | all | except | first | last | ...
# Operator ::= —> | of | have | not have | is | is not | start | end | before | after | between| > |  < | = | != | ...
# Term :: = JavaTerm
# (Note JavaTerm is formal term description in Java)
# '''
#     dsl = '''RuleSet ::= Rule [And|OR Rule]*
# Rule ::= modifier* Term* operator modifier* Term*  [operator modifier* Term*]*
# modifier ::= some | each | all | except | first | last | ...
# Operator ::= —> | of | have | not have | is | is not | start | end | before | after | between| > |  < | = | != | ...
# Term :: = Number | Name| Order| JavaTerm
# (Note JavaTerm is formal term description in Java)
#     '''
    examples='''For Example, Analyze the following {{Style}}, please parse the style using the given {{grammar}}. 

{{Style}}:
4.1.1 Use of optional braces
Braces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.
Other optional braces, such as those in a lambda expression, remain optional.


Final RuleSet Representation:
Mandatory: [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]
Or
Mandatory: [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] is [Null] 
—> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace] 
Or
Mandatory: [Number] of [body] of [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] = 1
—> [IfStatement], [ElseStatement], [ForStatement], [DoStatement], [WhileStatement] have [Brace]
'''



    get_all_gpt_res_for_java_checkstyle(rule_list,dsl,  examples=examples,style="Google Java Style Guide",model="gpt-4o")
    '''
    data_dir = util.data_root + "rule/google/"

    all_rules = util.load_csv(util.data_root + "GoogleJavaStyle/googlejavastyle.csv")
    gpt_answer_dir=util.data_root + "gpt_dsl_answer/GoogleJavaStyle_DSL/"
    '''
    '''
    csv_results=[]
    for index in range(len(os.listdir(gpt_answer_dir))):
    # for file_name in os.listdir(gpt_answer_dir):
    #     ind=file_name[:-5]
        ind=str(index)
        csv_results.append(all_rules[int(ind)])

        rule_dict = util.load_json(gpt_answer_dir,ind)
        answer_list=rule_dict[ind]
        try:
            json_object = json.loads(answer_list)
            print(answer_list)
            print(">>>>>>: ", json_object)
            y_or_n = json_object['Answer']
            csv_results[-1].append(y_or_n)
            configuration_list = json_object['Configuration']
            csv_results[-1].append("\n******\n".join(configuration_list))
        except:
            print(">>>>>>>exception")
            if "'Answer': 'Yes'" in answer_list:
                config=answer_list.split("'Configuration': [")[-1]
                config=config.split("']'")[0]
                config_str="\n******\n".join(["<module"+each_config for each_config in config.split("<module") ])
                csv_results[-1].append('Yes')
                csv_results[-1].append(config_str)
                # for each_config in config.split("<module"):
                #     new_config="<module"+each_config
                # print(">>>>config:",config.split("<module"))
                # json_object = json.loads(config)
            elif '"Answer": "Yes"' in answer_list:
                config = answer_list.split('"Configuration": [')[-1]
                config=config.split('"]"')[0]
                config_str = "\n******\n".join(["<module" + each_config for each_config in config.split("<module")])
                csv_results[-1].append('Yes')
                csv_results[-1].append(config_str)
                print(">>>>config:", config.split("<module"))
                # json_object = json.loads(config)
            else:
                csv_results[-1].append('No')

        # for config in configuration_list:
        #     print(">>>config: ",config)
        #     csv_results[-1].append("******\n".join(configuration_list))

        # for e_asw in answer_list:
        #     print(">>>e_asw: ",e_asw)
        # break

    util.save_csv(util.data_root + "gpt_direct_answer/csv/gpt_answergooglejavastyle_checkstyle_nocheckstyleRule.csv",csv_results,["url","rule_name","description","gpt_answer","gpt_configuration"])
    '''