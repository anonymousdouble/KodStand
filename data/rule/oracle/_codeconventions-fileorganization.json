[
    {
        "title": "3 - File Organization",
        "belongs to": "3 - File Organization",
        "cases": [
            {
                "description": "A file consists of sections that should be separated by blank lines and an optional comment identifying each section.\nFiles longer than 2000 lines are cumbersome and should be avoided.\nFor an example of a Java program properly formatted, see \"Java Source File Example\" on page 19 ."
            }
        ]
    },
    {
        "title": "3.1 Java Source Files",
        "belongs to": "3 - File Organization/3.1 Java Source Files",
        "cases": [
            {
                "description": "Each Java source file contains a single public class or interface. When private classes and interfaces are associated with a public class, you can put them in the same source file as the public class. The public class should be the first class or interface in the file.\nJava source files have the following ordering:\nBeginning comments (see \"Beginning Comments\" on page 4 ) \nPackage and Import statements \nClass and interface declarations (see \"Class and Interface Declarations\" on page 4 )"
            }
        ]
    },
    {
        "title": "3.1.1 Beginning Comments",
        "belongs to": "3 - File Organization/3.1.1 Beginning Comments",
        "cases": [
            {
                "description": "All source files should begin with a c-style comment that lists the class name, version information, date, and copyright notice:",
                "example": "/*\n\n * Classname\n * \n * Version information\n *\n * Date\n * \n * Copyright notice\n */\n"
            }
        ]
    },
    {
        "title": "3.1.2 Package and Import Statements",
        "belongs to": "3 - File Organization/3.1.2 Package and Import Statements",
        "cases": [
            {
                "description": "The first non-comment line of most Java source files is a `package` statement. After that, `import` statements can follow. For example:",
                "example": "package java.awt;import java.awt.peer.CanvasPeer;\n      "
            }
        ]
    },
    {
        "title": "3.1.3 Class and Interface Declarations",
        "belongs to": "3 - File Organization/3.1.3 Class and Interface Declarations",
        "cases": [
            {
                "description": "The following table describes the parts of a class or interface declaration, in the order that they should appear. See \"Java Source File Example\" on page 19 for an example that includes comments.\nPart of Class/Interface Declaration \nNotes \n1 \nClass/interface documentation comment ( `/**...*/` ) \nSee \"Documentation Comments\" on page 9 for information on what should be in this comment. \n2 \n`class` or `interface` statement \n3 \nClass/interface implementation comment ( `/*...*/` ), if necessary \nThis comment should contain any class-wide or interface-wide information that wasn't appropriate for the class/interface documentation comment. \n4 \nClass ( `static` ) variables \nFirst the `public` class variables, then the `protected` , then package level (no access modifier), and then the `private` . \n5 \nInstance variables \nFirst `public` , then `protected` , then package level (no access modifier), and then `private` . \n6 \nConstructors \n7 \nMethods \nThese methods should be grouped by functionality rather than by scope or accessibility. For example, a private class method can be in between two public instance methods. The goal is to make reading and understanding the code easier.\n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11"
            }
        ]
    }
]