[
    "AbbreviationAsWordInName\nValidates abbreviations (consecutive capital letters)             length in identifier name, it also allows to enforce camel case naming.",
    "AbstractClassName\nEnsures that the names of abstract classes conforming to some pattern and              check that abstract modifier exists.",
    "AnnotationLocation\nChecks location of annotation on language elements.",
    "AnnotationOnSameLine\nChecks that annotations are located on the same line with their targets.",
    "AnnotationUseStyle\nChecks the style of elements in annotations.",
    "AnonInnerLength\nChecks for long anonymous inner classes.",
    "ArrayTrailingComma\nChecks that array initialization contains a trailing comma.",
    "ArrayTypeStyle\nChecks the style of array type definitions.",
    "AtclauseOrder\nChecks the order of javadoc block-tags or javadoc tags.",
    "AvoidDoubleBraceInitialization\nDetects double brace initialization.",
    "AvoidEscapedUnicodeCharacters\nRestricts using Unicode escapes (such as \\u221e).",
    "AvoidInlineConditionals\nDetects inline conditionals.",
    "AvoidNestedBlocks\nFinds nested blocks (blocks that are used freely in the code).",
    "AvoidNoArgumentSuperConstructorCall\nChecks if call to superclass constructor without arguments is present.",
    "AvoidStarImport\nChecks that there are no import statements that use the * notation.",
    "AvoidStaticImport\nChecks that there are no static import statements.",
    "BooleanExpressionComplexity\nRestricts the number of boolean operators (&&, ||, &, | and ^)              in an expression.",
    "CatchParameterName\nChecks that catch parameter names conform to a specified pattern.",
    "ClassDataAbstractionCoupling\nMeasures the number of instantiations of other classes within the given class              or record.",
    "ClassFanOutComplexity\nChecks the number of other types a given class/record/interface/enum/annotation              relies on.",
    "ClassMemberImpliedModifier\nChecks for implicit modifiers on nested types in classes and records.",
    "ClassTypeParameterName\nChecks that class type parameter names conform to a specified pattern.",
    "CommentsIndentation\nControls the indentation between comments and surrounding code.",
    "ConstantName\nChecks that constant names conform to a specified pattern.",
    "CovariantEquals\nChecks that classes and records which define a covariant equals()              method also override method equals(Object).",
    "CustomImportOrder\nChecks that the groups of import declarations appear in the order specified              by the user.",
    "CyclomaticComplexity\nChecks cyclomatic complexity against a specified limit.",
    "DeclarationOrder\nChecks that the parts of a class, record, or interface declaration              appear in the order suggested by the Code Conventions for the Java Programming Language.",
    "DefaultComesLast\nCheck that the default is after all the              cases in a switch statement.",
    "DescendantToken\nChecks for restricted tokens beneath other tokens.",
    "DesignForExtension\nChecks that classes are designed for extension (subclass creation).",
    "EmptyBlock\nChecks for empty blocks.",
    "EmptyCatchBlock\nChecks for empty catch blocks.",
    "EmptyForInitializerPad\nChecks the padding of an empty for initializer; that is whether              a white space is required at an empty for initializer, or such white              space is forbidden.",
    "EmptyForIteratorPad\nChecks the padding of an empty for iterator; that is whether a white              space is required at an empty for iterator, or such white space is              forbidden.",
    "EmptyLineSeparator\nChecks for empty line separators before package,              all import declarations, fields, constructors, methods, nested classes,              static initializers and instance initializers.",
    "EmptyStatement\nDetects empty statements (standalone \";\" semicolon).",
    "EqualsAvoidNull\nChecks that any combination of String literals              is on the left side of an equals() comparison.",
    "EqualsHashCode\nChecks that classes that either override equals()              or hashCode() also overrides the other.",
    "ExecutableStatementCount\nRestricts the number of executable statements to a specified limit.",
    "ExplicitInitialization\nChecks if any class or object member is explicitly initialized to default              for its type value (null for object references, zero for numeric              types and char and false for boolean.",
    "FallThrough\nChecks for fall-through in switch statements.",
    "FileLength\nChecks for long source files.",
    "FileTabCharacter\nChecks that there are no tab characters ('\\t') in the source code.",
    "FinalClass\nEnsures that identifies classes that can be effectively declared as final are              explicitly marked as final.",
    "FinalLocalVariable\nChecks that local variables that never have their values changed are declared final.",
    "FinalParameters\nChecks that parameters for methods, constructors, catch and for-each blocks are final.",
    "GenericWhitespace\nChecks that the whitespace around the Generic tokens (angle brackets)              \"<\" and \">\" are correct to the typical convention.",
    "Header\nChecks that a source file begins with a specified header.",
    "HiddenField\nChecks that a local variable or a parameter does not shadow            a field that is defined in the same class.",
    "HideUtilityClassConstructor\nMakes sure that utility classes (classes that contain only static              methods or fields in their API) do not have a public constructor.",
    "IllegalCatch\nChecks that certain exception types do not appear in a catch statement.",
    "IllegalIdentifierName\nChecks identifiers with a pattern for a set of illegal names, such as those              that are restricted or contextual keywords.",
    "IllegalImport\nChecks for imports from a set of illegal packages.",
    "IllegalInstantiation\nChecks for illegal instantiations where a factory method is preferred.",
    "IllegalThrows\nChecks that specified types are not declared to be thrown.",
    "IllegalToken\nChecks for illegal tokens.",
    "IllegalTokenText\nChecks specified tokens text for matching an illegal pattern.",
    "IllegalType\nChecks that particular classes or interfaces are never used.",
    "ImportControl\nControls what can be imported in each package and file.",
    "ImportOrder\nChecks the ordering/grouping of imports.",
    "Indentation\nChecks correct indentation of Java code.",
    "InnerAssignment\nChecks for assignments in subexpressions, such as in              String s = Integer.toString(i = 2);.",
    "InnerTypeLast\nChecks nested (internal) classes/interfaces are declared at the bottom of the              primary (top-level) class after all init and static init blocks,              method, constructor and field declarations.",
    "InterfaceIsType\nImplements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to              define types.",
    "InterfaceMemberImpliedModifier\nChecks for implicit modifiers on interface members and nested types.",
    "InterfaceTypeParameterName\nChecks that interface type parameter names conform to a specified pattern.",
    "InvalidJavadocPosition\nChecks that Javadocs are located at the correct position.",
    "JavadocBlockTagLocation\nChecks that a javadoc block tag appears only at the beginning of a line,              ignoring leading asterisks and white space.",
    "JavadocContentLocation\nChecks that the Javadoc content begins from the same position              for all Javadoc comments in the project.",
    "JavadocMethod\nChecks the Javadoc of a method or constructor.",
    "JavadocMissingLeadingAsterisk\nChecks if the javadoc has                              leading asterisks                            on each line.",
    "JavadocMissingWhitespaceAfterAsterisk\nChecks that there is at least one whitespace after the leading asterisk.",
    "JavadocPackage\nChecks that each Java package has a Javadoc file used for commenting.",
    "JavadocParagraph\nChecks the Javadoc paragraph.",
    "JavadocStyle\nValidates Javadoc comments to help ensure they are well formed.",
    "JavadocTagContinuationIndentation\nChecks the indentation of the continuation lines in block tags.",
    "JavadocType\nChecks the Javadoc comments for type definitions.",
    "JavadocVariable\nChecks that a variable has a Javadoc comment.",
    "JavaNCSS\nDetermines complexity of methods, classes and files by counting              the Non Commenting Source Statements (NCSS).",
    "LambdaBodyLength\nChecks lambda body length.",
    "LambdaParameterName\nChecks lambda parameter names.",
    "LeftCurly\nChecks for the placement of left curly braces ('{') for code blocks.",
    "LineLength\nChecks for long lines.",
    "LocalFinalVariableName\nChecks that local final variable names conform to a specified pattern.",
    "LocalVariableName\nChecks that local, non-final variable names conform to a specified pattern.",
    "MagicNumber\nChecks that there are no \"magic numbers\" where a magic number              is a numeric literal that is not defined as a constant.",
    "MatchXpath\nEvaluates Xpath query and report violation on all matching AST nodes.",
    "MemberName\nChecks that instance variable names conform to a specified pattern.",
    "MethodCount\nChecks the number of methods declared in each type declaration by access modifier            or total count.",
    "MethodLength\nChecks for long methods and constructors.",
    "MethodName\nChecks that method names conform to a specified pattern.",
    "MethodParamPad\nChecks the padding between the identifier of a method definition,              constructor definition, method call, or constructor invocation;            and the left parenthesis of the parameter list.",
    "MethodTypeParameterName\nChecks that method type parameter names conform to a specified pattern.",
    "MissingCtor\nChecks that classes (except abstract ones) define a constructor              and don't rely on the default one.",
    "MissingDeprecated\nVerifies that the annotation @Deprecated and the Javadoc tag              @deprecated              are both present when either of them is present.",
    "MissingJavadocMethod\nChecks for missing Javadoc comments for a method or constructor.",
    "MissingJavadocPackage\nChecks for missing package definition Javadoc comments in package-info.java files.",
    "MissingJavadocType\nChecks for missing Javadoc comments for class, enum, interface, and annotation            interface definitions.",
    "MissingOverride\nVerifies that the @Override annotation is present              when the @inheritDoc javadoc tag is present.",
    "MissingSwitchDefault\nChecks that switch statement has a default clause.",
    "ModifiedControlVariable\nChecks that for loop control variables are not modified inside the for block.",
    "ModifierOrder\nChecks that the order of modifiers conforms to the suggestions in the              Java Language specification, \u00a7 8.1.1, 8.3.1, 8.4.3 and 9.4.",
    "MultipleStringLiterals\nChecks for multiple occurrences of the same string literal within a            single file.",
    "MultipleVariableDeclarations\nChecks that each variable declaration is in its own statement            and on its own line.",
    "MutableException\nEnsures that exception classes (classes with names conforming to              some pattern and explicitly extending classes with names              conforming to other pattern) are immutable, that is,              that they have only final fields.",
    "NeedBraces\nChecks for braces around code blocks.",
    "NestedForDepth\nRestricts nested for blocks to a specified depth.",
    "NestedIfDepth\nRestricts nested if-else blocks to a specified depth.",
    "NestedTryDepth\nRestricts nested try-catch-finally blocks to a specified depth.",
    "NewlineAtEndOfFile\nChecks whether files end with a line separator.",
    "NoArrayTrailingComma\nChecks that array initialization do not contain a trailing comma.",
    "NoClone\nChecks that the clone method is not overridden from the            Object class.",
    "NoCodeInFile\nChecks whether file contains code.",
    "NoFinalizer\nChecks that there is no method finalize with zero parameters.",
    "NoLineWrap\nChecks that chosen statements are not line-wrapped.",
    "NonEmptyAtclauseDescription\nChecks that the block tag is followed by description.",
    "NoEnumTrailingComma\nChecks that enum definition does not contain a trailing comma.",
    "NoWhitespaceAfter\nChecks that there is no whitespace after a token.",
    "NoWhitespaceBefore\nChecks that there is no whitespace before a token.",
    "NoWhitespaceBeforeCaseDefaultColon\nChecks that there is no whitespace before the colon in a switch block.",
    "NPathComplexity\nChecks the NPATH complexity against a specified limit.",
    "OneStatementPerLine\nChecks that there is only one statement per line.",
    "OneTopLevelClass\nChecks that each top-level class, interface, enum or annotation resides in              a source file of its own.",
    "OperatorWrap\nChecks the policy on how to wrap lines on operators.",
    "OrderedProperties\nDetects if keys in properties files are in correct order.",
    "OuterTypeFilename\nChecks that the outer type name and the file name match.",
    "OuterTypeNumber\nChecks for the number of types declared at the outer              (or root) level in a file.",
    "OverloadMethodsDeclarationOrder\nChecks that overloaded methods are grouped together.",
    "PackageAnnotation\nChecks that all package annotations are in the package-info.java file.",
    "PackageDeclaration\nEnsures that a class has a package declaration, and (optionally) whether              the package name matches the directory name for the source file.",
    "PackageName\nChecks that package names conform to a specified pattern.",
    "ParameterAssignment\nDisallows assignment of parameters.",
    "ParameterName\nChecks that method parameter names conform to a specified pattern.",
    "ParameterNumber\nChecks the number of parameters of a method or constructor.",
    "ParenPad\nChecks the policy on the padding of parentheses; that is whether a              space is required after a left parenthesis and before a right              parenthesis, or such spaces are forbidden.",
    "PatternVariableName\nChecks that pattern variable names conform to a specified pattern.",
    "RecordComponentNumber\nChecks the number of record components in the header of a record definition.",
    "RecordComponentName\nChecks that record component names conform to a specified pattern.",
    "RecordTypeParameterName\nChecks that record type parameter names conform to a specified pattern.",
    "RedundantImport\nChecks for redundant import statements.",
    "RedundantModifier\nChecks for redundant modifiers.",
    "Regexp\nChecks that a specified pattern exists, exists less than a set              number of times, or does not exist in the file.",
    "RegexpHeader\nChecks the header of a source file against a header that contains              a pattern for each line of the source header.",
    "RegexpMultiline\nChecks that a specified pattern matches across multiple lines in            any file type.",
    "RegexpOnFilename\nChecks that a specified pattern matches based on file and/or folder path.",
    "RegexpSingleline\nChecks that a specified pattern matches a single-line in any file type.",
    "RegexpSinglelineJava\nChecks that a specified pattern matches a single-line in Java files.",
    "RequireThis\nChecks that references to instance variables and methods of the present              object are explicitly of the form \"this.varName\" or              \"this.methodName(args)\" and that those references don't              rely on the default behavior when \"this.\" is absent.",
    "ReturnCount\nRestricts the number of return statements in methods, constructors              and lambda expressions.",
    "RightCurly\nChecks the placement of right curly braces ('}') for code blocks.",
    "SeparatorWrap\nChecks line wrapping with separators.",
    "SimplifyBooleanExpression\nChecks for over-complicated boolean expressions.",
    "SimplifyBooleanReturn\nChecks for over-complicated boolean return statements.",
    "SingleLineJavadoc\nChecks that a Javadoc block can fit in a single-line and doesn't contain              block tags.",
    "RequireEmptyLineBeforeBlockTagGroup\nChecks that one blank line before the block tag if it is present in Javadoc.",
    "SingleSpaceSeparator\nChecks that non-whitespace characters are separated by no more than one              whitespace.",
    "StaticVariableName\nChecks that static, non-final variable names              conform to a specified pattern.",
    "StringLiteralEquality\nChecks that string literals are not used with              == or !=.",
    "SummaryJavadoc\nChecks that Javadoc summary sentence does not contain phrases that are not recommended            to use.",
    "SuperClone\nChecks that an overriding clone() method invokes super.clone().",
    "SuperFinalize\nChecks that an overriding finalize() method invokes super.finalize().",
    "SuppressWarnings\nAllows to specify what warnings that              @SuppressWarnings              is not allowed to suppress.",
    "ThrowsCount\nRestricts throws statements to a specified count.",
    "TodoComment\nChecks for TODO: comments.",
    "TrailingComment\nThe check to ensure that lines with code do not end with comment.",
    "Translation\nEnsures the correct translation of code by checking property files              for consistency regarding their keys.",
    "TypecastParenPad\nChecks the policy on the padding of parentheses for typecasts.",
    "TypeName\nChecks that type names conform to a specified pattern.",
    "UncommentedMain\nDetects uncommented main methods.",
    "UniqueProperties\nDetects duplicated keys in properties files.",
    "UnnecessaryParentheses\nChecks if unnecessary parentheses are used in a statement or expression.",
    "UnnecessarySemicolonInEnumeration\nChecks if unnecessary semicolon is in enum definitions.",
    "UnnecessarySemicolonInTryWithResources\nChecks if unnecessary semicolon is used in last resource declaration.",
    "UnnecessarySemicolonAfterOuterTypeDeclaration\nChecks if unnecessary semicolon is used after type declaration.",
    "UnnecessarySemicolonAfterTypeMemberDeclaration\nChecks if unnecessary semicolon is used after type member declaration.",
    "UnusedImports\nChecks for unused import statements.",
    "UpperEll\nChecks that long constants are defined with an upper ell.",
    "UnusedLocalVariable\nChecks that a local variable is declared and/or assigned, but not used.",
    "VariableDeclarationUsageDistance\nChecks the distance between declaration of variable and its first usage.",
    "VisibilityModifier\nChecks visibility of class members.",
    "WhitespaceAfter\nChecks that a token is followed by whitespace, with the exception that it            does not check for whitespace after the semicolon of an empty for iterator.",
    "WhitespaceAround\nChecks that a token is surrounded by whitespace.",
    "WriteTag\nRequires user defined Javadoc tag to be present in Javadoc comment              with defined format."
]