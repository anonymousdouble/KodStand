Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
5.2.8 Type variable names
Each type variable is named in one of two styles:
 A single capital letter, optionally followed by a single numeral (such as `E` , `T` , `X` , `T2` ) 
 A name in the form used for classes (see Section 5.2.2, Class names ), followed by the capital letter `T` (examples: `RequestT` , `FooBarT` ).

CheckStyle Rules:
[Rule]
CatchParameterName
[Description]
Checks that catch parameter names conform to a specified pattern.


Default pattern has the following characteristic:


allows names beginning with two lowercase letters followed by at least one uppercase
or lowercase letter
allows e abbreviation (suitable for exceptions end errors)
allows ex abbreviation (suitable for exceptions)
allows t abbreviation (suitable for throwables)
prohibits numbered abbreviations like e1 or t2
prohibits one letter prefixes like pException
prohibits two letter abbreviations like ie or ee
prohibits any other characters than letters
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
OuterTypeFilename
[Description]
Checks that the outer type name and the file name match. For example,
the class Foo must be in a file named
Foo.java.
[Options]
[Rule]
ClassTypeParameterName
[Description]
Checks that class type parameter names conform to a specified pattern.
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
AbbreviationAsWordInName
[Description]
Validates abbreviations (consecutive capital letters) length in identifier name,
it also allows to enforce camel case naming. Please read more at

Google Style Guide
to get to know how to avoid long abbreviations in names.

'_' is considered as word separator in identifier name.

allowedAbbreviationLength specifies how many consecutive capital letters are
allowed in the identifier.
A value of 3 indicates that up to 4 consecutive capital letters are allowed,
one after the other, before a violation is printed. The identifier 'MyTEST' would be
allowed, but 'MyTESTS' would not be.
A value of 0 indicates that only 1 consecutive capital letter is allowed. This
is what should be used to enforce strict camel casing. The identifier 'MyTest' would
be allowed, but 'MyTEst' would not be.


ignoreFinal, ignoreStatic, and ignoreStaticFinal
control whether variables with the respective modifiers are to be ignored.
Note that a variable that is both static and final will always be considered under
ignoreStaticFinal only, regardless of the values of ignoreFinal
and ignoreStatic. So for example if ignoreStatic is true but
ignoreStaticFinal is false, then static final variables will not be ignored.
[Options]
allowedAbbreviationLength, Indicate the number of consecutive capital letters allowed in targeted identifiers (abbreviations in the classes, interfaces, variables and methods names, ... ).
allowedAbbreviations, Specify abbreviations that must be skipped for checking.
ignoreFinal, Allow to skip variables with final modifier.
ignoreOverriddenMethods, Allow to ignore methods tagged with @Override annotation (that usually mean inherited name).
ignoreStatic, Allow to skip variables with static modifier.
ignoreStaticFinal, Allow to skip variables with both static and final modifiers.
tokens, tokens to check
[Rule]
TypeName
[Description]
Checks that type names conform to a specified pattern.
[Options]
applyToPackage, Control if check should apply to package-private members.
applyToPrivate, Control if check should apply to private members.
applyToProtected, Control if check should apply to protected members.
applyToPublic, Control if check should apply to public members.
format, Sets the pattern to match valid identifiers.
tokens, tokens to check
[Rule]
MethodTypeParameterName
[Description]
Checks that method type parameter names conform to a specified pattern.
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
StaticVariableName
[Description]
Checks that static, non-final variable names
conform to a specified pattern.
[Options]
applyToPackage, Control if check should apply to package-private members.
applyToPrivate, Control if check should apply to private members.
applyToProtected, Control if check should apply to protected members.
applyToPublic, Control if check should apply to public members.
format, Sets the pattern to match valid identifiers.
[Rule]
PatternVariableName
[Description]
Checks that pattern variable names conform to a specified pattern.
[Options]
format, Sets the pattern to match valid identifiers.
[Rule]
LocalVariableName
[Description]
Checks that local, non-final variable names conform to a specified pattern.
A catch parameter is considered to be a local variable.
[Options]
allowOneCharVarInForLoop, Allow one character variable name in
initialization expressions in FOR loop if one char variable name is prohibited by format regexp.
format, Sets the pattern to match valid identifiers.
[Rule]
MultipleVariableDeclarations
[Description]
Checks that each variable declaration is in its own statement and on
its own line.


Rationale:

the Java code conventions chapter 6.1 recommends that
declarations should be one per line/statement.
[Options]

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
