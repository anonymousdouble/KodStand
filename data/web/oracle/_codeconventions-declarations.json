[
    {
        "title": "6 - Declarations",
        "belongs to": "6 - Declarations",
        "cases": []
    },
    {
        "title": "6.1 Number Per Line",
        "belongs to": "6 - Declarations/6.1 Number Per Line",
        "cases": [
            {
                "description": "One declaration per line is recommended since it encourages commenting. In other words,\nCopy",
                "example": "\n\nint level; // indentation level\nint size;  // size of table\n"
            },
            {
                "description": "is preferred over\n`intlevel,size;`\nDo not put different types on the same line. Example:\n`intfoo,fooarray[];//WRONG!`\nNote: The examples above use one space between the type and the identifier. Another acceptable alternative is to use tabs, e.g.:\nCopy",
                "example": "\n\nint     level;          // indentation level\nint     size;            // size of table\nObject  currentEntry;    // currently selected table entry\n"
            }
        ]
    },
    {
        "title": "6.2 Initialization",
        "belongs to": "6 - Declarations/6.2 Initialization",
        "cases": [
            {
                "description": "Try to initialize local variables where they're declared. The only reason not to initialize a variable where it's declared is if the initial value depends on some computation occurring first."
            }
        ]
    },
    {
        "title": "6.3 Placement",
        "belongs to": "6 - Declarations/6.3 Placement",
        "cases": [
            {
                "description": "Put declarations only at the beginning of blocks. (A block is any code surrounded by curly braces \"{\" and \"}\".) Don't wait to declare variables until their first use; it can confuse the unwary programmer and hamper code portability within the scope.\nCopy",
                "example": "\n\nvoid myMethod() {\n    int int1 = 0;         // beginning of method block\n\n    if (condition) {\n        int int2 = 0;     // beginning of \"if\" block\n        ...\n    }\n}\n</blockquote>\n"
            },
            {
                "description": "The one exception to the rule is indexes of `for` loops, which in Java can be declared in the `for` statement:\nCopy",
                "example": "\n\nfor (int i = 0; i < maxLoops; i++) { ... }\n</blockquote>\n"
            },
            {
                "description": "Avoid local declarations that hide declarations at higher levels. For example, do not declare the same variable name in an inner block:\nCopy",
                "example": "\n\nint count;\n...\nmyMethod() {\n    if (condition) {\n        int count = 0;     // AVOID!\n        ...\n    }\n    ...\n}\n"
            }
        ]
    },
    {
        "title": "6.4 Class and Interface Declarations",
        "belongs to": "6 - Declarations/6.4 Class and Interface Declarations",
        "cases": [
            {
                "description": "When coding Java classes and interfaces, the following formatting rules should be followed:\nNo space between a method name and the parenthesis \"(\" starting its parameter list \nOpen brace \"{\" appears at the end of the same line as the declaration statement \nClosing brace \"}\" starts a line by itself indented to match its corresponding opening statement, except when it is a null statement the \"}\" should appear immediately after the \"{\"\nCopy",
                "example": "\n\nclass Sample extends Object {\n    int ivar1;\n    int ivar2;\n\n    Sample(int i, int j) {\n        ivar1 = i;\n        ivar2 = j;\n    }\n\n    int emptyMethod() {}\n\n    ...\n}\n",
                "appendix": "Methods are separated by a blank line\n  \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9 \n10 \n11 \n "
            }
        ]
    }
]