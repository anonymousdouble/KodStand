import os, json
import re
import shutil

import util

from openai import OpenAI
from retry import retry


def preprocess_promt(rule: str, tool_rules: str, style="CheckStyle"):
    prompt = """Generate {{style}} configuration based on CheckStyle rules for the following style convention.

Style Convention:
{{rule}}

CheckStyle Rules:
{{checkstyle_rules}}

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether there is a {{style}} configuration for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple {{style}} rules for the given style convention. The configuration format should be xml format:
    ["<module name='rulename1'>\n  <property name='id' value='id_value1'/>\n  <property name='name1' value='value1'/>\n  ...\n  <property name='name2' value='value2'/>"
    "</module>\n...\n<module name='rulename2'>\n  <property name='id' value='id_value1'/>\n  <property name='name1' value='value1'/>\n  ...\n  <property name='name2' value='value2'/>\n</module>"]
}"""
    # '''
    prompt = prompt.replace("{{style}}", style)
    prompt = prompt.replace("{{rule}}", rule)
    prompt = prompt.replace("{{checkstyle_rules}}", tool_rules)
    return prompt


class GPTAgent:

    def __init__(self) -> None:
        self.client = OpenAI(
            api_key="sk-proj-vrNPSb5ttqXsOV39pl7FT3BlbkFJ93LlRultIv7DLd7Pwe8e"
        )
        # self.client = OpenAI(
        #     base_url="https://api.xty.app/v1",
        #     api_key="sk-proj-vrNPSb5ttqXsOV39pl7FT3BlbkFJ93LlRultIv7DLd7Pwe8e",
        #     http_client=httpx.Client(
        #             base_url="https://api.xty.app/v1",
        #             follow_redirects=True,
        #     ),
        # )

    @retry(delay=0, tries=6, backoff=1, max_delay=120)
    def ask(self, content):
        messages = []
        messages.append({"role": "user", "content": content})
        completion = self.client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=messages,
            temperature=0,
            response_format={"type": "json_object"},
        )
        # print(completion)
        return completion.choices[0].message.content

    def get_response(self, prompt):
        """
        Answer: You respond with Yes or No for whether exists an ESLint configuration for the given style convention
        Configuration:
        rule-name: ['error', {
          option1: value1,
          ...
          optionn: valuen
        }]
        """
        answer = self.ask(prompt)
        return answer
        # if len(eslint_rules_simple) > 0:
        #     # question = "Given a rule:\n\n"
        #     # question += rule
        #     # question += "Can you find a corresponding rule in the following rule set?\n\n"
        #     # question += eslint_rules_simple
        #     answer = self.wrapper.ask(prompt)
        #     print(answer)


def get_all_gpt_res_for_java_checkstyle():
    """
    1. parse each rule of style guide as a string
    2. parse all rules of style tool as a string
    3. get and save GPT results
    """
    agent = GPTAgent()

    # generated by /Users/zhangzejunzhangzejun/PycharmProjects/KodStand-main/code/extract_googlestyle_rules.py
    # rule_list = util.load_json(util.data_root +"rule/google_java_style/","google_java_style")
    data_dir = util.data_root + "rule/google/"

    # all_rules = util.load_csv(data_dir + "javaguide_refine.csv")
    all_rules = util.load_csv(util.data_root + "GoogleJavaStyle/googlejavastyle 2.csv")

    rule_list = [
        "\n".join([rule_name, description]) for url, rule_name, description in all_rules
    ]
    # html
    """
    GPT results_rule_name_descr_options
    GPT results_rule_name_descr
    GPT results_html
    """
    # util.save_json(util.data_root + "style_tool_rules/", "checkstyle_name_des_options", all_checkstyle_details)

    # generated by /Users/zhangzejunzhangzejun/PycharmProjects/KodStand-main/code/extract_checkstyle_rules_infor_process_to_control_length_gpt.py
    check_style_rule_list = util.load_json(
        util.data_root + "style_tool_rules/",
        "checkstyle_name_des_options_process_control_length",
    )
    check_style_rule_list = [
        (
            "\n".join(
                ["Rulename", rule_name, "Description", description, "Option", options]
            )
            if options
            else "\n".join(["Rulename", rule_name, "Description", description])
        )
        for url, rule_name, description, options in check_style_rule_list
    ]
    checkstyle_str = "\n".join(check_style_rule_list)
    # print(">>>>checkstyle_str: ",checkstyle_str)
    # util.save_json(util.data_root + "style_tool_rules/", "checkstyle_name_des_options", all_checkstyle_details)
    # print(">>>all_rules: ", len(all_rules))
    for ind, rule_description in enumerate(rule_list[:]):
        if ind > 10:
            continue
        # rule_description = "\n".join([rule_name, description])
        # print("")
        print(">>>>>>rule: ", rule_description)
        prompt = preprocess_promt(
            rule=rule_description, tool_rules=checkstyle_str, style="CheckStyle"
        )
        answer = agent.get_response(prompt)
        print(">>>>>>answer: ", {ind: answer})
        util.save_json(
            util.data_root
            + "gpt_direct_answer/goglejava_checkstyle_oneDesc_optNameDesc_improve/",
            str(ind),
            {ind: answer},
        )
        # break


if __name__ == "__main__":
    get_all_gpt_res_for_java_checkstyle()
    """
    data_dir = util.data_root + "rule/google/"

    all_rules = util.load_csv(util.data_root + "GoogleJavaStyle/googlejavastyle.csv")
    gpt_answer_dir=util.data_root + "gpt_direct_answer/java_checkstyle/"
    csv_results=[]
    for index in range(len(os.listdir(gpt_answer_dir))):
    # for file_name in os.listdir(gpt_answer_dir):
    #     ind=file_name[:-5]
        ind=str(index)
        csv_results.append(all_rules[int(ind)])

        rule_dict = util.load_json(gpt_answer_dir,ind)
        answer_list=rule_dict[ind]
        try:
            json_object = json.loads(answer_list)
            print(answer_list)
            print(">>>>>>: ", json_object)
            y_or_n = json_object['Answer']
            csv_results[-1].append(y_or_n)
            configuration_list = json_object['Configuration']
            csv_results[-1].append("\n******\n".join(configuration_list))
        except:
            print(">>>>>>>exception")
            if "'Answer': 'Yes'" in answer_list:
                config=answer_list.split("'Configuration': [")[-1]
                config=config.split("']'")[0]
                config_str="\n******\n".join(["<module"+each_config for each_config in config.split("<module") ])
                csv_results[-1].append('Yes')
                csv_results[-1].append(config_str)
                # for each_config in config.split("<module"):
                #     new_config="<module"+each_config
                # print(">>>>config:",config.split("<module"))
                # json_object = json.loads(config)
            elif '"Answer": "Yes"' in answer_list:
                config = answer_list.split('"Configuration": [')[-1]
                config=config.split('"]"')[0]
                config_str = "\n******\n".join(["<module" + each_config for each_config in config.split("<module")])
                csv_results[-1].append('Yes')
                csv_results[-1].append(config_str)
                print(">>>>config:", config.split("<module"))
                # json_object = json.loads(config)
            else:
                csv_results[-1].append('No')

        # for config in configuration_list:
        #     print(">>>config: ",config)
        #     csv_results[-1].append("******\n".join(configuration_list))

        # for e_asw in answer_list:
        #     print(">>>e_asw: ",e_asw)
        # break

    util.save_csv(util.data_root + "gpt_direct_answer/csv/googlejavastyle_checkstyle_ruleName_oneDescr_OptNameDescr.csv",csv_results,["url","rule_name","description","gpt_answer","gpt_configuration"])
    """
