[
    {
        "title": "Use single quotes ¶",
        "belongs to": "Use single quotes ¶",
        "cases": [
            {
                "description": "Use single-quotes for string literals, e.g. `'my-identifier'` , but use double-quotes for strings that are likely to contain single-quote characters as part of the string itself (such as error messages, or any strings containing natural language), e.g. `\"You'vegotanerror!\"` .\nSingle-quotes are easier to read and to type, but if a string contains single-quote characters then double-quotes are better than escaping the single-quote characters or wrapping the string in double single-quotes.\nWe also use triple single-quotes for docstrings, see Docstrings ."
            }
        ]
    },
    {
        "title": "Imports ¶",
        "belongs to": "Imports ¶",
        "cases": [
            {
                "description": "Avoid creating circular imports by only importing modules more specialized than the one you are editing. \nCKAN often uses code imported into a data structure instead of importing names directly. For example CKAN controllers only use `get_action` to access logic functions. This allows customization by CKAN plugins. \nDon’t use `frommoduleimport*` . Instead list the names you need explicitly:",
                "example": "from module import name1, name2\n"
            },
            {
                "description": "Use parenthesis around the names if they are longer than one line:",
                "example": "from module import (name1, name2, ...\n    name12, name13)\n",
                "appendix": "Most of the current CKAN code base imports just the modules and then accesses names with `module.name` . This allows circular imports in some cases and may still be necessary for exsiting code, but is not recommended for new code. \nMake all imports at the start of the file, after the module docstring. Imports should be grouped in the following order: \nStandard library imports \nThird-party imports \nCKAN imports"
            }
        ]
    },
    {
        "title": "Logging ¶",
        "belongs to": "Logging ¶",
        "cases": [
            {
                "description": "We use the Python standard library’s logging module to log messages in CKAN, e.g.:",
                "example": "import logging\n...\nlogger = logging.getLogger(__name__)\n...\nlogger.debug('some debug message')\n",
                "appendix": "When logging:\nKeep log messages short. \nDon’t include object representations in the log message. It is useful to include a domain model identifier where appropriate. \nChoose an appropriate log-level (DEBUG, INFO, ERROR, WARNING or CRITICAL, see Python’s Logging HOWTO )."
            }
        ]
    },
    {
        "title": "String formatting ¶",
        "belongs to": "String formatting ¶",
        "cases": [
            {
                "description": "Don’t use the old `%s` style string formatting, e.g. `\"iama%s\"%sub` . This kind of string formatting is not helpful for internationalization.\nUse the new .format() method instead, and give meaningful names to each replacement field, for example:",
                "example": "_(' ... {foo} ... {bar} ...').format(foo='foo-value', bar='bar-value')\n"
            }
        ]
    },
    {
        "title": "Unicode handling ¶",
        "belongs to": "Unicode handling ¶",
        "cases": [
            {
                "description": "CKAN strives to only use Unicode internally (via the `unicode` type) and to convert to/from ASCII at the interface to other systems and libraries if necessary.\nSee also \nUnicode handling \nDetails on Unicode handling in CKAN"
            }
        ]
    },
    {
        "title": "Docstrings ¶",
        "belongs to": "Docstrings ¶",
        "cases": [
            {
                "description": "We want CKAN’s docstrings to be clear and easy to read for programmers who are smart and competent but who may not know a lot of CKAN technical jargon and whose first language may not be English. We also want it to be easy to maintain the docstrings and keep them up to date with the actual behaviour of the code as it changes over time. So:\nAll modules and all public functions, classes and methods exported by a module should normally have docstrings (see PEP 257 ). \nKeep docstrings short, describe only what’s necessary and no more. \nKeep docstrings simple: use plain, concise English. \nTry to avoid repetition.\nPEP 257 (Docstring Conventions) ¶ \nGenerally, follow PEP 257 for docstrings. We’ll only describe the ways that CKAN differs from or extends PEP 257 below. \nCKAN docstrings deviate from PEP 257 in a couple of ways: \nWe use `'''triplesinglequotes'''` around docstrings, not `\"\"\"tripledoublequotes\"\"\"` (put triple single quotes around one-line docstrings as well as multi-line ones, it makes them easier to expand later) \nWe use Sphinx domain object cross-references to cross-reference to other code objects (see below) \nWe use Sphinx directives for documenting parameters, exceptions and return values (see below)"
            }
        ]
    },
    {
        "title": "Referencing other code objects with :py: ¶",
        "belongs to": "Referencing other code objects with :py: ¶",
        "cases": [
            {
                "description": "If you want to refer to another Python or JavaScript module, function or class etc. in a docstring (or from a `.rst` file), use Sphinx domain object\ncross-references , for example:",
                "example": "See :py:mod:`ckan.lib.helpers`.\n\nSee :py:func:`ckan.logic.action.create.package_create`.\n\nSee :py:class:`ckan.logic.NotFound`.\n"
            },
            {
                "description": "For the full list of types of cross-reference, see the Sphinx docs .\nNote \nThese kinds of cross-references can also be used to reference other types of object besides Python objects, for example JavaScript objects or even command-line scripts and options and environment variables. See the Sphinx docs for the full details.\nCross-referencing objects like this means that Sphinx will style the reference with the right CSS, and hyperlink the reference to the docs for the referenced object. Sphinx can also generate error messages when non-existent objects are referenced, which helps to keep the docs up to date as the code changes.\nTip \nSphinx will render a cross-reference like `:py:func:`ckan.logic.action.create.package_create`` as the full name of the function: ckan.logic.action.create.package_create() . If you want the docs to contain only the local name of the function (e.g. just package_create() ), put a `~` at the start:",
                "example": ":py:func:`~ckan.logic.action.create.package_create`\n",
                "appendix": "(But you should always use the fully qualified name in your docstring or `*.rst` file.)"
            },
            {
                "description": "Documenting exceptions raised with `:raises` \n¶ \nThere are a few guidelines that CKAN code should follow regarding exceptions: \nAll public functions that CKAN exports for third-party code to use should document any exceptions they raise . See below for how to document exceptions raised. \nFor example the template helper functions in ckan.lib.helpers , anything imported into ckan.plugins.toolkit , and all of the action API functions defined in `ckan.logic.action` , should list exceptions raised in their docstrings. \nThis is because CKAN themes, extensions and API clients need to be able to call CKAN code without crashing, so they need to know what exceptions they should handle (and extension developers shouldn’t have to understand the CKAN core source code). \nOn the other hand, internal functions that are only used within CKAN shouldn’t list exceptions in their docstrings . \nThis is because it would be difficult to keep all the exception lists up to date with the actual code behaviour, so the docstrings would become more misleading than useful. \nCode should only raise exceptions from within its allowed set . \nEach module in CKAN has a set of zero or more exceptions, defined somewhere near the module, that code in that module is allowed to raise. For example `ckan/logic/__init__.py` defines a number of exception types for code in `ckan/logic/` to use. CKAN code should never raise exceptions types defined elsewhere in CKAN, in third-party code or in the Python standard library. \nAll code should catch any exceptions raised by called functions , and either handle the exception, re-raise the exception (if it’s from the code’s set of allowed exception types), or wrap the exception in an allowed exception type and re-raise it. \nThis is to make it easy for a CKAN core developer to look at the source code of an internal function, scan it for the keyword `raise` , and see what types of exception the function may raise, so they know what exceptions they need to catch if they’re going to call the function. Developers shouldn’t have to read the source of all the functions that a function calls (and the functions they call…) to find out what exceptions they needs to catch to call a function without crashing. \nTodo \nInsert examples of how to re-raise and how to wrap-and-re-raise an exception. \nUse `:raises:` to document exceptions raised by public functions. The docstring should say what type of exception is raised and under what conditions. Use `:py:class:` to reference exception types. For example:",
                "example": "def member_list(context, data_dict=None):\n    '''Return the members of a group.\n\n    ... (parameters and return values documented here) ...\n\n    :raises: :py:class:`ckan.logic.NotFound`: if the group doesn't exist\n\n    '''\n"
            },
            {
                "description": "Sphinx field lists ¶ \nUse Sphinx field lists for documenting the parameters, exceptions and returns of functions: \nUse `:param` and `:type` to describe each parameter \nUse `:returns` and `:rtype` to describe each return \nUse `:raises` to describe each exception raised \nExample of a short docstring:",
                "example": "@property\ndef packages(self):\n    '''Return a list of all packages that have this tag, sorted by name.\n\n    :rtype: list of ckan.model.package.Package objects\n\n    '''\n"
            },
            {
                "description": "Example of a longer docstring:",
                "example": "@classmethod\ndef search_by_name(cls, search_term, vocab_id_or_name=None):\n    '''Return all tags whose names contain a given string.\n\n    By default only free tags (tags which do not belong to any vocabulary)\n    are returned. If the optional argument ``vocab_id_or_name`` is given\n    then only tags from that vocabulary are returned.\n\n    :param search_term: the string to search for in the tag names\n    :type search_term: string\n    :param vocab_id_or_name: the id or name of the vocabulary to look in\n        (optional, default: None)\n    :type vocab_id_or_name: string\n\n    :returns: a list of tags that match the search term\n    :rtype: list of ckan.model.tag.Tag objects\n\n    '''\n",
                "appendix": "The phrases that follow `:paramfoo:` , `:typefoo:` , or `:returns:` should not start with capital letters or end with full stops. These should be short phrases and not full sentences. If more detail is required put it in the function description instead. \nIndicate optional arguments by ending their descriptions with `(optional)` in brackets. Where relevant also indicate the default value: `(optional,default:5)` . \nYou can also use a little inline reStructuredText markup in docstrings, e.g. `*starsforemphasis*` or ```double-backticksforliteraltext```"
            },
            {
                "description": "Action API docstrings ¶ \nDocstrings from CKAN’s action API are processed with autodoc and included in the API chapter of CKAN’s documentation. The intended audience of these docstrings is users of the CKAN API and not (just) CKAN core developers. \nIn the Python source each API function has the same two arguments ( `context` and `data_dict` ), but the docstrings should document the keys that the functions read from `data_dict` and not `context` and `data_dict` themselves, as this is what the user has to POST in the JSON dict when calling the API. \nWhere practical, it’s helpful to give examples of param and return values in API docstrings. \nCKAN datasets used to be called packages and the old name still appears in the source, e.g. in function names like `package_list()` . When documenting functions like this write dataset not package, but the first time you do this put package after it in brackets to avoid any confusion, e.g.",
                "example": "def package_show(context, data_dict):\n    '''Return the metadata of a dataset (package) and its resources.\n"
            },
            {
                "description": "Example of a ckan.logic.action API docstring:",
                "example": "def vocabulary_create(context, data_dict):\n    '''Create a new tag vocabulary.\n\n    You must be a sysadmin to create vocabularies.\n\n    :param name: the name of the new vocabulary, e.g. ``'Genre'``\n    :type name: string\n    :param tags: the new tags to add to the new vocabulary, for the format of\n        tag dictionaries see ``tag_create()``\n    :type tags: list of tag dictionaries\n\n    :returns: the newly-created vocabulary\n    :rtype: dictionary\n\n    '''\n"
            }
        ]
    },
    {
        "title": "Some helpful tools for Python code quality ¶",
        "belongs to": "Some helpful tools for Python code quality ¶",
        "cases": [
            {
                "description": "There are various tools that can help you to check your Python code for PEP8 conformance and general code quality. We recommend using them.\npep8 checks your Python code against some of the style conventions in PEP 8. As mentioned above, only perform style clean-ups on master to help avoid spurious merge conflicts. \npylint analyzes Python source code looking for bugs and signs of poor quality. \npyflakes also analyzes Python programs to detect errors. \nflake8 combines both pep8 and pyflakes into a single tool. \nSyntastic is a Vim plugin with support for flake8, pyflakes and pylint."
            }
        ]
    }
]