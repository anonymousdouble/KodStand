Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
3 Source file structure
A source file consists of, in order : 
 License or copyright information, if present 
 Package statement 
 Import statements 
 Exactly one top-level class
 

 Exactly one blank line separates each section that is present.

CheckStyle Rules:
[Rule]
OneTopLevelClass
[Description]
Checks that each top-level class, interface, enum
or annotation resides in a source file of its own.
Official description of a 'top-level' term:
7.6. Top Level Type Declarations.
If file doesn't contain public class, interface, enum or annotation,
top-level type is the first type in file.
[Options]
[Rule]
PackageDeclaration
[Description]
Ensures that a class has a package declaration, and (optionally) whether
the package name matches the directory name for the source file.


Rationale: Classes that live in the null package cannot be
imported. Many novice developers are not aware of this.


Packages provide logical namespace to classes and should be stored in
the form of directory levels to provide physical grouping to your classes.
These directories are added to the classpath so that your classes
are visible to JVM when it runs the code.
[Options]
matchDirectoryStructure, Control whether to check for directory and package name match.
[Rule]
NoCodeInFile
[Description]
Checks whether file contains code.
Java compiler is not raising errors on files with no code or all commented out.
Files which are considered to have no code:



File with no text


File with single-line comment(s)


File with a multi line comment(s).
[Options]
[Rule]
RedundantImport
[Description]
Checks for redundant import statements. An import statement is
considered redundant if:



It is a duplicate of another import. This is, when a class is
imported more than once.


The class non-statically imported is from the java.lang
package, e.g. importing java.lang.String.


The class non-statically imported is from the same package as the current package.
[Options]
[Rule]
FileLength
[Description]
Checks for long source files.


Rationale: If a source file becomes very long it is hard to
understand. Therefore, long classes should usually be refactored
into several individual classes that focus on a specific task.
[Options]
fileExtensions, Specify the file extensions of the files to process.
max, Specify the maximum number of lines allowed.
[Rule]
IllegalImport
[Description]
Checks for imports from a set of illegal packages.
[Options]
illegalClasses, Specify class names to reject, if regexp property is not set, checks if import equals class name. If regexp property is set, then list of class names will be interpreted as regular expressions. Note, all properties for match will be used.
illegalPkgs, Specify packages to reject, if regexp property is not set, checks if import is the part of package. If regexp property is set, then list of packages will be interpreted as regular expressions. Note, all properties for match will be used.
regexp, Control whether the illegalPkgs and illegalClasses should be interpreted as regular expressions.
[Rule]
JavadocPackage
[Description]
Checks that each Java package has a Javadoc file used for
commenting. By default, it only allows a package-info.java file, but can be
configured to allow a package.html
file.


A violation will be reported if both files exist as this is not
allowed by the Javadoc tool.
[Options]
allowLegacy, Allow legacy package.html file to be used.
fileExtensions, Specify the file extensions of the files to process.
[Rule]
FileTabCharacter
[Description]
Checks that there are no tab characters ('\t') in the source code.


Rationale:



Developers should not need to configure the tab width of their
text editors in order to be able to read source code.


From the Apache jakarta coding standards: In a distributed
development environment, when the commit messages get sent
to a mailing list, they are almost impossible to read if you
use tabs.
[Options]
eachLine, Control whether to report on each line containing a tab, or just the first instance.
fileExtensions, Specify the file extensions of the files to process.
[Rule]
ImportControl
[Description]
Controls what can be imported in each package and file. Useful for
ensuring that application layering rules are not violated,
especially on large projects.


You can control imports based on the package name or based on the file
name. When controlling packages, all files and sub-packages in the declared
package will be controlled by this check. To specify differences between a main package
and a sub-package, you must define the sub-package inside the main package. When
controlling file, only the file name is considered and only files processed by
TreeWalker. The file's extension is ignored.


Short description of the behaviour:


Check starts checking from the longest matching subpackage (later 'current
subpackage') or the first file name match described inside import
control file to package defined in class file.



The longest matching subpackage is found by starting with the root package
and examining if any of the sub-packages or file definitions match the
current class' package or file name.


If a file name is matched first, that is considered the longest
match and becomes the current file/subpackage.


If another subpackage is matched, then it's subpackages and file
names are examined for the next longest match and the process repeats
recursively.


If no subpackages or file names are matched, the current subpackage
is then used.




Order of rules in the same subpackage/root are defined by the order of
declaration in the XML file, which is from top (first) to bottom (last).


If there is matching allow/disallow rule inside the current file/subpackage
then the Check returns the first "allowed" or "disallowed" message.


If there is no matching allow/disallow rule inside the current file/subpackage
then it continues checking in the parent subpackage.


If there is no matching allow/disallow rule in any of the files/subpackages,
including the root level (import-control), then the import is disallowed by default.



The DTD for an import control XML document is at
https://checkstyle.org/dtds/import_control_1_4.dtd. It
contains documentation on each of the elements and attributes.


The check validates a XML document when it loads the document.
To validate against the above DTD, include the following
document type declaration in your XML document:




<!DOCTYPE import-control PUBLIC
"-//Checkstyle//DTD ImportControl Configuration 1.4//EN"
"https://checkstyle.org/dtds/import_control_1_4.dtd">
[Options]
file, Specify the location of the file containing the import control configuration. It can be a regular file, URL or resource path. It will try loading the path as a URL first, then as a file, and finally as a resource.
path, Specify the regular expression of file paths to which this check should apply. Files that don't match the pattern will not be checked. The pattern will be matched against the full absolute file path.
[Rule]
OneStatementPerLine
[Description]
Checks that there is only one statement per line.


Rationale: It's very difficult to read multiple statements on one line.


In the Java programming language, statements are the fundamental unit of
execution. All statements except blocks are terminated by a semicolon.
Blocks are denoted by open and close curly braces.


OneStatementPerLineCheck checks the following types of statements:
variable declaration statements, empty statements, import statements,
assignment statements, expression statements, increment statements,
object creation statements, 'for loop' statements, 'break' statements,
'continue' statements, 'return' statements, resources statements (optional).
[Options]
treatTryResourcesAsStatement, Enable resources processing.

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
