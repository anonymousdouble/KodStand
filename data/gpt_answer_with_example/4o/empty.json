{"2.2 File encoding: UTF-8": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='FileContentsHolder'>\n            <property name='fileExtensions' value='java'/>\n            <property name='charset' value='UTF-8'/>\n        </module>\n    </module>\"\n}", "2.3.1 Whitespace characters": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='FileTabCharacter'>\n                <property name='eachLine' value='true'/>\n            </module>\n            <module name='RegexpSingleline'>\n                <property name='format' value='[^\\x20\\x21-\\x7E]+'/>\n                <property name='message' value='Only ASCII horizontal space character (0x20) is allowed as whitespace.'/>\n                <property name='ignoreComments' value='true'/>\n                <property name='ignoreStrings' value='true'/>\n                <property name='ignoreCharacters' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "2.3.2 Special escape sequences": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "2.3.3 Non-ASCII characters": "[Input]\n2.3.3 Non-ASCII characters\nFor the remaining non-ASCII characters, either the actual Unicode character (e.g. `\u221e` ) or the equivalent Unicode escape (e.g. `\\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.\n Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.\n Examples:\n Example \n Discussion \n `StringunitAbbrev=\"\u03bcs\";` \n Best: perfectly clear even without a comment. \n `StringunitAbbrev=\"\\u03bcs\";//\"\u03bcs\"` \n Allowed, but there's no reason to do this. \n `StringunitAbbrev=\"\\u03bcs\";//Greeklettermu,\"s\"` \n Allowed, but awkward and prone to mistakes. \n `StringunitAbbrev=\"\\u03bcs\";` \n Poor: the reader has no idea what this is. \n `return'\\ufeff'+content;//byteordermark` \n Good: use escapes for non-printable characters, and comment if necessary.\n Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='AvoidEscapedUnicodeCharacters'>\n                <property name='allowInComments' value='true'/>\n                <property name='allowInStrings' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "3 Source file structure": "[Input]\n3 Source file structure\nA source file consists of, in order : \n License or copyright information, if present \n Package statement \n Import statements \n Exactly one top-level class\n \n\n Exactly one blank line separates each section that is present.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Header'>\n                <property name='headerFile' value='path/to/header.txt'/>\n            </module>\n            <module name='RegexpHeader'>\n                <property name='header' value='^/\\*\\*.*?\\*/'/>\n            </module>\n            <module name='PackageDeclaration'/>\n            <module name='ImportOrder'>\n                <property name='option' value='top'/>\n                <property name='groups' value='java,javax'/>\n                <property name='ordered' value='true'/>\n                <property name='separated' value='true'/>\n                <property name='separatedStatic' value='true'/>\n            </module>\n            <module name='OneTopLevelClass'/>\n            <module name='EmptyLineSeparator'>\n                <property name='allowNoEmptyLineBetweenFields' value='false'/>\n                <property name='tokens' value='PACKAGE_DEF,IMPORT,CLASS_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "3.1 License or copyright information, if present": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Header'>\n                <property name='headerFile' value='path/to/license_or_copyright_file'/>\n                <property name='multiLines' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "3.2 Package statement": "[Input]\n3.2 Package statement\nThe package statement is not line-wrapped. The column limit (Section 4.4, Column limit: 100) does not apply to package statements.\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "3.3.1 No wildcard imports": "[Input]\n3.3.1 No wildcard imports\nWildcard imports, static or otherwise, are not used.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='AvoidStarImport'/>\n            <module name='AvoidStaticImport'/>\n        </module>\n    </module>\"\n}", "3.3.2 No line-wrapping": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='ImportOrder'>\n                <property name='wrapAfter' value='false'/>\n                <property name='maxLineLength' value='0'/>\n            </module>\n        </module>\n    </module>\"\n}", "3.3.3 Ordering and spacing": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='CustomImportOrder'>\n                <property name='sortStaticImportsAlphabetically' value='true'/>\n                <property name='sortImportsInGroupAlphabetically' value='true'/>\n                <property name='separateLineBetweenGroups' value='true'/>\n                <property name='customImportOrderRules' value='STATIC###THIRD_PARTY_PACKAGE'/>\n                <property name='standardPackageRegExp' value='^$'/>\n            </module>\n        </module>\n    </module>\"\n}", "3.3.4 No static import for classes": "[Input]\n3.3.4 No static import for classes\nStatic import is not used for static nested classes. They are imported with normal imports.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='AvoidStaticImport'/>\n        </module>\n    </module>\"\n}", "3.4.1 Exactly one top-level class declaration": "[Input]\n3.4.1 Exactly one top-level class declaration\nEach top-level class resides in a source file of its own.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='OneTopLevelClass'/>\n        </module>\n    </module>\"\n}", "3.4.2 Ordering of class contents": "[Input]\n3.4.2 Ordering of class contents\nThe order you choose for the members and initializers of your class can have a great effect on learnability. However, there's no single correct recipe for how to do it; different classes may order their contents in different ways.\n What is important is that each class uses \n some logical order , which its maintainer could explain if asked. For example, new methods are not just habitually added to the end of the class, as that would yield \"chronological by date added\" ordering, which is not a logical ordering.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='MemberOrder'>\n                <property name='order' value='public, protected, private'/>\n                <property name='sort' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "4 Formatting": "[Input]\n4 Formatting\nTerminology Note: \nblock-like construct refers to the body of a class, method or constructor. Note that, by Section 4.8.3.1 on array initializers, any array initializer may optionally be treated as if it were a block-like construct.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='LeftCurly'>\n                <property name='option' value='nl'/>\n                <property name='tokens' value='CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_NEW'/>\n            </module>\n            <module name='RightCurly'>\n                <property name='option' value='alone'/>\n                <property name='tokens' value='CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_NEW'/>\n            </module>\n            <module name='ArrayTypeStyle'>\n                <property name='tokens' value='ARRAY_INIT'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.1.1 Use of optional braces": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='NeedBraces'>\n                <property name='allowSingleLineStatement' value='false'/>\n                <property name='allowEmptyLoopBody' value='false'/>\n                <property name='tokens' value='LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.1.2 Nonempty blocks: K & R style": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='LeftCurly'>\n                <property name='option' value='EOL'/>\n                <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_STATIC_INIT, LITERAL_CLASS_DEF, LITERAL_METHOD_DEF, LITERAL_CONSTRUCTOR_DEF, LITERAL_ARRAY_INIT, LITERAL_ANNOTATION_DEF, LITERAL_ENUM_DEF, LITERAL_ENUM_CONSTANT_DEF, LITERAL_RECORD_DEF'/>\n            </module>\n            <module name='RightCurly'>\n                <property name='option' value='ALONE'/>\n                <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_STATIC_INIT, LITERAL_CLASS_DEF, LITERAL_METHOD_DEF, LITERAL_CONSTRUCTOR_DEF, LITERAL_ARRAY_INIT, LITERAL_ANNOTATION_DEF, LITERAL_ENUM_DEF, LITERAL_ENUM_CONSTANT_DEF, LITERAL_RECORD_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.1.3 Empty blocks: may be concise": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='EmptyBlock'>\n                <property name='option' value='text'/>\n                <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.2 Block indentation: +2 spaces": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Indentation'>\n                <property name='basicOffset' value='2'/>\n                <property name='braceAdjustment' value='0'/>\n                <property name='caseIndent' value='2'/>\n                <property name='lineWrappingIndentation' value='2'/>\n                <property name='tabWidth' value='2'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.3 One statement per line": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='OneStatementPerLine'/>\n        </module>\n    </module>\"\n}", "4.4 Column limit: 100": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\": \n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='LineLength'>\n                <property name='max' value='100'/>\n                <property name='ignorePattern' value='^.*(http|https|ftp)://.*$'/>\n                <property name='ignoreImports' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.5 Line-wrapping": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.5.1 Where to break": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='LineLength'>\n                <property name='max' value='100'/>\n            </module>\n            <module name='LineWrapping'>\n                <property name='wrapBeforeOperator' value='true'/>\n                <property name='wrapBeforeDot' value='true'/>\n                <property name='wrapBeforeDoubleColon' value='true'/>\n                <property name='wrapBeforeAmpersand' value='true'/>\n                <property name='wrapBeforePipe' value='true'/>\n                <property name='wrapAfterAssignment' value='true'/>\n                <property name='wrapAfterColonInForEach' value='true'/>\n                <property name='wrapAfterLambdaArrow' value='true'/>\n                <property name='wrapBeforeComma' value='false'/>\n                <property name='wrapBeforeOpenParen' value='false'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.5.2 Indent continuation lines at least +4 spaces": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Indentation'>\n                <property name='basicOffset' value='4'/>\n                <property name='lineWrappingIndentation' value='4'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.6.1 Vertical Whitespace": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\": \n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='EmptyLineSeparator'>\n                <property name='allowMultipleEmptyLines' value='true'/>\n                <property name='tokens' value='CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, STATIC_INIT, INSTANCE_INIT, VARIABLE_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.6.2 Horizontal whitespace": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='LITERAL_IF, LITERAL_FOR, LITERAL_CATCH, LITERAL_ELSE, LITERAL_TRY, LITERAL_DO, LITERAL_WHILE, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_RETURN, LITERAL_THROW, LITERAL_ASSERT, LITERAL_BREAK, LITERAL_CONTINUE, LITERAL_CASE, LITERAL_DEFAULT, LITERAL_FINALLY'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LOR, LT, LE, LITERAL_INSTANCEOF, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND, TYPE_EXTENSION_OR, LAMBDA, COLON, METHOD_REF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAfter'>\n                <property name='tokens' value='COMMA, SEMI, COLON, RPAREN, TYPECAST'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_FIELD_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_MEMBER_VALUE_PAIR'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_ARRAY_INIT'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value='ANNOTATION_DEF'/>\n                <property name='option' value='NL'/>\n            </module>\n            <module name='WhitespaceAround'>\n                <property name='tokens' value", "4.6.3 Horizontal alignment: never required": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.7 Grouping parentheses: recommended": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.1 Enum classes": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='EnumConstantName'>\n                <property name='format' value='^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'/>\n            </module>\n            <module name='WhitespaceAfter'>\n                <property name='tokens' value='COMMA'/>\n            </module>\n            <module name='EmptyLineSeparator'>\n                <property name='allowMultipleEmptyLines' value='true'/>\n                <property name='tokens' value='ENUM_DEF, ENUM_CONSTANT_DEF'/>\n            </module>\n            <module name='LeftCurly'>\n                <property name='option' value='NL'/>\n                <property name='tokens' value='ENUM_DEF, OBJBLOCK'/>\n            </module>\n            <module name='RightCurly'>\n                <property name='option' value='NL'/>\n                <property name='tokens' value='ENUM_DEF, OBJBLOCK'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.4 Switch statements": "[Input]\n4.8.4 Switch statements\nTerminology Note: Inside the braces of a switch block are one or more statement groups . Each statement group consists of one or more switch labels (either `caseFOO:` or `default:` ), followed by one or more statements (or, for the last statement group, zero or more statements).\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='SwitchStatement'>\n                <property name='id' value='SwitchStatement'/>\n                <property name='tokens' value='LITERAL_SWITCH'/>\n            </module>\n            <module name='SwitchCase'>\n                <property name='id' value='SwitchCase'/>\n                <property name='tokens' value='CASE_GROUP'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.6 Comments": "[Input]\n4.8.6 Comments\nThis section addresses implementation comments. Javadoc is addressed separately in Section 7, Javadoc.\nAny line break may be preceded by arbitrary whitespace followed by an implementation comment. Such a comment renders the line non-blank.\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.6.1 Block comment style": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocStyle'>\n                <property name='checkFirstSentence' value='false'/>\n            </module>\n            <module name='JavadocParagraph'>\n                <property name='allowEmpty' value='true'/>\n            </module>\n            <module name='JavadocTagContinuationIndentation'>\n                <property name='indentation' value='1'/>\n            </module>\n            <module name='CommentIndentation'>\n                <property name='tokens' value='BLOCK_COMMENT_BEGIN, BLOCK_COMMENT_END, COMMENT_CONTENT'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.7 Modifiers": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='ModifierOrder'>\n                <property name='order' value='public protected private abstract default static final transient volatile synchronized native strictfp'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.8 Numeric Literals": "[Input]\n4.8.8 Numeric Literals\n`long` -valued integer literals use an uppercase `L` suffix, never lowercase (to avoid confusion with the digit `1` ). For example, `3000000000L` rather than `3000000000l` .\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='UpperEll'>\n                <property name='tokens' value='NUM_LONG'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.1 Rules common to all identifiers": "[Input]\n5.1 Rules common to all identifiers\nIdentifiers use only ASCII letters and digits, and, in a small number of cases noted below, underscores. Thus each valid identifier name is matched by the regular expression `\\w+` .\nIn Google Style, special prefixes or suffixes are not used. For example, these names are not Google Style: `name_` , `mName` , `s_name` and `kName` .\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Regexp'>\n                <property name='format' value='^\\w+$'/>\n                <property name='message' value='Identifiers must use only ASCII letters, digits, and underscores.'/>\n                <property name='illegalPattern' value='true'/>\n                <property name='tokens' value='CLASS_DEF, METHOD_DEF, VARIABLE_DEF, PARAMETER_DEF, ENUM_DEF, ENUM_CONSTANT_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, TYPE_PARAMETER_DEF'/>\n            </module>\n            <module name='Regexp'>\n                <property name='format' value='^.*(_|m|s_|k).*$'/>\n                <property name='message' value='Special prefixes or suffixes are not allowed.'/>\n                <property name='illegalPattern' value='true'/>\n                <property name='tokens' value='CLASS_DEF, METHOD_DEF, VARIABLE_DEF, PARAMETER_DEF, ENUM_DEF, ENUM_CONSTANT_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, TYPE_PARAMETER_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.1 Package names": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='PackageName'>\n                <property name='format' value='^[a-z0-9]+(\\\\.[a-z0-9]+)*$'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.2 Class names": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='TypeName'>\n                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n            </module>\n            <module name='ClassTypeParameterName'>\n                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n            </module>\n            <module name='InterfaceTypeParameterName'>\n                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n            </module>\n            <module name='AnnotationUseStyle'>\n                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n            </module>\n            <module name='ClassName'>\n                <property name='format' value='^[A-Z][a-zA-Z0-9]*Test$'/>\n                <property name='applyToPrivate' value='false'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.3 Method names": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='MethodName'>\n                <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n                <property name='applyToPublic' value='true'/>\n                <property name='applyToProtected' value='true'/>\n                <property name='applyToPackage' value='true'/>\n                <property name='applyToPrivate' value='true'/>\n            </module>\n            <module name='MethodName'>\n                <property name='format' value='^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]*)*$'/>\n                <property name='applyToPublic' value='true'/>\n                <property name='applyToProtected' value='true'/>\n                <property name='applyToPackage' value='true'/>\n                <property name='applyToPrivate' value='true'/>\n                <property name='ignoreMethodNames' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.4 Constant names": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='ConstantName'>\n                <property name='format' value='^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'/>\n                <property name='applyToPrivate' value='true'/>\n                <property name='applyToProtected' value='true'/>\n                <property name='applyToPackage' value='true'/>\n                <property name='applyToPublic' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.5 Non-constant field names": "[Input]\n5.2.5 Non-constant field names\nNon-constant field names (static or otherwise) are written in lowerCamelCase.\nThese names are typically nouns or noun phrases. For example, `computedValues` or `index`.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='MemberName'>\n                <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n                <property name='applyToPublic' value='true'/>\n                <property name='applyToProtected' value='true'/>\n                <property name='applyToPackage' value='true'/>\n                <property name='applyToPrivate' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.6 Parameter names": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='ParameterName'>\n                <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n            </module>\n            <module name='SingleCharacterName'>\n                <property name='format' value='^[a-zA-Z]$'/>\n                <property name='ignoreOverriddenMethods' value='true'/>\n                <property name='tokens' value='METHOD_DEF, CTOR_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.7 Local variable names": "[Input]\n5.2.7 Local variable names\nLocal variable names are written in lowerCamelCase.\nEven when final and immutable, local variables are not considered to be constants, and should not be styled as constants.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='LocalVariableName'>\n                <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n            </module>\n        </module>\n    </module>\"\n}", "5.2.8 Type variable names": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "5.3 Camel case: defined": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "6.2 Caught exceptions: not ignored": "[Input]\n6.2 Caught exceptions: not ignored\nExcept as noted below, it is very rarely correct to do nothing in response to a caught exception. (Typical responses are to log it, or if it is considered \"impossible\", rethrow it as an `AssertionError` .)\n When it truly is appropriate to take no action whatsoever in a catch block, the reason this is justified is explained in a comment.\n try {\n  int i = Integer.parseInt(response);\n  return handleNumericResponse(i);\n } catch (NumberFormatException ok) {\n  // it's not numeric; that's fine, just continue\n }\n return handleTextResponse(response);\n \n\n Exception: In tests, a caught exception may be ignored without comment if its name is or begins with `expected` . The following is a very common idiom for ensuring that the code under test does throw an exception of the expected type, so a comment is unnecessary here.\n try {\n  emptyStack.pop();\n  fail();\n } catch (NoSuchElementException expected) {\n }\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='EmptyCatchBlock'>\n                <property name='exceptionVariableName' value='expected'/>\n            </module>\n        </module>\n    </module>\"\n}", "6.3 Static members: qualified using class": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='StaticAccess'>\n                <property name='violateExecutionOnNonTightHtml' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "6.4 Finalizers: not used": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='NoFinalizer'/>\n        </module>\n    </module>\"\n}", "7.1.1 General form": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocStyle'>\n                <property name='checkFirstSentence' value='true'/>\n                <property name='checkEmptyJavadoc' value='true'/>\n                <property name='checkHtml' value='true'/>\n            </module>\n            <module name='SingleLineJavadoc'>\n                <property name='ignoreInlineTags' value='true'/>\n                <property name='ignoreEmptyJavadoc' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.1.2 Paragraphs": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "7.1.3 Block tags": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocTagOrder'>\n                <property name='tagOrder' value='param, return, throws, deprecated'/>\n                <property name='allowMissingParamTags' value='false'/>\n                <property name='allowMissingReturnTag' value='false'/>\n                <property name='allowMissingThrowsTags' value='false'/>\n                <property name='allowMissingDeprecatedTag' value='false'/>\n            </module>\n            <module name='JavadocTagContinuationIndentation'>\n                <property name='indentation' value='4'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.2 The summary fragment": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocStyle'>\n                <property name='checkFirstSentence' value='true'/>\n                <property name='checkEmptyJavadoc' value='true'/>\n            </module>\n            <module name='JavadocTagContinuationIndentation'>\n                <property name='tagName' value='return'/>\n                <property name='indentation' value='4'/>\n            </module>\n            <module name='JavadocMethod'>\n                <property name='allowMissingParamTags' value='false'/>\n                <property name='allowMissingReturnTag' value='false'/>\n                <property name='allowMissingThrowsTags' value='false'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.3 Where Javadoc is used": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocMethod'>\n                <property name='scope' value='public'/>\n                <property name='scope' value='protected'/>\n                <property name='allowMissingParamTags' value='true'/>\n                <property name='allowMissingThrowsTags' value='true'/>\n                <property name='allowMissingReturnTag' value='true'/>\n            </module>\n            <module name='JavadocType'>\n                <property name='scope' value='public'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.3.1 Exception: self-explanatory members": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocMethod'>\n                <property name='scope' value='public'/>\n                <property name='allowMissingJavadoc' value='true'/>\n                <property name='allowMissingJavadocForOverriddenMethods' value='true'/>\n                <property name='excludeScope' value='private'/>\n                <property name='excludeScope' value='protected'/>\n                <property name='excludeScope' value='package'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.3.2 Exception: overrides": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='JavadocMethod'>\n                <property name='scope' value='protected'/>\n                <property name='allowMissingJavadoc' value='true'/>\n                <property name='allowMissingParamTags' value='true'/>\n                <property name='allowMissingReturnTag' value='true'/>\n                <property name='allowMissingThrowsTags' value='true'/>\n                <property name='allowMissingJavadocOverride' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "7.3.4 Non-required Javadoc": "[Input]\n7.3.4 Non-required Javadoc\nOther classes and members have Javadoc as needed or desired.\nWhenever an implementation comment would be used to define the overall purpose or behavior of a class or member, that comment is written as Javadoc instead (using `/**`).\nNon-required Javadoc is not strictly required to follow the formatting rules of Sections 7.1.1, 7.1.2, 7.1.3, and 7.2, though it is of course recommended.\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.5.1 Type-use annotations": "[Input]\n4.8.5.1 Type-use annotations\nType-use annotations appear immediately before the annotated type. An annotation is a type-use annotation if it is meta-annotated with @Target(ElementType.TYPE_USE). Example:\n final @Nullable String name;\n \n\n public @Nullable Person getPersonByName(String name);\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.5.2 Class annotations": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='AnnotationLocation'>\n                <property name='allowSamelineMultipleAnnotations' value='false'/>\n                <property name='tokens' value='CLASS_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.5.3 Method and constructor annotations": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='AnnotationLocation'>\n                <property name='allowSamelineSingleParameterless' value='true'/>\n                <property name='tokens' value='METHOD_DEF, CTOR_DEF'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.5.4 Field annotations": "[Input]\n4.8.5.4 Field annotations\nAnnotations applying to a field also appear immediately after the documentation block, but in this case, multiple annotations (possibly parameterized) may be listed on the same line; for example:\n @Partial @Mock DataLoader loader;\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.5.5 Parameter and local variable annotations": "[Input]\n4.8.5.5 Parameter and local variable annotations\nThere are no specific rules for formatting annotations on parameters or local variables (except, of course, when the annotation is a type-use annotation).\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "3.4.2.1 Overloads: never split": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.2.1 One variable per declaration": "[Input]\n4.8.2.1 One variable per declaration\nEvery variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used.\nException: Multiple variable declarations are acceptable in the header of a for loop.\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='MultipleVariableDeclarations'>\n                <property name='allowForLoopMultipleDeclaration' value='true'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.2.2 Declared when needed": "[Input]\n4.8.2.2 Declared when needed\nLocal variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.\n\n[Output]\n{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.3.1 Array initializers: can be \"block-like\"": "{\n    \"Answer\": \"No\",\n    \"Configuration\": \"\"\n}", "4.8.3.2 No C-style array declarations": "[Input]\n4.8.3.2 No C-style array declarations\nThe square brackets form a part of the type, not the variable: String[] args, not String args[].\n\n[Output]\n{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='ArrayTypeStyle'/>\n        </module>\n    </module>\"\n}", "4.8.4.1 Indentation": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='Indentation'>\n                <property name='basicOffset' value='2'/>\n                <property name='caseIndent' value='2'/>\n                <property name='lineWrappingIndentation' value='2'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.4.2 Fall-through: commented": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='FallThrough'>\n                <property name='commentFormat' value='fall[ -]?through'/>\n            </module>\n        </module>\n    </module>\"\n}", "4.8.4.3 Presence of the default label": "{\n    \"Answer\": \"Yes\",\n    \"Configuration\":\n    \"<module name='Checker'>\n        <module name='TreeWalker'>\n            <module name='MissingSwitchDefault'>\n                <property name='id' value='defaultSwitchLabel'/>\n                <property name='tokens' value='LITERAL_SWITCH'/>\n            </module>\n        </module>\n    </module>\"\n}"}