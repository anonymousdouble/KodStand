Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
2.2 File encoding: UTF-8
Source files are encoded in UTF-8 .

CheckStyle Rules:
[Rule]
FileTabCharacter
[Description]
Checks that there are no tab characters ('\t') in the source code.


Rationale:



Developers should not need to configure the tab width of their
text editors in order to be able to read source code.


From the Apache jakarta coding standards: In a distributed
development environment, when the commit messages get sent
to a mailing list, they are almost impossible to read if you
use tabs.
[Rule]
FileLength
[Description]
Checks for long source files.


Rationale: If a source file becomes very long it is hard to
understand. Therefore, long classes should usually be refactored
into several individual classes that focus on a specific task.
[Rule]
NoCodeInFile
[Description]
Checks whether file contains code.
Java compiler is not raising errors on files with no code or all commented out.
Files which are considered to have no code:



File with no text


File with single-line comment(s)


File with a multi line comment(s).
[Rule]
OneTopLevelClass
[Description]
Checks that each top-level class, interface, enum
or annotation resides in a source file of its own.
Official description of a 'top-level' term:
7.6. Top Level Type Declarations.
If file doesn't contain public class, interface, enum or annotation,
top-level type is the first type in file.
[Rule]
AvoidEscapedUnicodeCharacters
[Description]
Restricts using

Unicode escapes (such as \u221e).
It is possible to allow using escapes for

non-printable, control characters.
Also, this check can be configured to allow using escapes
if trail comment is present. By the option it is possible to
allow using escapes if literal contains only them.
[Rule]
Translation
[Description]
Ensures the correct translation of code by checking property files for
consistency regarding their keys. Two property files
describing one and the same context are consistent if they
contain the same keys. TranslationCheck also can check an existence of required
translations which must exist in project, if requiredTranslations
option is used.


Consider the following properties file in the same directory:



#messages.properties
hello=Hello
cancel=Cancel

#messages_de.properties
hell=Hallo
ok=OK


The Translation check will find the typo in the German hello
key, the missing ok key in the default resource file and the
missing cancel key in the German resource file:



messages_de.properties: Key 'hello' missing.
messages_de.properties: Key 'cancel' missing.
messages.properties: Key 'hell' missing.
messages.properties: Key 'ok' missing.
[Rule]
OuterTypeFilename
[Description]
Checks that the outer type name and the file name match. For example,
the class Foo must be in a file named
Foo.java.
[Rule]
MultipleStringLiterals
[Description]
Checks for multiple occurrences of the same string literal within a
single file.


Rationale: Code duplication makes maintenance more difficult, so it
can be better to replace the multiple occurrences with a constant.
[Rule]
LineLength
[Description]
Checks for long lines.


Rationale: Long lines are hard to read in printouts or if developers
have limited screen space for the source code, e.g. if the IDE
displays additional information like project tree, class hierarchy,
etc.
[Rule]
HideUtilityClassConstructor
[Description]
Makes sure that utility classes (classes that contain only static
methods or fields in their API) do not have a public constructor.


Rationale: Instantiating utility classes does not make sense. Hence,
the constructors should either be private or (if you want to allow
subclassing) protected. A common mistake is forgetting to hide the
default constructor.


If you make the constructor protected you may want to consider the
following constructor implementation technique to disallow
instantiating subclasses:



public class StringUtils // not final to allow subclassing
{
protected StringUtils() {
// prevents calls from subclass
throw new UnsupportedOperationException();
}

public static int count(char c, String s) {
// ...
}
}

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
