{
    "PackageDeclaration": [
        "Analyze the following CheckStyle Rule consisting of Description and configurable Options. \n1. Extract all OptionNames\n1. Analyze description of each option of CheckStyle Rule, determine it is a data specification.\n\nCheckStyle Rule:\nRulename\nPackageDeclaration\nDescription\n\nEnsures that a class has a package declaration, and (optionally) whether\nthe package name matches the directory name for the source file.\n\n\nRationale: Classes that live in the null package cannot be\nimported. Many novice developers are not aware of this.\n\n\nPackages provide logical namespace to classes and should be stored in\nthe form of directory levels to provide physical grouping to your classes.\nThese directories are added to the classpath so that your classes\nare visible to JVM when it runs the code.\nOptions\nProperties\n\n\n\nname\ndescription\ntype\ndefault value\nsince\n\n\nmatchDirectoryStructure\nControl whether to check for directory and package name match.\nboolean\ntrue\n7.6.1\n\nGrammar:\nRuleSet ::= Rule1 [And|Or|; Rule2]* # And means should satisfy Rule1 and Rule2. Or means can satisfy Rule1 or Rule2. ; means Rule1,Rule2 belongs to diffent groups\nRule ::= {{'Optional'| 'Mandatory'}} [ ['Order' of | 'Number' of] TermList [Operator TermList]* | Rule1 '->' Rule2] [ExceptionRule] #'Order' of  means order rule, 'Number' of means numberConstraint, Rule1 '->' Rule2 means applying Rule2 under the premise of Rule1 \nExceptionRule ::= 'Except ' TermList | Rule # means rules not applied to TermList | Rule\nOperator = 'is'| 'is not' | '>=' | '<=' | '=' | '!=' | 'for' | 'not for' | 'before' | 'not before' | 'after' | 'not after' | 'between' | 'not between' | 'have' | 'not have' | 'Add' | 'Sub' | 'Mult' | MatMult | 'Div' | 'Mod' | 'Pow' | 'LShift' | 'RShift' | 'BitOr' | 'BitXor' | 'BitAnd' | 'FloorDiv'\nTermList ::= Term [, Term]*\nModifier ::= 'some' | 'each' | 'all' | 'except' | 'first' | 'last' | ...\nTerm :: = JavaTerm | Modifier* Term | Term of Term\nJavaTerm means the formal expression using such format [XXX] \"XXX\" represent a JavaTerm\n\n\nResponse Format:\nIf there are no Options, please respond \"No Option\"\nOtherwise, respond like:\nOptions:\nOptionName1:  Yes or No\n...\nOptionNamek:  Yes or No\n\nFor Example, respond like: \nOptions:\nallowEmptyLoopBody : No # different behaviors\nallowSingleLineStatement : No # different behaviors\ntokens: Yes # specify data\nformat: Yes # specify dataobject\nignoreCase : No #Control checking behavior\nmessage : No #Control reporting message\n\n",
        "Options:\nmatchDirectoryStructure: Yes"
    ]
}