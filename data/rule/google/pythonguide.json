[
    {
        "title": "1 Background",
        "belongs to": "1 Background",
        "cases": [
            {
                "description": "Python is the main dynamic language used at Google. This style guide is a list of dos and don’ts for Python programs.\nTo help you format code correctly, we’ve created a settings file for Vim . For Emacs, the default settings should be fine.\nMany teams use the Black or Pyink auto-formatter to avoid arguing over formatting."
            }
        ]
    },
    {
        "title": "2 Python Language Rules",
        "belongs to": "2 Python Language Rules",
        "cases": []
    },
    {
        "title": "2.1 Lint",
        "belongs to": "2 Python Language Rules/2.1 Lint",
        "cases": [
            {
                "description": "Run `pylint` over your code using this pylintrc ."
            }
        ]
    },
    {
        "title": "2.1.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.1.1 Definition",
        "cases": [
            {
                "description": "`pylint` is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent."
            }
        ]
    },
    {
        "title": "2.1.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.1.2 Pros",
        "cases": [
            {
                "description": "Catches easy-to-miss errors like typos, using-vars-before-assignment, etc."
            }
        ]
    },
    {
        "title": "2.1.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.1.3 Cons",
        "cases": [
            {
                "description": "`pylint` isn’t perfect. To take advantage of it, sometimes we’ll need to write around it, suppress its warnings or fix it."
            }
        ]
    },
    {
        "title": "2.1.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.1.4 Decision",
        "cases": [
            {
                "description": "Make sure you run `pylint` on your code.\nSuppress warnings if they are inappropriate so that other issues are not hidden. To suppress warnings, you can set a line-level comment:",
                "example": "def do_PUT(self):  # WSGI name, so pylint: disable=invalid-name\n  ...\n"
            },
            {
                "description": "`pylint` warnings are each identified by symbolic name ( `empty-docstring` ) Google-specific warnings start with `g-` .\nIf the reason for the suppression is not clear from the symbolic name, add an explanation.\nSuppressing in this way has the advantage that we can easily search for suppressions and revisit them.\nYou can get a list of `pylint` warnings by doing:",
                "example": "pylint --list-msgs\n"
            },
            {
                "description": "To get more information on a particular message, use:",
                "example": "pylint --help-msg=invalid-name\n"
            },
            {
                "description": "Prefer `pylint:disable` to the deprecated older form `pylint:disable-msg` .\nUnused argument warnings can be suppressed by deleting the variables at the beginning of the function. Always include a comment explaining why you are deleting it. “Unused.” is sufficient. For example:",
                "example": "def viking_cafe_order(spam: str, beans: str, eggs: str | None = None) -> str:\n    del beans, eggs  # Unused by vikings.\n    return spam + spam + spam\n",
                "appendix": "Other common forms of suppressing this warning include using ‘ `_` ’ as the identifier for the unused argument or prefixing the argument name with ‘ `unused_` ’, or assigning them to ‘ `_` ’. These forms are allowed but no longer encouraged. These break callers that pass arguments by name and do not enforce that the arguments are actually unused."
            }
        ]
    },
    {
        "title": "2.2 Imports",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports",
        "cases": [
            {
                "description": "Use `import` statements for packages and modules only, not for individual types, classes, or functions."
            }
        ]
    },
    {
        "title": "2.2.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.1 Definition",
        "cases": [
            {
                "description": "Reusability mechanism for sharing code from one module to another."
            }
        ]
    },
    {
        "title": "2.2.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.2 Pros",
        "cases": [
            {
                "description": "The namespace management convention is simple. The source of each identifier is indicated in a consistent way; `x.Obj` says that object `Obj` is defined in module `x` ."
            }
        ]
    },
    {
        "title": "2.2.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.3 Cons",
        "cases": [
            {
                "description": "Module names can still collide. Some module names are inconveniently long."
            }
        ]
    },
    {
        "title": "2.2.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision",
        "cases": [
            {
                "description": "Use `importx` for importing packages and modules. \nUse `fromximporty` where `x` is the package prefix and `y` is the module name with no prefix. \nUse `fromximportyasz` in any of the following circumstances: \nTwo modules named `y` are to be imported. \n`y` conflicts with a top-level name defined in the current module. \n`y` conflicts with a common parameter name that is part of the public API (e.g., `features` ). \n`y` is an inconveniently long name. \n`y` is too generic in the context of your code (e.g., `fromstorage.file_systemimportoptionsasfs_options` ). \nUse `importyasz` only when `z` is a standard abbreviation (e.g., `importnumpyasnp` ).\nFor example the module `sound.effects.echo` may be imported as follows:",
                "example": "from sound.effects import echo\n...\necho.EchoFilter(input, output, delay=0.7, atten=4)\n",
                "appendix": "Do not use relative names in imports. Even if the module is in the same package, use the full package name. This helps prevent unintentionally importing a package twice."
            }
        ]
    },
    {
        "title": "2.2.4.1 Exemptions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.2.4.1 Exemptions",
        "cases": [
            {
                "description": "Exemptions from this rule:\nSymbols from the following modules are used to support static analysis and type checking: \ntyping\n \n module \ncollections.abc\n \n module \ntyping_extensions\n \n module \nRedirects from the six.moves module ."
            }
        ]
    },
    {
        "title": "2.3 Packages",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages",
        "cases": [
            {
                "description": "Import each module using the full pathname location of the module."
            }
        ]
    },
    {
        "title": "2.3.1 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.3.1 Pros",
        "cases": [
            {
                "description": "Avoids conflicts in module names or incorrect imports due to the module search path not being what the author expected. Makes it easier to find modules."
            }
        ]
    },
    {
        "title": "2.3.2 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.3.2 Cons",
        "cases": [
            {
                "description": "Makes it harder to deploy code because you have to replicate the package hierarchy. Not really a problem with modern deployment mechanisms."
            }
        ]
    },
    {
        "title": "2.3.3 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.3.3 Decision",
        "cases": [
            {
                "description": "All new code should import each module by its full package name.\nImports should be as follows:",
                "example": "Yes:\n  # Reference absl.flags in code with the complete name (verbose).\n  import absl.flags\n  from doctor.who import jodie\n\n  _FOO = absl.flags.DEFINE_string(...)\n\nYes:\n  # Reference flags in code with just the module name (common).\n  from absl import flags\n  from doctor.who import jodie\n\n  _FOO = flags.DEFINE_string(...)\n"
            },
            {
                "description": "(assume this file lives in `doctor/who/` where `jodie.py` also exists)",
                "example": "No:\n  # Unclear what module the author wanted and what will be imported.  The actual\n  # import behavior depends on external factors controlling sys.path.\n  # Which possible jodie module did the author intend to import?\n  import jodie\n",
                "appendix": "The directory the main binary is located in should not be assumed to be in `sys.path` despite that happening in some environments. This being the case, code should assume that `importjodie` refers to a third-party or top-level package named `jodie` , not a local `jodie.py` ."
            }
        ]
    },
    {
        "title": "2.4 Exceptions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions",
        "cases": [
            {
                "description": "Exceptions are allowed but must be used carefully."
            }
        ]
    },
    {
        "title": "2.4.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.4.1 Definition",
        "cases": [
            {
                "description": "Exceptions are a means of breaking out of normal control flow to handle errors or other exceptional conditions."
            }
        ]
    },
    {
        "title": "2.4.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.4.2 Pros",
        "cases": [
            {
                "description": "The control flow of normal operation code is not cluttered by error-handling code. It also allows the control flow to skip multiple frames when a certain condition occurs, e.g., returning from N nested functions in one step instead of having to plumb error codes through."
            }
        ]
    },
    {
        "title": "2.4.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.4.3 Cons",
        "cases": [
            {
                "description": "May cause the control flow to be confusing. Easy to miss error cases when making library calls."
            }
        ]
    },
    {
        "title": "2.4.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.4.4 Decision",
        "cases": [
            {
                "description": "Exceptions must follow certain conditions:\nMake use of built-in exception classes when it makes sense. For example, raise a `ValueError` to indicate a programming mistake like a violated precondition, such as may happen when validating function arguments. \nDo not use `assert` statements in place of conditionals or validating preconditions. They must not be critical to the application logic. A litmus test would be that the `assert` could be removed without breaking the code. `assert` conditionals are not guaranteed to be evaluated. For pytest based tests, `assert` is okay and expected to verify expectations. For example:",
                "example": "Yes:\n  def connect_to_next_port(self, minimum: int) -> int:\n    \"\"\"Connects to the next available port.\n\n    Args:\n      minimum: A port value greater or equal to 1024.\n\n    Returns:\n      The new minimum port.\n\n    Raises:\n      ConnectionError: If no available port is found.\n    \"\"\"\n    if minimum < 1024:\n      # Note that this raising of ValueError is not mentioned in the doc\n      # string's \"Raises:\" section because it is not appropriate to\n      # guarantee this specific behavioral reaction to API misuse.\n      raise ValueError(f'Min. port must be at least 1024, not {minimum}.')\n    port = self._find_next_open_port(minimum)\n    if port is None:\n      raise ConnectionError(\n          f'Could not connect to service on port {minimum} or higher.')\n    # The code does not depend on the result of this assert.\n    assert port >= minimum, (\n        f'Unexpected port {port} when minimum was {minimum}.')\n    return port\n\nNo:\n  def connect_to_next_port(self, minimum: int) -> int:\n    \"\"\"Connects to the next available port.\n\n    Args:\n      minimum: A port value greater or equal to 1024.\n\n    Returns:\n      The new minimum port.\n    \"\"\"\n    assert minimum >= 1024, 'Minimum port must be at least 1024.'\n    # The following code depends on the previous assert.\n    port = self._find_next_open_port(minimum)\n    assert port is not None\n    # The type checking of the return statement relies on the assert.\n    return port\n",
                "appendix": "Libraries or packages may define their own exceptions. When doing so they must inherit from an existing exception class. Exception names should end in `Error` and should not introduce repetition ( `foo.FooError` ). \nNever use catch-all `except:` statements, or catch `Exception` or `StandardError` , unless you are \nre-raising the exception, or \ncreating an isolation point in the program where exceptions are not propagated but are recorded and suppressed instead, such as protecting a thread from crashing by guarding its outermost block. \nPython is very tolerant in this regard and `except:` will really catch everything including misspelled names, sys.exit() calls, Ctrl+C interrupts, unittest failures and all kinds of other exceptions that you simply don’t want to catch. \nMinimize the amount of code in a `try` / `except` block. The larger the body of the `try` , the more likely that an exception will be raised by a line of code that you didn’t expect to raise an exception. In those cases, the `try` / `except` block hides a real error. \nUse the `finally` clause to execute code whether or not an exception is raised in the `try` block. This is often useful for cleanup, i.e., closing a file."
            }
        ]
    },
    {
        "title": "2.5 Mutable Global State",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State",
        "cases": [
            {
                "description": "Avoid mutable global state."
            }
        ]
    },
    {
        "title": "2.5.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.5.1 Definition",
        "cases": [
            {
                "description": "Module-level values or class attributes that can get mutated during program execution."
            }
        ]
    },
    {
        "title": "2.5.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.5.2 Pros",
        "cases": [
            {
                "description": "Occasionally useful."
            }
        ]
    },
    {
        "title": "2.5.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.5.3 Cons",
        "cases": [
            {
                "description": "Breaks encapsulation: Such design can make it hard to achieve valid objectives. For example, if global state is used to manage a database connection, then connecting to two different databases at the same time (such as for computing differences during a migration) becomes difficult. Similar problems easily arise with global registries. \nHas the potential to change module behavior during the import, because assignments to global variables are done when the module is first imported."
            }
        ]
    },
    {
        "title": "2.5.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.5.4 Decision",
        "cases": [
            {
                "description": "Avoid mutable global state.\nIn those rare cases where using global state is warranted, mutable global entities should be declared at the module level or as a class attribute and made internal by prepending an `_` to the name. If necessary, external access to mutable global state must be done through public functions or class methods. See Naming below. Please explain the design reasons why mutable global state is being used in a comment or a doc linked to from a comment.\nModule-level constants are permitted and encouraged. For example: `_MAX_HOLY_HANDGRENADE_COUNT=3` for an internal use constant or `SIR_LANCELOTS_FAVORITE_COLOR=\"blue\"` for a public API constant. Constants must be named using all caps with underscores. See Naming below."
            }
        ]
    },
    {
        "title": "2.6 Nested/Local/Inner Classes and Functions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions",
        "cases": [
            {
                "description": "Nested local functions or classes are fine when used to close over a local variable. Inner classes are fine."
            }
        ]
    },
    {
        "title": "2.6.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.6.1 Definition",
        "cases": [
            {
                "description": "A class can be defined inside of a method, function, or class. A function can be defined inside a method or function. Nested functions have read-only access to variables defined in enclosing scopes."
            }
        ]
    },
    {
        "title": "2.6.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.6.2 Pros",
        "cases": [
            {
                "description": "Allows definition of utility classes and functions that are only used inside of a very limited scope. Very ADT -y. Commonly used for implementing decorators."
            }
        ]
    },
    {
        "title": "2.6.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.6.3 Cons",
        "cases": [
            {
                "description": "Nested functions and classes cannot be directly tested. Nesting can make the outer function longer and less readable."
            }
        ]
    },
    {
        "title": "2.6.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.6.4 Decision",
        "cases": [
            {
                "description": "They are fine with some caveats. Avoid nested functions or classes except when closing over a local value other than `self` or `cls` . Do not nest a function just to hide it from users of a module. Instead, prefix its name with an _ at the module level so that it can still be accessed by tests."
            }
        ]
    },
    {
        "title": "2.7 Comprehensions & Generator Expressions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions",
        "cases": [
            {
                "description": "Okay to use for simple cases."
            }
        ]
    },
    {
        "title": "2.7.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.7.1 Definition",
        "cases": [
            {
                "description": "List, Dict, and Set comprehensions as well as generator expressions provide a concise and efficient way to create container types and iterators without resorting to the use of traditional loops, `map()` , `filter()` , or `lambda` ."
            }
        ]
    },
    {
        "title": "2.7.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.7.2 Pros",
        "cases": [
            {
                "description": "Simple comprehensions can be clearer and simpler than other dict, list, or set creation techniques. Generator expressions can be very efficient, since they avoid the creation of a list entirely."
            }
        ]
    },
    {
        "title": "2.7.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.7.3 Cons",
        "cases": [
            {
                "description": "Complicated comprehensions or generator expressions can be hard to read."
            }
        ]
    },
    {
        "title": "2.7.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.7.4 Decision",
        "cases": [
            {
                "description": "Comprehensions are allowed, however multiple `for` clauses or filter expressions are not permitted. Optimize for readability, not conciseness.",
                "example": "Yes:\n  result = [mapping_expr for value in iterable if filter_expr]\n\n  result = [\n      is_valid(metric={'key': value})\n      for value in interesting_iterable\n      if a_longer_filter_expression(value)\n  ]\n\n  descriptive_name = [\n      transform({'key': key, 'value': value}, color='black')\n      for key, value in generate_iterable(some_input)\n      if complicated_condition_is_met(key, value)\n  ]\n\n  result = []\n  for x in range(10):\n    for y in range(5):\n      if x * y > 10:\n        result.append((x, y))\n\n  return {\n      x: complicated_transform(x)\n      for x in long_generator_function(parameter)\n      if x is not None\n  }\n\n  return (x**2 for x in range(10))\n\n  unique_names = {user.name for user in users if user is not None}\n\nNo:\n  result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]\n\n  return (\n      (x, y, z)\n      for x in range(5)\n      for y in range(5)\n      if x != y\n      for z in range(5)\n      if y != z\n  )\n"
            }
        ]
    },
    {
        "title": "2.8 Default Iterators and Operators",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators",
        "cases": [
            {
                "description": "Use default iterators and operators for types that support them, like lists, dictionaries, and files."
            }
        ]
    },
    {
        "title": "2.8.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.8.1 Definition",
        "cases": [
            {
                "description": "Container types, like dictionaries and lists, define default iterators and membership test operators (“in” and “not in”)."
            }
        ]
    },
    {
        "title": "2.8.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.8.2 Pros",
        "cases": [
            {
                "description": "The default iterators and operators are simple and efficient. They express the operation directly, without extra method calls. A function that uses default operators is generic. It can be used with any type that supports the operation."
            }
        ]
    },
    {
        "title": "2.8.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.8.3 Cons",
        "cases": [
            {
                "description": "You can’t tell the type of objects by reading the method names (unless the variable has type annotations). This is also an advantage."
            }
        ]
    },
    {
        "title": "2.8.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.8.4 Decision",
        "cases": [
            {
                "description": "Use default iterators and operators for types that support them, like lists, dictionaries, and files. The built-in types define iterator methods, too. Prefer these methods to methods that return lists, except that you should not mutate a container while iterating over it.",
                "example": "Yes:  for key in adict: ...\n      if obj in alist: ...\n      for line in afile: ...\n      for k, v in adict.items(): ...\n\nNo:   for key in adict.keys(): ...\n      for line in afile.readlines(): ...\n"
            }
        ]
    },
    {
        "title": "2.9 Generators",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators",
        "cases": [
            {
                "description": "Use generators as needed."
            }
        ]
    },
    {
        "title": "2.9.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.9.1 Definition",
        "cases": [
            {
                "description": "A generator function returns an iterator that yields a value each time it executes a yield statement. After it yields a value, the runtime state of the generator function is suspended until the next value is needed."
            }
        ]
    },
    {
        "title": "2.9.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.9.2 Pros",
        "cases": [
            {
                "description": "Simpler code, because the state of local variables and control flow are preserved for each call. A generator uses less memory than a function that creates an entire list of values at once."
            }
        ]
    },
    {
        "title": "2.9.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.9.3 Cons",
        "cases": [
            {
                "description": "Local variables in the generator will not be garbage collected until the generator is either consumed to exhaustion or itself garbage collected."
            }
        ]
    },
    {
        "title": "2.9.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.9.4 Decision",
        "cases": [
            {
                "description": "Fine. Use “Yields:” rather than “Returns:” in the docstring for generator functions.\nIf the generator manages an expensive resource, make sure to force the clean up.\nA good way to do the clean up is by wrapping the generator with a context manager PEP-0533 ."
            }
        ]
    },
    {
        "title": "2.10 Lambda Functions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions",
        "cases": [
            {
                "description": "Okay for one-liners. Prefer generator expressions over `map()` or `filter()` with a `lambda` ."
            }
        ]
    },
    {
        "title": "2.10.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.10.1 Definition",
        "cases": [
            {
                "description": "Lambdas define anonymous functions in an expression, as opposed to a statement."
            }
        ]
    },
    {
        "title": "2.10.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.10.2 Pros",
        "cases": [
            {
                "description": "Convenient."
            }
        ]
    },
    {
        "title": "2.10.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.10.3 Cons",
        "cases": [
            {
                "description": "Harder to read and debug than local functions. The lack of names means stack traces are more difficult to understand. Expressiveness is limited because the function may only contain an expression."
            }
        ]
    },
    {
        "title": "2.10.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.10.4 Decision",
        "cases": [
            {
                "description": "Lambdas are allowed. If the code inside the lambda function spans multiple lines or is longer than 60-80 chars, it might be better to define it as a regular nested function .\nFor common operations like multiplication, use the functions from the `operator` module instead of lambda functions. For example, prefer `operator.mul` to `lambdax,y:x*y` ."
            }
        ]
    },
    {
        "title": "2.11 Conditional Expressions",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions",
        "cases": [
            {
                "description": "Okay for simple cases."
            }
        ]
    },
    {
        "title": "2.11.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.11.1 Definition",
        "cases": [
            {
                "description": "Conditional expressions (sometimes called a “ternary operator”) are mechanisms that provide a shorter syntax for if statements. For example: `x=1ifcondelse2` ."
            }
        ]
    },
    {
        "title": "2.11.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.11.2 Pros",
        "cases": [
            {
                "description": "Shorter and more convenient than an if statement."
            }
        ]
    },
    {
        "title": "2.11.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.11.3 Cons",
        "cases": [
            {
                "description": "May be harder to read than an if statement. The condition may be difficult to locate if the expression is long."
            }
        ]
    },
    {
        "title": "2.11.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.11.4 Decision",
        "cases": [
            {
                "description": "Okay to use for simple cases. Each portion must fit on one line: true-expression, if-expression, else-expression. Use a complete if statement when things get more complicated.",
                "example": "Yes:\n    one_line = 'yes' if predicate(value) else 'no'\n    slightly_split = ('yes' if predicate(value)\n                      else 'no, nein, nyet')\n    the_longest_ternary_style_that_can_be_done = (\n        'yes, true, affirmative, confirmed, correct'\n        if predicate(value)\n        else 'no, false, negative, nay')\n\nNo:\n    bad_line_breaking = ('yes' if predicate(value) else\n                         'no')\n    portion_too_long = ('yes'\n                        if some_long_module.some_long_predicate_function(\n                            really_long_variable_name)\n                        else 'no, false, negative, nay')\n"
            }
        ]
    },
    {
        "title": "2.12 Default Argument Values",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values",
        "cases": [
            {
                "description": "Okay in most cases."
            }
        ]
    },
    {
        "title": "2.12.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.12.1 Definition",
        "cases": [
            {
                "description": "You can specify values for variables at the end of a function’s parameter list, e.g., `deffoo(a,b=0):` . If `foo` is called with only one argument, `b` is set to 0. If it is called with two arguments, `b` has the value of the second argument."
            }
        ]
    },
    {
        "title": "2.12.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.12.2 Pros",
        "cases": [
            {
                "description": "Often you have a function that uses lots of default values, but on rare occasions you want to override the defaults. Default argument values provide an easy way to do this, without having to define lots of functions for the rare exceptions. As Python does not support overloaded methods/functions, default arguments are an easy way of “faking” the overloading behavior."
            }
        ]
    },
    {
        "title": "2.12.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.12.3 Cons",
        "cases": [
            {
                "description": "Default arguments are evaluated once at module load time. This may cause problems if the argument is a mutable object such as a list or a dictionary. If the function modifies the object (e.g., by appending an item to a list), the default value is modified."
            }
        ]
    },
    {
        "title": "2.12.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.12.4 Decision",
        "cases": [
            {
                "description": "Okay to use with the following caveat:\nDo not use mutable objects as default values in the function or method definition.",
                "example": "Yes: def foo(a, b=None):\n         if b is None:\n             b = []\nYes: def foo(a, b: Sequence | None = None):\n         if b is None:\n             b = []\nYes: def foo(a, b: Sequence = ()):  # Empty tuple OK since tuples are immutable.\n         ...\n\nfrom absl import flags\n_FOO = flags.DEFINE_string(...)\n\nNo:  def foo(a, b=[]):\n         ...\nNo:  def foo(a, b=time.time()):  # Is `b` supposed to represent when this module was loaded?\n         ...\nNo:  def foo(a, b=_FOO.value):  # sys.argv has not yet been parsed...\n         ...\nNo:  def foo(a, b: Mapping = {}):  # Could still get passed to unchecked code.\n         ...\n"
            }
        ]
    },
    {
        "title": "2.13 Properties",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties",
        "cases": [
            {
                "description": "Properties may be used to control getting or setting attributes that require trivial computations or logic. Property implementations must match the general expectations of regular attribute access: that they are cheap, straightforward, and unsurprising."
            }
        ]
    },
    {
        "title": "2.13.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.13.1 Definition",
        "cases": [
            {
                "description": "A way to wrap method calls for getting and setting an attribute as a standard attribute access."
            }
        ]
    },
    {
        "title": "2.13.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.13.2 Pros",
        "cases": [
            {
                "description": "Allows for an attribute access and assignment API rather than getter and setter method calls. \nCan be used to make an attribute read-only. \nAllows calculations to be lazy. \nProvides a way to maintain the public interface of a class when the internals evolve independently of class users."
            }
        ]
    },
    {
        "title": "2.13.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.13.3 Cons",
        "cases": [
            {
                "description": "Can hide side-effects much like operator overloading. \nCan be confusing for subclasses."
            }
        ]
    },
    {
        "title": "2.13.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.13.4 Decision",
        "cases": [
            {
                "description": "Properties are allowed, but, like operator overloading, should only be used when necessary and match the expectations of typical attribute access; follow the getters and setters rules otherwise.\nFor example, using a property to simply both get and set an internal attribute isn’t allowed: there is no computation occurring, so the property is unnecessary ( make the attribute public instead ). In comparison, using a property to control attribute access or to calculate a trivially derived value is allowed: the logic is simple and unsurprising.\nProperties should be created with the `@property` \ndecorator . Manually implementing a property descriptor is considered a power feature .\nInheritance with properties can be non-obvious. Do not use properties to implement computations a subclass may ever want to override and extend."
            }
        ]
    },
    {
        "title": "2.14 True/False Evaluations",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations",
        "cases": [
            {
                "description": "Use the “implicit” false if at all possible (with a few caveats)."
            }
        ]
    },
    {
        "title": "2.14.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.14.1 Definition",
        "cases": [
            {
                "description": "Python evaluates certain values as `False` when in a boolean context. A quick “rule of thumb” is that all “empty” values are considered false, so `0,None,[],{},''` all evaluate as false in a boolean context."
            }
        ]
    },
    {
        "title": "2.14.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.14.2 Pros",
        "cases": [
            {
                "description": "Conditions using Python booleans are easier to read and less error-prone. In most cases, they’re also faster."
            }
        ]
    },
    {
        "title": "2.14.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.14.3 Cons",
        "cases": [
            {
                "description": "May look strange to C/C++ developers."
            }
        ]
    },
    {
        "title": "2.14.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.14.4 Decision",
        "cases": [
            {
                "description": "Use the “implicit” false if possible, e.g., `iffoo:` rather than `iffoo!=[]:` . There are a few caveats that you should keep in mind though:\nAlways use `iffooisNone:` (or `isnotNone` ) to check for a `None` value. E.g., when testing whether a variable or argument that defaults to `None` was set to some other value. The other value might be a value that’s false in a boolean context! \nNever compare a boolean variable to `False` using `==` . Use `ifnotx:` instead. If you need to distinguish `False` from `None` then chain the expressions, such as `ifnotxandxisnotNone:` . \nFor sequences (strings, lists, tuples), use the fact that empty sequences are false, so `ifseq:` and `ifnotseq:` are preferable to `iflen(seq):` and `ifnotlen(seq):` respectively. \nWhen handling integers, implicit false may involve more risk than benefit (i.e., accidentally handling `None` as 0). You may compare a value which is known to be an integer (and is not the result of `len()` ) against the integer 0.",
                "example": "Yes: if not users:\n         print('no users')\n\n     if i % 10 == 0:\n         self.handle_multiple_of_ten()\n\n     def f(x=None):\n         if x is None:\n             x = []\n\nNo:  if len(users) == 0:\n         print('no users')\n\n     if not i % 10:\n         self.handle_multiple_of_ten()\n\n     def f(x=None):\n         x = x or []\n",
                "appendix": "Note that `'0'` (i.e., `0` as string) evaluates to true. \nNote that Numpy arrays may raise an exception in an implicit boolean context. Prefer the `.size` attribute when testing emptiness of a `np.array` (e.g. `ifnotusers.size` )."
            }
        ]
    },
    {
        "title": "2.16 Lexical Scoping",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping",
        "cases": [
            {
                "description": "Okay to use."
            }
        ]
    },
    {
        "title": "2.16.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.16.1 Definition",
        "cases": [
            {
                "description": "A nested Python function can refer to variables defined in enclosing functions, but cannot assign to them. Variable bindings are resolved using lexical scoping, that is, based on the static program text. Any assignment to a name in a block will cause Python to treat all references to that name as a local variable, even if the use precedes the assignment. If a global declaration occurs, the name is treated as a global variable.\nAn example of the use of this feature is:",
                "example": "def get_adder(summand1: float) -> Callable[[float], float]:\n    \"\"\"Returns a function that adds numbers to a given number.\"\"\"\n    def adder(summand2: float) -> float:\n        return summand1 + summand2\n\n    return adder\n"
            }
        ]
    },
    {
        "title": "2.16.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.16.2 Pros",
        "cases": [
            {
                "description": "Often results in clearer, more elegant code. Especially comforting to experienced Lisp and Scheme (and Haskell and ML and …) programmers."
            }
        ]
    },
    {
        "title": "2.16.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.16.3 Cons",
        "cases": [
            {
                "description": "Can lead to confusing bugs, such as this example based on PEP-0227 :",
                "example": "i = 4\ndef foo(x: Iterable[int]):\n    def bar():\n        print(i, end='')\n    # ...\n    # A bunch of code here\n    # ...\n    for i in x:  # Ah, i *is* local to foo, so this is what bar sees\n        print(i, end='')\n    bar()\n",
                "appendix": "So `foo([1,2,3])` will print `1233` , not `1234` ."
            }
        ]
    },
    {
        "title": "2.16.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.16.4 Decision",
        "cases": [
            {
                "description": "Okay to use."
            }
        ]
    },
    {
        "title": "2.17 Function and Method Decorators",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators",
        "cases": [
            {
                "description": "Use decorators judiciously when there is a clear advantage. Avoid `staticmethod` and limit use of `classmethod` ."
            }
        ]
    },
    {
        "title": "2.17.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.17.1 Definition",
        "cases": [
            {
                "description": "Decorators for Functions and Methods (a.k.a “the `@` notation”). One common decorator is `@property` , used for converting ordinary methods into dynamically computed attributes. However, the decorator syntax allows for user-defined decorators as well. Specifically, for some function `my_decorator` , this:",
                "example": "class C:\n    @my_decorator\n    def method(self):\n        # method body ...\n"
            },
            {
                "description": "is equivalent to:",
                "example": "class C:\n    def method(self):\n        # method body ...\n    method = my_decorator(method)\n"
            }
        ]
    },
    {
        "title": "2.17.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.17.2 Pros",
        "cases": [
            {
                "description": "Elegantly specifies some transformation on a method; the transformation might eliminate some repetitive code, enforce invariants, etc."
            }
        ]
    },
    {
        "title": "2.17.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.17.3 Cons",
        "cases": [
            {
                "description": "Decorators can perform arbitrary operations on a function’s arguments or return values, resulting in surprising implicit behavior. Additionally, decorators execute at object definition time. For module-level objects (classes, module functions, …) this happens at import time. Failures in decorator code are pretty much impossible to recover from."
            }
        ]
    },
    {
        "title": "2.17.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.17.4 Decision",
        "cases": [
            {
                "description": "Use decorators judiciously when there is a clear advantage. Decorators should follow the same import and naming guidelines as functions. Decorator pydoc should clearly state that the function is a decorator. Write unit tests for decorators.\nAvoid external dependencies in the decorator itself (e.g. don’t rely on files, sockets, database connections, etc.), since they might not be available when the decorator runs (at import time, perhaps from `pydoc` or other tools). A decorator that is called with valid parameters should (as much as possible) be guaranteed to succeed in all cases.\nDecorators are a special case of “top-level code” - see main for more discussion.\nNever use `staticmethod` unless forced to in order to integrate with an API defined in an existing library. Write a module-level function instead.\nUse `classmethod` only when writing a named constructor, or a class-specific routine that modifies necessary global state such as a process-wide cache."
            }
        ]
    },
    {
        "title": "2.18 Threading",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.18 Threading",
        "cases": [
            {
                "description": "Do not rely on the atomicity of built-in types.\nWhile Python’s built-in data types such as dictionaries appear to have atomic operations, there are corner cases where they aren’t atomic (e.g. if `__hash__` or `__eq__` are implemented as Python methods) and their atomicity should not be relied upon. Neither should you rely on atomic variable assignment (since this in turn depends on dictionaries).\nUse the `queue` module’s `Queue` data type as the preferred way to communicate data between threads. Otherwise, use the `threading` module and its locking primitives. Prefer condition variables and `threading.Condition` instead of using lower-level locks."
            }
        ]
    },
    {
        "title": "2.19 Power Features",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features",
        "cases": [
            {
                "description": "Avoid these features."
            }
        ]
    },
    {
        "title": "2.19.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.19.1 Definition",
        "cases": [
            {
                "description": "Python is an extremely flexible language and gives you many fancy features such as custom metaclasses, access to bytecode, on-the-fly compilation, dynamic inheritance, object reparenting, import hacks, reflection (e.g. some uses of `getattr()` ), modification of system internals, `__del__` methods implementing customized cleanup, etc."
            }
        ]
    },
    {
        "title": "2.19.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.19.2 Pros",
        "cases": [
            {
                "description": "These are powerful language features. They can make your code more compact."
            }
        ]
    },
    {
        "title": "2.19.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.19.3 Cons",
        "cases": [
            {
                "description": "It’s very tempting to use these “cool” features when they’re not absolutely necessary. It’s harder to read, understand, and debug code that’s using unusual features underneath. It doesn’t seem that way at first (to the original author), but when revisiting the code, it tends to be more difficult than code that is longer but is straightforward."
            }
        ]
    },
    {
        "title": "2.19.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.19.4 Decision",
        "cases": [
            {
                "description": "Avoid these features in your code.\nStandard library modules and classes that internally use these features are okay to use (for example, `abc.ABCMeta` , `dataclasses` , and `enum` )."
            }
        ]
    },
    {
        "title": "2.20 Modern Python: from __future__ imports",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports",
        "cases": [
            {
                "description": "New language version semantic changes may be gated behind a special future import to enable them on a per-file basis within earlier runtimes."
            }
        ]
    },
    {
        "title": "2.20.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.1 Definition",
        "cases": [
            {
                "description": "Being able to turn on some of the more modern features via `from__future__import` statements allows early use of features from expected future Python versions."
            }
        ]
    },
    {
        "title": "2.20.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.2 Pros",
        "cases": [
            {
                "description": "This has proven to make runtime version upgrades smoother as changes can be made on a per-file basis while declaring compatibility and preventing regressions within those files. Modern code is more maintainable as it is less likely to accumulate technical debt that will be problematic during future runtime upgrades."
            }
        ]
    },
    {
        "title": "2.20.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.3 Cons",
        "cases": [
            {
                "description": "Such code may not work on very old interpreter versions prior to the introduction of the needed future statement. The need for this is more common in projects supporting an extremely wide variety of environments."
            }
        ]
    },
    {
        "title": "2.20.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision",
        "cases": []
    },
    {
        "title": "from __future__ imports",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/from __future__ imports",
        "cases": [
            {
                "description": "Use of `from__future__import` statements is encouraged. It allows a given source file to start using more modern Python syntax features today. Once you no longer need to run on a version where the features are hidden behind a `__future__` import, feel free to remove those lines.\nIn code that may execute on versions as old as 3.5 rather than >= 3.7, import:",
                "example": "from __future__ import generator_stop\n",
                "appendix": "For more information read the Python future statement definitions documentation.\nPlease don’t remove these imports until you are confident the code is only ever used in a sufficiently modern environment. Even if you do not currently use the feature a specific future import enables in your code today, keeping it in place in the file prevents later modifications of the code from inadvertently depending on the older behavior.\nUse other `from__future__` import statements as you see fit."
            }
        ]
    },
    {
        "title": "2.21 Type Annotated Code",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/2.21 Type Annotated Code",
        "cases": [
            {
                "description": "You can annotate Python code with type hints according to PEP-484 , and type-check the code at build time with a type checking tool like pytype .\nType annotations can be in the source or in a stub pyi file . Whenever possible, annotations should be in the source. Use pyi files for third-party or extension modules."
            }
        ]
    },
    {
        "title": "2.21.1 Definition",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/2.21 Type Annotated Code/2.21.1 Definition",
        "cases": [
            {
                "description": "Type annotations (or “type hints”) are for function or method arguments and return values:",
                "example": "def func(a: int) -> list[int]:\n"
            },
            {
                "description": "You can also declare the type of a variable using similar PEP-526 syntax:",
                "example": "a: SomeType = some_func()\n"
            }
        ]
    },
    {
        "title": "2.21.2 Pros",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/2.21 Type Annotated Code/2.21.2 Pros",
        "cases": [
            {
                "description": "Type annotations improve the readability and maintainability of your code. The type checker will convert many runtime errors to build-time errors, and reduce your ability to use Power Features ."
            }
        ]
    },
    {
        "title": "2.21.3 Cons",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/2.21 Type Annotated Code/2.21.3 Cons",
        "cases": [
            {
                "description": "You will have to keep the type declarations up to date. You might see type errors that you think are valid code. Use of a type checker may reduce your ability to use Power Features ."
            }
        ]
    },
    {
        "title": "2.21.4 Decision",
        "belongs to": "2 Python Language Rules/2.1 Lint/2.2 Imports/2.2.4 Decision/2.3 Packages/2.4 Exceptions/2.5 Mutable Global State/2.6 Nested/Local/Inner Classes and Functions/2.7 Comprehensions & Generator Expressions/2.8 Default Iterators and Operators/2.9 Generators/2.10 Lambda Functions/2.11 Conditional Expressions/2.12 Default Argument Values/2.13 Properties/2.14 True/False Evaluations/2.16 Lexical Scoping/2.17 Function and Method Decorators/2.19 Power Features/2.20 Modern Python: from __future__ imports/2.20.4 Decision/2.21 Type Annotated Code/2.21.4 Decision",
        "cases": [
            {
                "description": "You are strongly encouraged to enable Python type analysis when updating code. When adding or modifying public APIs, include type annotations and enable checking via pytype in the build system. As static analysis is relatively new to Python, we acknowledge that undesired side-effects (such as wrongly inferred types) may prevent adoption by some projects. In those situations, authors are encouraged to add a comment with a TODO or link to a bug describing the issue(s) currently preventing type annotation adoption in the BUILD file or in the code itself as appropriate."
            }
        ]
    },
    {
        "title": "3 Python Style Rules",
        "belongs to": "3 Python Style Rules",
        "cases": []
    },
    {
        "title": "3.1 Semicolons",
        "belongs to": "3 Python Style Rules/3.1 Semicolons",
        "cases": [
            {
                "description": "Do not terminate your lines with semicolons, and do not use semicolons to put two statements on the same line."
            }
        ]
    },
    {
        "title": "3.2 Line length",
        "belongs to": "3 Python Style Rules/3.2 Line length",
        "cases": [
            {
                "description": "Maximum line length is 80 characters .\nExplicit exceptions to the 80 character limit:\nLong import statements. \nURLs, pathnames, or long flags in comments. \nLong string module-level constants not containing whitespace that would be inconvenient to split across lines such as URLs or pathnames. \nPylint disable comments. (e.g.: `#pylint:disable=invalid-name` )\nDo not use a backslash for explicit line continuation .\nInstead, make use of Python’s implicit line joining inside parentheses, brackets and braces . If necessary, you can add an extra pair of parentheses around an expression.\nNote that this rule doesn’t prohibit backslash-escaped newlines within strings (see below ).",
                "example": "Yes: foo_bar(self, width, height, color='black', design=None, x='foo',\n             emphasis=None, highlight=0)\n\n\nYes: if (width == 0 and height == 0 and\n         color == 'red' and emphasis == 'strong'):\n\n     (bridge_questions.clarification_on\n      .average_airspeed_of.unladen_swallow) = 'African or European?'\n\n     with (\n         very_long_first_expression_function() as spam,\n         very_long_second_expression_function() as beans,\n         third_thing() as eggs,\n     ):\n       place_order(eggs, beans, spam, beans)\n\n\nNo:  if width == 0 and height == 0 and \\\n         color == 'red' and emphasis == 'strong':\n\n     bridge_questions.clarification_on \\\n         .average_airspeed_of.unladen_swallow = 'African or European?'\n\n     with very_long_first_expression_function() as spam, \\\n           very_long_second_expression_function() as beans, \\\n           third_thing() as eggs:\n       place_order(eggs, beans, spam, beans)\n"
            },
            {
                "description": "When a literal string won’t fit on a single line, use parentheses for implicit line joining.",
                "example": "x = ('This will build a very long long '\n     'long long long long long long string')\n"
            },
            {
                "description": "Prefer to break lines at the highest possible syntactic level. If you must break a line twice, break it at the same syntactic level both times.",
                "example": "Yes: bridgekeeper.answer(\n         name=\"Arthur\", quest=questlib.find(owner=\"Arthur\", perilous=True))\n\n     answer = (a_long_line().of_chained_methods()\n               .that_eventually_provides().an_answer())\n\n     if (\n         config is None\n         or 'editor.language' not in config\n         or config['editor.language'].use_spaces is False\n     ):\n       use_tabs()\n\nNo: bridgekeeper.answer(name=\"Arthur\", quest=questlib.find(\n        owner=\"Arthur\", perilous=True))\n\n    answer = a_long_line().of_chained_methods().that_eventually_provides(\n        ).an_answer()\n\n    if (config is None or 'editor.language' not in config or config[\n        'editor.language'].use_spaces is False):\n      use_tabs()\n\n"
            },
            {
                "description": "Within comments, put long URLs on their own line if necessary.",
                "example": "Yes:  # See details at\n      # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html\n\nNo:  # See details at\n     # http://www.example.com/us/developer/documentation/api/content/\\\n     # v2.0/csv_file_name_extension_full_specification.html\n",
                "appendix": "Make note of the indentation of the elements in the line continuation examples above; see the indentation section for explanation.\nIn all other cases where a line exceeds 80 characters, and the Black or Pyink auto-formatter does not help bring the line below the limit, the line is allowed to exceed this maximum. Authors are encouraged to manually break the line up per the notes above when it is sensible."
            }
        ]
    },
    {
        "title": "3.3 Parentheses",
        "belongs to": "3 Python Style Rules/3.3 Parentheses",
        "cases": [
            {
                "description": "Use parentheses sparingly.\nIt is fine, though not required, to use parentheses around tuples. Do not use them in return statements or conditional statements unless using parentheses for implied line continuation or to indicate a tuple.",
                "example": "Yes: if foo:\n         bar()\n     while x:\n         x = bar()\n     if x and y:\n         bar()\n     if not x:\n         bar()\n     # For a 1 item tuple the ()s are more visually obvious than the comma.\n     onesie = (foo,)\n     return foo\n     return spam, beans\n     return (spam, beans)\n     for (x, y) in dict.items(): ...\n\nNo:  if (x):\n         bar()\n     if not(x):\n         bar()\n     return (foo)\n"
            }
        ]
    },
    {
        "title": "3.4 Indentation",
        "belongs to": "3 Python Style Rules/3.4 Indentation",
        "cases": [
            {
                "description": "Indent your code blocks with 4 spaces .\nNever use tabs. Implied line continuation should align wrapped elements vertically (see line length examples ), or use a hanging 4-space indent. Closing (round, square or curly) brackets can be placed at the end of the expression, or on separate lines, but then should be indented the same as the line with the corresponding opening bracket.",
                "example": "Yes:   # Aligned with opening delimiter.\n       foo = long_function_name(var_one, var_two,\n                                var_three, var_four)\n       meal = (spam,\n               beans)\n\n       # Aligned with opening delimiter in a dictionary.\n       foo = {\n           'long_dictionary_key': value1 +\n                                  value2,\n           ...\n       }\n\n       # 4-space hanging indent; nothing on first line.\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four)\n       meal = (\n           spam,\n           beans)\n\n       # 4-space hanging indent; nothing on first line,\n       # closing parenthesis on a new line.\n       foo = long_function_name(\n           var_one, var_two, var_three,\n           var_four\n       )\n       meal = (\n           spam,\n           beans,\n       )\n\n       # 4-space hanging indent in a dictionary.\n       foo = {\n           'long_dictionary_key':\n               long_dictionary_value,\n           ...\n       }\n\nNo:    # Stuff on first line forbidden.\n       foo = long_function_name(var_one, var_two,\n           var_three, var_four)\n       meal = (spam,\n           beans)\n\n       # 2-space hanging indent forbidden.\n       foo = long_function_name(\n         var_one, var_two, var_three,\n         var_four)\n\n       # No hanging indent in a dictionary.\n       foo = {\n           'long_dictionary_key':\n           long_dictionary_value,\n           ...\n       }\n"
            }
        ]
    },
    {
        "title": "3.4.1 Trailing commas in sequences of items?",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.4.1 Trailing commas in sequences of items?",
        "cases": [
            {
                "description": "Trailing commas in sequences of items are recommended only when the closing container token `]` , `)` , or `}` does not appear on the same line as the final element, as well as for tuples with a single element. The presence of a trailing comma is also used as a hint to our Python code auto-formatter Black or Pyink to direct it to auto-format the container of items to one item per line when the `,` after the final element is present.",
                "example": "Yes:   golomb3 = [0, 1, 3]\n       golomb4 = [\n           0,\n           1,\n           4,\n           6,\n       ]\n\nNo:    golomb4 = [\n           0,\n           1,\n           4,\n           6,]\n"
            }
        ]
    },
    {
        "title": "3.5 Blank Lines",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.5 Blank Lines",
        "cases": [
            {
                "description": "Two blank lines between top-level definitions, be they function or class definitions. One blank line between method definitions and between the docstring of a `class` and the first method. No blank line following a `def` line. Use single blank lines as you judge appropriate within functions or methods.\nBlank lines need not be anchored to the definition. For example, related comments immediately preceding function, class, and method definitions can make sense. Consider if your comment might be more useful as part of the docstring."
            }
        ]
    },
    {
        "title": "3.6 Whitespace",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.6 Whitespace",
        "cases": [
            {
                "description": "Follow standard typographic rules for the use of spaces around punctuation.\nNo whitespace inside parentheses, brackets or braces.",
                "example": "Yes: spam(ham[1], {'eggs': 2}, [])\n\nNo:  spam( ham[ 1 ], { 'eggs': 2 }, [ ] )\n"
            },
            {
                "description": "No whitespace before a comma, semicolon, or colon. Do use whitespace after a comma, semicolon, or colon, except at the end of the line.",
                "example": "Yes: if x == 4:\n         print(x, y)\n     x, y = y, x\n\nNo:  if x == 4 :\n         print(x , y)\n     x , y = y , x\n"
            },
            {
                "description": "No whitespace before the open paren/bracket that starts an argument list, indexing or slicing.",
                "example": "Yes: spam(1)\n\nNo:  spam (1)\n\nYes: dict['key'] = list[index]\n\nNo:  dict ['key'] = list [index]\n"
            },
            {
                "description": "No trailing whitespace.\nSurround binary operators with a single space on either side for assignment ( `=` ), comparisons ( `==,<,>,!=,<>,<=,>=,in,notin,is,isnot` ), and Booleans ( `and,or,not` ). Use your better judgment for the insertion of spaces around arithmetic operators ( `+` , `-` , `*` , `/` , `//` , `%` , `**` , `@` ).",
                "example": "Yes: x == 1\n\nNo:  x<1\n"
            },
            {
                "description": "Never use spaces around `=` when passing keyword arguments or defining a default parameter value, with one exception: when a type annotation is present , do use spaces around the `=` for the default parameter value.",
                "example": "Yes: def complex(real, imag=0.0): return Magic(r=real, i=imag)\nYes: def complex(real, imag: float = 0.0): return Magic(r=real, i=imag)\n\nNo:  def complex(real, imag = 0.0): return Magic(r = real, i = imag)\nNo:  def complex(real, imag: float=0.0): return Magic(r = real, i = imag)\n"
            },
            {
                "description": "Don’t use spaces to vertically align tokens on consecutive lines, since it becomes a maintenance burden (applies to `:` , `#` , `=` , etc.):",
                "example": "Yes:\n  foo = 1000  # comment\n  long_name = 2  # comment that should not be aligned\n\n  dictionary = {\n      'foo': 1,\n      'long_name': 2,\n  }\n\nNo:\n  foo       = 1000  # comment\n  long_name = 2     # comment that should not be aligned\n\n  dictionary = {\n      'foo'      : 1,\n      'long_name': 2,\n  }\n"
            }
        ]
    },
    {
        "title": "3.7 Shebang Line",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.7 Shebang Line",
        "cases": [
            {
                "description": "Most `.py` files do not need to start with a `#!` line. Start the main file of a program with `#!/usr/bin/envpython3` (to support virtualenvs) or `#!/usr/bin/python3` per PEP-394 .\nThis line is used by the kernel to find the Python interpreter, but is ignored by Python when importing modules. It is only necessary on a file intended to be executed directly."
            }
        ]
    },
    {
        "title": "3.8 Comments and Docstrings",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings",
        "cases": [
            {
                "description": "Be sure to use the right style for module, function, method docstrings and inline comments."
            }
        ]
    },
    {
        "title": "3.8.1 Docstrings",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.1 Docstrings",
        "cases": [
            {
                "description": "Python uses docstrings to document code. A docstring is a string that is the first statement in a package, module, class or function. These strings can be extracted automatically through the `__doc__` member of the object and are used by `pydoc` . (Try running `pydoc` on your module to see how it looks.) Always use the three-double-quote `\"\"\"` format for docstrings (per PEP 257 ). A docstring should be organized as a summary line (one physical line not exceeding 80 characters) terminated by a period, question mark, or exclamation point. When writing more (encouraged), this must be followed by a blank line, followed by the rest of the docstring starting at the same cursor position as the first quote of the first line. There are more formatting guidelines for docstrings below."
            }
        ]
    },
    {
        "title": "3.8.2 Modules",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules",
        "cases": [
            {
                "description": "Every file should contain license boilerplate. Choose the appropriate boilerplate for the license used by the project (for example, Apache 2.0, BSD, LGPL, GPL).\nFiles should start with a docstring describing the contents and usage of the module.",
                "example": "\"\"\"A one-line summary of the module or program, terminated by a period.\n\nLeave one blank line.  The rest of this docstring should contain an\noverall description of the module or program.  Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\nTypical usage example:\n\n  foo = ClassFoo()\n  bar = foo.FunctionBar()\n\"\"\"\n"
            }
        ]
    },
    {
        "title": "3.8.2.1 Test modules",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.2.1 Test modules",
        "cases": [
            {
                "description": "Module-level docstrings for test files are not required. They should be included only when there is additional information that can be provided.\nExamples include some specifics on how the test should be run, an explanation of an unusual setup pattern, dependency on the external environment, and so on.",
                "example": "\"\"\"This blaze test uses golden files.\n\nYou can update those files by running\n`blaze run //foo/bar:foo_test -- --update_golden_files` from the `google3`\ndirectory.\n\"\"\"\n"
            },
            {
                "description": "Docstrings that do not provide any new information should not be used.",
                "example": "\"\"\"Tests for foo.bar.\"\"\"\n"
            }
        ]
    },
    {
        "title": "3.8.3 Functions and Methods",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods",
        "cases": [
            {
                "description": "In this section, “function” means a method, function, generator, or property.\nA docstring is mandatory for every function that has one or more of the following properties:\nbeing part of the public API \nnontrivial size \nnon-obvious logic\nA docstring should give enough information to write a call to the function without reading the function’s code. The docstring should describe the function’s calling syntax and its semantics, but generally not its implementation details, unless those details are relevant to how the function is to be used. For example, a function that mutates one of its arguments as a side effect should note that in its docstring. Otherwise, subtle but important details of a function’s implementation that are not relevant to the caller are better expressed as comments alongside the code than within the function’s docstring.\nThe docstring may be descriptive-style ( `\"\"\"FetchesrowsfromaBigtable.\"\"\"` ) or imperative-style ( `\"\"\"FetchrowsfromaBigtable.\"\"\"` ), but the style should be consistent within a file. The docstring for a `@property` data descriptor should use the same style as the docstring for an attribute or a function argument ( `\"\"\"TheBigtablepath.\"\"\"` , rather than `\"\"\"ReturnstheBigtablepath.\"\"\"` ).\nCertain aspects of a function should be documented in special sections, listed below. Each section begins with a heading line, which ends with a colon. All sections other than the heading should maintain a hanging indent of two or four spaces (be consistent within a file). These sections can be omitted in cases where the function’s name and signature are informative enough that it can be aptly described using a one-line docstring.\nArgs: \nList each parameter by name. A description should follow the name, and be separated by a colon followed by either a space or newline. If the description is too long to fit on a single 80-character line, use a hanging indent of 2 or 4 spaces more than the parameter name (be consistent with the rest of the docstrings in the file). The description should include required type(s) if the code does not contain a corresponding type annotation. If a function accepts `*foo` (variable length argument lists) and/or `**bar` (arbitrary keyword arguments), they should be listed as `*foo` and `**bar` . \nReturns:\n \n (or\n \n Yields:\n \n for generators) \nDescribe the semantics of the return value, including any type information that the type annotation does not provide. If the function only returns None, this section is not required. It may also be omitted if the docstring starts with “Return”, “Returns”, “Yield”, or “Yields” (e.g. `\"\"\"ReturnsrowfromBigtableasatupleofstrings.\"\"\"` ) and the opening sentence is sufficient to describe the return value. Do not imitate older ‘NumPy style’ ( example ), which frequently documented a tuple return value as if it were multiple return values with individual names (never mentioning the tuple). Instead, describe such a return value as: “Returns: A tuple (mat_a, mat_b), where mat_a is …, and …”. The auxiliary names in the docstring need not necessarily correspond to any internal names used in the function body (as those are not part of the API). If the function uses `yield` (is a generator), the `Yields:` section should document the object returned by `next()` , instead of the generator object itself that the call evaluates to. \nRaises: \nList all exceptions that are relevant to the interface followed by a description. Use a similar exception name + colon + space or newline and hanging indent style as described in Args: . You should not document exceptions that get raised if the API specified in the docstring is violated (because this would paradoxically make behavior under violation of the API part of the API).",
                "example": "def fetch_smalltable_rows(\n    table_handle: smalltable.Table,\n    keys: Sequence[bytes | str],\n    require_all_keys: bool = False,\n) -> Mapping[bytes, tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n        table_handle: An open smalltable.Table instance.\n        keys: A sequence of strings representing the key of each table\n          row to fetch.  String keys will be UTF-8 encoded.\n        require_all_keys: If True only rows with values set for all keys will be\n          returned.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b'Serak': ('Rigel VII', 'Preparer'),\n         b'Zim': ('Irk', 'Invader'),\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        Returned keys are always bytes.  If a key from the keys argument is\n        missing from the dictionary, then that row was not found in the\n        table (and require_all_keys must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the smalltable.\n    \"\"\"\n"
            },
            {
                "description": "Similarly, this variation on `Args:` with a line break is also allowed:",
                "example": "def fetch_smalltable_rows(\n    table_handle: smalltable.Table,\n    keys: Sequence[bytes | str],\n    require_all_keys: bool = False,\n) -> Mapping[bytes, tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n      table_handle:\n        An open smalltable.Table instance.\n      keys:\n        A sequence of strings representing the key of each table row to\n        fetch.  String keys will be UTF-8 encoded.\n      require_all_keys:\n        If True only rows with values set for all keys will be returned.\n\n    Returns:\n      A dict mapping keys to the corresponding table row data\n      fetched. Each row is represented as a tuple of strings. For\n      example:\n\n      {b'Serak': ('Rigel VII', 'Preparer'),\n       b'Zim': ('Irk', 'Invader'),\n       b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n      Returned keys are always bytes.  If a key from the keys argument is\n      missing from the dictionary, then that row was not found in the\n      table (and require_all_keys must have been False).\n\n    Raises:\n      IOError: An error occurred accessing the smalltable.\n    \"\"\"\n"
            }
        ]
    },
    {
        "title": "3.8.3.1 Overridden Methods",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.8.3.1 Overridden Methods",
        "cases": [
            {
                "description": "A method that overrides a method from a base class does not need a docstring if it is explicitly decorated with @override (from `typing_extensions` or `typing` modules), unless the overriding method’s behavior materially refines the base method’s contract, or details need to be provided (e.g., documenting additional side effects), in which case a docstring with at least those differences is required on the overriding method.",
                "example": "from typing_extensions import override\n\nclass Parent:\n  def do_something(self):\n    \"\"\"Parent method, includes docstring.\"\"\"\n\n# Child class, method annotated with override.\nclass Child(Parent):\n  @override\n  def do_something(self):\n    pass\n\n# Child class, but without @override decorator, a docstring is required.\nclass Child(Parent):\n  def do_something(self):\n    pass\n\n# Docstring is trivial, @override is sufficient to indicate that docs can be\n# found in the base class.\nclass Child(Parent):\n  @override\n  def do_something(self):\n    \"\"\"See base class.\"\"\"\n"
            }
        ]
    },
    {
        "title": "3.8.4 Classes",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.8.4 Classes",
        "cases": [
            {
                "description": "Classes should have a docstring below the class definition describing the class. Public attributes, excluding properties , should be documented here in an `Attributes` section and follow the same formatting as a function’s\n \n Args section.",
                "example": "class SampleClass:\n    \"\"\"Summary of class here.\n\n    Longer class information...\n    Longer class information...\n\n    Attributes:\n        likes_spam: A boolean indicating if we like SPAM or not.\n        eggs: An integer count of the eggs we have laid.\n    \"\"\"\n\n    def __init__(self, likes_spam: bool = False):\n        \"\"\"Initializes the instance based on spam preference.\n\n        Args:\n          likes_spam: Defines if instance exhibits this preference.\n        \"\"\"\n        self.likes_spam = likes_spam\n        self.eggs = 0\n\n    @property\n    def butter_sticks(self) -> int:\n        \"\"\"The number of butter sticks we have.\"\"\"\n"
            },
            {
                "description": "All class docstrings should start with a one-line summary that describes what the class instance represents. This implies that subclasses of `Exception` should also describe what the exception represents, and not the context in which it might occur. The class docstring should not repeat unnecessary information, such as that the class is a class.",
                "example": "# Yes:\nclass CheeseShopAddress:\n  \"\"\"The address of a cheese shop.\n\n  ...\n  \"\"\"\n\nclass OutOfCheeseError(Exception):\n  \"\"\"No more cheese is available.\"\"\"\n\n# No:\nclass CheeseShopAddress:\n  \"\"\"Class that describes the address of a cheese shop.\n\n  ...\n  \"\"\"\n\nclass OutOfCheeseError(Exception):\n  \"\"\"Raised when no more cheese is available.\"\"\"\n"
            }
        ]
    },
    {
        "title": "3.8.5 Block and Inline Comments",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.8.5 Block and Inline Comments",
        "cases": [
            {
                "description": "The final place to have comments is in tricky parts of the code. If you’re going to have to explain it at the next code review , you should comment it now. Complicated operations get a few lines of comments before the operations commence. Non-obvious ones get comments at the end of the line.",
                "example": "# We use a weighted dictionary search to find out where i is in\n# the array.  We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\n\nif i & (i-1) == 0:  # True if i is 0 or a power of 2.\n"
            },
            {
                "description": "To improve legibility, these comments should start at least 2 spaces away from the code with the comment character `#` , followed by at least one space before the text of the comment itself.\nOn the other hand, never describe the code. Assume the person reading the code knows Python (though not what you’re trying to do) better than you do.",
                "example": "# BAD COMMENT: Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n"
            }
        ]
    },
    {
        "title": "3.8.6 Punctuation, Spelling, and Grammar",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.8.6 Punctuation, Spelling, and Grammar",
        "cases": [
            {
                "description": "Pay attention to punctuation, spelling, and grammar; it is easier to read well-written comments than badly written ones.\nComments should be as readable as narrative text, with proper capitalization and punctuation. In many cases, complete sentences are more readable than sentence fragments. Shorter comments, such as comments at the end of a line of code, can sometimes be less formal, but you should be consistent with your style.\nAlthough it can be frustrating to have a code reviewer point out that you are using a comma when you should be using a semicolon, it is very important that source code maintain a high level of clarity and readability. Proper punctuation, spelling, and grammar help with that goal."
            }
        ]
    },
    {
        "title": "3.10 Strings",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings",
        "cases": [
            {
                "description": "Use an f-string , the `%` operator, or the `format` method for formatting strings, even when the parameters are all strings. Use your best judgment to decide between string formatting options. A single join with `+` is okay but do not format with `+` .",
                "example": "Yes: x = f'name: {name}; score: {n}'\n     x = '%s, %s!' % (imperative, expletive)\n     x = '{}, {}'.format(first, second)\n     x = 'name: %s; score: %d' % (name, n)\n     x = 'name: %(name)s; score: %(score)d' % {'name':name, 'score':n}\n     x = 'name: {}; score: {}'.format(name, n)\n     x = a + b\n\nNo: x = first + ', ' + second\n    x = 'name: ' + name + '; score: ' + str(n)\n"
            },
            {
                "description": "Avoid using the `+` and `+=` operators to accumulate a string within a loop. In some conditions, accumulating a string with addition can lead to quadratic rather than linear running time. Although common accumulations of this sort may be optimized on CPython, that is an implementation detail. The conditions under which an optimization applies are not easy to predict and may change. Instead, add each substring to a list and `''.join` the list after the loop terminates, or write each substring to an `io.StringIO` buffer. These techniques consistently have amortized-linear run-time complexity.",
                "example": "Yes: items = ['<table>']\n     for last_name, first_name in employee_list:\n         items.append('<tr><td>%s, %s</td></tr>' % (last_name, first_name))\n     items.append('</table>')\n     employee_table = ''.join(items)\n\nNo: employee_table = '<table>'\n    for last_name, first_name in employee_list:\n        employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name)\n    employee_table += '</table>'\n"
            },
            {
                "description": "Be consistent with your choice of string quote character within a file. Pick `'` or `\"` and stick with it. It is okay to use the other quote character on a string to avoid the need to backslash-escape quote characters within the string.",
                "example": "Yes:\n  Python('Why are you hiding your eyes?')\n  Gollum(\"I'm scared of lint errors.\")\n  Narrator('\"Good!\" thought a happy Python reviewer.')\n\nNo:\n  Python(\"Why are you hiding your eyes?\")\n  Gollum('The lint. It burns. It burns us.')\n  Gollum(\"Always the great lint. Watching. Watching.\")\n"
            },
            {
                "description": "Prefer `\"\"\"` for multi-line strings rather than `'''` . Projects may choose to use `'''` for all non-docstring multi-line strings if and only if they also use `'` for regular strings. Docstrings must use `\"\"\"` regardless.\nMulti-line strings do not flow with the indentation of the rest of the program. If you need to avoid embedding extra space in the string, use either concatenated single-line strings or a multi-line string with textwrap.dedent() to remove the initial space on each line:",
                "example": "  No:\n  long_string = \"\"\"This is pretty ugly.\nDon't do this.\n\"\"\"\n\n  Yes:\n  long_string = \"\"\"This is fine if your use case can accept\n      extraneous leading spaces.\"\"\"\n\n  Yes:\n  long_string = (\"And this is fine if you cannot accept\\n\" +\n                 \"extraneous leading spaces.\")\n\n  Yes:\n  long_string = (\"And this too is fine if you cannot accept\\n\"\n                 \"extraneous leading spaces.\")\n\n  Yes:\n  import textwrap\n\n  long_string = textwrap.dedent(\"\"\"\\\n      This is also fine, because textwrap.dedent()\n      will collapse common leading spaces in each line.\"\"\")\n",
                "appendix": "Note that using a backslash here does not violate the prohibition against explicit line continuation ; in this case, the backslash is escaping a newline in a string literal."
            }
        ]
    },
    {
        "title": "3.10.1 Logging",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.10.1 Logging",
        "cases": [
            {
                "description": "For logging functions that expect a pattern-string (with %-placeholders) as their first argument: Always call them with a string literal (not an f-string!) as their first argument with pattern-parameters as subsequent arguments. Some logging implementations collect the unexpanded pattern-string as a queryable field. It also prevents spending time rendering a message that no logger is configured to output.",
                "example": "  Yes:\n  import tensorflow as tf\n  logger = tf.get_logger()\n  logger.info('TensorFlow Version is: %s', tf.__version__)\n\n  Yes:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is: %s', os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error('Cannot write to home directory, $HOME=%r', homedir)\n\n  No:\n  import os\n  from absl import logging\n\n  logging.info('Current $PAGER is:')\n  logging.info(os.getenv('PAGER', default=''))\n\n  homedir = os.getenv('HOME')\n  if homedir is None or not os.access(homedir, os.W_OK):\n    logging.error(f'Cannot write to home directory, $HOME={homedir!r}')\n"
            }
        ]
    },
    {
        "title": "3.10.2 Error Messages",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.10.2 Error Messages",
        "cases": [
            {
                "description": "Error messages (such as: message strings on exceptions like `ValueError` , or messages shown to the user) should follow three guidelines:\nThe message needs to precisely match the actual error condition. \nInterpolated pieces need to always be clearly identifiable as such. \nThey should allow simple automated processing (e.g. grepping).",
                "example": "  Yes:\n  if not 0 <= p <= 1:\n    raise ValueError(f'Not a probability: {p=}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError as error:\n    logging.warning('Could not remove directory (reason: %r): %r',\n                    error, workdir)\n\n  No:\n  if p < 0 or p > 1:  # PROBLEM: also false for float('nan')!\n    raise ValueError(f'Not a probability: {p=}')\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: Message makes an assumption that might not be true:\n    # Deletion might have failed for some other reason, misleading\n    # whoever has to debug this.\n    logging.warning('Directory already was deleted: %s', workdir)\n\n  try:\n    os.rmdir(workdir)\n  except OSError:\n    # PROBLEM: The message is harder to grep for than necessary, and\n    # not universally non-confusing for all possible values of `workdir`.\n    # Imagine someone calling a library function with such code\n    # using a name such as workdir = 'deleted'. The warning would read:\n    # \"The deleted directory could not be deleted.\"\n    logging.warning('The %s directory could not be deleted.', workdir)\n"
            }
        ]
    },
    {
        "title": "3.11 Files, Sockets, and similar Stateful Resources",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.11 Files, Sockets, and similar Stateful Resources",
        "cases": [
            {
                "description": "Explicitly close files and sockets when done with them. This rule naturally extends to closeable resources that internally use sockets, such as database connections, and also other resources that need to be closed down in a similar fashion. To name only a few examples, this also includes mmap mappings, h5py File objects , and matplotlib.pyplot figure windows .\nLeaving files, sockets or other such stateful objects open unnecessarily has many downsides:\nThey may consume limited system resources, such as file descriptors. Code that deals with many such objects may exhaust those resources unnecessarily if they’re not returned to the system promptly after use. \nHolding files open may prevent other actions such as moving or deleting them, or unmounting a filesystem. \nFiles and sockets that are shared throughout a program may inadvertently be read from or written to after logically being closed. If they are actually closed, attempts to read or write from them will raise exceptions, making the problem known sooner.\nFurthermore, while files and sockets (and some similarly behaving resources) are automatically closed when the object is destructed, coupling the lifetime of the object to the state of the resource is poor practice:\nThere are no guarantees as to when the runtime will actually invoke the `__del__` method. Different Python implementations use different memory management techniques, such as delayed garbage collection, which may increase the object’s lifetime arbitrarily and indefinitely. \nUnexpected references to the file, e.g. in globals or exception tracebacks, may keep it around longer than intended.\nRelying on finalizers to do automatic cleanup that has observable side effects has been rediscovered over and over again to lead to major problems, across many decades and multiple languages (see e.g. this article for Java).\nThe preferred way to manage files and similar resources is using the with\n \n statement :",
                "example": "with open(\"hello.txt\") as hello_file:\n    for line in hello_file:\n        print(line)\n"
            },
            {
                "description": "For file-like objects that do not support the `with` statement, use `contextlib.closing()` :",
                "example": "import contextlib\n\nwith contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page:\n    for line in front_page:\n        print(line)\n",
                "appendix": "In rare cases where context-based resource management is infeasible, code documentation must explain clearly how resource lifetime is managed."
            }
        ]
    },
    {
        "title": "3.12 TODO Comments",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.12 TODO Comments",
        "cases": [
            {
                "description": "Use `TODO` comments for code that is temporary, a short-term solution, or good-enough but not perfect.\nA `TODO` comment begins with the word `TODO` in all caps, a following colon, and a link to a resource that contains the context, ideally a bug reference. A bug reference is preferable because bugs are tracked and have follow-up comments. Follow this piece of context with an explanatory string introduced with a hyphen `-` . The purpose is to have a consistent `TODO` format that can be searched to find out how to get more details.",
                "example": "# TODO: crbug.com/192795 - Investigate cpufreq optimizations.\n"
            },
            {
                "description": "Old style, formerly recommended, but discouraged for use in new code:",
                "example": "# TODO(crbug.com/192795): Investigate cpufreq optimizations.\n# TODO(yourusername): Use a \"\\*\" here for concatenation operator.\n"
            },
            {
                "description": "Avoid adding TODOs that refer to an individual or team as the context:",
                "example": "# TODO: @yourusername - File an issue and use a '*' for repetition.\n",
                "appendix": "If your `TODO` is of the form “At a future date do something” make sure that you either include a very specific date (“Fix by November 2009”) or a very specific event (“Remove this code when all clients can handle XML responses.”) that future code maintainers will comprehend. Issues are ideal for tracking this."
            }
        ]
    },
    {
        "title": "3.13 Imports formatting",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.13 Imports formatting",
        "cases": [
            {
                "description": "Imports should be on separate lines; there are exceptions for\n \n typing\n \n and\n \n collections.abc\n \n imports .\nE.g.:",
                "example": "Yes: from collections.abc import Mapping, Sequence\n     import os\n     import sys\n     from typing import Any, NewType\n\nNo:  import os, sys\n"
            },
            {
                "description": "Imports are always put at the top of the file, just after any module comments and docstrings and before module globals and constants. Imports should be grouped from most generic to least generic:\nPython future import statements. For example:",
                "example": "from __future__ import annotations\n"
            },
            {
                "description": "See above for more information about those. \nPython standard library imports. For example:",
                "example": "import sys\n"
            },
            {
                "description": "third-party module or package imports. For example:",
                "example": "import tensorflow as tf\n"
            },
            {
                "description": "Code repository sub-package imports. For example:",
                "example": "from otherproject.ai import mind\n"
            },
            {
                "description": "Deprecated: application-specific imports that are part of the same top-level sub-package as this file. For example:",
                "example": "from myproject.backend.hgwells import time_machine\n",
                "appendix": "You may find older Google Python Style code doing this, but it is no longer required. New code is encouraged not to bother with this. Simply treat application-specific sub-package imports the same as other sub-package imports."
            },
            {
                "description": "Within each grouping, imports should be sorted lexicographically, ignoring case, according to each module’s full package path (the `path` in `frompathimport...` ). Code may optionally place a blank line between import sections.",
                "example": "import collections\nimport queue\nimport sys\n\nfrom absl import app\nfrom absl import flags\nimport bs4\nimport cryptography\nimport tensorflow as tf\n\nfrom book.genres import scifi\nfrom myproject.backend import huxley\nfrom myproject.backend.hgwells import time_machine\nfrom myproject.backend.state_machine import main_loop\nfrom otherproject.ai import body\nfrom otherproject.ai import mind\nfrom otherproject.ai import soul\n\n# Older style code may have these imports down here instead:\n#from myproject.backend.hgwells import time_machine\n#from myproject.backend.state_machine import main_loop\n"
            }
        ]
    },
    {
        "title": "3.14 Statements",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.14 Statements",
        "cases": [
            {
                "description": "Generally only one statement per line.\nHowever, you may put the result of a test on the same line as the test only if the entire statement fits on one line. In particular, you can never do so with `try` / `except` since the `try` and `except` can’t both fit on the same line, and you can only do so with an `if` if there is no `else` .",
                "example": "Yes:\n\n  if foo: bar(foo)\n\nNo:\n\n  if foo: bar(foo)\n  else:   baz(foo)\n\n  try:               bar(foo)\n  except ValueError: baz(foo)\n\n  try:\n      bar(foo)\n  except ValueError: baz(foo)\n"
            }
        ]
    },
    {
        "title": "3.15 Getters and Setters",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.15 Getters and Setters",
        "cases": [
            {
                "description": "Getter and setter functions (also called accessors and mutators) should be used when they provide a meaningful role or behavior for getting or setting a variable’s value.\nIn particular, they should be used when getting or setting the variable is complex or the cost is significant, either currently or in a reasonable future.\nIf, for example, a pair of getters/setters simply read and write an internal attribute, the internal attribute should be made public instead. By comparison, if setting a variable means some state is invalidated or rebuilt, it should be a setter function. The function invocation hints that a potentially non-trivial operation is occurring. Alternatively, properties may be an option when simple logic is needed, or refactoring to no longer need getters and setters.\nGetters and setters should follow the Naming guidelines, such as `get_foo()` and `set_foo()` .\nIf the past behavior allowed access through a property, do not bind the new getter/setter functions to the property. Any code still attempting to access the variable by the old method should break visibly so they are made aware of the change in complexity."
            }
        ]
    },
    {
        "title": "3.16 Naming",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming",
        "cases": [
            {
                "description": "`module_name` , `package_name` , `ClassName` , `method_name` , `ExceptionName` , `function_name` , `GLOBAL_CONSTANT_NAME` , `global_var_name` , `instance_var_name` , `function_parameter_name` , `local_var_name` , `query_proper_noun_for_thing` , `send_acronym_via_https` .\nFunction names, variable names, and filenames should be descriptive; avoid abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word.\nAlways use a `.py` filename extension. Never use dashes."
            }
        ]
    },
    {
        "title": "3.16.1 Names to Avoid",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.16.1 Names to Avoid",
        "cases": [
            {
                "description": "single character names, except for specifically allowed cases: \ncounters or iterators (e.g. `i` , `j` , `k` , `v` , et al.) \n`e` as an exception identifier in `try/except` statements. \n`f` as a file handle in `with` statements \nprivate type variables with no constraints (e.g. `_T=TypeVar(\"_T\")` , `_P=ParamSpec(\"_P\")` ) \nPlease be mindful not to abuse single-character naming. Generally speaking, descriptiveness should be proportional to the name’s scope of visibility. For example, `i` might be a fine name for 5-line code block but within multiple nested scopes, it is likely too vague. \ndashes ( `-` ) in any package/module name \n`__double_leading_and_trailing_underscore__` names (reserved by Python) \noffensive terms \nnames that needlessly include the type of the variable (for example: `id_to_name_dict` )"
            }
        ]
    },
    {
        "title": "3.16.2 Naming Conventions",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.16.2 Naming Conventions",
        "cases": [
            {
                "description": "“Internal” means internal to a module, or protected or private within a class. \nPrepending a single underscore ( `_` ) has some support for protecting module variables and functions (linters will flag protected member access). Note that it is okay for unit tests to access protected constants from the modules under test. \nPrepending a double underscore ( `__` aka “dunder”) to an instance variable or method effectively makes the variable or method private to its class (using name mangling); we discourage its use as it impacts readability and testability, and isn’t really private. Prefer a single underscore. \nPlace related classes and top-level functions together in a module. Unlike Java, there is no need to limit yourself to one class per module. \nUse CapWords for class names, but lower_with_under.py for module names. Although there are some old modules named CapWords.py, this is now discouraged because it’s confusing when the module happens to be named after a class. (“wait – did I write `importStringIO` or `fromStringIOimportStringIO` ?”) \nNew unit test files follow PEP 8 compliant lower_with_under method names, for example, `test_<method_under_test>_<state>` . For consistency(*) with legacy modules that follow CapWords function names, underscores may appear in method names starting with `test` to separate logical components of the name. One possible pattern is `test<MethodUnderTest>_<state>` ."
            }
        ]
    },
    {
        "title": "3.16.3 File Naming",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.16.3 File Naming",
        "cases": [
            {
                "description": "Python filenames must have a `.py` extension and must not contain dashes ( `-` ). This allows them to be imported and unittested. If you want an executable to be accessible without the extension, use a symbolic link or a simple bash wrapper containing `exec\"$0.py\"\"$@\"` ."
            }
        ]
    },
    {
        "title": "3.16.4 Guidelines derived from Guido ’s Recommendations",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.16.4 Guidelines derived from Guido ’s Recommendations",
        "cases": [
            {
                "description": "Type \nPublic \nInternal \nPackages \n`lower_with_under` \nModules \n`lower_with_under` \n`_lower_with_under` \nClasses \n`CapWords` \n`_CapWords` \nExceptions \n`CapWords` \nFunctions \n`lower_with_under()` \n`_lower_with_under()` \nGlobal/Class Constants \n`CAPS_WITH_UNDER` \n`_CAPS_WITH_UNDER` \nGlobal/Class Variables \n`lower_with_under` \n`_lower_with_under` \nInstance Variables \n`lower_with_under` \n`_lower_with_under` (protected) \nMethod Names \n`lower_with_under()` \n`_lower_with_under()` (protected) \nFunction/Method Parameters \n`lower_with_under` \nLocal Variables \n`lower_with_under`"
            }
        ]
    },
    {
        "title": "3.16.5 Mathematical Notation",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.16.5 Mathematical Notation",
        "cases": [
            {
                "description": "For mathematically heavy code, short variable names that would otherwise violate the style guide are preferred when they match established notation in a reference paper or algorithm. When doing so, reference the source of all naming conventions in a comment or docstring or, if the source is not accessible, clearly document the naming conventions. Prefer PEP8-compliant `descriptive_names` for public APIs, which are much more likely to be encountered out of context."
            }
        ]
    },
    {
        "title": "3.17 Main",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.17 Main",
        "cases": [
            {
                "description": "In Python, `pydoc` as well as unit tests require modules to be importable. If a file is meant to be used as an executable, its main functionality should be in a `main()` function, and your code should always check `if__name__=='__main__'` before executing your main program, so that it is not executed when the module is imported.\nWhen using absl , use `app.run` :",
                "example": "from absl import app\n...\n\ndef main(argv: Sequence[str]):\n    # process non-flag arguments\n    ...\n\nif __name__ == '__main__':\n    app.run(main)\n"
            },
            {
                "description": "Otherwise, use:",
                "example": "def main():\n    ...\n\nif __name__ == '__main__':\n    main()\n",
                "appendix": "All code at the top level will be executed when the module is imported. Be careful not to call functions, create objects, or perform other operations that should not be executed when the file is being `pydoc` ed."
            }
        ]
    },
    {
        "title": "3.18 Function length",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.18 Function length",
        "cases": [
            {
                "description": "Prefer small and focused functions.\nWe recognize that long functions are sometimes appropriate, so no hard limit is placed on function length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.\nEven if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code.\nYou could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces."
            }
        ]
    },
    {
        "title": "3.19 Type Annotations",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations",
        "cases": []
    },
    {
        "title": "3.19.1 General Rules",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.1 General Rules",
        "cases": [
            {
                "description": "Familiarize yourself with PEP-484 . \nAnnotating `self` or `cls` is generally not necessary. Self can be used if it is necessary for proper type information, e.g.",
                "example": "from typing import Self\n\nclass BaseClass:\n  @classmethod\n  def create(cls) -> Self:\n    ...\n\n  def difference(self, other: Self) -> float:\n    ...\n",
                "appendix": "Similarly, don’t feel compelled to annotate the return value of `__init__` (where `None` is the only valid option). \nIf any other variable or a returned type should not be expressed, use `Any` . \nYou are not required to annotate all the functions in a module. \nAt least annotate your public APIs. \nUse judgment to get to a good balance between safety and clarity on the one hand, and flexibility on the other. \nAnnotate code that is prone to type-related errors (previous bugs or complexity). \nAnnotate code that is hard to understand. \nAnnotate code as it becomes stable from a types perspective. In many cases, you can annotate all the functions in mature code without losing too much flexibility."
            }
        ]
    },
    {
        "title": "3.19.2 Line Breaking",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.2 Line Breaking",
        "cases": [
            {
                "description": "Try to follow the existing indentation rules.\nAfter annotating, many function signatures will become “one parameter per line”. To ensure the return type is also given its own line, a comma can be placed after the last parameter.",
                "example": "def my_method(\n    self,\n    first_var: int,\n    second_var: Foo,\n    third_var: Bar | None,\n) -> int:\n  ...\n"
            },
            {
                "description": "Always prefer breaking between variables, and not, for example, between variable names and type annotations. However, if everything fits on the same line, go for it.",
                "example": "def my_method(self, first_var: int) -> int:\n  ...\n"
            },
            {
                "description": "If the combination of the function name, the last parameter, and the return type is too long, indent by 4 in a new line. When using line breaks, prefer putting each parameter and the return type on their own lines and aligning the closing parenthesis with the `def` :",
                "example": "Yes:\ndef my_method(\n    self,\n    other_arg: MyLongType | None,\n) -> tuple[MyLongType1, MyLongType1]:\n  ...\n"
            },
            {
                "description": "Optionally, the return type may be put on the same line as the last parameter:",
                "example": "Okay:\ndef my_method(\n    self,\n    first_var: int,\n    second_var: int) -> dict[OtherLongType, MyLongType]:\n  ...\n"
            },
            {
                "description": "`pylint` allows you to move the closing parenthesis to a new line and align with the opening one, but this is less readable.",
                "example": "No:\ndef my_method(self,\n              other_arg: MyLongType | None,\n             ) -> dict[OtherLongType, MyLongType]:\n  ...\n"
            },
            {
                "description": "As in the examples above, prefer not to break types. However, sometimes they are too long to be on a single line (try to keep sub-types unbroken).",
                "example": "def my_method(\n    self,\n    first_var: tuple[list[MyLongType1],\n                     list[MyLongType2]],\n    second_var: list[dict[\n        MyLongType3, MyLongType4]],\n) -> None:\n  ...\n"
            },
            {
                "description": "If a single name and type is too long, consider using an alias for the type. The last resort is to break after the colon and indent by 4.",
                "example": "Yes:\ndef my_function(\n    long_variable_name:\n        long_module_name.LongTypeName,\n) -> None:\n  ...\n\nNo:\ndef my_function(\n    long_variable_name: long_module_name.\n        LongTypeName,\n) -> None:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.3 Forward Declarations",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.3 Forward Declarations",
        "cases": [
            {
                "description": "If you need to use a class name (from the same module) that is not yet defined – for example, if you need the class name inside the declaration of that class, or if you use a class that is defined later in the code – either use `from__future__importannotations` or use a string for the class name.",
                "example": "Yes:\nfrom __future__ import annotations\n\nclass MyClass:\n  def __init__(self, stack: Sequence[MyClass], item: OtherClass) -> None:\n\nclass OtherClass:\n  ...\n\nYes:\nclass MyClass:\n  def __init__(self, stack: Sequence['MyClass'], item: 'OtherClass') -> None:\n\nclass OtherClass:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.4 Default Values",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.4 Default Values",
        "cases": [
            {
                "description": "As per PEP-008 , use spaces around the `=` \nonly for arguments that have both a type annotation and a default value.",
                "example": "Yes:\ndef func(a: int = 0) -> int:\n  ...\n\nNo:\ndef func(a:int=0) -> int:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.5 NoneType",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.5 NoneType",
        "cases": [
            {
                "description": "In the Python type system, `NoneType` is a “first class” type, and for typing purposes, `None` is an alias for `NoneType` . If an argument can be `None` , it has to be declared! You can use `|` union type expressions (recommended in new Python 3.10+ code), or the older `Optional` and `Union` syntaxes.\nUse explicit `X|None` instead of implicit. Earlier versions of PEP 484 allowed `a:str=None` to be interpreted as `a:str|None=None` , but that is no longer the preferred behavior.",
                "example": "Yes:\ndef modern_or_union(a: str | int | None, b: str | None = None) -> str:\n  ...\ndef union_optional(a: Union[str, int, None], b: Optional[str] = None) -> str:\n  ...\n\nNo:\ndef nullable_union(a: Union[None, str]) -> str:\n  ...\ndef implicit_optional(a: str = None) -> str:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.6 Type Aliases",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.6 Type Aliases",
        "cases": [
            {
                "description": "You can declare aliases of complex types. The name of an alias should be CapWorded. If the alias is used only in this module, it should be _Private.\nNote that the `:TypeAlias` annotation is only supported in versions 3.10+.",
                "example": "from typing import TypeAlias\n\n_LossAndGradient: TypeAlias = tuple[tf.Tensor, tf.Tensor]\nComplexTFMap: TypeAlias = Mapping[str, _LossAndGradient]\n"
            }
        ]
    },
    {
        "title": "3.19.7 Ignoring Types",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.7 Ignoring Types",
        "cases": [
            {
                "description": "You can disable type checking on a line with the special comment `#type:ignore` .\n`pytype` has a disable option for specific errors (similar to lint):",
                "example": "# pytype: disable=attribute-error\n"
            }
        ]
    },
    {
        "title": "3.19.8 Typing Variables",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.8 Typing Variables",
        "cases": [
            {
                "description": "Annotated Assignments \nIf an internal variable has a type that is hard or impossible to infer, specify its type with an annotated assignment - use a colon and type between the variable name and value (the same as is done with function arguments that have a default value):",
                "example": "a: Foo = SomeUndecoratedFunction()\n"
            },
            {
                "description": "Type Comments \nThough you may see them remaining in the codebase (they were necessary before Python 3.6), do not add any more uses of a `#type:<typename>` comment on the end of the line:",
                "example": "a = SomeUndecoratedFunction()  # type: Foo\n"
            }
        ]
    },
    {
        "title": "3.19.9 Tuples vs Lists",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.9 Tuples vs Lists",
        "cases": [
            {
                "description": "Typed lists can only contain objects of a single type. Typed tuples can either have a single repeated type or a set number of elements with different types. The latter is commonly used as the return type from a function.",
                "example": "a: list[int] = [1, 2, 3]\nb: tuple[int, ...] = (1, 2, 3)\nc: tuple[int, str, float] = (1, \"2\", 3.5)\n"
            }
        ]
    },
    {
        "title": "3.19.10 Type variables",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.10 Type variables",
        "cases": [
            {
                "description": "The Python type system has generics . A type variable, such as `TypeVar` and `ParamSpec` , is a common way to use them.\nExample:",
                "example": "from collections.abc import Callable\nfrom typing import ParamSpec, TypeVar\n_P = ParamSpec(\"_P\")\n_T = TypeVar(\"_T\")\n...\ndef next(l: list[_T]) -> _T:\n  return l.pop()\n\ndef print_when_called(f: Callable[_P, _T]) -> Callable[_P, _T]:\n  def inner(*args: _P.args, **kwargs: _P.kwargs) -> _T:\n    print(\"Function was called\")\n    return f(*args, **kwargs)\n  return inner\n"
            },
            {
                "description": "A `TypeVar` can be constrained:",
                "example": "AddableType = TypeVar(\"AddableType\", int, float, str)\ndef add(a: AddableType, b: AddableType) -> AddableType:\n  return a + b\n"
            },
            {
                "description": "A common predefined type variable in the `typing` module is `AnyStr` . Use it for multiple annotations that can be `bytes` or `str` and must all be the same type.",
                "example": "from typing import AnyStr\ndef check_length(x: AnyStr) -> AnyStr:\n  if len(x) <= 42:\n    return x\n  raise ValueError()\n"
            },
            {
                "description": "A type variable must have a descriptive name, unless it meets all of the following criteria:\nnot externally visible \nnot constrained",
                "example": "Yes:\n  _T = TypeVar(\"_T\")\n  _P = ParamSpec(\"_P\")\n  AddableType = TypeVar(\"AddableType\", int, float, str)\n  AnyFunction = TypeVar(\"AnyFunction\", bound=Callable)\n\nNo:\n  T = TypeVar(\"T\")\n  P = ParamSpec(\"P\")\n  _T = TypeVar(\"_T\", int, float, str)\n  _F = TypeVar(\"_F\", bound=Callable)\n"
            }
        ]
    },
    {
        "title": "3.19.11 String types",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.11 String types",
        "cases": [
            {
                "description": "Do not use `typing.Text` in new code. It’s only for Python 2/3 compatibility.\nUse `str` for string/text data. For code that deals with binary data, use `bytes` .",
                "example": "def deals_with_text_data(x: str) -> str:\n  ...\ndef deals_with_binary_data(x: bytes) -> bytes:\n  ...\n",
                "appendix": "If all the string types of a function are always the same, for example if the return type is the same as the argument type in the code above, use AnyStr ."
            }
        ]
    },
    {
        "title": "3.19.12 Imports For Typing",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.12 Imports For Typing",
        "cases": [
            {
                "description": "For symbols (including types, functions, and constants) from the `typing` or `collections.abc` modules used to support static analysis and type checking, always import the symbol itself. This keeps common annotations more concise and matches typing practices used around the world. You are explicitly allowed to import multiple specific symbols on one line from the `typing` and `collections.abc` modules. For example:",
                "example": "from collections.abc import Mapping, Sequence\nfrom typing import Any, Generic, cast, TYPE_CHECKING\n"
            },
            {
                "description": "Given that this way of importing adds items to the local namespace, names in `typing` or `collections.abc` should be treated similarly to keywords, and not be defined in your Python code, typed or not. If there is a collision between a type and an existing name in a module, import it using `importxasy` .",
                "example": "from typing import Any as AnyType\n"
            },
            {
                "description": "Prefer to use built-in types as annotations where available. Python supports type annotations using parametric container types via PEP-585 , introduced in Python 3.9.",
                "example": "def generate_foo_scores(foo: set[str]) -> list[float]:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.13 Conditional Imports",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.13 Conditional Imports",
        "cases": [
            {
                "description": "Use conditional imports only in exceptional cases where the additional imports needed for type checking must be avoided at runtime. This pattern is discouraged; alternatives such as refactoring the code to allow top-level imports should be preferred.\nImports that are needed only for type annotations can be placed within an `ifTYPE_CHECKING:` block.\nConditionally imported types need to be referenced as strings, to be forward compatible with Python 3.6 where the annotation expressions are actually evaluated. \nOnly entities that are used solely for typing should be defined here; this includes aliases. Otherwise it will be a runtime error, as the module will not be imported at runtime. \nThe block should be right after all the normal imports. \nThere should be no empty lines in the typing imports list. \nSort this list as if it were a regular imports list.",
                "example": "import typing\nif typing.TYPE_CHECKING:\n  import sketch\ndef f(x: \"sketch.Sketch\"): ...\n"
            }
        ]
    },
    {
        "title": "3.19.14 Circular Dependencies",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.14 Circular Dependencies",
        "cases": [
            {
                "description": "Circular dependencies that are caused by typing are code smells. Such code is a good candidate for refactoring. Although technically it is possible to keep circular dependencies, various build systems will not let you do so because each module has to depend on the other.\nReplace modules that create circular dependency imports with `Any` . Set an alias with a meaningful name, and use the real type name from this module (any attribute of `Any` is `Any` ). Alias definitions should be separated from the last import by one line.",
                "example": "from typing import Any\n\nsome_mod = Any  # some_mod.py imports this module.\n...\n\ndef my_method(self, var: \"some_mod.SomeType\") -> None:\n  ...\n"
            }
        ]
    },
    {
        "title": "3.19.15 Generics",
        "belongs to": "3 Python Style Rules/3.4 Indentation/3.8 Comments and Docstrings/3.8.2 Modules/3.8.3 Functions and Methods/3.10 Strings/3.16 Naming/3.19 Type Annotations/3.19.15 Generics",
        "cases": [
            {
                "description": "When annotating, prefer to specify type parameters for generic types; otherwise, the generics’ parameters will be assumed to be\n \n Any .",
                "example": "# Yes:\ndef get_names(employee_ids: Sequence[int]) -> Mapping[int, str]:\n  ...\n\n# No:\n# This is interpreted as get_names(employee_ids: Sequence[Any]) -> Mapping[Any, Any]\ndef get_names(employee_ids: Sequence) -> Mapping:\n  ...\n"
            },
            {
                "description": "If the best type parameter for a generic is `Any` , make it explicit, but remember that in many cases TypeVar might be more appropriate:",
                "example": "# No:\ndef get_names(employee_ids: Sequence[Any]) -> Mapping[Any, str]:\n  \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"\n\n# Yes:\n_T = TypeVar('_T')\ndef get_names(employee_ids: Sequence[_T]) -> Mapping[_T, str]:\n  \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"\n"
            }
        ]
    },
    {
        "title": "4 Parting Words",
        "belongs to": "4 Parting Words",
        "cases": [
            {
                "description": "BE CONSISTENT .\nIf you’re editing code, take a few minutes to look at the code around you and determine its style. If they use `_idx` suffixes in index variable names, you should too. If their comments have little boxes of hash marks around them, make your comments have little boxes of hash marks around them too.\nThe point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you’re saying rather than on how you’re saying it. We present global style rules here so people know the vocabulary, but local style is also important. If code you add to a file looks drastically different from the existing code around it, it throws readers out of their rhythm when they go to read it.\nHowever, there are limits to consistency. It applies more heavily locally and on choices unspecified by the global style. Consistency should not generally be used as a justification to do things in an old style without considering the benefits of the new style, or the tendency of the codebase to converge on newer styles over time.\nThis site is open source. Improve this page ."
            }
        ]
    }
]