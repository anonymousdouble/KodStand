[
    {
        "title": "Background",
        "belongs to": "Background",
        "cases": [
            {
                "description": "C++ is one of the main development languages used by\nmany of Google's open-source projects. As every C++\nprogrammer knows, the language has many powerful features, but\nthis power brings with it complexity, which in turn can make\ncode more bug-prone and harder to read and maintain.\nThe goal of this guide is to manage this complexity by\ndescribing in detail the dos and don'ts of writing C++\ncode. These rules exist to\nkeep the code base manageable while still allowing\ncoders to use C++ language features productively.\nStyle , also known as readability, is what we call\nthe conventions that govern our C++ code. The term Style is a\nbit of a misnomer, since these conventions cover far more than\njust source file formatting.\nMost open-source projects developed by\nGoogle conform to the requirements in this guide.\nNote that this guide is not a C++ tutorial: we assume that\nthe reader is familiar with the language."
            }
        ]
    },
    {
        "title": "Goals of the Style Guide",
        "belongs to": "Background/Goals of the Style Guide",
        "cases": [
            {
                "description": "Why do we have this document?\nThere are a few core goals that we believe this guide should\nserve. These are the fundamental why s that\nunderlie all of the individual rules. By bringing these ideas to\nthe fore, we hope to ground discussions and make it clearer to our\nbroader community why the rules are in place and why particular\ndecisions have been made. If you understand what goals each rule is\nserving, it should be clearer to everyone when a rule may be waived\n(some can be), and what sort of argument or alternative would be\nnecessary to change a rule in the guide.\nThe goals of the style guide as we currently see them are as follows:\nStyle rules should pull their weight \nThe benefit of a style rule\nmust be large enough to justify asking all of our engineers to\nremember it. The benefit is measured relative to the codebase we would\nget without the rule, so a rule against a very harmful practice may\nstill have a small benefit if people are unlikely to do it\nanyway. This principle mostly explains the rules we don’t have, rather\nthan the rules we do: for example, `goto`contravenes many\nof the following principles, but is already vanishingly rare, so the Style\nGuide doesn’t discuss it. \nOptimize for the reader, not the writer \nOur codebase (and most individual components submitted to it) is\nexpected to continue for quite some time. As a result, more time will\nbe spent reading most of our code than writing it. We explicitly\nchoose to optimize for the experience of our average software engineer\nreading, maintaining, and debugging code in our codebase rather than\nease when writing said code. \"Leave a trace for the reader\" is a\nparticularly common sub-point of this principle: When something\nsurprising or unusual is happening in a snippet of code (for example,\ntransfer of pointer ownership), leaving textual hints for the reader\nat the point of use is valuable ( `std::unique_ptr`demonstrates the ownership transfer unambiguously at the call\nsite). \nBe consistent with existing code \nUsing one style consistently through our codebase lets us focus on\nother (more important) issues. Consistency also allows for automation:\ntools that format your code or adjust your `#include`s only\nwork properly when your code is consistent with the expectations of\nthe tooling. In many cases, rules that are attributed to \"Be\nConsistent\" boil down to \"Just pick one and stop worrying about it\";\nthe potential value of allowing flexibility on these points is\noutweighed by the cost of having people argue over them. However,\nthere are limits to consistency; it is a good tie breaker when there\nis no clear technical argument, nor a long-term direction. It applies\nmore heavily locally (per file, or for a tightly-related set of\ninterfaces). Consistency should not generally be used as a\njustification to do things in an old style without considering the\nbenefits of the new style, or the tendency of the codebase to converge\non newer styles over time. \nBe consistent with the broader C++ community when appropriate \nConsistency with the way other organizations use C++ has value for\nthe same reasons as consistency within our code base. If a feature in\nthe C++ standard solves a problem, or if some idiom is widely known\nand accepted, that's an argument for using it. However, sometimes\nstandard features and idioms are flawed, or were just designed without\nour codebase's needs in mind. In those cases (as described below) it's\nappropriate to constrain or ban standard features. In some cases we\nprefer a homegrown or third-party library over a library defined in\nthe C++ Standard, either out of perceived superiority or insufficient\nvalue to transition the codebase to the standard interface. \nAvoid surprising or dangerous constructs \nC++ has features that are more surprising or dangerous than one\nmight think at a glance. Some style guide restrictions are in place to\nprevent falling into these pitfalls. There is a high bar for style\nguide waivers on such restrictions, because waiving such rules often\ndirectly risks compromising program correctness. \nAvoid constructs that our average C++ programmer would find tricky\nor hard to maintain \nC++ has features that may not be generally appropriate because of\nthe complexity they introduce to the code. In widely used\ncode, it may be more acceptable to use\ntrickier language constructs, because any benefits of more complex\nimplementation are multiplied widely by usage, and the cost in understanding\nthe complexity does not need to be paid again when working with new\nportions of the codebase. When in doubt, waivers to rules of this type\ncan be sought by asking\nyour project leads. This is specifically\nimportant for our codebase because code ownership and team membership\nchanges over time: even if everyone that works with some piece of code\ncurrently understands it, such understanding is not guaranteed to hold a\nfew years from now. \nBe mindful of our scale \nWith a codebase of 100+ million lines and thousands of engineers,\nsome mistakes and simplifications for one engineer can become costly\nfor many. For instance it's particularly important to\navoid polluting the global namespace: name collisions across a\ncodebase of hundreds of millions of lines are difficult to work with\nand hard to avoid if everyone puts things into the global\nnamespace. \nConcede to optimization when necessary \nPerformance optimizations can sometimes be necessary and\nappropriate, even when they conflict with the other principles of this\ndocument.\nThe intent of this document is to provide maximal guidance with\nreasonable restriction. As always, common sense and good taste should\nprevail. By this we specifically refer to the established conventions\nof the entire Google C++ community, not just your personal preferences\nor those of your team. Be skeptical about and reluctant to use\nclever or unusual constructs: the absence of a prohibition is not the\nsame as a license to proceed. Use your judgment, and if you are\nunsure, please don't hesitate to ask your project leads to get additional\ninput."
            }
        ]
    },
    {
        "title": "C++ Version",
        "belongs to": "C++ Version",
        "cases": [
            {
                "description": "Currently, code should target C++20, i.e., should not use C++23\nfeatures. The C++ version targeted by this guide will advance\n(aggressively) over time.\nDo not use non-standard extensions .\nConsider portability to other environments before using features\nfrom C++17 and C++20 in your project."
            }
        ]
    },
    {
        "title": "Header Files",
        "belongs to": "Header Files",
        "cases": [
            {
                "description": "In general, every `.cc`file should have an\nassociated `.h`file. There are some common\nexceptions, such as unit tests and small `.cc`files containing\njust a `main()`function.\nCorrect use of header files can make a huge difference to\nthe readability, size and performance of your code.\nThe following rules will guide you through the various\npitfalls of using header files."
            }
        ]
    },
    {
        "title": "Self-contained Headers",
        "belongs to": "Header Files/Self-contained Headers",
        "cases": [
            {
                "description": "Header files should be self-contained (compile on their own) and\nend in `.h`. Non-header files that are meant for inclusion\nshould end in `.inc`and be used sparingly.\nAll header files should be self-contained. Users and refactoring\ntools should not have to adhere to special conditions to include the\nheader. Specifically, a header should\nhave header guards and include all\nother headers it needs.\nWhen a header declares inline functions or templates that clients of the\nheader will instantiate, the inline functions and templates must also have\ndefinitions in the header, either directly or in files it includes. Do not move\nthese definitions to separately included header ( `-inl.h`) files;\nthis practice was common in the past, but is no longer allowed. When all\ninstantiations of a template occur in one `.cc`file, either because\nthey're explicit or because the definition is accessible to only\nthe `.cc`file, the template definition can be kept in that file.\nThere are rare cases where a file designed to be included is not\nself-contained. These are typically intended to be included at unusual\nlocations, such as the middle of another file. They might not\nuse header guards , and might not include\ntheir prerequisites. Name such files with the `.inc`extension. Use sparingly, and prefer self-contained headers when\npossible."
            }
        ]
    },
    {
        "title": "The #define Guard",
        "belongs to": "Header Files/The #define Guard",
        "cases": [
            {
                "description": "All header files should have `#define`guards to\nprevent multiple inclusion. The format of the symbol name\nshould be `<PROJECT>_<PATH>_<FILE>_H_`.\nTo guarantee uniqueness, they should\nbe based on the full path in a project's source tree. For\nexample, the file `foo/src/bar/baz.h`in\nproject `foo`should have the following\nguard:",
                "example": "#ifndef FOO_BAR_BAZ_H_\n#define FOO_BAR_BAZ_H_\n\n...\n\n#endif  // FOO_BAR_BAZ_H_\n"
            }
        ]
    },
    {
        "title": "Include What You Use",
        "belongs to": "Header Files/Include What You Use",
        "cases": [
            {
                "description": "If a source or header file refers to a symbol defined elsewhere,\nthe file should directly include a header file which properly intends\nto provide a declaration or definition of that symbol. It should not\ninclude header files for any other reason.\nDo not rely on transitive inclusions. This allows people to remove\nno-longer-needed `#include`statements from their headers without\nbreaking clients. This also applies to related headers\n- `foo.cc`should include `bar.h`if it uses a\nsymbol from it even if `foo.h`includes `bar.h`."
            }
        ]
    },
    {
        "title": "Forward Declarations",
        "belongs to": "Header Files/Forward Declarations",
        "cases": [
            {
                "description": "Avoid using forward declarations where possible.\nInstead, include the headers you need .\nA \"forward declaration\" is a declaration of an entity\nwithout an associated definition.",
                "example": "// In a C++ source file:\nclass B;\nvoid FuncInB();\nextern int variable_in_b;\nABSL_DECLARE_FLAG(flag_in_b);\n"
            },
            {
                "description": "Forward declarations can save compile time, as `#include`s force the compiler to open\nmore files and process more input. \nForward declarations can save on unnecessary\nrecompilation. `#include`s can force\nyour code to be recompiled more often, due to unrelated\nchanges in the header.\nForward declarations can hide a dependency, allowing\nuser code to skip necessary recompilation when headers\nchange. \nA forward declaration as opposed to an `#include`statement\nmakes it difficult for automatic tooling to discover the module\ndefining the symbol. \nA forward declaration may be broken by subsequent\nchanges to the library. Forward declarations of functions\nand templates can prevent the header owners from making\notherwise-compatible changes to their APIs, such as\nwidening a parameter type, adding a template parameter\nwith a default value, or migrating to a new namespace. \nForward declaring symbols from namespace `std::`yields undefined behavior. \nIt can be difficult to determine whether a forward\ndeclaration or a full `#include`is needed.\nReplacing an `#include`with a forward\ndeclaration can silently change the meaning of\ncode:",
                "example": "// b.h:\nstruct B {};\nstruct D : B {};\n\n// good_user.cc:\n#include \"b.h\"\nvoid f(B*);\nvoid f(void*);\nvoid test(D* x) { f(x); }  // Calls f(B*)\n",
                "appendix": "If the `#include`was replaced with forward\ndecls for `B`and `D`, `test()`would call `f(void*)`. \nForward declaring multiple symbols from a header\ncan be more verbose than simply `#include`ing the header. \nStructuring code to enable forward declarations\n(e.g., using pointer members instead of object members)\ncan make the code slower and more complex."
            },
            {
                "description": "Try to avoid forward declarations of entities\ndefined in another project."
            }
        ]
    },
    {
        "title": "Inline Functions",
        "belongs to": "Header Files/Inline Functions",
        "cases": [
            {
                "description": "Define functions inline only when they are small, say, 10\nlines or fewer.\nYou can declare functions in a way that allows the compiler to expand\nthem inline rather than calling them through the usual\nfunction call mechanism.\nInlining a function can generate more efficient object\ncode, as long as the inlined function is small. Feel free\nto inline accessors and mutators, and other short,\nperformance-critical functions.\nOveruse of inlining can actually make programs slower.\nDepending on a function's size, inlining it can cause the\ncode size to increase or decrease. Inlining a very small\naccessor function will usually decrease code size while\ninlining a very large function can dramatically increase\ncode size. On modern processors smaller code usually runs\nfaster due to better use of the instruction cache.\nA decent rule of thumb is to not inline a function if\nit is more than 10 lines long. Beware of destructors,\nwhich are often longer than they appear because of\nimplicit member- and base-destructor calls!\nAnother useful rule of thumb: it's typically not cost\neffective to inline functions with loops or switch\nstatements (unless, in the common case, the loop or\nswitch statement is never executed).\nIt is important to know that functions are not always\ninlined even if they are declared as such; for example,\nvirtual and recursive functions are not normally inlined.\nUsually recursive functions should not be inline. The\nmain reason for making a virtual function inline is to\nplace its definition in the class, either for convenience\nor to document its behavior, e.g., for accessors and\nmutators."
            }
        ]
    },
    {
        "title": "Names and Order of Includes",
        "belongs to": "Header Files/Names and Order of Includes",
        "cases": [
            {
                "description": "Include headers in the following order: Related header, C system headers,\nC++ standard library headers,\nother libraries' headers, your project's\nheaders.\nAll of a project's header files should be\nlisted as descendants of the project's source\ndirectory without use of UNIX directory aliases `.`(the current directory) or `..`(the parent directory). For example, `google-awesome-project/src/base/logging.h`should be included as:",
                "example": "#include \"base/logging.h\"\n"
            },
            {
                "description": "Headers should only be included using an angle-bracketed path if the library\nrequires you to do so. In particular, the following headers require angle\nbrackets:\nC and C++ standard library headers (e.g. `<stdlib.h>`and `<string>`). \nPOSIX, Linux, and Windows system headers (e.g. `<unistd.h>`and `<windows.h>`). \nIn rare cases, third_party libraries (e.g. `<Python.h>`).\nIn `dir/foo.cc`or `dir/foo_test.cc`, whose main\npurpose is to implement or test the stuff in `dir2/foo2.h`, order your includes\nas follows:\n`dir2/foo2.h`. \nA blank line \nC system headers, and any other headers in angle brackets with the `.h`extension, e.g., `<unistd.h>`, `<stdlib.h>`, `<Python.h>`. \nA blank line \nC++ standard library headers (without file extension), e.g., `<algorithm>`, `<cstddef>`. \nA blank line \n\nOther libraries' `.h`files. \nA blank line \n\nYour project's `.h`files.\nSeparate each non-empty group with one blank line.\nWith the preferred ordering, if the related header `dir2/foo2.h`omits any necessary\nincludes, the build of `dir/foo.cc`or `dir/foo_test.cc`will break.\nThus, this rule ensures that build breaks show up first\nfor the people working on these files, not for innocent\npeople in other packages.\n`dir/foo.cc`and `dir2/foo2.h`are usually in the same\ndirectory (e.g., `base/basictypes_test.cc`and `base/basictypes.h`), but may sometimes be in different\ndirectories too.\nNote that the C headers such as `stddef.h`are essentially interchangeable with their C++ counterparts\n( `cstddef`).\nEither style is acceptable, but prefer consistency with existing code.\nWithin each section the includes should be ordered\nalphabetically. Note that older code might not conform to\nthis rule and should be fixed when convenient.\nFor example, the includes in `google-awesome-project/src/foo/internal/fooserver.cc`might look like this:",
                "example": "#include \"foo/server/fooserver.h\"\n\n#include <sys/types.h>\n#include <unistd.h>\n\n#include <string>\n#include <vector>\n\n#include \"base/basictypes.h\"\n#include \"foo/server/bar.h\"\n#include \"third_party/absl/flags/flag.h\"\n"
            },
            {
                "description": "Exception:\nSometimes, system-specific code needs\nconditional includes. Such code can put conditional\nincludes after other includes. Of course, keep your\nsystem-specific code small and localized. Example:",
                "example": "#include \"foo/public/fooserver.h\"\n\n#include \"base/port.h\"  // For LANG_CXX11.\n\n#ifdef LANG_CXX11\n#include <initializer_list>\n#endif  // LANG_CXX11\n"
            }
        ]
    },
    {
        "title": "Scoping",
        "belongs to": "Scoping",
        "cases": []
    },
    {
        "title": "Namespaces",
        "belongs to": "Scoping/Namespaces",
        "cases": [
            {
                "description": "With few exceptions, place code in a namespace. Namespaces\nshould have unique names based on the project name, and possibly\nits path. Do not use using-directives (e.g., `usingnamespacefoo`). Do not use\ninline namespaces. For unnamed namespaces, see Internal Linkage .\nNamespaces subdivide the global scope\ninto distinct, named scopes, and so are useful for preventing\nname collisions in the global scope.\nNamespaces provide a method for preventing name conflicts\nin large programs while allowing most code to use reasonably\nshort names.\nFor example, if two different projects have a class `Foo`in the global scope, these symbols may\ncollide at compile time or at runtime. If each project\nplaces their code in a namespace, `project1::Foo`and `project2::Foo`are now distinct symbols that\ndo not collide, and code within each project's namespace\ncan continue to refer to `Foo`without the prefix.\nInline namespaces automatically place their names in\nthe enclosing scope. Consider the following snippet, for\nexample:",
                "example": "namespace outer {\ninline namespace inner {\n  void foo();\n}  // namespace inner\n}  // namespace outer\n"
            },
            {
                "description": "The expressions `outer::inner::foo()`and `outer::foo()`are interchangeable. Inline\nnamespaces are primarily intended for ABI compatibility\nacross versions.\nNamespaces can be confusing, because they complicate\nthe mechanics of figuring out what definition a name refers\nto.\nInline namespaces, in particular, can be confusing\nbecause names aren't actually restricted to the namespace\nwhere they are declared. They are only useful as part of\nsome larger versioning policy.\nIn some contexts, it's necessary to repeatedly refer to\nsymbols by their fully-qualified names. For deeply-nested\nnamespaces, this can add a lot of clutter.\nNamespaces should be used as follows:\nFollow the rules on Namespace Names . \nTerminate multi-line namespaces with comments as shown in the given examples. \n\nNamespaces wrap the entire source file after\nincludes, gflags definitions/declarations\nand forward declarations of classes from other namespaces.",
                "example": "// In the .h file\nnamespace mynamespace {\n\n// All declarations are within the namespace scope.\n// Notice the lack of indentation.\nclass MyClass {\n public:\n  ...\n  void Foo();\n};\n\n}  // namespace mynamespace\n\n// In the .cc file\nnamespace mynamespace {\n\n// Definition of functions is within scope of the namespace.\nvoid MyClass::Foo() {\n  ...\n}\n\n}  // namespace mynamespace\n"
            },
            {
                "description": "More complex `.cc`files might have additional details,\nlike flags or using-declarations.",
                "example": "#include \"a.h\"\n\nABSL_FLAG(bool, someflag, false, \"a flag\");\n\nnamespace mynamespace {\n\nusing ::foo::Bar;\n\n...code for mynamespace...    // Code goes against the left margin.\n\n}  // namespace mynamespace\n"
            },
            {
                "description": "To place generated protocol\nmessage code in a namespace, use the `package`specifier in the `.proto`file. See Protocol Buffer Packages for details. \nDo not declare anything in namespace `std`, including forward declarations of\nstandard library classes. Declaring entities in\nnamespace `std`is undefined behavior, i.e.,\nnot portable. To declare entities from the standard\nlibrary, include the appropriate header file. \n\nYou may not use a using-directive to make all names from a namespace available.",
                "example": "// Forbidden -- This pollutes the namespace.\nusing namespace foo;\n"
            },
            {
                "description": "Do not use Namespace aliases at namespace scope\nin header files except in explicitly marked\ninternal-only namespaces, because anything imported into a namespace\nin a header file becomes part of the public\nAPI exported by that file.",
                "example": "// Shorten access to some commonly used names in .cc files.\nnamespace baz = ::foo::bar::baz;\n\n// Shorten access to some commonly used names (in a .h file).\nnamespace librarian {\nnamespace internal {  // Internal, not part of the API.\nnamespace sidetable = ::pipeline_diagnostics::sidetable;\n}  // namespace internal\n\ninline void my_inline_function() {\n  // namespace alias local to a function (or method).\n  namespace baz = ::foo::bar::baz;\n  ...\n}\n}  // namespace librarian\n"
            },
            {
                "description": "Do not use inline namespaces. \n\nUse namespaces with \"internal\" in the name to document parts of an API that\nshould not be mentioned by users of the API.",
                "example": "// We shouldn't use this internal name in non-absl code.\nusing ::absl::container_internal::ImplementationDetail;\n",
                "appendix": "Single-line nested namespace declarations\n\nare preferred in new code, but are not required."
            }
        ]
    },
    {
        "title": "Internal Linkage",
        "belongs to": "Scoping/Internal Linkage",
        "cases": [
            {
                "description": "When definitions in a `.cc`file do not need to be\nreferenced outside that file, give them internal linkage by placing\nthem in an unnamed namespace or declaring them `static`.\nDo not use either of these constructs in `.h`files.\nAll declarations can be given internal linkage by placing them in unnamed\nnamespaces. Functions and variables can also be given internal linkage by\ndeclaring them `static`. This means that anything you're declaring\ncan't be accessed from another file. If a different file declares something with\nthe same name, then the two entities are completely independent.\nUse of internal linkage in `.cc`files is encouraged\nfor all code that does not need to be referenced elsewhere.\nDo not use internal linkage in `.h`files.\nFormat unnamed namespaces like named namespaces. In the\nterminating comment, leave the namespace name empty:",
                "example": "namespace {\n...\n}  // namespace\n"
            }
        ]
    },
    {
        "title": "Nonmember, Static Member, and Global Functions",
        "belongs to": "Scoping/Nonmember, Static Member, and Global Functions",
        "cases": [
            {
                "description": "Prefer placing nonmember functions in a namespace; use completely global\nfunctions rarely. Do not use a class simply to group static members. Static\nmethods of a class should generally be closely related to instances of the\nclass or the class's static data.\nNonmember and static member functions can be useful in\nsome situations. Putting nonmember functions in a\nnamespace avoids polluting the global namespace.\nNonmember and static member functions may make more sense\nas members of a new class, especially if they access\nexternal resources or have significant dependencies.\nSometimes it is useful to define a\nfunction not bound to a class instance. Such a function\ncan be either a static member or a nonmember function.\nNonmember functions should not depend on external\nvariables, and should nearly always exist in a namespace.\nDo not create classes only to group static members;\nthis is no different than just giving the names a\ncommon prefix, and such grouping is usually unnecessary anyway.\nIf you define a nonmember function and it is only\nneeded in its `.cc`file, use internal linkage to limit\nits scope."
            }
        ]
    },
    {
        "title": "Local Variables",
        "belongs to": "Scoping/Local Variables",
        "cases": [
            {
                "description": "Place a function's variables in the narrowest scope\npossible, and initialize variables in the declaration.\nC++ allows you to declare variables anywhere in a function.\nWe encourage you to declare them in a scope as local as\npossible, and as close to the first use as possible.\nThis makes it easier for the reader to find the\ndeclaration and see what type the variable is and what it\nwas initialized to. In particular, initialization should\nbe used instead of declaration and assignment, e.g.,:",
                "example": "int i;\ni = f();      // Bad -- initialization separate from declaration.\n\nint i = f();  // Good -- declaration has initialization.\n\nint jobs = NumJobs();\n// More code...\nf(jobs);      // Bad -- declaration separate from use.\n\nint jobs = NumJobs();\nf(jobs);      // Good -- declaration immediately (or closely) followed by use.\n\nstd::vector<int> v;\nv.push_back(1);  // Prefer initializing using brace initialization.\nv.push_back(2);\n\nstd::vector<int> v = {1, 2};  // Good -- v starts initialized.\n"
            },
            {
                "description": "Variables needed for `if`, `while`and `for`statements should normally be declared\nwithin those statements, so that such variables are confined\nto those scopes. E.g.:",
                "example": "while (const char* p = strchr(str, '/')) str = p + 1;\n"
            },
            {
                "description": "There is one caveat: if the variable is an object, its\nconstructor is invoked every time it enters scope and is\ncreated, and its destructor is invoked every time it goes\nout of scope.",
                "example": "// Inefficient implementation:\nfor (int i = 0; i < 1000000; ++i) {\n  Foo f;  // My ctor and dtor get called 1000000 times each.\n  f.DoSomething(i);\n}\n"
            },
            {
                "description": "It may be more efficient to declare such a variable\nused in a loop outside that loop:",
                "example": "Foo f;  // My ctor and dtor get called once each.\nfor (int i = 0; i < 1000000; ++i) {\n  f.DoSomething(i);\n}\n"
            }
        ]
    },
    {
        "title": "Static and Global Variables",
        "belongs to": "Scoping/Static and Global Variables",
        "cases": [
            {
                "description": "Objects with static storage duration are forbidden unless they are trivially\ndestructible . Informally this means that the destructor does not do\nanything, even taking member and base destructors into account. More formally it\nmeans that the type has no user-defined or virtual destructor and that all bases\nand non-static members are trivially destructible.\nStatic function-local variables may use dynamic initialization.\nUse of dynamic initialization for static class member variables or variables at\nnamespace scope is discouraged, but allowed in limited circumstances; see below\nfor details.\nAs a rule of thumb: a global variable satisfies these requirements if its\ndeclaration, considered in isolation, could be `constexpr`.\nEvery object has a storage duration , which correlates with its\nlifetime. Objects with static storage duration live from the point of their\ninitialization until the end of the program. Such objects appear as variables at\nnamespace scope (\"global variables\"), as static data members of classes, or as\nfunction-local variables that are declared with the `static`specifier. Function-local static variables are initialized when control first\npasses through their declaration; all other objects with static storage duration\nare initialized as part of program start-up. All objects with static storage\nduration are destroyed at program exit (which happens before unjoined threads\nare terminated).\nInitialization may be dynamic , which means that something\nnon-trivial happens during initialization. (For example, consider a constructor\nthat allocates memory, or a variable that is initialized with the current\nprocess ID.) The other kind of initialization is static initialization. The two aren't quite opposites, though: static\ninitialization always happens to objects with static storage duration\n(initializing the object either to a given constant or to a representation\nconsisting of all bytes set to zero), whereas dynamic initialization happens\nafter that, if required.\nGlobal and static variables are very useful for a large number of\napplications: named constants, auxiliary data structures internal to some\ntranslation unit, command-line flags, logging, registration mechanisms,\nbackground infrastructure, etc.\nGlobal and static variables that use dynamic initialization or have\nnon-trivial destructors create complexity that can easily lead to hard-to-find\nbugs. Dynamic initialization is not ordered across translation units, and\nneither is destruction (except that destruction\nhappens in reverse order of initialization). When one initialization refers to\nanother variable with static storage duration, it is possible that this causes\nan object to be accessed before its lifetime has begun (or after its lifetime\nhas ended). Moreover, when a program starts threads that are not joined at exit,\nthose threads may attempt to access objects after their lifetime has ended if\ntheir destructor has already run."
            }
        ]
    },
    {
        "title": "Decision on destruction",
        "belongs to": "Scoping/Static and Global Variables/Decision on destruction",
        "cases": [
            {
                "description": "When destructors are trivial, their execution is not subject to ordering at\nall (they are effectively not \"run\"); otherwise we are exposed to the risk of\naccessing objects after the end of their lifetime. Therefore, we only allow\nobjects with static storage duration if they are trivially destructible.\nFundamental types (like pointers and `int`) are trivially\ndestructible, as are arrays of trivially destructible types. Note that\nvariables marked with `constexpr`are trivially destructible.",
                "example": "const int kNum = 10;  // Allowed\n\nstruct X { int n; };\nconst X kX[] = {{1}, {2}, {3}};  // Allowed\n\nvoid foo() {\n  static const char* const kMessages[] = {\"hello\", \"world\"};  // Allowed\n}\n\n// Allowed: constexpr guarantees trivial destructor.\nconstexpr std::array<int, 3> kArray = {1, 2, 3};\n// bad: non-trivial destructor\nconst std::string kFoo = \"foo\";\n\n// Bad for the same reason, even though kBar is a reference (the\n// rule also applies to lifetime-extended temporary objects).\nconst std::string& kBar = StrCat(\"a\", \"b\", \"c\");\n\nvoid bar() {\n  // Bad: non-trivial destructor.\n  static std::map<int, int> kData = {{1, 0}, {2, 0}, {3, 0}};\n}"
            },
            {
                "description": "Note that references are not objects, and thus they are not subject to the\nconstraints on destructibility. The constraint on dynamic initialization still\napplies, though. In particular, a function-local static reference of the form `staticT&t=*newT;`is allowed."
            }
        ]
    },
    {
        "title": "Decision on initialization",
        "belongs to": "Scoping/Static and Global Variables/Decision on initialization",
        "cases": [
            {
                "description": "Initialization is a more complex topic. This is because we must not only\nconsider whether class constructors execute, but we must also consider the\nevaluation of the initializer:",
                "example": "int n = 5;    // Fine\nint m = f();  // ? (Depends on f)\nFoo x;        // ? (Depends on Foo::Foo)\nBar y = g();  // ? (Depends on g and on Bar::Bar)\n"
            },
            {
                "description": "All but the first statement expose us to indeterminate initialization\nordering.\nThe concept we are looking for is called constant initialization in\nthe formal language of the C++ standard. It means that the initializing\nexpression is a constant expression, and if the object is initialized by a\nconstructor call, then the constructor must be specified as `constexpr`, too:",
                "example": "struct Foo { constexpr Foo(int) {} };\n\nint n = 5;  // Fine, 5 is a constant expression.\nFoo x(2);   // Fine, 2 is a constant expression and the chosen constructor is constexpr.\nFoo a[] = { Foo(1), Foo(2), Foo(3) };  // Fine"
            },
            {
                "description": "Constant initialization is always allowed. Constant initialization of\nstatic storage duration variables should be marked with `constexpr`or `constinit`.\nAny non-local static storage\nduration variable that is not so marked should be presumed to have\ndynamic initialization, and reviewed very carefully.\nBy contrast, the following initializations are problematic:",
                "example": "// Some declarations used below.\ntime_t time(time_t*);      // Not constexpr!\nint f();                   // Not constexpr!\nstruct Bar { Bar() {} };\n\n// Problematic initializations.\ntime_t m = time(nullptr);  // Initializing expression not a constant expression.\nFoo y(f());                // Ditto\nBar b;                     // Chosen constructor Bar::Bar() not constexpr."
            },
            {
                "description": "Dynamic initialization of nonlocal variables is discouraged, and in general\nit is forbidden. However, we do permit it if no aspect of the program depends\non the sequencing of this initialization with respect to all other\ninitializations. Under those restrictions, the ordering of the initialization\ndoes not make an observable difference. For example:",
                "example": "int p = getpid();  // Allowed, as long as no other static variable\n                   // uses p in its own initialization."
            },
            {
                "description": "Dynamic initialization of static local variables is allowed (and common)."
            }
        ]
    },
    {
        "title": "Common patterns",
        "belongs to": "Scoping/Static and Global Variables/Common patterns",
        "cases": [
            {
                "description": "Global strings: if you require a named global or static string constant,\nconsider using a `constexpr`variable of `string_view`, character array, or character pointer, pointing\nto a string literal. String literals have static storage duration already\nand are usually sufficient.\nSee TotW #140. \n\nMaps, sets, and other dynamic containers: if you require a static, fixed\ncollection, such as a set to search against or a lookup table, you cannot\nuse the dynamic containers from the standard library as a static variable,\nsince they have non-trivial destructors. Instead, consider\n\n\na simple array of trivial types, e.g., an array of arrays of ints (for a \"map from int to\nint\"), or an array of pairs (e.g., pairs of `int`and `constchar*`). For small collections, linear search is entirely sufficient\n(and efficient, due to memory locality); consider using the facilities from absl/algorithm/container.h for the standard operations. If necessary, keep the collection in sorted\norder and use a binary search algorithm.\n\nIf you do really prefer a dynamic container from the standard library, consider using\na function-local static pointer, as described below\n. \nSmart pointers ( `std::unique_ptr`, `std::shared_ptr`): smart\npointers execute cleanup during destruction and are therefore forbidden.\nConsider whether your use case fits into one of the other patterns described\nin this section. One simple solution is to use a plain pointer to a\ndynamically allocated object and never delete it (see last item). \nStatic variables of custom types: if you require static, constant data of\na type that you need to define yourself, give the type a trivial destructor\nand a `constexpr`constructor. \nIf all else fails, you can create an object dynamically and never delete\nit by using a function-local static pointer or reference (e.g., `staticconstauto&impl=*newT(args...);`)."
            }
        ]
    },
    {
        "title": "thread_local Variables",
        "belongs to": "Scoping/Static and Global Variables/thread_local Variables",
        "cases": [
            {
                "description": "`thread_local`variables that aren't declared inside a function\nmust be initialized with a true compile-time constant,\nand this must be enforced by using the \n`constinit`\nattribute. Prefer `thread_local`over other ways of defining thread-local data.\nVariables can be declared with the `thread_local`specifier:",
                "example": "thread_local Foo foo = ...;\n"
            },
            {
                "description": "Such a variable is actually a collection of objects, so that when different\nthreads access it, they are actually accessing different objects. `thread_local`variables are much like static storage duration variables in many respects. For instance, they can be declared at namespace scope,\ninside functions, or as static class members, but not as ordinary class\nmembers.\n`thread_local`variable instances are initialized much like\nstatic variables, except that they must be initialized separately for each\nthread, rather than once at program startup. This means that `thread_local`variables declared within a function are safe, but\nother `thread_local`variables are subject to the same\ninitialization-order issues as static variables (and more besides).\n`thread_local`variables have a subtle destruction-order issue:\nduring thread shutdown, `thread_local`variables will be destroyed\nin the opposite order of their initialization (as is generally true in C++).\nIf code triggered by the destructor of any `thread_local`variable\nrefers to any already-destroyed `thread_local`on that thread, we will\nget a particularly hard to diagnose use-after-free.\nThread-local data is inherently safe from races (because only one thread\ncan ordinarily access it), which makes `thread_local`useful for\nconcurrent programming. \n\n`thread_local`is the only standard-supported way of creating\nthread-local data.\nAccessing a `thread_local`variable may trigger execution of\nan unpredictable and uncontrollable amount of other code during thread-start or\nfirst use on a given thread. \n\n`thread_local`variables are effectively global variables,\nand have all the drawbacks of global variables other than lack of\nthread-safety. \nThe memory consumed by a `thread_local`variable scales with\nthe number of running threads (in the worst case), which can be quite large\nin a program. \nData members cannot be `thread_local`unless they are also `static`. \nWe may suffer from use-after-free bugs if `thread_local`variables\nhave complex destructors. In particular, the destructor of any such variable must not\ncall any code (transitively) that refers to any potentially-destroyed `thread_local`. This property is hard to enforce. \nApproaches for avoiding use-after-free in global/static contexts do not work for `thread_local`s. Specifically, skipping destructors for globals and static\nvariables is allowable because their lifetimes end at program shutdown. Thus, any \"leak\"\nis managed immediately by the OS cleaning up our memory and other resources. By\ncontrast, skipping destructors for `thread_local`variables leads to resource\nleaks proportional to the total number of threads that terminate during the lifetime of\nthe program.\n`thread_local`variables at class or namespace scope must be\ninitialized with a true compile-time constant (i.e., they must have no\ndynamic initialization). To enforce this, `thread_local`variables\nat class or namespace scope must be annotated with \n`constinit`\n(or `constexpr`, but that should be rare):",
                "example": "   constinit thread_local Foo foo = ...;\n  "
            },
            {
                "description": "`thread_local`variables inside a function have no initialization\nconcerns, but still risk use-after-free during thread exit. Note that you can use\na function-scope `thread_local`to simulate a class- or\nnamespace-scope `thread_local`by defining a function or\nstatic method that exposes it:",
                "example": "Foo& MyThreadLocalFoo() {\n  thread_local Foo result = ComplicatedInitialization();\n  return result;\n}\n"
            },
            {
                "description": "Note that `thread_local`variables will be destroyed whenever a thread exits.\nIf the destructor of any such variable refers to any other (potentially-destroyed) `thread_local`we will suffer from hard to diagnose use-after-free bugs.\nPrefer trivial types, or types that provably run no user-provided code at destruction to\nminimize the potential of accessing any other `thread_local`.\n`thread_local`should be preferred over other mechanisms for\ndefining thread-local data."
            }
        ]
    },
    {
        "title": "Classes",
        "belongs to": "Classes",
        "cases": [
            {
                "description": "Classes are the fundamental unit of code in C++. Naturally,\nwe use them extensively. This section lists the main dos and\ndon'ts you should follow when writing a class."
            }
        ]
    },
    {
        "title": "Doing Work in Constructors",
        "belongs to": "Classes/Doing Work in Constructors",
        "cases": [
            {
                "description": "Avoid virtual method calls in constructors, and avoid\ninitialization that can fail if you can't signal an error.\nIt is possible to perform arbitrary initialization in the body\nof the constructor.\nNo need to worry about whether the class has been initialized or\nnot. \nObjects that are fully initialized by constructor call can\nbe `const`and may also be easier to use with standard containers\nor algorithms.\nIf the work calls virtual functions, these calls\nwill not get dispatched to the subclass\nimplementations. Future modification to your class can\nquietly introduce this problem even if your class is\nnot currently subclassed, causing much confusion. \nThere is no easy way for constructors to signal errors, short of\ncrashing the program (not always appropriate) or using exceptions\n(which are forbidden ). \nIf the work fails, we now have an object whose initialization\ncode failed, so it may be an unusual state requiring a `boolIsValid()`state checking mechanism (or similar) which is easy\nto forget to call. \nYou cannot take the address of a constructor, so whatever work\nis done in the constructor cannot easily be handed off to, for\nexample, another thread.\nConstructors should never call virtual functions. If appropriate\nfor your code ,\nterminating the program may be an appropriate error handling\nresponse. Otherwise, consider a factory function\nor `Init()`method as described in TotW #42 .\nAvoid `Init()`methods on objects with\nno other states that affect which public methods may be called\n(semi-constructed objects of this form are particularly hard to work\nwith correctly)."
            }
        ]
    },
    {
        "title": "Implicit Conversions",
        "belongs to": "Classes/Implicit Conversions",
        "cases": [
            {
                "description": "Do not define implicit conversions. Use the `explicit`keyword for conversion operators and single-argument\nconstructors.\nImplicit conversions allow an\nobject of one type (called the source type ) to\nbe used where a different type (called the destination\ntype ) is expected, such as when passing an `int`argument to a function that takes a `double`parameter.\nIn addition to the implicit conversions defined by the language,\nusers can define their own, by adding appropriate members to the\nclass definition of the source or destination type. An implicit\nconversion in the source type is defined by a type conversion operator\nnamed after the destination type (e.g., `operatorbool()`). An implicit conversion in the destination\ntype is defined by a constructor that can take the source type as\nits only argument (or only argument with no default value).\nThe `explicit`keyword can be applied to a constructor\nor a conversion operator, to ensure that it can only be\nused when the destination type is explicit at the point of use,\ne.g., with a cast. This applies not only to implicit conversions, but to\nlist initialization syntax:",
                "example": "class Foo {\n  explicit Foo(int x, double y);\n  ...\n};\n\nvoid Func(Foo f);\n\nFunc({42, 3.14});  // Error\n"
            },
            {
                "description": "This kind of code isn't technically an implicit conversion, but the\nlanguage treats it as one as far as `explicit`is concerned.\nImplicit conversions can make a type more usable and\nexpressive by eliminating the need to explicitly name a type\nwhen it's obvious. \nImplicit conversions can be a simpler alternative to\noverloading, such as when a single\nfunction with a `string_view`parameter takes the\nplace of separate overloads for `std::string`and `constchar*`. \nList initialization syntax is a concise and expressive\nway of initializing objects.\nImplicit conversions can hide type-mismatch bugs, where the\ndestination type does not match the user's expectation, or\nthe user is unaware that any conversion will take place. \nImplicit conversions can make code harder to read, particularly\nin the presence of overloading, by making it less obvious what\ncode is actually getting called. \nConstructors that take a single argument may accidentally\nbe usable as implicit type conversions, even if they are not\nintended to do so. \nWhen a single-argument constructor is not marked `explicit`, there's no reliable way to tell whether\nit's intended to define an implicit conversion, or the author\nsimply forgot to mark it. \nImplicit conversions can lead to call-site ambiguities, especially\nwhen there are bidirectional implicit conversions. This can be caused\neither by having two types that both provide an implicit conversion,\nor by a single type that has both an implicit constructor and an\nimplicit type conversion operator. \nList initialization can suffer from the same problems if\nthe destination type is implicit, particularly if the\nlist has only a single element.\nType conversion operators, and constructors that are\ncallable with a single argument, must be marked `explicit`in the class definition. As an\nexception, copy and move constructors should not be `explicit`, since they do not perform type\nconversion.\nImplicit conversions can sometimes be necessary and appropriate for\ntypes that are designed to be interchangeable, for example when objects\nof two types are just different representations of the same underlying\nvalue. In that case, contact\nyour project leads to request a waiver\nof this rule.\nConstructors that cannot be called with a single argument\nmay omit `explicit`. Constructors that\ntake a single `std::initializer_list`parameter should\nalso omit `explicit`, in order to support copy-initialization\n(e.g., `MyTypem={1,2};`)."
            }
        ]
    },
    {
        "title": "Copyable and Movable Types",
        "belongs to": "Classes/Copyable and Movable Types",
        "cases": [
            {
                "description": "A class's public API must make clear whether the class is copyable,\nmove-only, or neither copyable nor movable. Support copying and/or\nmoving if these operations are clear and meaningful for your type.\nA movable type is one that can be initialized and assigned\nfrom temporaries.\nA copyable type is one that can be initialized or assigned from\nany other object of the same type (so is also movable by definition), with the\nstipulation that the value of the source does not change. `std::unique_ptr<int>`is an example of a movable but not\ncopyable type (since the value of the source `std::unique_ptr<int>`must be modified during assignment to\nthe destination). `int`and `std::string`are examples of\nmovable types that are also copyable. (For `int`, the move and copy\noperations are the same; for `std::string`, there exists a move operation\nthat is less expensive than a copy.)\nFor user-defined types, the copy behavior is defined by the copy\nconstructor and the copy-assignment operator. Move behavior is defined by the\nmove constructor and the move-assignment operator, if they exist, or by the\ncopy constructor and the copy-assignment operator otherwise.\nThe copy/move constructors can be implicitly invoked by the compiler\nin some situations, e.g., when passing objects by value.\nObjects of copyable and movable types can be passed and returned by value,\nwhich makes APIs simpler, safer, and more general. Unlike when passing objects\nby pointer or reference, there's no risk of confusion over ownership,\nlifetime, mutability, and similar issues, and no need to specify them in the\ncontract. It also prevents non-local interactions between the client and the\nimplementation, which makes them easier to understand, maintain, and optimize by\nthe compiler. Further, such objects can be used with generic APIs that\nrequire pass-by-value, such as most containers, and they allow for additional\nflexibility in e.g., type composition.\nCopy/move constructors and assignment operators are usually\neasier to define correctly than alternatives\nlike `Clone()`, `CopyFrom()`or `Swap()`,\nbecause they can be generated by the compiler, either implicitly or\nwith `=default`. They are concise, and ensure\nthat all data members are copied. Copy and move\nconstructors are also generally more efficient, because they don't\nrequire heap allocation or separate initialization and assignment\nsteps, and they're eligible for optimizations such as copy elision .\nMove operations allow the implicit and efficient transfer of\nresources out of rvalue objects. This allows a plainer coding style\nin some cases.\nSome types do not need to be copyable, and providing copy\noperations for such types can be confusing, nonsensical, or outright\nincorrect. Types representing singleton objects ( `Registerer`),\nobjects tied to a specific scope ( `Cleanup`), or closely coupled to\nobject identity ( `Mutex`) cannot be copied meaningfully.\nCopy operations for base class types that are to be used\npolymorphically are hazardous, because use of them can lead to object slicing .\nDefaulted or carelessly-implemented copy operations can be incorrect, and the\nresulting bugs can be confusing and difficult to diagnose.\nCopy constructors are invoked implicitly, which makes the\ninvocation easy to miss. This may cause confusion for programmers used to\nlanguages where pass-by-reference is conventional or mandatory. It may also\nencourage excessive copying, which can cause performance problems.\nEvery class's public interface must make clear which copy and move\noperations the class supports. This should usually take the form of explicitly\ndeclaring and/or deleting the appropriate operations in the `public`section of the declaration.\nSpecifically, a copyable class should explicitly declare the copy\noperations, a move-only class should explicitly declare the move operations, and\na non-copyable/movable class should explicitly delete the copy operations. A\ncopyable class may also declare move operations in order to support efficient\nmoves. Explicitly declaring or deleting all four copy/move operations is\npermitted, but not required. If you provide a copy or move assignment operator,\nyou must also provide the corresponding constructor.",
                "example": "class Copyable {\n public:\n  Copyable(const Copyable& other) = default;\n  Copyable& operator=(const Copyable& other) = default;\n\n  // The implicit move operations are suppressed by the declarations above.\n  // You may explicitly declare move operations to support efficient moves.\n};\n\nclass MoveOnly {\n public:\n  MoveOnly(MoveOnly&& other) = default;\n  MoveOnly& operator=(MoveOnly&& other) = default;\n\n  // The copy operations are implicitly deleted, but you can\n  // spell that out explicitly if you want:\n  MoveOnly(const MoveOnly&) = delete;\n  MoveOnly& operator=(const MoveOnly&) = delete;\n};\n\nclass NotCopyableOrMovable {\n public:\n  // Not copyable or movable\n  NotCopyableOrMovable(const NotCopyableOrMovable&) = delete;\n  NotCopyableOrMovable& operator=(const NotCopyableOrMovable&)\n      = delete;\n\n  // The move operations are implicitly disabled, but you can\n  // spell that out explicitly if you want:\n  NotCopyableOrMovable(NotCopyableOrMovable&&) = delete;\n  NotCopyableOrMovable& operator=(NotCopyableOrMovable&&)\n      = delete;\n};\n"
            },
            {
                "description": "These declarations/deletions can be omitted only if they are obvious:\nIf the class has no `private`section, like a struct or an interface-only base class,\nthen the copyability/movability can be determined by the\ncopyability/movability of any public data members. \nIf a base class clearly isn't copyable or movable, derived classes\nnaturally won't be either. An interface-only base class that leaves these\noperations implicit is not sufficient to make concrete subclasses clear. \nNote that if you explicitly declare or delete either the constructor or\nassignment operation for copy, the other copy operation is not obvious and\nmust be declared or deleted. Likewise for move operations.\nA type should not be copyable/movable if the meaning of\ncopying/moving is unclear to a casual user, or if it incurs unexpected\ncosts. Move operations for copyable types are strictly a performance\noptimization and are a potential source of bugs and complexity, so\navoid defining them unless they are significantly more efficient than\nthe corresponding copy operations. If your type provides copy operations, it is\nrecommended that you design your class so that the default implementation of\nthose operations is correct. Remember to review the correctness of any\ndefaulted operations as you would any other code.\nTo eliminate the risk of slicing, prefer to make base classes abstract,\nby making their constructors protected, by declaring their destructors protected,\nor by giving them one or more pure virtual member functions. Prefer to avoid\nderiving from concrete classes."
            }
        ]
    },
    {
        "title": "Structs vs. Classes",
        "belongs to": "Classes/Structs vs. Classes",
        "cases": [
            {
                "description": "Use a `struct`only for passive objects that\ncarry data; everything else is a `class`.\nThe `struct`and `class`keywords behave almost identically in C++. We add our own\nsemantic meanings to each keyword, so you should use the\nappropriate keyword for the data-type you're\ndefining.\n`structs`should be used for passive objects that carry\ndata, and may have associated constants. All fields must be public. The\nstruct must not have invariants that imply relationships between\ndifferent fields, since direct user access to those fields may\nbreak those invariants. Constructors, destructors, and helper methods may\nbe present; however, these methods must not require or enforce any\ninvariants.\nIf more functionality or invariants are required, or struct has wide visibility and expected to\nevolve, then a `class`is more appropriate. If in doubt, make it a `class`.\nFor consistency with STL, you can use `struct`instead of `class`for\nstateless types, such as traits, template metafunctions ,\nand some functors.\nNote that member variables in structs and classes have different naming rules ."
            }
        ]
    },
    {
        "title": "Structs vs. Pairs and Tuples",
        "belongs to": "Classes/Structs vs. Pairs and Tuples",
        "cases": [
            {
                "description": "Prefer to use a `struct`instead of a pair or a\ntuple whenever the elements can have meaningful names.\nWhile using pairs and tuples can avoid the need to define a custom type,\npotentially saving work when writing code, a meaningful field\nname will almost always be much clearer when reading code than `.first`, `.second`, or `std::get<X>`.\nWhile C++14's introduction of `std::get<Type>`to access a\ntuple element by type rather than index (when the type is unique) can\nsometimes partially mitigate this, a field name is usually substantially\nclearer and more informative than a type.\nPairs and tuples may be appropriate in generic code where there are not\nspecific meanings for the elements of the pair or tuple. Their use may\nalso be required in order to interoperate with existing code or APIs."
            }
        ]
    },
    {
        "title": "Inheritance",
        "belongs to": "Classes/Inheritance",
        "cases": [
            {
                "description": "Composition is often more appropriate than inheritance.\nWhen using inheritance, make it `public`.\nWhen a sub-class\ninherits from a base class, it includes the definitions\nof all the data and operations that the base class\ndefines. \"Interface inheritance\" is inheritance from a\npure abstract base class (one with no state or defined\nmethods); all other inheritance is \"implementation\ninheritance\".\nImplementation inheritance reduces code size by re-using\nthe base class code as it specializes an existing type.\nBecause inheritance is a compile-time declaration, you\nand the compiler can understand the operation and detect\nerrors. Interface inheritance can be used to\nprogrammatically enforce that a class expose a particular\nAPI. Again, the compiler can detect errors, in this case,\nwhen a class does not define a necessary method of the\nAPI.\nFor implementation inheritance, because the code\nimplementing a sub-class is spread between the base and\nthe sub-class, it can be more difficult to understand an\nimplementation. The sub-class cannot override functions\nthat are not virtual, so the sub-class cannot change\nimplementation.\nMultiple inheritance is especially problematic, because\nit often imposes a higher performance overhead (in fact,\nthe performance drop from single inheritance to multiple\ninheritance can often be greater than the performance\ndrop from ordinary to virtual dispatch), and because\nit risks leading to \"diamond\" inheritance patterns,\nwhich are prone to ambiguity, confusion, and outright bugs.\nAll inheritance should be `public`. If you\nwant to do private inheritance, you should be including\nan instance of the base class as a member instead. You may use `final`on classes when you don't intend to support using\nthem as base classes.\nDo not overuse implementation inheritance. Composition\nis often more appropriate. Try to restrict use of\ninheritance to the \"is-a\" case: `Bar`subclasses `Foo`if it can reasonably be said\nthat `Bar`\"is a kind of\" `Foo`.\nLimit the use of `protected`to those\nmember functions that might need to be accessed from\nsubclasses. Note that data\nmembers should be `private`\n.\nExplicitly annotate overrides of virtual functions or virtual\ndestructors with exactly one of an `override`or (less\nfrequently) `final`specifier. Do not\nuse `virtual`when declaring an override.\nRationale: A function or destructor marked `override`or `final`that is\nnot an override of a base class virtual function will\nnot compile, and this helps catch common errors. The\nspecifiers serve as documentation; if no specifier is\npresent, the reader has to check all ancestors of the\nclass in question to determine if the function or\ndestructor is virtual or not.\nMultiple inheritance is permitted, but multiple implementation inheritance is strongly discouraged."
            }
        ]
    },
    {
        "title": "Operator Overloading",
        "belongs to": "Classes/Operator Overloading",
        "cases": [
            {
                "description": "Overload operators judiciously. Do not use user-defined literals.\nC++ permits user code to declare\noverloaded versions of the built-in operators using the `operator`keyword, so long as one of the parameters\nis a user-defined type. The `operator`keyword also\npermits user code to define new kinds of literals using `operator\"\"`, and to define type-conversion functions\nsuch as `operatorbool()`.\nOperator overloading can make code more concise and\nintuitive by enabling user-defined types to behave the same\nas built-in types. Overloaded operators are the idiomatic names\nfor certain operations (e.g., `==`, `<`, `=`, and `<<`), and adhering to\nthose conventions can make user-defined types more readable\nand enable them to interoperate with libraries that expect\nthose names.\nUser-defined literals are a very concise notation for\ncreating objects of user-defined types.\nProviding a correct, consistent, and unsurprising\nset of operator overloads requires some care, and failure\nto do so can lead to confusion and bugs. \nOveruse of operators can lead to obfuscated code,\nparticularly if the overloaded operator's semantics\ndon't follow convention. \nThe hazards of function overloading apply just as\nmuch to operator overloading, if not more so. \nOperator overloads can fool our intuition into\nthinking that expensive operations are cheap, built-in\noperations. \nFinding the call sites for overloaded operators may\nrequire a search tool that's aware of C++ syntax, rather\nthan e.g., grep. \nIf you get the argument type of an overloaded operator\nwrong, you may get a different overload rather than a\ncompiler error. For example, `foo<bar`may do one thing, while `&foo<&bar`does something totally different. \nCertain operator overloads are inherently hazardous.\nOverloading unary `&`can cause the same\ncode to have different meanings depending on whether\nthe overload declaration is visible. Overloads of `&&`, `||`, and `,`(comma) cannot match the evaluation-order semantics of the\nbuilt-in operators. \nOperators are often defined outside the class,\nso there's a risk of different files introducing\ndifferent definitions of the same operator. If both\ndefinitions are linked into the same binary, this results\nin undefined behavior, which can manifest as subtle\nrun-time bugs. \nUser-defined literals (UDLs) allow the creation of new\nsyntactic forms that are unfamiliar even to experienced C++\nprogrammers, such as `\"HelloWorld\"sv`as a\nshorthand for `std::string_view(\"HelloWorld\")`.\nExisting notations are clearer, though less terse. \nBecause they can't be namespace-qualified, uses of UDLs also require\nuse of either using-directives (which we ban ) or\nusing-declarations (which we ban in header files except\nwhen the imported names are part of the interface exposed by the header\nfile in question). Given that header files would have to avoid UDL\nsuffixes, we prefer to avoid having conventions for literals differ\nbetween header files and source files.\nDefine overloaded operators only if their meaning is\nobvious, unsurprising, and consistent with the corresponding\nbuilt-in operators. For example, use `|`as a\nbitwise- or logical-or, not as a shell-style pipe.\nDefine operators only on your own types. More precisely,\ndefine them in the same headers, `.cc`files, and namespaces\nas the types they operate on. That way, the operators are available\nwherever the type is, minimizing the risk of multiple\ndefinitions. If possible, avoid defining operators as templates,\nbecause they must satisfy this rule for any possible template\narguments. If you define an operator, also define\nany related operators that make sense, and make sure they\nare defined consistently.\nPrefer to define non-modifying binary operators as\nnon-member functions. If a binary operator is defined as a\nclass member, implicit conversions will apply to the\nright-hand argument, but not the left-hand one. It will\nconfuse your users if `a+b`compiles but `b+a`doesn't.\nFor a type `T`whose values can be compared for\nequality, define a non-member `operator==`and document when\ntwo values of type `T`are considered equal.\nIf there is a single obvious notion of when a value `t1`of type `T`is less than another such value `t2`then\nyou may also define `operator<=>`, which should be\nconsistent with `operator==`.\nPrefer not to overload the other comparison and ordering operators.\nDon't go out of your way to avoid defining operator\noverloads. For example, prefer to define `==`, `=`, and `<<`, rather than `Equals()`, `CopyFrom()`, and `PrintTo()`. Conversely, don't define\noperator overloads just because other libraries expect\nthem. For example, if your type doesn't have a natural\nordering, but you want to store it in a `std::set`,\nuse a custom comparator rather than overloading `<`.\nDo not overload `&&`, `||`, `,`(comma), or unary `&`. Do not overload `operator\"\"`, i.e., do not introduce user-defined\nliterals. Do not use any such literals provided by others\n(including the standard library).\nType conversion operators are covered in the section on implicit conversions .\nThe `=`operator is covered in the section on copy constructors . Overloading `<<`for use with streams is covered in the\nsection on streams . See also the rules on function overloading , which\napply to operator overloading as well."
            }
        ]
    },
    {
        "title": "Access Control",
        "belongs to": "Classes/Access Control",
        "cases": [
            {
                "description": "Make classes' data members `private`, unless they are constants . This simplifies reasoning about invariants, at the cost\nof some easy boilerplate in the form of accessors (usually `const`) if necessary.\nFor technical\nreasons, we allow data members of a test fixture class defined in a `.cc`file to\nbe `protected`when using Google\nTest .\nIf a test fixture class is defined outside of the `.cc`file it is used in, for example\nin a `.h`file, make data members `private`."
            }
        ]
    },
    {
        "title": "Declaration Order",
        "belongs to": "Classes/Declaration Order",
        "cases": [
            {
                "description": "Group similar declarations together, placing `public`parts\nearlier.\nA class definition should usually start with a `public:`section, followed by `protected:`, then `private:`. Omit\nsections that would be empty.\nWithin each section, prefer grouping similar\nkinds of declarations together, and prefer the\nfollowing order:\nTypes and type aliases ( `typedef`, `using`, `enum`, nested structs and classes, and `friend`types) \n(Optionally, for structs only) non- `static`data members \nStatic constants \nFactory functions \nConstructors and assignment operators \nDestructor \nAll other functions ( `static`and non- `static`member\nfunctions, and `friend`functions) \nAll other data members (static and non-static)\nDo not put large method definitions inline in the\nclass definition. Usually, only trivial or\nperformance-critical, and very short, methods may be\ndefined inline. See Inline\nFunctions for more details."
            }
        ]
    },
    {
        "title": "Functions",
        "belongs to": "Functions",
        "cases": []
    },
    {
        "title": "Inputs and Outputs",
        "belongs to": "Functions/Inputs and Outputs",
        "cases": [
            {
                "description": "The output of a C++ function is naturally provided via\na return value and sometimes via output parameters (or in/out parameters).\nPrefer using return values over output parameters: they\nimprove readability, and often provide the same or better\nperformance.\nPrefer to return by value or, failing that, return by reference.\nAvoid returning a raw pointer unless it can be null.\nParameters are either inputs to the function, outputs from the\nfunction, or both. Non-optional input parameters should usually be values\nor `const`references, while non-optional output and\ninput/output parameters should usually be references (which cannot be null).\nGenerally, use `std::optional`to represent optional by-value\ninputs, and use a `const`pointer when the non-optional form would\nhave used a reference. Use non- `const`pointers to represent\noptional outputs and optional input/output parameters.\nAvoid defining functions that require a reference parameter to outlive the call.\nIn some cases reference parameters can bind to temporaries, leading to lifetime\nbugs. Instead, find a way to eliminate the lifetime requirement\n(for example, by copying the parameter), or pass retained parameters by\npointer and document the lifetime and non-null requirements.\nWhen ordering function parameters, put all input-only\nparameters before any output parameters. In particular,\ndo not add new parameters to the end of the function just\nbecause they are new; place new input-only parameters before\nthe output parameters. This is not a hard-and-fast rule. Parameters that\nare both input and output muddy the waters, and, as always,\nconsistency with related functions may require you to bend the rule.\nVariadic functions may also require unusual parameter ordering."
            }
        ]
    },
    {
        "title": "Write Short Functions",
        "belongs to": "Functions/Write Short Functions",
        "cases": [
            {
                "description": "Prefer small and focused functions.\nWe recognize that long functions are sometimes\nappropriate, so no hard limit is placed on functions\nlength. If a function exceeds about 40 lines, think about\nwhether it can be broken up without harming the structure\nof the program.\nEven if your long function works perfectly now,\nsomeone modifying it in a few months may add new\nbehavior. This could result in bugs that are hard to\nfind. Keeping your functions short and simple makes it\neasier for other people to read and modify your code.\nSmall functions are also easier to test.\nYou could find long and complicated functions when\nworking with\nsome code. Do not be\nintimidated by modifying existing code: if working with\nsuch a function proves to be difficult, you find that\nerrors are hard to debug, or you want to use a piece of\nit in several different contexts, consider breaking up\nthe function into smaller and more manageable pieces."
            }
        ]
    },
    {
        "title": "Function Overloading",
        "belongs to": "Functions/Function Overloading",
        "cases": [
            {
                "description": "Use overloaded functions (including constructors) only if a\nreader looking at a call site can get a good idea of what\nis happening without having to first figure out exactly\nwhich overload is being called.\nYou may write a function that takes a `conststd::string&`and overload it with another that\ntakes `constchar*`. However, in this case consider `std::string_view`instead.",
                "example": "class MyClass {\n public:\n  void Analyze(const std::string &text);\n  void Analyze(const char *text, size_t textlen);\n};\n"
            },
            {
                "description": "Overloading can make code more intuitive by allowing an\nidentically-named function to take different arguments.\nIt may be necessary for templatized code, and it can be\nconvenient for Visitors.\nOverloading based on `const`or ref qualification may make utility\ncode more usable, more efficient, or both.\n(See TotW 148 for more.)\nIf a function is overloaded by the argument types alone,\na reader may have to understand C++'s complex matching\nrules in order to tell what's going on. Also many people\nare confused by the semantics of inheritance if a derived\nclass overrides only some of the variants of a\nfunction.\nYou may overload a function when there are no semantic differences\nbetween variants. These overloads may vary in types, qualifiers, or\nargument count. However, a reader of such a call must not need to know\nwhich member of the overload set is chosen, only that something from the set is being called. If you can document all entries in the\noverload set with a single comment in the header, that is a good sign\nthat it is a well-designed overload set."
            }
        ]
    },
    {
        "title": "Default Arguments",
        "belongs to": "Functions/Default Arguments",
        "cases": [
            {
                "description": "Default arguments are allowed on non-virtual functions\nwhen the default is guaranteed to always have the same\nvalue. Follow the same restrictions as for function overloading , and\nprefer overloaded functions if the readability gained with\ndefault arguments doesn't outweigh the downsides below.\nOften you have a function that uses default values, but\noccasionally you want to override the defaults. Default\nparameters allow an easy way to do this without having to\ndefine many functions for the rare exceptions. Compared\nto overloading the function, default arguments have a\ncleaner syntax, with less boilerplate and a clearer\ndistinction between 'required' and 'optional'\narguments.\nDefaulted arguments are another way to achieve the\nsemantics of overloaded functions, so all the reasons not to overload\nfunctions apply.\nThe defaults for arguments in a virtual function call are\ndetermined by the static type of the target object, and\nthere's no guarantee that all overrides of a given function\ndeclare the same defaults.\nDefault parameters are re-evaluated at each call site,\nwhich can bloat the generated code. Readers may also expect\nthe default's value to be fixed at the declaration instead\nof varying at each call.\nFunction pointers are confusing in the presence of\ndefault arguments, since the function signature often\ndoesn't match the call signature. Adding\nfunction overloads avoids these problems.\nDefault arguments are banned on virtual functions, where\nthey don't work properly, and in cases where the specified\ndefault might not evaluate to the same value depending on\nwhen it was evaluated. (For example, don't write `voidf(intn=counter++);`.)\nIn some other cases, default arguments can improve the\nreadability of their function declarations enough to\novercome the downsides above, so they are allowed. When in\ndoubt, use overloads."
            }
        ]
    },
    {
        "title": "Trailing Return Type Syntax",
        "belongs to": "Functions/Trailing Return Type Syntax",
        "cases": [
            {
                "description": "Use trailing return types only where using the ordinary syntax (leading\nreturn types) is impractical or much less readable.\nC++ allows two different forms of function declarations. In the older\nform, the return type appears before the function name. For example:",
                "example": "int foo(int x);\n"
            },
            {
                "description": "The newer form uses the `auto`keyword before the function name and a trailing return type after\nthe argument list. For example, the declaration above could\nequivalently be written:",
                "example": "auto foo(int x) -> int;\n"
            },
            {
                "description": "The trailing return type is in the function's scope. This doesn't\nmake a difference for a simple case like `int`but it matters\nfor more complicated cases, like types declared in class scope or\ntypes written in terms of the function parameters.\nTrailing return types are the only way to explicitly specify the\nreturn type of a lambda expression .\nIn some cases the compiler is able to deduce a lambda's return type,\nbut not in all cases. Even when the compiler can deduce it automatically,\nsometimes specifying it explicitly would be clearer for readers.\nSometimes it's easier and more readable to specify a return type\nafter the function's parameter list has already appeared. This is\nparticularly true when the return type depends on template parameters.\nFor example:",
                "example": "    template <typename T, typename U>\n    auto add(T t, U u) -> decltype(t + u);\n  \n    template <typename T, typename U>\n    decltype(declval<T&>() + declval<U&>()) add(T t, U u);\n  "
            },
            {
                "description": "Trailing return type syntax is relatively new and it has no\nanalogue in C++-like languages such as C and Java, so some readers may\nfind it unfamiliar.\nExisting code bases have an enormous number of function\ndeclarations that aren't going to get changed to use the new syntax,\nso the realistic choices are using the old syntax only or using a mixture\nof the two. Using a single version is better for uniformity of style.\nIn most cases, continue to use the older style of function\ndeclaration where the return type goes before the function name.\nUse the new trailing-return-type form only in cases where it's\nrequired (such as lambdas) or where, by putting the type after the\nfunction's parameter list, it allows you to write the type in a much\nmore readable way. The latter case should be rare; it's mostly an\nissue in fairly complicated template code, which is discouraged in most cases ."
            }
        ]
    },
    {
        "title": "Google-Specific Magic",
        "belongs to": "Google-Specific Magic",
        "cases": [
            {
                "description": "There are various tricks and utilities that\nwe use to make C++ code more robust, and various ways we use\nC++ that may differ from what you see elsewhere."
            }
        ]
    },
    {
        "title": "Ownership and Smart Pointers",
        "belongs to": "Google-Specific Magic/Ownership and Smart Pointers",
        "cases": [
            {
                "description": "Prefer to have single, fixed owners for dynamically\nallocated objects. Prefer to transfer ownership with smart\npointers.\n\"Ownership\" is a bookkeeping technique for managing\ndynamically allocated memory (and other resources). The\nowner of a dynamically allocated object is an object or\nfunction that is responsible for ensuring that it is\ndeleted when no longer needed. Ownership can sometimes be\nshared, in which case the last owner is typically\nresponsible for deleting it. Even when ownership is not\nshared, it can be transferred from one piece of code to\nanother.\n\"Smart\" pointers are classes that act like pointers,\ne.g., by overloading the `*`and `->`operators. Some smart pointer types\ncan be used to automate ownership bookkeeping, to ensure\nthese responsibilities are met. \n`std::unique_ptr`\nis a smart pointer type\nwhich expresses exclusive ownership\nof a dynamically allocated object; the object is deleted\nwhen the `std::unique_ptr`goes out of scope.\nIt cannot be copied, but can be moved to\nrepresent ownership transfer. \n`std::shared_ptr`\nis a smart pointer type\nthat expresses shared ownership of\na dynamically allocated object. `std::shared_ptr`s\ncan be copied; ownership of the object is shared among\nall copies, and the object is deleted when the last `std::shared_ptr`is destroyed.\nIt's virtually impossible to manage dynamically\nallocated memory without some sort of ownership\nlogic. \nTransferring ownership of an object can be cheaper\nthan copying it (if copying it is even possible). \nTransferring ownership can be simpler than\n'borrowing' a pointer or reference, because it reduces\nthe need to coordinate the lifetime of the object\nbetween the two users. \nSmart pointers can improve readability by making\nownership logic explicit, self-documenting, and\nunambiguous. \nSmart pointers can eliminate manual ownership\nbookkeeping, simplifying the code and ruling out large\nclasses of errors. \nFor `const`objects, shared ownership can be a simple\nand efficient alternative to deep copying.\nOwnership must be represented and transferred via\npointers (whether smart or plain). Pointer semantics\nare more complicated than value semantics, especially\nin APIs: you have to worry not just about ownership,\nbut also aliasing, lifetime, and mutability, among\nother issues. \nThe performance costs of value semantics are often\noverestimated, so the performance benefits of ownership\ntransfer might not justify the readability and\ncomplexity costs. \nAPIs that transfer ownership force their clients\ninto a single memory management model. \nCode using smart pointers is less explicit about\nwhere the resource releases take place. \n\n`std::unique_ptr`expresses ownership\ntransfer using move semantics, which are\nrelatively new and may confuse some programmers. \nShared ownership can be a tempting alternative to\ncareful ownership design, obfuscating the design of a\nsystem. \nShared ownership requires explicit bookkeeping at\nrun-time, which can be costly. \nIn some cases (e.g., cyclic references), objects\nwith shared ownership may never be deleted. \nSmart pointers are not perfect substitutes for\nplain pointers.\nIf dynamic allocation is necessary, prefer to keep\nownership with the code that allocated it. If other code\nneeds access to the object, consider passing it a copy,\nor passing a pointer or reference without transferring\nownership. Prefer to use `std::unique_ptr`to\nmake ownership transfer explicit. For example:",
                "example": "std::unique_ptr<Foo> FooFactory();\nvoid FooConsumer(std::unique_ptr<Foo> ptr);\n"
            },
            {
                "description": "Do not design your code to use shared ownership\nwithout a very good reason. One such reason is to avoid\nexpensive copy operations, but you should only do this if\nthe performance benefits are significant, and the\nunderlying object is immutable (i.e., `std::shared_ptr<constFoo>`). If you\ndo use shared ownership, prefer to use `std::shared_ptr`.\nNever use `std::auto_ptr`. Instead, use `std::unique_ptr`."
            }
        ]
    },
    {
        "title": "cpplint",
        "belongs to": "Google-Specific Magic/cpplint",
        "cases": [
            {
                "description": "Use `cpplint.py`to detect style errors.\n`cpplint.py`is a tool that reads a source file and identifies many\nstyle errors. It is not perfect, and has both false\npositives and false negatives, but it is still a valuable\ntool.\nSome projects have instructions on\nhow to run `cpplint.py`from their project\ntools. If the project you are contributing to does not,\nyou can download \n`cpplint.py`\nseparately."
            }
        ]
    },
    {
        "title": "Other C++ Features",
        "belongs to": "Other C++ Features",
        "cases": []
    },
    {
        "title": "Rvalue References",
        "belongs to": "Other C++ Features/Rvalue References",
        "cases": [
            {
                "description": "Use rvalue references only in certain special cases listed below.\nRvalue references\nare a type of reference that can only bind to temporary\nobjects. The syntax is similar to traditional reference\nsyntax. For example, `voidf(std::string&&s);`declares a function whose argument is an\nrvalue reference to a `std::string`.\nWhen the token '&&' is applied to\nan unqualified template argument in a function\nparameter, special template argument deduction\nrules apply. Such a reference is called a forwarding reference.\nDefining a move constructor (a constructor taking\nan rvalue reference to the class type) makes it\npossible to move a value instead of copying it. If `v1`is a `std::vector<std::string>`,\nfor example, then `autov2(std::move(v1))`will probably just result in some simple pointer\nmanipulation instead of copying a large amount of data.\nIn many cases this can result in a major performance\nimprovement. \nRvalue references make it possible to implement\ntypes that are movable but not copyable, which can be\nuseful for types that have no sensible definition of\ncopying but where you might still want to pass them as\nfunction arguments, put them in containers, etc. \n\n`std::move`is necessary to make\neffective use of some standard-library types, such as `std::unique_ptr`. \n\nForwarding references which\nuse the rvalue reference token, make it possible to write a\ngeneric function wrapper that forwards its arguments to\nanother function, and works whether or not its\narguments are temporary objects and/or const.\nThis is called 'perfect forwarding'.\nRvalue references are not yet widely understood. Rules like reference\ncollapsing and the special deduction rule for forwarding references\nare somewhat obscure. \nRvalue references are often misused. Using rvalue\nreferences is counter-intuitive in signatures where the argument is expected\nto have a valid specified state after the function call, or where no move\noperation is performed.\nDo not use rvalue references (or apply the `&&`qualifier to methods), except as follows:\nYou may use them to define move constructors and move assignment\noperators (as described in Copyable and Movable Types ). \nYou may use them to define `&&`-qualified methods that\nlogically \"consume\" `*this`, leaving it in an unusable\nor empty state. Note that this applies only to method qualifiers (which come\nafter the closing parenthesis of the function signature); if you want to\n\"consume\" an ordinary function parameter, prefer to pass it by value. \nYou may use forwarding references in conjunction with `std::forward`,\nto support perfect forwarding. \nYou may use them to define pairs of overloads, such as one taking `Foo&&`and the other taking `constFoo&`.\nUsually the preferred solution is just to pass by value, but an overloaded\npair of functions sometimes yields better performance, for example if the\nfunctions sometimes don't consume the input. As always: if you're writing\nmore complicated code for the sake of performance, make sure you have evidence\nthat it actually helps."
            }
        ]
    },
    {
        "title": "Friends",
        "belongs to": "Other C++ Features/Friends",
        "cases": [
            {
                "description": "We allow use of `friend`classes and functions,\nwithin reason.\nFriends should usually be defined in the same file so\nthat the reader does not have to look in another file to\nfind uses of the private members of a class. A common use\nof `friend`is to have a `FooBuilder`class be a friend of `Foo`so that it can construct the inner state\nof `Foo`correctly, without exposing this\nstate to the world. In some cases it may be useful to\nmake a unittest class a friend of the class it tests.\nFriends extend, but do not break, the encapsulation\nboundary of a class. In some cases this is better than\nmaking a member `public`when you want to give only one\nother class access to it. However, most classes should\ninteract with other classes solely through their public\nmembers."
            }
        ]
    },
    {
        "title": "Exceptions",
        "belongs to": "Other C++ Features/Exceptions",
        "cases": [
            {
                "description": "We do not use C++ exceptions.\nExceptions allow higher levels of an application to\ndecide how to handle \"can't happen\" failures in deeply\nnested functions, without the obscuring and error-prone\nbookkeeping of error codes. \n\nExceptions are used by most other\nmodern languages. Using them in C++ would make it more\nconsistent with Python, Java, and the C++ that others\nare familiar with. \n\nSome third-party C++ libraries use exceptions, and\nturning them off internally makes it harder to\nintegrate with those libraries. \nExceptions are the only way for a constructor to\nfail. We can simulate this with a factory function or\nan `Init()`method, but these require heap\nallocation or a new \"invalid\" state, respectively. \nExceptions are really handy in testing\nframeworks.\nWhen you add a `throw`statement to an\nexisting function, you must examine all of its\ntransitive callers. Either they must make at least the\nbasic exception safety guarantee, or they must never\ncatch the exception and be happy with the program\nterminating as a result. For instance, if `f()`calls `g()`calls `h()`, and `h`throws an\nexception that `f`catches, `g`has to be careful or it may not clean up properly. \nMore generally, exceptions make the control flow of\nprograms difficult to evaluate by looking at code:\nfunctions may return in places you don't expect. This\ncauses maintainability and debugging difficulties. You\ncan minimize this cost via some rules on how and where\nexceptions can be used, but at the cost of more that a\ndeveloper needs to know and understand. \nException safety requires both RAII and different\ncoding practices. Lots of supporting machinery is\nneeded to make writing correct exception-safe code\neasy. Further, to avoid requiring readers to understand\nthe entire call graph, exception-safe code must isolate\nlogic that writes to persistent state into a \"commit\"\nphase. This will have both benefits and costs (perhaps\nwhere you're forced to obfuscate code to isolate the\ncommit). Allowing exceptions would force us to always\npay those costs even when they're not worth it. \nTurning on exceptions adds data to each binary\nproduced, increasing compile time (probably slightly)\nand possibly increasing address space pressure. \nThe availability of exceptions may encourage\ndevelopers to throw them when they are not appropriate\nor recover from them when it's not safe to do so. For\nexample, invalid user input should not cause exceptions\nto be thrown. We would need to make the style guide\neven longer to document these restrictions!\nOn their face, the benefits of using exceptions\noutweigh the costs, especially in new projects. However,\nfor existing code, the introduction of exceptions has\nimplications on all dependent code. If exceptions can be\npropagated beyond a new project, it also becomes\nproblematic to integrate the new project into existing\nexception-free code. Because most existing C++ code at\nGoogle is not prepared to deal with exceptions, it is\ncomparatively difficult to adopt new code that generates\nexceptions.\nGiven that Google's existing code is not\nexception-tolerant, the costs of using exceptions are\nsomewhat greater than the costs in a new project. The\nconversion process would be slow and error-prone. We\ndon't believe that the available alternatives to\nexceptions, such as error codes and assertions, introduce\na significant burden.\nOur advice against using exceptions is not predicated\non philosophical or moral grounds, but practical ones.\nBecause we'd like to use our open-source\nprojects at Google and it's difficult to do so if those\nprojects use exceptions, we need to advise against\nexceptions in Google open-source projects as well.\nThings would probably be different if we had to do it all\nover again from scratch.\nThis prohibition also applies to exception handling related\nfeatures such as `std::exception_ptr`and `std::nested_exception`.\nThere is an exception to\nthis rule (no pun intended) for Windows code."
            }
        ]
    },
    {
        "title": "noexcept",
        "belongs to": "Other C++ Features/noexcept",
        "cases": [
            {
                "description": "Specify `noexcept`when it is useful and correct.\nThe `noexcept`specifier is used to specify whether\na function will throw exceptions or not. If an exception\nescapes from a function marked `noexcept`, the program\ncrashes via `std::terminate`.\nThe `noexcept`operator performs a compile-time\ncheck that returns true if an expression is declared to not\nthrow any exceptions.\nSpecifying move constructors as `noexcept`improves performance in some cases, e.g., `std::vector<T>::resize()`moves rather than\ncopies the objects if T's move constructor is `noexcept`. \nSpecifying `noexcept`on a function can\ntrigger compiler optimizations in environments where\nexceptions are enabled, e.g., compiler does not have to\ngenerate extra code for stack-unwinding, if it knows\nthat no exceptions can be thrown due to a `noexcept`specifier.\nIn projects following this guide\nthat have exceptions disabled it is hard\nto ensure that `noexcept`specifiers are correct, and hard to define what\ncorrectness even means. \nIt's hard, if not impossible, to undo `noexcept`because it eliminates a guarantee that callers may be relying\non, in ways that are hard to detect.\nYou may use `noexcept`when it is useful for\nperformance if it accurately reflects the intended semantics\nof your function, i.e., that if an exception is somehow thrown\nfrom within the function body then it represents a fatal error.\nYou can assume that `noexcept`on move constructors\nhas a meaningful performance benefit. If you think\nthere is significant performance benefit from specifying `noexcept`on some other function, please discuss it\nwith\nyour project leads.\nPrefer unconditional `noexcept`if exceptions are\ncompletely disabled (i.e., most Google C++ environments).\nOtherwise, use conditional `noexcept`specifiers\nwith simple conditions, in ways that evaluate false only in\nthe few cases where the function could potentially throw.\nThe tests might include type traits check on whether the\ninvolved operation might throw (e.g., `std::is_nothrow_move_constructible`for\nmove-constructing objects), or on whether allocation can throw\n(e.g., `absl::default_allocator_is_nothrow`for\nstandard default allocation). Note in many cases the only\npossible cause for an exception is allocation failure (we\nbelieve move constructors should not throw except due to\nallocation failure), and there are many applications where it’s\nappropriate to treat memory exhaustion as a fatal error rather\nthan an exceptional condition that your program should attempt\nto recover from. Even for other\npotential failures you should prioritize interface simplicity\nover supporting all possible exception throwing scenarios:\ninstead of writing a complicated `noexcept`clause\nthat depends on whether a hash function can throw, for example,\nsimply document that your component doesn’t support hash\nfunctions throwing and make it unconditionally `noexcept`."
            }
        ]
    },
    {
        "title": "Run-Time Type\nInformation (RTTI)",
        "belongs to": "Other C++ Features/Run-Time Type\nInformation (RTTI)",
        "cases": [
            {
                "description": "Avoid using run-time type information (RTTI).\nRTTI allows a\nprogrammer to query the C++ class of an object at\nrun-time. This is done by use of `typeid`or `dynamic_cast`.\nThe standard alternatives to RTTI (described below)\nrequire modification or redesign of the class hierarchy\nin question. Sometimes such modifications are infeasible\nor undesirable, particularly in widely-used or mature\ncode.\nRTTI can be useful in some unit tests. For example, it\nis useful in tests of factory classes where the test has\nto verify that a newly created object has the expected\ndynamic type. It is also useful in managing the\nrelationship between objects and their mocks.\nRTTI is useful when considering multiple abstract\nobjects. Consider",
                "example": "bool Base::Equal(Base* other) = 0;\nbool Derived::Equal(Base* other) {\n  Derived* that = dynamic_cast<Derived*>(other);\n  if (that == nullptr)\n    return false;\n  ...\n}\n"
            },
            {
                "description": "Querying the type of an object at run-time frequently\nmeans a design problem. Needing to know the type of an\nobject at runtime is often an indication that the design\nof your class hierarchy is flawed.\nUndisciplined use of RTTI makes code hard to maintain.\nIt can lead to type-based decision trees or switch\nstatements scattered throughout the code, all of which\nmust be examined when making further changes.\nRTTI has legitimate uses but is prone to abuse, so you\nmust be careful when using it. You may use it freely in\nunittests, but avoid it when possible in other code. In\nparticular, think twice before using RTTI in new code. If\nyou find yourself needing to write code that behaves\ndifferently based on the class of an object, consider one\nof the following alternatives to querying the type:\nVirtual methods are the preferred way of executing\ndifferent code paths depending on a specific subclass\ntype. This puts the work within the object itself. \nIf the work belongs outside the object and instead\nin some processing code, consider a double-dispatch\nsolution, such as the Visitor design pattern. This\nallows a facility outside the object itself to\ndetermine the type of class using the built-in type\nsystem.\nWhen the logic of a program guarantees that a given\ninstance of a base class is in fact an instance of a\nparticular derived class, then a `dynamic_cast`may be used freely on the\nobject. Usually one\ncan use a `static_cast`as an alternative in\nsuch situations.\nDecision trees based on type are a strong indication\nthat your code is on the wrong track.",
                "example": "if (typeid(*data) == typeid(D1)) {\n  ...\n} else if (typeid(*data) == typeid(D2)) {\n  ...\n} else if (typeid(*data) == typeid(D3)) {\n...\n"
            },
            {
                "description": "Code such as this usually breaks when additional\nsubclasses are added to the class hierarchy. Moreover,\nwhen properties of a subclass change, it is difficult to\nfind and modify all the affected code segments.\nDo not hand-implement an RTTI-like workaround. The\narguments against RTTI apply just as much to workarounds\nlike class hierarchies with type tags. Moreover,\nworkarounds disguise your true intent."
            }
        ]
    },
    {
        "title": "Casting",
        "belongs to": "Other C++ Features/Casting",
        "cases": [
            {
                "description": "Use C++-style casts\nlike `static_cast<float>(double_value)`, or brace\ninitialization for conversion of arithmetic types like `int64_ty=int64_t{1}<<42`. Do not use\ncast formats like `(int)x`unless the cast is to `void`. You may use cast formats like `T(x)`only when `T`is a class type.\nC++ introduced a\ndifferent cast system from C that distinguishes the types\nof cast operations.\nThe problem with C casts is the ambiguity of the operation;\nsometimes you are doing a conversion (e.g., `(int)3.5`) and sometimes you are doing\na cast (e.g., `(int)\"hello\"`). Brace\ninitialization and C++ casts can often help avoid this\nambiguity. Additionally, C++ casts are more visible when searching for\nthem.\nThe C++-style cast syntax is verbose and cumbersome.\nIn general, do not use C-style casts. Instead, use these C++-style\ncasts when explicit type conversion is necessary.\nUse brace initialization to convert arithmetic types\n(e.g., `int64_t{x}`). This is the safest approach because code\nwill not compile if conversion can result in information loss. The\nsyntax is also concise. \nUse `absl::implicit_cast`to safely cast up a type hierarchy,\ne.g., casting a `Foo*`to a `SuperclassOfFoo*`or casting a `Foo*`to a `constFoo*`. C++\nusually does this automatically but some situations\nneed an explicit up-cast, such as use of the `?:`operator. \nUse `static_cast`as the equivalent of a C-style cast\nthat does value conversion, when you need to\nexplicitly up-cast a pointer from a class to its superclass, or when\nyou need to explicitly cast a pointer from a superclass to a\nsubclass. In this last case, you must be sure your object is\nactually an instance of the subclass. \nUse `const_cast`to remove the `const`qualifier (see const ). \nUse `reinterpret_cast`to do unsafe conversions of\npointer types to and from integer and other pointer\ntypes,\nincluding `void*`. Use this\nonly if you know what you are doing and you understand the aliasing\nissues. Also, consider dereferencing the pointer (without a cast) and\nusing `std::bit_cast`to cast the resulting value. \nUse `std::bit_cast`to interpret the raw bits of a\nvalue using a different type of the same size (a type pun), such as\ninterpreting the bits of a `double`as `int64_t`.\nSee the RTTI section for guidance on the use of `dynamic_cast`."
            }
        ]
    },
    {
        "title": "Streams",
        "belongs to": "Other C++ Features/Streams",
        "cases": [
            {
                "description": "Use streams where appropriate, and stick to \"simple\"\nusages. Overload `<<`for streaming only for types\nrepresenting values, and write only the user-visible value, not any\nimplementation details.\nStreams are the standard I/O abstraction in C++, as\nexemplified by the standard header `<iostream>`.\nThey are widely used in Google code, mostly for debug logging\nand test diagnostics.\nThe `<<`and `>>`stream operators provide an API for formatted I/O that\nis easily learned, portable, reusable, and extensible. `printf`, by contrast, doesn't even support `std::string`, to say nothing of user-defined types,\nand is very difficult to use portably. `printf`also obliges you to choose among the\nnumerous slightly different versions of that function,\nand navigate the dozens of conversion specifiers.\nStreams provide first-class support for console I/O\nvia `std::cin`, `std::cout`, `std::cerr`, and `std::clog`.\nThe C APIs do as well, but are hampered by the need to\nmanually buffer the input.\nStream formatting can be configured by mutating the\nstate of the stream. Such mutations are persistent, so\nthe behavior of your code can be affected by the entire\nprevious history of the stream, unless you go out of your\nway to restore it to a known state every time other code\nmight have touched it. User code can not only modify the\nbuilt-in state, it can add new state variables and behaviors\nthrough a registration system. \nIt is difficult to precisely control stream output, due\nto the above issues, the way code and data are mixed in\nstreaming code, and the use of operator overloading (which\nmay select a different overload than you expect). \nThe practice of building up output through chains\nof `<<`operators interferes with\ninternationalization, because it bakes word order into the\ncode, and streams' support for localization is flawed . \nThe streams API is subtle and complex, so programmers must\ndevelop experience with it in order to use it effectively. \nResolving the many overloads of `<<`is\nextremely costly for the compiler. When used pervasively in a\nlarge code base, it can consume as much as 20% of the parsing\nand semantic analysis time.\nUse streams only when they are the best tool for the job.\nThis is typically the case when the I/O is ad-hoc, local,\nhuman-readable, and targeted at other developers rather than\nend-users. Be consistent with the code around you, and with the\ncodebase as a whole; if there's an established tool for\nyour problem, use that tool instead.\nIn particular,\n\nlogging libraries are usually a better\nchoice than `std::cerr`or `std::clog`for diagnostic output, and the libraries in `absl/strings`or the equivalent are usually a\nbetter choice than `std::stringstream`.\nAvoid using streams for I/O that faces external users or\nhandles untrusted data. Instead, find and use the appropriate\ntemplating libraries to handle issues like internationalization,\nlocalization, and security hardening.\nIf you do use streams, avoid the stateful parts of the\nstreams API (other than error state), such as `imbue()`, `xalloc()`, and `register_callback()`.\nUse explicit formatting functions (such as `absl::StreamFormat()`) rather than\nstream manipulators or formatting flags to control formatting\ndetails such as number base, precision, or padding.\nOverload `<<`as a streaming operator\nfor your type only if your type represents a value, and `<<`writes out a human-readable string\nrepresentation of that value. Avoid exposing implementation\ndetails in the output of `<<`; if you need to print\nobject internals for debugging, use named functions instead\n(a method named `DebugString()`is the most common\nconvention)."
            }
        ]
    },
    {
        "title": "Preincrement and Predecrement",
        "belongs to": "Other C++ Features/Preincrement and Predecrement",
        "cases": [
            {
                "description": "Use the prefix form ( `++i`) of the increment\nand decrement operators unless you need postfix semantics.\nWhen a variable\nis incremented ( `++i`or `i++`) or\ndecremented ( `--i`or `i--`) and\nthe value of the expression is not used, one must decide\nwhether to preincrement (decrement) or postincrement\n(decrement).\nA postfix increment/decrement expression evaluates to the value as it was before it was modified . This can result in code that is more\ncompact but harder to read. The prefix form is generally more readable, is\nnever less efficient, and can be more efficient because it doesn't need to\nmake a copy of the value as it was before the operation.\nThe tradition developed, in C, of using post-increment, even\nwhen the expression value is not used, especially in `for`loops.\nUse prefix increment/decrement, unless the code explicitly\nneeds the result of the postfix increment/decrement expression."
            }
        ]
    },
    {
        "title": "Use of const",
        "belongs to": "Other C++ Features/Use of const",
        "cases": [
            {
                "description": "In APIs, use `const`whenever it makes sense. `constexpr`is a better choice for some uses of\nconst.\nDeclared variables and parameters can be preceded\nby the keyword `const`to indicate the variables\nare not changed (e.g., `constintfoo`). Class\nfunctions can have the `const`qualifier to\nindicate the function does not change the state of the\nclass member variables (e.g., `classFoo{intBar(charc)const;};`).\nEasier for people to understand how variables are being\nused. Allows the compiler to do better type checking,\nand, conceivably, generate better code. Helps people\nconvince themselves of program correctness because they\nknow the functions they call are limited in how they can\nmodify your variables. Helps people know what functions\nare safe to use without locks in multi-threaded\nprograms.\n`const`is viral: if you pass a `const`variable to a function, that function\nmust have `const`in its prototype (or the\nvariable will need a `const_cast`). This can\nbe a particular problem when calling library\nfunctions.\nWe strongly recommend using `const`in APIs (i.e., on function parameters, methods, and\nnon-local variables) wherever it is meaningful and accurate. This\nprovides consistent, mostly compiler-verified documentation\nof what objects an operation can mutate. Having\na consistent and reliable way to distinguish reads from writes\nis critical to writing thread-safe code, and is useful in\nmany other contexts as well. In particular:\nIf a function guarantees that it will not modify an argument\npassed by reference or by pointer, the corresponding function parameter\nshould be a reference-to-const ( `constT&`) or\npointer-to-const ( `constT*`), respectively. \nFor a function parameter passed by value, `const`has\nno effect on the caller, thus is not recommended in function\ndeclarations. See TotW #109 . \nDeclare methods to be `const`unless they\nalter the logical state of the object (or enable the user to modify\nthat state, e.g., by returning a non- `const`reference, but that's\nrare), or they can't safely be invoked concurrently.\nUsing `const`on local variables is neither encouraged\nnor discouraged.\nAll of a class's `const`operations should be safe\nto invoke concurrently with each other. If that's not feasible, the class must\nbe clearly documented as \"thread-unsafe\"."
            }
        ]
    },
    {
        "title": "Where to put the const",
        "belongs to": "Other C++ Features/Use of const/Where to put the const",
        "cases": [
            {
                "description": "Some people favor the form `intconst*foo`to `constint*foo`. They argue that this is\nmore readable because it's more consistent: it keeps the\nrule that `const`always follows the object\nit's describing. However, this consistency argument\ndoesn't apply in codebases with few deeply-nested pointer\nexpressions since most `const`expressions\nhave only one `const`, and it applies to the\nunderlying value. In such cases, there's no consistency\nto maintain. Putting the `const`first is\narguably more readable, since it follows English in\nputting the \"adjective\" ( `const`) before the\n\"noun\" ( `int`).\nThat said, while we encourage putting `const`first, we do not require it. But be\nconsistent with the code around you!"
            }
        ]
    },
    {
        "title": "Use of constexpr, constinit, and consteval",
        "belongs to": "Other C++ Features/Use of const/Use of constexpr, constinit, and consteval",
        "cases": [
            {
                "description": "Use `constexpr`to define true\nconstants or to ensure constant initialization.\nUse `constinit`to ensure constant\ninitialization for non-constant variables.\nSome variables can be declared `constexpr`to indicate the variables are true constants, i.e., fixed at\ncompilation/link time. Some functions and constructors\ncan be declared `constexpr`which enables them\nto be used in defining a `constexpr`variable. Functions can be declared `consteval`to restrict their use to compile time.\nUse of `constexpr`enables definition of\nconstants with floating-point expressions rather than\njust literals; definition of constants of user-defined\ntypes; and definition of constants with function\ncalls.\nPrematurely marking something as `constexpr`may cause\nmigration problems if later on it has to be downgraded.\nCurrent restrictions on what is allowed in `constexpr`functions and constructors may invite obscure workarounds\nin these definitions.\n`constexpr`definitions enable a more\nrobust specification of the constant parts of an\ninterface. Use `constexpr`to specify true\nconstants and the functions that support their\ndefinitions. `consteval`may be used for\ncode that must not be invoked at runtime.\nAvoid complexifying function definitions to\nenable their use with `constexpr`. Do not use `constexpr`or `consteval`to force inlining."
            }
        ]
    },
    {
        "title": "Integer Types",
        "belongs to": "Other C++ Features/Use of const/Integer Types",
        "cases": [
            {
                "description": "Of the built-in C++ integer types, the only one used\nis `int`. If a program needs an integer type of a\ndifferent size, use an exact-width integer type from `<cstdint>`, such as `int16_t`. If you have a\nvalue that could ever be greater than or equal to 2^31,\nuse a 64-bit type such as `int64_t`.\nKeep in mind that even if your value won't ever be too large\nfor an `int`, it may be used in intermediate\ncalculations which may require a larger type. When in doubt,\nchoose a larger type.\nC++ does not specify exact sizes for the integer types\nlike `int`. Common sizes on contemporary architectures are\n16 bits for `short`, 32 bits for `int`, 32 or 64\nbits for `long`, and 64 bits for `longlong`,\nbut different platforms make different choices, in particular\nfor `long`.\nUniformity of declaration.\nThe sizes of integral types in C++ can vary based on\ncompiler and architecture.\nThe standard library header `<cstdint>`defines types\nlike `int16_t`, `uint32_t`, `int64_t`, etc. You should always use\nthose in preference to `short`, `unsignedlonglong`and the like, when you need a guarantee\non the size of an integer. Prefer to omit the `std::`prefix for these types, as the extra 5 characters do\nnot merit the added clutter. Of the built-in integer types, only `int`should be used. When appropriate, you\nare welcome to use standard type aliases like `size_t`and `ptrdiff_t`.\nWe use `int`very often, for integers we\nknow are not going to be too big, e.g., loop counters.\nUse plain old `int`for such things. You\nshould assume that an `int`is\n\nat least 32 bits, but don't\nassume that it has more than 32 bits. If you need a 64-bit\ninteger type, use `int64_t`or `uint64_t`.\nFor integers we know can be \"big\",\nuse `int64_t`.\nYou should not use the unsigned integer types such as `uint32_t`, unless there is a valid\nreason such as representing a bit pattern rather than a\nnumber, or you need defined overflow modulo 2^N. In\nparticular, do not use unsigned types to say a number\nwill never be negative. Instead, use\n\nassertions for this.\nIf your code is a container that returns a size, be\nsure to use a type that will accommodate any possible\nusage of your container. When in doubt, use a larger type\nrather than a smaller type.\nUse care when converting integer types. Integer conversions and\npromotions can cause undefined behavior, leading to security bugs and\nother problems."
            }
        ]
    },
    {
        "title": "On Unsigned Integers",
        "belongs to": "Other C++ Features/Use of const/Integer Types/On Unsigned Integers",
        "cases": [
            {
                "description": "Unsigned integers are good for representing bitfields and modular\narithmetic. Because of historical accident, the C++ standard also uses\nunsigned integers to represent the size of containers - many members\nof the standards body believe this to be a mistake, but it is\neffectively impossible to fix at this point. The fact that unsigned\narithmetic doesn't model the behavior of a simple integer, but is\ninstead defined by the standard to model modular arithmetic (wrapping\naround on overflow/underflow), means that a significant class of bugs\ncannot be diagnosed by the compiler. In other cases, the defined\nbehavior impedes optimization.\nThat said, mixing signedness of integer types is responsible for an\nequally large class of problems. The best advice we can provide: try\nto use iterators and containers rather than pointers and sizes, try\nnot to mix signedness, and try to avoid unsigned types (except for\nrepresenting bitfields or modular arithmetic). Do not use an unsigned\ntype merely to assert that a variable is non-negative."
            }
        ]
    },
    {
        "title": "64-bit Portability",
        "belongs to": "Other C++ Features/Use of const/Integer Types/64-bit Portability",
        "cases": [
            {
                "description": "Code should be 64-bit and 32-bit friendly. Bear in mind\nproblems of printing, comparisons, and structure alignment.\nCorrect portable `printf()`conversion specifiers for\nsome integral typedefs rely on macro expansions that we find unpleasant to\nuse and impractical to require (the `PRI`macros from `<cinttypes>`). Unless there is no reasonable alternative\nfor your particular case, try to avoid or even upgrade APIs that rely on the `printf`family. Instead use a library supporting typesafe numeric\nformatting, such as \n`StrCat`\nor \n`Substitute`\nfor fast simple conversions,\n\nor \n`std::ostream`\n. \nUnfortunately, the `PRI`macros are the only portable way to\nspecify a conversion for the standard bitwidth typedefs (e.g., `int64_t`, `uint64_t`, `int32_t`, `uint32_t`, etc).\nWhere possible, avoid passing arguments of types specified by bitwidth\ntypedefs to `printf`-based APIs. Note that it is acceptable\nto use typedefs for which printf has dedicated length modifiers, such as `size_t`( `z`), `ptrdiff_t`( `t`), and `maxint_t`( `j`). \n\nRemember that `sizeof(void*)`!= `sizeof(int)`. Use `intptr_t`if\nyou want a pointer-sized integer. \nYou may need to be careful with structure\nalignments, particularly for structures being stored on\ndisk. Any class/structure with a `int64_t`/ `uint64_t`member will by default end up being 8-byte aligned on a\n64-bit system. If you have such structures being shared\non disk between 32-bit and 64-bit code, you will need\nto ensure that they are packed the same on both\narchitectures.\nMost compilers offer a way to\nalter structure alignment. For gcc, you can use `__attribute__((packed))`. MSVC offers `#pragmapack()`and `__declspec(align())`. \n\nUse braced-initialization as needed to create\n64-bit constants. For example:",
                "example": "int64_t my_value{0x123456789};\nuint64_t my_mask{uint64_t{3} << 48};\n"
            }
        ]
    },
    {
        "title": "Preprocessor Macros",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Preprocessor Macros",
        "cases": [
            {
                "description": "Avoid defining macros, especially in headers; prefer\ninline functions, enums, and `const`variables.\nName macros with a project-specific prefix. Do not use\nmacros to define pieces of a C++ API.\nMacros mean that the code you see is not the same as\nthe code the compiler sees. This can introduce unexpected\nbehavior, especially since macros have global scope.\nThe problems introduced by macros are especially severe\nwhen they are used to define pieces of a C++ API,\nand still more so for public APIs. Every error message from\nthe compiler when developers incorrectly use that interface\nnow must explain how the macros formed the interface.\nRefactoring and analysis tools have a dramatically harder\ntime updating the interface. As a consequence, we\nspecifically disallow using macros in this way.\nFor example, avoid patterns like:",
                "example": "class WOMBAT_TYPE(Foo) {\n  // ...\n\n public:\n  EXPAND_PUBLIC_WOMBAT_API(Foo)\n\n  EXPAND_WOMBAT_COMPARISONS(Foo, ==, <)\n};\n"
            },
            {
                "description": "Luckily, macros are not nearly as necessary in C++ as\nthey are in C. Instead of using a macro to inline\nperformance-critical code, use an inline function.\nInstead of using a macro to store a constant, use a `const`variable. Instead of using a macro to\n\"abbreviate\" a long variable name, use a reference.\nInstead of using a macro to conditionally compile code\n... well, don't do that at all (except, of course, for\nthe `#define`guards to prevent double\ninclusion of header files). It makes testing much more\ndifficult.\nMacros can do things these other techniques cannot,\nand you do see them in the codebase, especially in the\nlower-level libraries. And some of their special features\n(like stringifying, concatenation, and so forth) are not\navailable through the language proper. But before using a\nmacro, consider carefully whether there's a non-macro way\nto achieve the same result. If you need to use a macro to\ndefine an interface, contact\nyour project leads to request\na waiver of this rule.\nThe following usage pattern will avoid many problems\nwith macros; if you use macros, follow it whenever\npossible:\nDon't define macros in a `.h`file. \n\n`#define`macros right before you use\nthem, and `#undef`them right after. \nDo not just `#undef`an existing macro\nbefore replacing it with your own; instead, pick a name\nthat's likely to be unique. \nTry not to use macros that expand to unbalanced C++\nconstructs, or at least document that behavior\nwell. \nPrefer not using `##`to generate\nfunction/class/variable names.\nExporting macros from headers (i.e., defining them in a header\nwithout `#undef`ing them before the end of the header)\nis extremely strongly discouraged. If you do export a macro from a\nheader, it must have a globally unique name. To achieve this, it\nmust be named with a prefix consisting of your project's namespace\nname (but upper case)."
            }
        ]
    },
    {
        "title": "0 and nullptr/NULL",
        "belongs to": "Other C++ Features/Use of const/Integer Types/0 and nullptr/NULL",
        "cases": [
            {
                "description": "Use `nullptr`for pointers, and `'\\0'`for chars (and\nnot the `0`literal).\nFor pointers (address values), use `nullptr`, as this\nprovides type-safety.\nUse `'\\0'`for the null character. Using the correct type makes\nthe code more readable."
            }
        ]
    },
    {
        "title": "sizeof",
        "belongs to": "Other C++ Features/Use of const/Integer Types/sizeof",
        "cases": [
            {
                "description": "Prefer `sizeof(varname)`to `sizeof(type)`.\nUse `sizeof(varname)`when you\ntake the size of a particular variable. `sizeof(varname)`will update\nappropriately if someone changes the variable type either\nnow or later. You may use `sizeof(type)`for code unrelated\nto any particular variable, such as code that manages an\nexternal or internal data format where a variable of an\nappropriate C++ type is not convenient.",
                "example": "MyStruct data;\nmemset(&data, 0, sizeof(data));\n\nmemset(&data, 0, sizeof(MyStruct));\n\nif (raw_size < sizeof(int)) {\n  LOG(ERROR) << \"compressed record not big enough for count: \" << raw_size;\n  return false;\n}\n"
            }
        ]
    },
    {
        "title": "Type Deduction (including auto)",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)",
        "cases": [
            {
                "description": "Use type deduction only if it makes the code clearer to readers who aren't\nfamiliar with the project, or if it makes the code safer. Do not use it\nmerely to avoid the inconvenience of writing an explicit type.\nThere are several contexts in which C++ allows (or even requires) types to\nbe deduced by the compiler, rather than spelled out explicitly in the code:\nFunction template argument deduction \n\nA function template can be invoked without explicit template arguments.\nThe compiler deduces those arguments from the types of the function\narguments:",
                "example": "template <typename T>\nvoid f(T t);\n\nf(0);  // Invokes f<int>(0)"
            },
            {
                "description": "`auto`variable declarations \n\nA variable declaration can use the `auto`keyword in place\nof the type. The compiler deduces the type from the variable's\ninitializer, following the same rules as function template argument\ndeduction with the same initializer (so long as you don't use curly braces\ninstead of parentheses).",
                "example": "auto a = 42;  // a is an int\nauto& b = a;  // b is an int&\nauto c = b;   // c is an int\nauto d{42};   // d is an int, not a std::initializer_list<int>\n"
            },
            {
                "description": "`auto`can be qualified with `const`, and can be\nused as part of a pointer or reference type, and (since C++17) as a\nnon-type template argument. A rare variant of this syntax uses `decltype(auto)`instead of `auto`, in which case\nthe deduced type is the result of applying \n`decltype`\nto the initializer. \n\nFunction return type deduction \n\n\n`auto`(and `decltype(auto)`) can also be used in\nplace of a function return type. The compiler deduces the return type from\nthe `return`statements in the function body, following the same\nrules as for variable declarations:",
                "example": "auto f() { return 0; }  // The return type of f is int"
            },
            {
                "description": "Lambda expression return types can be\ndeduced in the same way, but this is triggered by omitting the return type,\nrather than by an explicit `auto`. Confusingly, trailing return type syntax for functions\nalso uses `auto`in the return-type position, but that doesn't\nrely on type deduction; it's just an alternate syntax for an explicit\nreturn type. \n\nGeneric lambdas \n\nA lambda expression can use the `auto`keyword in place of\none or more of its parameter types. This causes the lambda's call operator\nto be a function template instead of an ordinary function, with a separate\ntemplate parameter for each `auto`function parameter:",
                "example": "// Sort `vec` in decreasing order\nstd::sort(vec.begin(), vec.end(), [](auto lhs, auto rhs) { return lhs > rhs; });"
            },
            {
                "description": "Lambda init captures \n\nLambda captures can have explicit initializers, which can be used to\ndeclare wholly new variables rather than only capturing existing ones:",
                "example": "[x = 42, y = \"foo\"] { ... }  // x is an int, and y is a const char*"
            },
            {
                "description": "This syntax doesn't allow the type to be specified; instead, it's deduced\nusing the rules for `auto`variables. \n\nClass template argument deduction \n\nSee below . \n\nStructured bindings \n\nWhen declaring a tuple, struct, or array using `auto`, you can\nspecify names for the individual elements instead of a name for the whole\nobject; these names are called \"structured bindings\", and the whole\ndeclaration is called a \"structured binding declaration\". This syntax\nprovides no way of specifying the type of either the enclosing object\nor the individual names:",
                "example": "auto [iter, success] = my_map.insert({key, value});\nif (!success) {\n  iter->second = value;\n}",
                "appendix": "The `auto`can also be qualified with `const`, `&`, and `&&`, but note that these qualifiers\ntechnically apply to the anonymous tuple/struct/array, rather than the\nindividual bindings. The rules that determine the types of the bindings\nare quite complex; the results tend to be unsurprising, except that\nthe binding types typically won't be references even if the declaration\ndeclares a reference (but they will usually behave like references anyway)."
            },
            {
                "description": "(These summaries omit many details and caveats; see the links for further\ninformation.)\nC++ type names can be long and cumbersome, especially when they\ninvolve templates or namespaces. \nWhen a C++ type name is repeated within a single declaration or a\nsmall code region, the repetition may not be aiding readability. \nIt is sometimes safer to let the type be deduced, since that avoids\nthe possibility of unintended copies or type conversions.\nC++ code is usually clearer when types are explicit,\nespecially when type deduction would depend on information from\ndistant parts of the code. In expressions like:",
                "example": "auto foo = x.add_foo();\nauto i = y.Find(key);\n"
            },
            {
                "description": "it may not be obvious what the resulting types are if the type\nof `y`isn't very well known, or if `y`was\ndeclared many lines earlier.\nProgrammers have to understand when type deduction will or won't\nproduce a reference type, or they'll get copies when they didn't\nmean to.\nIf a deduced type is used as part of an interface, then a\nprogrammer might change its type while only intending to\nchange its value, leading to a more radical API change\nthan intended.\nThe fundamental rule is: use type deduction only to make the code\nclearer or safer, and do not use it merely to avoid the\ninconvenience of writing an explicit type. When judging whether the\ncode is clearer, keep in mind that your readers are not necessarily\non your team, or familiar with your project, so types that you and\nyour reviewer experience as unnecessary clutter will very often\nprovide useful information to others. For example, you can assume that\nthe return type of `make_unique<Foo>()`is obvious,\nbut the return type of `MyWidgetFactory()`probably isn't.\nThese principles apply to all forms of type deduction, but the\ndetails vary, as described in the following sections."
            }
        ]
    },
    {
        "title": "Function template argument deduction",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Function template argument deduction",
        "cases": [
            {
                "description": "Function template argument deduction is almost always OK. Type deduction\nis the expected default way of interacting with function templates,\nbecause it allows function templates to act like infinite sets of ordinary\nfunction overloads. Consequently, function templates are almost always\ndesigned so that template argument deduction is clear and safe, or\ndoesn't compile."
            }
        ]
    },
    {
        "title": "Local variable type deduction",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Local variable type deduction",
        "cases": [
            {
                "description": "For local variables, you can use type deduction to make the code clearer\nby eliminating type information that is obvious or irrelevant, so that\nthe reader can focus on the meaningful parts of the code:",
                "example": "std::unique_ptr<WidgetWithBellsAndWhistles> widget =\n    std::make_unique<WidgetWithBellsAndWhistles>(arg1, arg2);\nabsl::flat_hash_map<std::string,\n                    std::unique_ptr<WidgetWithBellsAndWhistles>>::const_iterator\n    it = my_map_.find(key);\nstd::array<int, 6> numbers = {4, 8, 15, 16, 23, 42};\nauto widget = std::make_unique<WidgetWithBellsAndWhistles>(arg1, arg2);\nauto it = my_map_.find(key);\nstd::array numbers = {4, 8, 15, 16, 23, 42};"
            },
            {
                "description": "Types sometimes contain a mixture of useful information and boilerplate,\nsuch as `it`in the example above: it's obvious that the\ntype is an iterator, and in many contexts the container type and even the\nkey type aren't relevant, but the type of the values is probably useful.\nIn such situations, it's often possible to define local variables with\nexplicit types that convey the relevant information:",
                "example": "if (auto it = my_map_.find(key); it != my_map_.end()) {\n  WidgetWithBellsAndWhistles& widget = *it->second;\n  // Do stuff with `widget`\n}"
            },
            {
                "description": "If the type is a template instance, and the parameters are\nboilerplate but the template itself is informative, you can use\nclass template argument deduction to suppress the boilerplate. However,\ncases where this actually provides a meaningful benefit are quite rare.\nNote that class template argument deduction is also subject to a separate style rule .\nDo not use `decltype(auto)`if a simpler option will work,\nbecause it's a fairly obscure feature, so it has a high cost in code\nclarity."
            }
        ]
    },
    {
        "title": "Return type deduction",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Return type deduction",
        "cases": [
            {
                "description": "Use return type deduction (for both functions and lambdas) only if the\nfunction body has a very small number of `return`statements,\nand very little other code, because otherwise the reader may not be able\nto tell at a glance what the return type is. Furthermore, use it only\nif the function or lambda has a very narrow scope, because functions with\ndeduced return types don't define abstraction boundaries: the implementation is the interface. In particular, public functions in header files\nshould almost never have deduced return types."
            }
        ]
    },
    {
        "title": "Parameter type deduction",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Parameter type deduction",
        "cases": [
            {
                "description": "`auto`parameter types for lambdas should be used with caution,\nbecause the actual type is determined by the code that calls the lambda,\nrather than by the definition of the lambda. Consequently, an explicit\ntype will almost always be clearer unless the lambda is explicitly called\nvery close to where it's defined (so that the reader can easily see both),\nor the lambda is passed to an interface so well-known that it's\nobvious what arguments it will eventually be called with (e.g.,\nthe `std::sort`example above)."
            }
        ]
    },
    {
        "title": "Lambda init captures",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Lambda init captures",
        "cases": [
            {
                "description": "Init captures are covered by a more specific\nstyle rule , which largely supersedes the general rules for\ntype deduction."
            }
        ]
    },
    {
        "title": "Structured bindings",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Structured bindings",
        "cases": [
            {
                "description": "Unlike other forms of type deduction, structured bindings can actually\ngive the reader additional information, by giving meaningful names to the\nelements of a larger object. This means that a structured binding declaration\nmay provide a net readability improvement over an explicit type, even in cases\nwhere `auto`would not. Structured bindings are especially\nbeneficial when the object is a pair or tuple (as in the `insert`example above), because they don't have meaningful field names to begin with,\nbut note that you generally shouldn't use\npairs or tuples unless a pre-existing API like `insert`forces you to.\nIf the object being bound is a struct, it may sometimes be helpful to\nprovide names that are more specific to your usage, but keep in mind that\nthis may also mean the names are less recognizable to your reader than the\nfield names. We recommend using a comment to indicate the name of the\nunderlying field, if it doesn't match the name of the binding, using the\nsame syntax as for function parameter comments:",
                "example": "auto [/*field_name1=*/bound_name1, /*field_name2=*/bound_name2] = ..."
            },
            {
                "description": "As with function parameter comments, this can enable tools to detect if\nyou get the order of the fields wrong."
            }
        ]
    },
    {
        "title": "Class Template Argument Deduction",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Class Template Argument Deduction",
        "cases": [
            {
                "description": "Use class template argument deduction only with templates that have\nexplicitly opted into supporting it.\nClass\ntemplate argument deduction (often abbreviated \"CTAD\") occurs when\na variable is declared with a type that names a template, and the template\nargument list is not provided (not even empty angle brackets):",
                "example": "std::array a = {1, 2, 3};  // `a` is a std::array<int, 3>"
            },
            {
                "description": "The compiler deduces the arguments from the initializer using the\ntemplate's \"deduction guides\", which can be explicit or implicit.\nExplicit deduction guides look like function declarations with trailing\nreturn types, except that there's no leading `auto`, and the\nfunction name is the name of the template. For example, the above example\nrelies on this deduction guide for `std::array`:",
                "example": "namespace std {\ntemplate <class T, class... U>\narray(T, U...) -> std::array<T, 1 + sizeof...(U)>;\n}"
            },
            {
                "description": "Constructors in a primary template (as opposed to a template specialization)\nalso implicitly define deduction guides.\nWhen you declare a variable that relies on CTAD, the compiler selects\na deduction guide using the rules of constructor overload resolution,\nand that guide's return type becomes the type of the variable.\nCTAD can sometimes allow you to omit boilerplate from your code.\nThe implicit deduction guides that are generated from constructors\nmay have undesirable behavior, or be outright incorrect. This is\nparticularly problematic for constructors written before CTAD was\nintroduced in C++17, because the authors of those constructors had no\nway of knowing about (much less fixing) any problems that their\nconstructors would cause for CTAD. Furthermore, adding explicit deduction\nguides to fix those problems might break any existing code that relies on\nthe implicit deduction guides.\nCTAD also suffers from many of the same drawbacks as `auto`,\nbecause they are both mechanisms for deducing all or part of a variable's\ntype from its initializer. CTAD does give the reader more information\nthan `auto`, but it also doesn't give the reader an obvious\ncue that information has been omitted.\nDo not use CTAD with a given template unless the template's maintainers\nhave opted into supporting use of CTAD by providing at least one explicit\ndeduction guide (all templates in the `std`namespace are\nalso presumed to have opted in). This should be enforced with a compiler\nwarning if available.\nUses of CTAD must also follow the general rules on Type deduction ."
            }
        ]
    },
    {
        "title": "Designated Initializers",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Designated Initializers",
        "cases": [
            {
                "description": "Use designated initializers only in their C++20-compliant form.\nDesignated initializers are a syntax that allows for initializing an\naggregate (\"plain old struct\") by naming its fields explicitly:",
                "example": "  struct Point {\n    float x = 0.0;\n    float y = 0.0;\n    float z = 0.0;\n  };\n\n  Point p = {\n    .x = 1.0,\n    .y = 2.0,\n    // z will be 0.0\n  };"
            },
            {
                "description": "The explicitly listed fields will be initialized as specified, and others\nwill be initialized in the same way they would be in a traditional aggregate\ninitialization expression like `Point{1.0,2.0}`.\nDesignated initializers can make for convenient and highly readable\naggregate expressions, especially for structs with less straightforward\nordering of fields than the `Point`example above.\nWhile designated initializers have long been part of the C standard and\nsupported by C++ compilers as an extension, they were not supported by\nC++ prior to C++20.\nThe rules in the C++ standard are stricter than in C and compiler extensions,\nrequiring that the designated initializers appear in the same order as the\nfields appear in the struct definition. So in the example above, it is legal\naccording to C++20 to initialize `x`and then `z`, but not `y`and then `x`.\nUse designated initializers only in the form that is compatible with the\nC++20 standard: with initializers in the same order as the corresponding fields\nappear in the struct definition."
            }
        ]
    },
    {
        "title": "Lambda Expressions",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Lambda Expressions",
        "cases": [
            {
                "description": "Use lambda expressions where appropriate. Prefer explicit captures\nwhen the lambda will escape the current scope.\nLambda expressions are a concise way of creating anonymous\nfunction objects. They're often useful when passing\nfunctions as arguments. For example:",
                "example": "std::sort(v.begin(), v.end(), [](int x, int y) {\n  return Weight(x) < Weight(y);\n});\n"
            },
            {
                "description": "They further allow capturing variables from the enclosing scope either\nexplicitly by name, or implicitly using a default capture. Explicit captures\nrequire each variable to be listed, as\neither a value or reference capture:",
                "example": "int weight = 3;\nint sum = 0;\n// Captures `weight` by value and `sum` by reference.\nstd::for_each(v.begin(), v.end(), [weight, &sum](int x) {\n  sum += weight * x;\n});\n"
            },
            {
                "description": "Default captures implicitly capture any variable referenced in the\nlambda body, including `this`if any members are used:",
                "example": "const std::vector<int> lookup_table = ...;\nstd::vector<int> indices = ...;\n// Captures `lookup_table` by reference, sorts `indices` by the value\n// of the associated element in `lookup_table`.\nstd::sort(indices.begin(), indices.end(), [&](int a, int b) {\n  return lookup_table[a] < lookup_table[b];\n});\n"
            },
            {
                "description": "A variable capture can also have an explicit initializer, which can\nbe used for capturing move-only variables by value, or for other situations\nnot handled by ordinary reference or value captures:",
                "example": "std::unique_ptr<Foo> foo = ...;\n[foo = std::move(foo)] () {\n  ...\n}"
            },
            {
                "description": "Such captures (often called \"init captures\" or \"generalized lambda captures\")\nneed not actually \"capture\" anything from the enclosing scope, or even have\na name from the enclosing scope; this syntax is a fully general way to define\nmembers of a lambda object:",
                "example": "[foo = std::vector<int>({1, 2, 3})] () {\n  ...\n}"
            },
            {
                "description": "The type of a capture with an initializer is deduced using the same rules\nas `auto`.\nLambdas are much more concise than other ways of\ndefining function objects to be passed to STL\nalgorithms, which can be a readability\nimprovement. \nAppropriate use of default captures can remove\nredundancy and highlight important exceptions from\nthe default. \nLambdas, `std::function`, and `std::bind`can be used in combination as a\ngeneral purpose callback mechanism; they make it easy\nto write functions that take bound functions as\narguments.\nVariable capture in lambdas can be a source of dangling-pointer\nbugs, particularly if a lambda escapes the current scope. \nDefault captures by value can be misleading because they do not prevent\ndangling-pointer bugs. Capturing a pointer by value doesn't cause a deep\ncopy, so it often has the same lifetime issues as capture by reference.\nThis is especially confusing when capturing `this`by value,\nsince the use of `this`is often implicit. \nCaptures actually declare new variables (whether or not the captures have\ninitializers), but they look nothing like any other variable declaration\nsyntax in C++. In particular, there's no place for the variable's type,\nor even an `auto`placeholder (although init captures can\nindicate it indirectly, e.g., with a cast). This can make it difficult to\neven recognize them as declarations. \nInit captures inherently rely on type\ndeduction , and suffer from many of the same drawbacks as `auto`, with the additional problem that the syntax doesn't\neven cue the reader that deduction is taking place. \nIt's possible for use of lambdas to get out of\nhand; very long nested anonymous functions can make\ncode harder to understand.\nUse lambda expressions where appropriate, with formatting as\ndescribed below . \nPrefer explicit captures if the lambda may escape the current scope.\nFor example, instead of:",
                "example": "{\n  Foo foo;\n  ...\n  executor->Schedule([&] { Frobnicate(foo); })\n  ...\n}\n// BAD! The fact that the lambda makes use of a reference to `foo` and\n// possibly `this` (if `Frobnicate` is a member function) may not be\n// apparent on a cursory inspection. If the lambda is invoked after\n// the function returns, that would be bad, because both `foo`\n// and the enclosing object could have been destroyed.\n"
            },
            {
                "description": "prefer to write:",
                "example": "{\n  Foo foo;\n  ...\n  executor->Schedule([&foo] { Frobnicate(foo); })\n  ...\n}\n// BETTER - The compile will fail if `Frobnicate` is a member\n// function, and it's clearer that `foo` is dangerously captured by\n// reference.\n",
                "appendix": "Use default capture by reference ( `[&]`) only when\nthe lifetime of the lambda is obviously shorter than any potential\ncaptures. \nUse default capture by value ( `[=]`) only as a means of\nbinding a few variables for a short lambda, where the set of captured\nvariables is obvious at a glance, and which does not result in\ncapturing `this`implicitly. (That means that a lambda that\nappears in a non-static class member function and refers to non-static\nclass members in its body must capture `this`explicitly or\nvia `[&]`.) Prefer not to write long or complex lambdas\nwith default capture by value. \nUse captures only to actually capture variables from the enclosing scope.\nDo not use captures with initializers to introduce new names, or\nto substantially change the meaning of an existing name. Instead,\ndeclare a new variable in the conventional way and then capture it,\nor avoid the lambda shorthand and define a function object explicitly. \nSee the section on type deduction for guidance on specifying the parameter and return types."
            }
        ]
    },
    {
        "title": "Template Metaprogramming",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Template Metaprogramming",
        "cases": [
            {
                "description": "Avoid complicated template programming.\nTemplate metaprogramming refers to a family of techniques that\nexploit the fact that the C++ template instantiation mechanism is\nTuring complete and can be used to perform arbitrary compile-time\ncomputation in the type domain.\nTemplate metaprogramming allows extremely flexible interfaces that\nare type safe and high performance. Facilities like GoogleTest , `std::tuple`, `std::function`, and\nBoost.Spirit would be impossible without it.\nThe techniques used in template metaprogramming are often obscure\nto anyone but language experts. Code that uses templates in\ncomplicated ways is often unreadable, and is hard to debug or\nmaintain.\nTemplate metaprogramming often leads to extremely poor compile\ntime error messages: even if an interface is simple, the complicated\nimplementation details become visible when the user does something\nwrong.\nTemplate metaprogramming interferes with large scale refactoring by\nmaking the job of refactoring tools harder. First, the template code\nis expanded in multiple contexts, and it's hard to verify that the\ntransformation makes sense in all of them. Second, some refactoring\ntools work with an AST that only represents the structure of the code\nafter template expansion. It can be difficult to automatically work\nback to the original source construct that needs to be\nrewritten.\nTemplate metaprogramming sometimes allows cleaner and easier-to-use\ninterfaces than would be possible without it, but it's also often a\ntemptation to be overly clever. It's best used in a small number of\nlow level components where the extra maintenance burden is spread out\nover a large number of uses.\nThink twice before using template metaprogramming or other\ncomplicated template techniques; think about whether the average\nmember of your team will be able to understand your code well enough\nto maintain it after you switch to another project, or whether a\nnon-C++ programmer or someone casually browsing the code base will be\nable to understand the error messages or trace the flow of a function\nthey want to call. If you're using recursive template instantiations\nor type lists or metafunctions or expression templates, or relying on\nSFINAE or on the `sizeof`trick for detecting function\noverload resolution, then there's a good chance you've gone too\nfar.\nIf you use template metaprogramming, you should expect to put\nconsiderable effort into minimizing and isolating the complexity. You\nshould hide metaprogramming as an implementation detail whenever\npossible, so that user-facing headers are readable, and you should\nmake sure that tricky code is especially well commented. You should\ncarefully document how the code is used, and you should say something\nabout what the \"generated\" code looks like. Pay extra attention to the\nerror messages that the compiler emits when users make mistakes. The\nerror messages are part of your user interface, and your code should\nbe tweaked as necessary so that the error messages are understandable\nand actionable from a user point of view."
            }
        ]
    },
    {
        "title": "Concepts and Constraints",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Concepts and Constraints",
        "cases": [
            {
                "description": "Use concepts sparingly.\nIn general, concepts and constraints should only be used in cases\nwhere templates would have been used prior to C++20.\nAvoid introducing new concepts in headers,\nunless the headers are marked as internal to the library.\nDo not define concepts that are not enforced by the compiler.\nPrefer constraints over template metaprogramming, and\navoid the `template<ConceptT>`syntax;\ninstead, use the `requires(Concept<T>)`syntax.\nThe `concept`keyword is a new mechanism for defining\nrequirements (such as type traits or interface specifications)\nfor a template parameter.\nThe `requires`keyword provides mechanisms for placing\nanonymous constraints on templates and verifying that constraints\nare satisfied at compile time.\nConcepts and constraints are often used together, but can be\nalso used independently.\nConcepts allow the compiler to generate much better error\nmessages when templates are involved, which can reduce confusion\nand significantly improve the development experience. \nConcepts can reduce the boilerplate necessary for defining\nand using compile-time constraints, often increasing the clarity\nof the resulting code. \nConstraints provide some capabilities that are difficult to\nachieve with templates and SFINAE techniques.\nAs with templates, concepts can make code significantly more\ncomplex and difficult to understand. \nConcept syntax can be confusing to readers, as concepts\nappear similar to class types at their usage sites. \nConcepts, especially at API boundaries, increase code\ncoupling, rigidity, and ossification. \nConcepts and constraints can replicate logic from a function\nbody, resulting in code duplication and increased maintenance\ncosts. \nConcepts muddy the source of truth for their underlying\ncontracts, as they are standalone named entities that can be\nutilized in multiple locations, all of which evolve separately\nfrom each other.\nThis can cause the stated and implied requirements to diverge\nover time. \nConcepts and constraints affect overload resolution in novel\nand non-obvious ways. \nAs with SFINAE, constraints make it harder to refactor code\nat scale.\nPredefined concepts in the standard library should be\npreferred to type traits, when equivalent ones exist.\n(e.g., if `std::is_integral_v`would have been used\nbefore C++20, then `std::integral`should be used in\nC++20 code.)\nSimilarly, prefer modern constraint syntax\n(via `requires(Condition)`).\nAvoid legacy template metaprogramming constructs\n(such as `std::enable_if<Condition>`)\nas well as the `template<ConceptT>`syntax.\nDo not manually re-implement any existing concepts or traits.\nFor example, use `requires(std::default_initializable<T>)`instead of `requires(requires{Tv;})`or the like.\nNew `concept`declarations should be rare, and only\ndefined internally within a library, such that they are not\nexposed at API boundaries.\nMore generally, do not use concepts or constraints in cases where\nyou wouldn't use their legacy template equivalents in C++17.\nDo not define concepts that duplicate the function body,\nor impose requirements that would be insignificant or obvious\nfrom reading the body of the code or the resulting error messages.\nFor example, avoid the following:",
                "example": "template <typename T>     // Bad - redundant with negligible benefit\nconcept Addable = std::copyable<T> && requires(T a, T b) { a + b; };\ntemplate <Addable T>\nT Add(T x, T y, T z) { return x + y + z; }\n"
            },
            {
                "description": "Concepts should be statically verifiable by the compiler.\nDo not use any concept whose primary benefits would come from a\nsemantic (or otherwise unenforced) constraint.\nRequirements that are unenforced at compile time should instead\nbe imposed via other mechanisms such as comments, assertions,\nor tests."
            }
        ]
    },
    {
        "title": "Boost",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Boost",
        "cases": [
            {
                "description": "Use only approved libraries from the Boost library\ncollection.\nThe Boost library collection is a popular collection of\npeer-reviewed, free, open-source C++ libraries.\nBoost code is generally very high-quality, is widely\nportable, and fills many important gaps in the C++\nstandard library, such as type traits and better binders.\nSome Boost libraries encourage coding practices which can\nhamper readability, such as metaprogramming and other\nadvanced template techniques, and an excessively\n\"functional\" style of programming.\nIn order to maintain a high level of readability for\nall contributors who might read and maintain code, we\nonly allow an approved subset of Boost features.\nCurrently, the following libraries are permitted: \n\n\nCall Traits from `boost/call_traits.hpp`\n\n\nCompressed Pair from `boost/compressed_pair.hpp`\n\n\nThe Boost Graph Library (BGL) from `boost/graph`,\nexcept serialization ( `adj_list_serialize.hpp`) and\nparallel/distributed algorithms and data structures\n( `boost/graph/parallel/*`and `boost/graph/distributed/*`). \n\nProperty Map from `boost/property_map`, except\nparallel/distributed property maps ( `boost/property_map/parallel/*`). \n\nIterator from `boost/iterator`\n\nThe part of Polygon that deals with Voronoi diagram\nconstruction and doesn't depend on the rest of\nPolygon: `boost/polygon/voronoi_builder.hpp`, `boost/polygon/voronoi_diagram.hpp`, and `boost/polygon/voronoi_geometry_type.hpp`\n\n\nBimap from `boost/bimap`\n\n\nStatistical Distributions and Functions from `boost/math/distributions`\n\n\nSpecial Functions from `boost/math/special_functions`\n\n\nRoot Finding & Minimization Functions from `boost/math/tools`\n\n\nMulti-index from `boost/multi_index`\n\n\nHeap from `boost/heap`\n\nThe flat containers from Container : `boost/container/flat_map`, and `boost/container/flat_set`\n\n\nIntrusive from `boost/intrusive`. \n\nThe `boost/sort`library . \n\nPreprocessor from `boost/preprocessor`. \n\nWe are actively considering adding other Boost\nfeatures to the list, so this list may be expanded in\nthe future."
            }
        ]
    },
    {
        "title": "Other C++ Features",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Other C++ Features",
        "cases": [
            {
                "description": "As with Boost , some modern C++\nextensions encourage coding practices that hamper\nreadability—for example by removing\nchecked redundancy (such as type names) that may be\nhelpful to readers, or by encouraging template\nmetaprogramming. Other extensions duplicate functionality\navailable through existing mechanisms, which may lead to confusion\nand conversion costs.\nIn addition to what's described in the rest of the style\nguide, the following C++ features may not be used:\nCompile-time rational numbers\n( `<ratio>`), because of concerns that\nit's tied to a more template-heavy interface\nstyle. \nThe `<cfenv>`and `<fenv.h>`headers, because many\ncompilers do not support those features reliably. \nThe `<filesystem>`header, which\n\ndoes not have sufficient support for testing, and suffers\nfrom inherent security vulnerabilities."
            }
        ]
    },
    {
        "title": "Nonstandard Extensions",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Nonstandard Extensions",
        "cases": [
            {
                "description": "Nonstandard extensions to C++ may not be used unless otherwise specified.\nCompilers support various extensions that are not part of standard C++. Such\nextensions include GCC's `__attribute__`, intrinsic functions such\nas `__builtin_prefetch`or SIMD, `#pragma`, inline\nassembly, `__COUNTER__`, `__PRETTY_FUNCTION__`,\ncompound statement expressions (e.g., `foo=({intx;Bar(&x);x})`, variable-length arrays and `alloca()`, and the\n\" Elvis\nOperator \" `a?:b`.\nNonstandard extensions may provide useful features that do not exist\nin standard C++. \nImportant performance guidance to the compiler can only be specified\nusing extensions.\nNonstandard extensions do not work in all compilers. Use of nonstandard\nextensions reduces portability of code. \nEven if they are supported in all targeted compilers, the extensions\nare often not well-specified, and there may be subtle behavior differences\nbetween compilers. \nNonstandard extensions add to the language features that a reader must\nknow to understand the code. \nNonstandard extensions require additional work to port across architectures.\nDo not use nonstandard extensions. You may use portability wrappers that\nare implemented using nonstandard extensions, so long as those wrappers\n\nare provided by a designated project-wide portability\nheader."
            }
        ]
    },
    {
        "title": "Aliases",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Aliases",
        "cases": [
            {
                "description": "Public aliases are for the benefit of an API's user, and should be clearly documented.\nThere are several ways to create names that are aliases of other entities:",
                "example": "using Bar = Foo;\ntypedef Foo Bar;  // But prefer `using` in C++ code.\nusing ::other_namespace::Foo;\nusing enum MyEnumType;  // Creates aliases for all enumerators in MyEnumType.\n"
            },
            {
                "description": "In new code, `using`is preferable to `typedef`,\nbecause it provides a more consistent syntax with the rest of C++ and works\nwith templates.\nLike other declarations, aliases declared in a header file are part of that\nheader's public API unless they're in a function definition, in the private portion of a class,\nor in an explicitly-marked internal namespace. Aliases in such areas or in `.cc`files\nare implementation details (because client code can't refer to them), and are not restricted by\nthis rule.\nAliases can improve readability by simplifying a long or complicated name. \nAliases can reduce duplication by naming in one place a type used repeatedly in an API,\nwhich might make it easier to change the type later.\nWhen placed in a header where client code can refer to them, aliases increase the\nnumber of entities in that header's API, increasing its complexity. \nClients can easily rely on unintended details of public aliases, making\nchanges difficult. \nIt can be tempting to create a public alias that is only intended for use\nin the implementation, without considering its impact on the API, or on maintainability. \nAliases can create risk of name collisions \nAliases can reduce readability by giving a familiar construct an unfamiliar name \nType aliases can create an unclear API contract:\nit is unclear whether the alias is guaranteed to be identical to the type it aliases,\nto have the same API, or only to be usable in specified narrow ways\nDon't put an alias in your public API just to save typing in the implementation;\ndo so only if you intend it to be used by your clients.\nWhen defining a public alias, document the intent of\nthe new name, including whether it is guaranteed to always be the same as the type\nit's currently aliased to, or whether a more limited compatibility is\nintended. This lets the user know whether they can treat the types as\nsubstitutable or whether more specific rules must be followed, and can help the\nimplementation retain some degree of freedom to change the alias.\nDon't put namespace aliases in your public API. (See also Namespaces ).\nFor example, these aliases document how they are intended to be used in client code:",
                "example": "namespace mynamespace {\n// Used to store field measurements. DataPoint may change from Bar* to some internal type.\n// Client code should treat it as an opaque pointer.\nusing DataPoint = ::foo::Bar*;\n\n// A set of measurements. Just an alias for user convenience.\nusing TimeSeries = std::unordered_set<DataPoint, std::hash<DataPoint>, DataPointComparator>;\n}  // namespace mynamespace\n"
            },
            {
                "description": "These aliases don't document intended use, and half of them aren't meant for client use:",
                "example": "namespace mynamespace {\n// Bad: none of these say how they should be used.\nusing DataPoint = ::foo::Bar*;\nusing ::std::unordered_set;  // Bad: just for local convenience\nusing ::std::hash;           // Bad: just for local convenience\ntypedef unordered_set<DataPoint, hash<DataPoint>, DataPointComparator> TimeSeries;\n}  // namespace mynamespace\n"
            },
            {
                "description": "However, local convenience aliases are fine in function definitions, `private`sections of classes, explicitly marked internal namespaces, and in `.cc`files:",
                "example": "// In a .cc file\nusing ::foo::Bar;\n"
            }
        ]
    },
    {
        "title": "Switch Statements",
        "belongs to": "Other C++ Features/Use of const/Integer Types/Type Deduction (including auto)/Switch Statements",
        "cases": [
            {
                "description": "If not conditional on an enumerated value, switch statements should always\nhave a `default`case (in the case of an enumerated value, the\ncompiler will warn you if any values are not handled). If the default case\nshould never execute, treat this as an error. For example:",
                "example": "switch (var) {\n  case 0: {\n    ...\n    break;\n  }\n  case 1: {\n    ...\n    break;\n  }\n  default: {\n    LOG(FATAL) << \"Invalid value in switch statement: \" << var;\n  }\n}\n"
            },
            {
                "description": "Fall-through from one case label to another must be annotated using the `[[fallthrough]];`attribute. `[[fallthrough]];`should\nbe placed at a point of execution where a fall-through to the next case label\noccurs. A common exception is consecutive case labels without intervening code,\nin which case no annotation is needed.",
                "example": "switch (x) {\n  case 41:  // No annotation needed here.\n  case 43:\n    if (dont_be_picky) {\n      // Use this instead of or along with annotations in comments.\n      [[fallthrough]];\n    } else {\n      CloseButNoCigar();\n      break;\n    }\n  case 42:\n    DoSomethingSpecial();\n    [[fallthrough]];\n  default:\n    DoSomethingGeneric();\n    break;\n}\n"
            }
        ]
    },
    {
        "title": "Inclusive Language",
        "belongs to": "Inclusive Language",
        "cases": [
            {
                "description": "In all code, including naming and comments, use inclusive language\nand avoid terms that other programmers might find disrespectful or offensive\n(such as \"master\" and \"slave\", \"blacklist\" and \"whitelist\", or \"redline\"),\neven if the terms also have an ostensibly neutral meaning.\nSimilarly, use gender-neutral language unless you're referring\nto a specific person (and using their pronouns). For example,\nuse \"they\"/\"them\"/\"their\" for people of unspecified gender\n( even\nwhen singular ), and \"it\"/\"its\" for software, computers, and other\nthings that aren't people."
            }
        ]
    },
    {
        "title": "Naming",
        "belongs to": "Naming",
        "cases": [
            {
                "description": "The most important consistency rules are those that govern\nnaming. The style of a name immediately informs us what sort of\nthing the named entity is: a type, a variable, a function, a\nconstant, a macro, etc., without requiring us to search for the\ndeclaration of that entity. The pattern-matching engine in our\nbrains relies a great deal on these naming rules.\nNaming rules are pretty arbitrary, but\nwe feel that\nconsistency is more important than individual preferences in this\narea, so regardless of whether you find them sensible or not,\nthe rules are the rules."
            }
        ]
    },
    {
        "title": "General Naming Rules",
        "belongs to": "Naming/General Naming Rules",
        "cases": [
            {
                "description": "Optimize for readability using names that would be clear\neven to people on a different team.\nUse names that describe the purpose or intent of the object.\nDo not worry about saving horizontal space as it is far\nmore important to make your code immediately\nunderstandable by a new reader. Minimize the use of\nabbreviations that would likely be unknown to someone outside\nyour project (especially acronyms and initialisms). Do not\nabbreviate by deleting letters within a word. As a rule of thumb,\nan abbreviation is probably OK if it's listed in\nWikipedia. Generally speaking, descriptiveness should be\nproportional to the name's scope of visibility. For example, `n`may be a fine name within a 5-line function,\nbut within the scope of a class, it's likely too vague.",
                "example": "class MyClass {\n public:\n  int CountFooErrors(const std::vector<Foo>& foos) {\n    int n = 0;  // Clear meaning given limited scope and context\n    for (const auto& foo : foos) {\n      ...\n      ++n;\n    }\n    return n;\n  }\n  void DoSomethingImportant() {\n    std::string fqdn = ...;  // Well-known abbreviation for Fully Qualified Domain Name\n  }\n private:\n  const int kMaxAllowedConnections = ...;  // Clear meaning within context\n};\n\nclass MyClass {\n public:\n  int CountFooErrors(const std::vector<Foo>& foos) {\n    int total_number_of_foo_errors = 0;  // Overly verbose given limited scope and context\n    for (int foo_index = 0; foo_index < foos.size(); ++foo_index) {  // Use idiomatic `i`\n      ...\n      ++total_number_of_foo_errors;\n    }\n    return total_number_of_foo_errors;\n  }\n  void DoSomethingImportant() {\n    int cstmr_id = ...;  // Deletes internal letters\n  }\n private:\n  const int kNum = ...;  // Unclear meaning within broad scope\n};\n"
            },
            {
                "description": "Note that certain universally-known abbreviations are OK, such as `i`for an iteration variable and `T`for a\ntemplate parameter.\nFor the purposes of the naming rules below, a \"word\" is anything that you\nwould write in English without internal spaces. This includes abbreviations,\nsuch as acronyms and initialisms. For names written in mixed case (also\nsometimes referred to as\n\" camel case \" or\n\" Pascal case \"), in\nwhich the first letter of each word is capitalized, prefer to capitalize\nabbreviations as single words, e.g., `StartRpc()`rather than `StartRPC()`.\nTemplate parameters should follow the naming style for their\ncategory: type template parameters should follow the rules for type names , and non-type template\nparameters should follow the rules for variable names ."
            }
        ]
    },
    {
        "title": "File Names",
        "belongs to": "Naming/File Names",
        "cases": [
            {
                "description": "Filenames should be all lowercase and can include\nunderscores ( `_`) or dashes ( `-`).\nFollow the convention that your\n\nproject uses. If there is no consistent\nlocal pattern to follow, prefer \" `_`\".\nExamples of acceptable file names:\n`my_useful_class.cc`\n\n\n`my-useful-class.cc`\n\n\n`myusefulclass.cc`\n\n\n`myusefulclass_test.cc//_unittestand_regtestaredeprecated.`\nC++ files should end in `.cc`and header files should end in `.h`. Files that rely on being textually included at specific points\nshould end in `.inc`(see also the section on self-contained headers ).\nDo not use filenames that already exist in `/usr/include`, such as `db.h`.\nIn general, make your filenames very specific. For\nexample, use `http_server_logs.h`rather than `logs.h`. A very common case is to have a pair\nof files called, e.g., `foo_bar.h`and `foo_bar.cc`, defining a class called `FooBar`."
            }
        ]
    },
    {
        "title": "Type Names",
        "belongs to": "Naming/Type Names",
        "cases": [
            {
                "description": "Type names start with a capital letter and have a capital\nletter for each new word, with no underscores: `MyExcitingClass`, `MyExcitingEnum`.\nThe names of all types — classes, structs, type aliases,\nenums, and type template parameters — have the same naming convention.\nType names should start with a capital letter and have a capital letter\nfor each new word. No underscores. For example:",
                "example": "// classes and structs\nclass UrlTable { ...\nclass UrlTableTester { ...\nstruct UrlTableProperties { ...\n\n// typedefs\ntypedef hash_map<UrlTableProperties *, std::string> PropertiesMap;\n\n// using aliases\nusing PropertiesMap = hash_map<UrlTableProperties *, std::string>;\n\n// enums\nenum class UrlTableError { ...\n"
            }
        ]
    },
    {
        "title": "Concept Names",
        "belongs to": "Naming/Concept Names",
        "cases": [
            {
                "description": "type names"
            }
        ]
    },
    {
        "title": "Variable Names",
        "belongs to": "Naming/Variable Names",
        "cases": [
            {
                "description": "The names of variables (including function parameters) and data members are `snake_case`(all lowercase, with underscores between words). Data members of classes\n(but not structs) additionally have trailing underscores. For instance: `a_local_variable`, `a_struct_data_member`, `a_class_data_member_`."
            }
        ]
    },
    {
        "title": "Common Variable names",
        "belongs to": "Naming/Variable Names/Common Variable names",
        "cases": [
            {
                "description": "For example:",
                "example": "std::string table_name;  // OK - snake_case.\n\nstd::string tableName;   // Bad - mixed case.\n"
            }
        ]
    },
    {
        "title": "Class Data Members",
        "belongs to": "Naming/Variable Names/Class Data Members",
        "cases": [
            {
                "description": "Data members of classes, both static and non-static, are\nnamed like ordinary nonmember variables, but with a\ntrailing underscore.",
                "example": "class TableInfo {\n  ...\n private:\n  std::string table_name_;  // OK - underscore at end.\n  static Pool<TableInfo>* pool_;  // OK.\n};\n"
            }
        ]
    },
    {
        "title": "Struct Data Members",
        "belongs to": "Naming/Variable Names/Struct Data Members",
        "cases": [
            {
                "description": "Data members of structs, both static and non-static,\nare named like ordinary nonmember variables. They do not have\nthe trailing underscores that data members in classes have.",
                "example": "struct UrlTableProperties {\n  std::string name;\n  int num_entries;\n  static Pool<UrlTableProperties>* pool;\n};\n"
            },
            {
                "description": "See Structs vs.\nClasses for a discussion of when to use a struct\nversus a class."
            }
        ]
    },
    {
        "title": "Constant Names",
        "belongs to": "Naming/Variable Names/Constant Names",
        "cases": [
            {
                "description": "Variables declared `constexpr`or `const`, and whose value is fixed for\nthe duration of the program, are named with a leading \"k\" followed\nby mixed case. Underscores can be used as separators in the rare cases\nwhere capitalization cannot be used for separation. For example:",
                "example": "const int kDaysInAWeek = 7;\nconst int kAndroid8_0_0 = 24;  // Android 8.0.0\n"
            },
            {
                "description": "All such variables with static storage duration (i.e., statics and globals,\nsee Storage Duration for details) should be named this way, including those in templates where\ndifferent instantiations of the template may have different values. This convention is optional for\nvariables of other storage classes, e.g., automatic variables; otherwise the usual variable naming\nrules apply. For example:",
                "example": "void ComputeFoo(absl::string_view suffix) {\n  // Either of these is acceptable.\n  const absl::string_view kPrefix = \"prefix\";\n  const absl::string_view prefix = \"prefix\";\n  ...\n}\n\nvoid ComputeFoo(absl::string_view suffix) {\n  // Bad - different invocations of ComputeFoo give kCombined different values.\n  const std::string kCombined = absl::StrCat(kPrefix, suffix);\n  ...\n}\n"
            }
        ]
    },
    {
        "title": "Function Names",
        "belongs to": "Naming/Variable Names/Function Names",
        "cases": [
            {
                "description": "Regular functions have mixed case; accessors and mutators may be named\nlike variables.\nOrdinarily, functions should start with a capital letter and have a\ncapital letter for each new word.",
                "example": "AddTableEntry()\nDeleteUrl()\nOpenFileOrDie()\n"
            },
            {
                "description": "(The same naming rule applies to class- and namespace-scope\nconstants that are exposed as part of an API and that are intended to look\nlike functions, because the fact that they're objects rather than functions\nis an unimportant implementation detail.)\nAccessors and mutators (get and set functions) may be named like\nvariables. These often correspond to actual member variables, but this is\nnot required. For example, `intcount()`and `voidset_count(intcount)`."
            }
        ]
    },
    {
        "title": "Namespace Names",
        "belongs to": "Naming/Variable Names/Namespace Names",
        "cases": [
            {
                "description": "Namespace names are all lower-case, with words separated by underscores.\nTop-level namespace names are based on the project name\n. Avoid collisions\nbetween nested namespaces and well-known top-level namespaces.\nThe name of a top-level namespace should usually be the\nname of the project or team whose code is contained in that\nnamespace. The code in that namespace should usually be in\na directory whose basename matches the namespace name (or in\nsubdirectories thereof).\nKeep in mind that the rule\nagainst abbreviated names applies to namespaces just as much\nas variable names. Code inside the namespace seldom needs to\nmention the namespace name, so there's usually no particular need\nfor abbreviation anyway.\nAvoid nested namespaces that match well-known top-level\nnamespaces. Collisions between namespace names can lead to surprising\nbuild breaks because of name lookup rules. In particular, do not\ncreate any nested `std`namespaces. Prefer unique project\nidentifiers\n( `websearch::index`, `websearch::index_util`)\nover collision-prone names like `websearch::util`. Also avoid overly deep nesting\nnamespaces ( TotW #130 ).\nFor `internal`namespaces, be wary of other code being\nadded to the same `internal`namespace causing a collision\n(internal helpers within a team tend to be related and may lead to\ncollisions). In such a situation, using the filename to make a unique\ninternal name is helpful\n( `websearch::index::frobber_internal`for use\nin `frobber.h`)."
            }
        ]
    },
    {
        "title": "Enumerator Names",
        "belongs to": "Naming/Variable Names/Enumerator Names",
        "cases": [
            {
                "description": "Enumerators (for both scoped and unscoped enums) should be named like constants , not like macros . That is, use `kEnumName`not `ENUM_NAME`.",
                "example": "enum class UrlTableError {\n  kOk = 0,\n  kOutOfMemory,\n  kMalformedInput,\n};\n\nenum class AlternateUrlTableError {\n  OK = 0,\n  OUT_OF_MEMORY = 1,\n  MALFORMED_INPUT = 2,\n};\n"
            },
            {
                "description": "Until January 2009, the style was to name enum values\nlike macros . This caused\nproblems with name collisions between enum values and\nmacros. Hence, the change to prefer constant-style naming\nwas put in place. New code should use constant-style\nnaming."
            }
        ]
    },
    {
        "title": "Macro Names",
        "belongs to": "Naming/Variable Names/Macro Names",
        "cases": [
            {
                "description": "You're not really going to define a macro , are you? If you do, they're like this: `MY_MACRO_THAT_SCARES_SMALL_CHILDREN_AND_ADULTS_ALIKE`.\nPlease see the description\nof macros ; in general macros should not be used.\nHowever, if they are absolutely needed, then they should be\nnamed with all capitals and underscores, and with a project-specific prefix.",
                "example": "#define MYPROJECT_ROUND(x) ...\n"
            }
        ]
    },
    {
        "title": "Exceptions to Naming Rules",
        "belongs to": "Naming/Variable Names/Exceptions to Naming Rules",
        "cases": [
            {
                "description": "If you are naming something that is analogous to an\nexisting C or C++ entity then you can follow the existing\nnaming convention scheme.\n`bigopen()`\n\nfunction name, follows form of `open()`\n\n\n`uint`\n\n\n`typedef`\n\n\n`bigpos`\n\n\n`struct`or `class`, follows\nform of `pos`\n\n\n`sparse_hash_map`\n\nSTL-like entity; follows STL naming conventions \n\n`LONGLONG_MAX`\n\na constant, as in `INT_MAX`"
            }
        ]
    },
    {
        "title": "Comments",
        "belongs to": "Comments",
        "cases": [
            {
                "description": "Comments are absolutely vital to keeping our code readable. The following rules describe what you\nshould comment and where. But remember: while comments are very important, the best code is\nself-documenting. Giving sensible names to types and variables is much better than using obscure\nnames that you must then explain through comments.\nWhen writing your comments, write for your audience: the\nnext\ncontributor who will need to\nunderstand your code. Be generous — the next\none may be you!"
            }
        ]
    },
    {
        "title": "Comment Style",
        "belongs to": "Comments/Comment Style",
        "cases": [
            {
                "description": "Use either the `//`or `/**/`syntax, as long as you are consistent.\nYou can use either the `//`or the `/**/`syntax; however, `//`is much more common. Be consistent with how you\ncomment and what style you use where."
            }
        ]
    },
    {
        "title": "File Comments",
        "belongs to": "Comments/File Comments",
        "cases": [
            {
                "description": "Start each file with license boilerplate.\nIf a source file (such as a `.h`file) declares multiple user-facing abstractions\n(common functions, related classes, etc.), include a comment describing the collection of those\nabstractions. Include enough detail for future authors to know what does not fit there. However,\nthe detailed documentation about individual abstractions belongs with those abstractions, not at the\nfile level.\nFor instance, if you write a file comment for `frobber.h`, you do not need\nto include a file comment in `frobber.cc`or `frobber_test.cc`. On the other hand, if you write a collection of classes in `registered_objects.cc`that has no associated header file, you must include a file\ncomment in `registered_objects.cc`."
            }
        ]
    },
    {
        "title": "Legal Notice and Author Line",
        "belongs to": "Comments/File Comments/Legal Notice and Author Line",
        "cases": [
            {
                "description": "Every file should contain license\nboilerplate. Choose the appropriate boilerplate for the\nlicense used by the project (for example, Apache 2.0,\nBSD, LGPL, GPL).\nIf you make significant changes to a file with an\nauthor line, consider deleting the author line.\nNew files should usually not contain copyright notice or\nauthor line."
            }
        ]
    },
    {
        "title": "Struct and Class Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments",
        "cases": [
            {
                "description": "Every non-obvious class or struct declaration should have an\naccompanying comment that describes what it is for and how it should\nbe used.",
                "example": "// Iterates over the contents of a GargantuanTable.\n// Example:\n//    std::unique_ptr<GargantuanTableIterator> iter = table->NewIterator();\n//    for (iter->Seek(\"foo\"); !iter->done(); iter->Next()) {\n//      process(iter->key(), iter->value());\n//    }\nclass GargantuanTableIterator {\n  ...\n};\n"
            }
        ]
    },
    {
        "title": "Class Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Class Comments",
        "cases": [
            {
                "description": "The class comment should provide the reader with enough information to know\nhow and when to use the class, as well as any additional considerations\nnecessary to correctly use the class. Document the synchronization assumptions\nthe class makes, if any. If an instance of the class can be accessed by\nmultiple threads, take extra care to document the rules and invariants\nsurrounding multithreaded use.\nThe class comment is often a good place for a small example code snippet\ndemonstrating a simple and focused usage of the class.\nWhen sufficiently separated (e.g., `.h`and `.cc`files), comments describing the use of the class should go together with its\ninterface definition; comments about the class operation and implementation\nshould accompany the implementation of the class's methods."
            }
        ]
    },
    {
        "title": "Function Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments",
        "cases": [
            {
                "description": "Declaration comments describe use of the function (when it is\nnon-obvious); comments at the definition of a function describe\noperation."
            }
        ]
    },
    {
        "title": "Function Declarations",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Function Declarations",
        "cases": [
            {
                "description": "Almost every function declaration should have comments immediately\npreceding it that describe what the function does and how to use\nit. These comments may be omitted only if the function is simple and\nobvious (e.g., simple accessors for obvious properties of the class).\nPrivate methods and functions declared in `.cc`files are not exempt.\nFunction comments should be written with an implied subject of This function and should start with the verb phrase; for example,\n\"Opens the file\", rather than \"Open the file\". In general, these comments do not\ndescribe how the function performs its task. Instead, that should be\nleft to comments in the function definition.\nTypes of things to mention in comments at the function\ndeclaration:\nWhat the inputs and outputs are. If function argument names\nare provided in `backticks`, then code-indexing\ntools may be able to present the documentation better. \nFor class member functions: whether the object remembers\nreference or pointer arguments beyond the duration of the method\ncall. This is quite common for pointer/reference arguments to\nconstructors. \nFor each pointer argument, whether it is allowed to be null and what happens\nif it is. \nFor each output or input/output argument, what happens to any state that argument\nis in. (E.g. is the state appended to or overwritten?). \nIf there are any performance implications of how a\nfunction is used.\nHere is an example:",
                "example": "// Returns an iterator for this table, positioned at the first entry\n// lexically greater than or equal to `start_word`. If there is no\n// such entry, returns a null pointer. The client must not use the\n// iterator after the underlying GargantuanTable has been destroyed.\n//\n// This method is equivalent to:\n//    std::unique_ptr<Iterator> iter = table->NewIterator();\n//    iter->Seek(start_word);\n//    return iter;\nstd::unique_ptr<Iterator> GetIterator(absl::string_view start_word) const;\n"
            },
            {
                "description": "However, do not be unnecessarily verbose or state the\ncompletely obvious.\nWhen documenting function overrides, focus on the\nspecifics of the override itself, rather than repeating\nthe comment from the overridden function. In many of these\ncases, the override needs no additional documentation and\nthus no comment is required.\nWhen commenting constructors and destructors, remember\nthat the person reading your code knows what constructors\nand destructors are for, so comments that just say\nsomething like \"destroys this object\" are not useful.\nDocument what constructors do with their arguments (for\nexample, if they take ownership of pointers), and what\ncleanup the destructor does. If this is trivial, just\nskip the comment. It is quite common for destructors not\nto have a header comment."
            }
        ]
    },
    {
        "title": "Function Definitions",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Function Definitions",
        "cases": [
            {
                "description": "If there is anything tricky about how a function does\nits job, the function definition should have an\nexplanatory comment. For example, in the definition\ncomment you might describe any coding tricks you use,\ngive an overview of the steps you go through, or explain\nwhy you chose to implement the function in the way you\ndid rather than using a viable alternative. For instance,\nyou might mention why it must acquire a lock for the\nfirst half of the function but why it is not needed for\nthe second half.\nNote you should not just repeat the comments\ngiven with the function declaration, in the `.h`file or wherever. It's okay to\nrecapitulate briefly what the function does, but the\nfocus of the comments should be on how it does it."
            }
        ]
    },
    {
        "title": "Variable Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments",
        "cases": [
            {
                "description": "In general the actual name of the variable should be\ndescriptive enough to give a good idea of what the variable\nis used for. In certain cases, more comments are required."
            }
        ]
    },
    {
        "title": "Class Data Members",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Class Data Members",
        "cases": [
            {
                "description": "The purpose of each class data member (also called an instance\nvariable or member variable) must be clear. If there are any\ninvariants (special values, relationships between members, lifetime\nrequirements) not clearly expressed by the type and name, they must be\ncommented. However, if the type and name suffice ( `intnum_events_;`), no comment is needed.\nIn particular, add comments to describe the existence and meaning\nof sentinel values, such as nullptr or -1, when they are not\nobvious. For example:",
                "example": "private:\n // Used to bounds-check table accesses. -1 means\n // that we don't yet know how many entries the table has.\n int num_total_entries_;\n"
            }
        ]
    },
    {
        "title": "Global Variables",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Global Variables",
        "cases": [
            {
                "description": "All global variables should have a comment describing what they\nare, what they are used for, and (if unclear) why they need to be\nglobal. For example:",
                "example": "// The total number of test cases that we run through in this regression test.\nconst int kNumTestCases = 6;\n"
            }
        ]
    },
    {
        "title": "Implementation Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments",
        "cases": [
            {
                "description": "In your implementation you should have comments in tricky,\nnon-obvious, interesting, or important parts of your code."
            }
        ]
    },
    {
        "title": "Explanatory Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments/Explanatory Comments",
        "cases": [
            {
                "description": "Tricky or complicated code blocks should have comments\nbefore them."
            }
        ]
    },
    {
        "title": "Function Argument Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments/Function Argument Comments",
        "cases": [
            {
                "description": "When the meaning of a function argument is nonobvious, consider\none of the following remedies:\nIf the argument is a literal constant, and the same constant is\nused in multiple function calls in a way that tacitly assumes they're\nthe same, you should use a named constant to make that constraint\nexplicit, and to guarantee that it holds. \nConsider changing the function signature to replace a `bool`argument with an `enum`argument. This will make the argument\nvalues self-describing. \nFor functions that have several configuration options, consider\ndefining a single class or struct to hold all the options\n,\nand pass an instance of that.\nThis approach has several advantages. Options are referenced by name\nat the call site, which clarifies their meaning. It also reduces\nfunction argument count, which makes function calls easier to read and\nwrite. As an added benefit, you don't have to change call sites when\nyou add another option. \nReplace large or complex nested expressions with named variables. \nAs a last resort, use comments to clarify argument meanings at the\ncall site.",
                "example": "// What are these arguments?\nconst DecimalNumber product = CalculateProduct(values, 7, false, nullptr);\n"
            },
            {
                "description": "versus:",
                "example": "ProductOptions options;\noptions.set_precision_decimals(7);\noptions.set_use_cache(ProductOptions::kDontUseCache);\nconst DecimalNumber product =\n    CalculateProduct(values, options, /*completion_callback=*/nullptr);\n"
            }
        ]
    },
    {
        "title": "Don'ts",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments/Don'ts",
        "cases": [
            {
                "description": "Do not state the obvious. In particular, don't literally describe what\ncode does, unless the behavior is nonobvious to a reader who understands\nC++ well. Instead, provide higher level comments that describe why the code does what it does, or make the code self describing.",
                "example": "// Find the element in the vector.  <-- Bad: obvious!\nif (std::find(v.begin(), v.end(), element) != v.end()) {\n  Process(element);\n}\n\n// Process \"element\" unless it was already processed.\nif (std::find(v.begin(), v.end(), element) != v.end()) {\n  Process(element);\n}\n"
            },
            {
                "description": "Self-describing code doesn't need a comment. The comment from\nthe example above would be obvious:",
                "example": "if (!IsAlreadyProcessed(element)) {\n  Process(element);\n}\n"
            }
        ]
    },
    {
        "title": "Punctuation, Spelling, and Grammar",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments/Punctuation, Spelling, and Grammar",
        "cases": [
            {
                "description": "Pay attention to punctuation, spelling, and grammar; it is\neasier to read well-written comments than badly written\nones.\nComments should be as readable as narrative text, with\nproper capitalization and punctuation. In many cases,\ncomplete sentences are more readable than sentence\nfragments. Shorter comments, such as comments at the end\nof a line of code, can sometimes be less formal, but you\nshould be consistent with your style.\nAlthough it can be frustrating to have a code reviewer\npoint out that you are using a comma when you should be\nusing a semicolon, it is very important that source code\nmaintain a high level of clarity and readability. Proper\npunctuation, spelling, and grammar help with that\ngoal."
            }
        ]
    },
    {
        "title": "TODO Comments",
        "belongs to": "Comments/File Comments/Struct and Class Comments/Function Comments/Variable Comments/Implementation Comments/TODO Comments",
        "cases": [
            {
                "description": "Use `TODO`comments for code that is temporary,\na short-term solution, or good-enough but not perfect.\n`TODO`s should include the string `TODO`in all caps, followed by the\n\nbug ID, name, e-mail address, or other\nidentifier\nof the person or issue with the best context\nabout the problem referenced by the `TODO`.",
                "example": "// TODO: bug 12345678 - Remove this after the 2047q4 compatibility window expires.\n// TODO: example.com/my-design-doc - Manually fix up this code the next time it's touched.\n// TODO(bug 12345678): Update this list after the Foo service is turned down.\n// TODO(John): Use a \"\\*\" here for concatenation operator.\n"
            },
            {
                "description": "If your `TODO`is of the form \"At a future\ndate do something\" make sure that you either include a\nvery specific date (\"Fix by November 2005\") or a very\nspecific event (\"Remove this code when all clients can\nhandle XML responses.\")."
            }
        ]
    },
    {
        "title": "Formatting",
        "belongs to": "Formatting",
        "cases": [
            {
                "description": "Coding style and formatting are pretty arbitrary, but a\n\nproject is much easier to follow\nif everyone uses the same style. Individuals may not agree with every\naspect of the formatting rules, and some of the rules may take\nsome getting used to, but it is important that all\n\nproject contributors follow the\nstyle rules so that\nthey can all read and understand\neveryone's code easily.\nTo help you format code correctly, we've created a settings file for emacs ."
            }
        ]
    },
    {
        "title": "Line Length",
        "belongs to": "Formatting/Line Length",
        "cases": [
            {
                "description": "Each line of text in your code should be at most 80\ncharacters long.\nWe recognize that this rule is\ncontroversial, but so much existing code already adheres\nto it, and we feel that consistency is important.\nThose who favor this rule\nargue that it is rude to force them to resize\ntheir windows and there is no need for anything longer.\nSome folks are used to having several code windows\nside-by-side, and thus don't have room to widen their\nwindows in any case. People set up their work environment\nassuming a particular maximum window width, and 80\ncolumns has been the traditional standard. Why change\nit?\nProponents of change argue that a wider line can make\ncode more readable. The 80-column limit is an hidebound\nthrowback to 1960s mainframes; modern equipment has wide screens that\ncan easily show longer lines.\n80 characters is the maximum.\nA line may exceed 80 characters if it is\na comment line which is not feasible to split without harming\nreadability, ease of cut and paste or auto-linking -- e.g., if a line\ncontains an example command or a literal URL longer than 80 characters. \na string literal that cannot easily be wrapped at 80 columns.\nThis may be because it contains URIs or other semantically-critical pieces,\nor because the literal contains an embedded language, or a multiline\nliteral whose newlines are significant like help messages.\nIn these cases, breaking up the literal would\nreduce readability, searchability, ability to click links, etc. Except for\ntest code, such literals should appear at namespace scope near the top of a\nfile. If a tool like Clang-Format doesn't recognize the unsplittable content, disable the tool around the content as necessary. \n(We must balance between usability/searchability of such literals and the\nreadability of the code around them.) \nan include statement. \na header guard \n\na using-declaration"
            }
        ]
    },
    {
        "title": "Non-ASCII Characters",
        "belongs to": "Formatting/Non-ASCII Characters",
        "cases": [
            {
                "description": "Non-ASCII characters should be rare, and must use UTF-8\nformatting.\nYou shouldn't hard-code user-facing text in source,\neven English, so use of non-ASCII characters should be\nrare. However, in certain cases it is appropriate to\ninclude such words in your code. For example, if your\ncode parses data files from foreign sources, it may be\nappropriate to hard-code the non-ASCII string(s) used in\nthose data files as delimiters. More commonly, unittest\ncode (which does not need to be localized) might\ncontain non-ASCII strings. In such cases, you should use\nUTF-8, since that is an encoding\nunderstood by most tools able to handle more than just\nASCII.\nHex encoding is also OK, and encouraged where it\nenhances readability — for example, `\"\\xEF\\xBB\\xBF\"`, or, even more simply, `\"\\uFEFF\"`, is the Unicode zero-width\nno-break space character, which would be invisible\nif included in the source as straight UTF-8.\nWhen possible, avoid the `u8`prefix.\nIt has significantly different semantics starting in C++20\nthan in C++17, producing arrays of `char8_t`rather than `char`, and will change again in C++23.\nYou shouldn't use `char16_t`and `char32_t`character types, since they're for\nnon-UTF-8 text. For similar reasons you also shouldn't\nuse `wchar_t`(unless you're writing code that\ninteracts with the Windows API, which uses `wchar_t`extensively)."
            }
        ]
    },
    {
        "title": "Spaces vs. Tabs",
        "belongs to": "Formatting/Spaces vs. Tabs",
        "cases": [
            {
                "description": "Use only spaces, and indent 2 spaces at a time.\nWe use spaces for indentation. Do not use tabs in your\ncode. You should set your editor to emit spaces when you\nhit the tab key."
            }
        ]
    },
    {
        "title": "Function Declarations and Definitions",
        "belongs to": "Formatting/Function Declarations and Definitions",
        "cases": [
            {
                "description": "Return type on the same line as function name, parameters\non the same line if they fit. Wrap parameter lists which do\nnot fit on a single line as you would wrap arguments in a function call .\nFunctions look like this:",
                "example": "ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {\n  DoSomething();\n  ...\n}\n"
            },
            {
                "description": "If you have too much text to fit on one line:",
                "example": "ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,\n                                             Type par_name3) {\n  DoSomething();\n  ...\n}\n"
            },
            {
                "description": "or if you cannot fit even the first parameter:",
                "example": "ReturnType LongClassName::ReallyReallyReallyLongFunctionName(\n    Type par_name1,  // 4 space indent\n    Type par_name2,\n    Type par_name3) {\n  DoSomething();  // 2 space indent\n  ...\n}\n"
            },
            {
                "description": "Some points to note:\nChoose good parameter names. \nA parameter name may be omitted only if the parameter is not used in the\nfunction's definition. \nIf you cannot fit the return type and the function\nname on a single line, break between them. \nIf you break after the return type of a function\ndeclaration or definition, do not indent. \nThe open parenthesis is always on the same line as\nthe function name. \nThere is never a space between the function name\nand the open parenthesis. \nThere is never a space between the parentheses and\nthe parameters. \nThe open curly brace is always on the end of the last line of the function\ndeclaration, not the start of the next line. \nThe close curly brace is either on the last line by\nitself or on the same line as the open curly brace. \nThere should be a space between the close\nparenthesis and the open curly brace. \nAll parameters should be aligned if possible. \nDefault indentation is 2 spaces. \nWrapped parameters have a 4 space indent.\nUnused parameters that are obvious from context may be omitted:",
                "example": "class Foo {\n public:\n  Foo(const Foo&) = delete;\n  Foo& operator=(const Foo&) = delete;\n};\n"
            },
            {
                "description": "Unused parameters that might not be obvious should comment out the variable\nname in the function definition:",
                "example": "class Shape {\n public:\n  virtual void Rotate(double radians) = 0;\n};\n\nclass Circle : public Shape {\n public:\n  void Rotate(double radians) override;\n};\n\nvoid Circle::Rotate(double /*radians*/) {}\n\n// Bad - if someone wants to implement later, it's not clear what the\n// variable means.\nvoid Circle::Rotate(double) {}\n"
            },
            {
                "description": "Attributes, and macros that expand to attributes, appear at the very\nbeginning of the function declaration or definition, before the\nreturn type:",
                "example": "  ABSL_ATTRIBUTE_NOINLINE void ExpensiveFunction();\n  [[nodiscard]] bool IsOk();\n"
            }
        ]
    },
    {
        "title": "Lambda Expressions",
        "belongs to": "Formatting/Lambda Expressions",
        "cases": [
            {
                "description": "Format parameters and bodies as for any other function, and capture\nlists like other comma-separated lists.\nFor by-reference captures, do not leave a space between the\nampersand ( `&`) and the variable name.",
                "example": "int x = 0;\nauto x_plus_n = [&x](int n) -> int { return x + n; }\n"
            },
            {
                "description": "Short lambdas may be written inline as function arguments.",
                "example": "absl::flat_hash_set<int> to_remove = {7, 8, 9};\nstd::vector<int> digits = {3, 9, 1, 8, 4, 7, 1};\ndigits.erase(std::remove_if(digits.begin(), digits.end(), [&to_remove](int i) {\n               return to_remove.contains(i);\n             }),\n             digits.end());\n"
            }
        ]
    },
    {
        "title": "Floating-point Literals",
        "belongs to": "Formatting/Floating-point Literals",
        "cases": [
            {
                "description": "Floating-point literals should always have a radix point, with digits on both\nsides, even if they use exponential notation. Readability is improved if all\nfloating-point literals take this familiar form, as this helps ensure that they\nare not mistaken for integer literals, and that the `E`/ `e`of the exponential notation is not mistaken for a\nhexadecimal digit. It is fine to initialize a floating-point variable with an\ninteger literal (assuming the variable type can exactly represent that integer),\nbut note that a number in exponential notation is never an integer literal.",
                "example": "float f = 1.f;\nlong double ld = -.5L;\ndouble d = 1248e6;\n\nfloat f = 1.0f;\nfloat f2 = 1.0;  // Also OK\nfloat f3 = 1;    // Also OK\nlong double ld = -0.5L;\ndouble d = 1248.0e6;\n"
            }
        ]
    },
    {
        "title": "Function Calls",
        "belongs to": "Formatting/Function Calls",
        "cases": [
            {
                "description": "Either write the call all on a single line, wrap the\narguments at the parenthesis, or start the arguments on a new\nline indented by four spaces and continue at that 4 space\nindent. In the absence of other considerations, use the\nminimum number of lines, including placing multiple arguments\non each line where appropriate.\nFunction calls have the following format:",
                "example": "bool result = DoSomething(argument1, argument2, argument3);\n"
            },
            {
                "description": "If the arguments do not all fit on one line, they\nshould be broken up onto multiple lines, with each\nsubsequent line aligned with the first argument. Do not\nadd spaces after the open paren or before the close\nparen:",
                "example": "bool result = DoSomething(averyveryveryverylongargument1,\n                          argument2, argument3);\n"
            },
            {
                "description": "Arguments may optionally all be placed on subsequent\nlines with a four space indent:",
                "example": "if (...) {\n  ...\n  ...\n  if (...) {\n    bool result = DoSomething(\n        argument1, argument2,  // 4 space indent\n        argument3, argument4);\n    ...\n  }\n"
            },
            {
                "description": "Put multiple arguments on a single line to reduce the\nnumber of lines necessary for calling a function unless\nthere is a specific readability problem. Some find that\nformatting with strictly one argument on each line is\nmore readable and simplifies editing of the arguments.\nHowever, we prioritize for the reader over the ease of\nediting arguments, and most readability problems are\nbetter addressed with the following techniques.\nIf having multiple arguments in a single line decreases\nreadability due to the complexity or confusing nature of the\nexpressions that make up some arguments, try creating\nvariables that capture those arguments in a descriptive name:",
                "example": "int my_heuristic = scores[x] * y + bases[x];\nbool result = DoSomething(my_heuristic, x, y, z);\n"
            },
            {
                "description": "Or put the confusing argument on its own line with\nan explanatory comment:",
                "example": "bool result = DoSomething(scores[x] * y + bases[x],  // Score heuristic.\n                          x, y, z);\n"
            },
            {
                "description": "If there is still a case where one argument is\nsignificantly more readable on its own line, then put it on\nits own line. The decision should be specific to the argument\nwhich is made more readable rather than a general policy.\nSometimes arguments form a structure that is important\nfor readability. In those cases, feel free to format the\narguments according to that structure:",
                "example": "// Transform the widget by a 3x3 matrix.\nmy_widget.Transform(x1, x2, x3,\n                    y1, y2, y3,\n                    z1, z2, z3);\n"
            }
        ]
    },
    {
        "title": "Braced Initializer List Format",
        "belongs to": "Formatting/Braced Initializer List Format",
        "cases": [
            {
                "description": "Format a braced initializer list exactly like you would format a function\ncall in its place.\nIf the braced list follows a name (e.g., a type or\nvariable name), format as if the `{}`were the\nparentheses of a function call with that name. If there\nis no name, assume a zero-length name.",
                "example": "// Examples of braced init list on a single line.\nreturn {foo, bar};\nfunctioncall({foo, bar});\nstd::pair<int, int> p{foo, bar};\n\n// When you have to wrap.\nSomeFunction(\n    {\"assume a zero-length name before {\"},\n    some_other_function_parameter);\nSomeType variable{\n    some, other, values,\n    {\"assume a zero-length name before {\"},\n    SomeOtherType{\n        \"Very long string requiring the surrounding breaks.\",\n        some, other, values},\n    SomeOtherType{\"Slightly shorter string\",\n                  some, other, values}};\nSomeType variable{\n    \"This is too long to fit all in one line\"};\nMyType m = {  // Here, you could also break before {.\n    superlongvariablename1,\n    superlongvariablename2,\n    {short, interior, list},\n    {interiorwrappinglist,\n     interiorwrappinglist2}};\n"
            }
        ]
    },
    {
        "title": "Looping and branching statements",
        "belongs to": "Formatting/Looping and branching statements",
        "cases": [
            {
                "description": "At a high level, looping or branching statements consist of the following components :\nOne or more statement keywords (e.g. `if`, `else`, `switch`, `while`, `do`,\nor `for`). \nOne condition or iteration specifier , inside\nparentheses. \nOne or more controlled statements , or blocks of\ncontrolled statements.\nThe components of the statement should be separated by single spaces (not\nline breaks). \nInside the condition or iteration specifier, put one space (or a line\nbreak) between each semicolon and the next token, except if the token is a\nclosing parenthesis or another semicolon. \nInside the condition or iteration specifier, do not put a space after the\nopening parenthesis or before the closing parenthesis. \nPut any controlled statements inside blocks (i.e. use curly braces). \nInside the controlled blocks, put one line break immediately after the\nopening brace, and one line break immediately before the closing brace.",
                "example": "if (condition) {                   // Good - no spaces inside parentheses, space before brace.\n  DoOneThing();                    // Good - two-space indent.\n  DoAnotherThing();\n} else if (int a = f(); a != 3) {  // Good - closing brace on new line, else on same line.\n  DoAThirdThing(a);\n} else {\n  DoNothing();\n}\n\n// Good - the same rules apply to loops.\nwhile (condition) {\n  RepeatAThing();\n}\n\n// Good - the same rules apply to loops.\ndo {\n  RepeatAThing();\n} while (condition);\n\n// Good - the same rules apply to loops.\nfor (int i = 0; i < 10; ++i) {\n  RepeatAThing();\n}\n\nif(condition) {}                   // Bad - space missing after `if`.\nelse if ( condition ) {}           // Bad - space between the parentheses and the condition.\nelse if (condition){}              // Bad - space missing before `{`.\nelse if(condition){}               // Bad - multiple spaces missing.\n\nfor (int a = f();a == 10) {}       // Bad - space missing after the semicolon.\n\n// Bad - `if ... else` statement does not have braces everywhere.\nif (condition)\n  foo;\nelse {\n  bar;\n}\n\n// Bad - `if` statement too long to omit braces.\nif (condition)\n  // Comment\n  DoSomething();\n\n// Bad - `if` statement too long to omit braces.\nif (condition1 &&\n    condition2)\n  DoSomething();\n"
            },
            {
                "description": "For historical reasons, we allow one exception to the above rules: the curly\nbraces for the controlled statement or the line breaks inside the curly braces\nmay be omitted if as a result the entire statement appears on either a single\nline (in which case there is a space between the closing parenthesis and the\ncontrolled statement) or on two lines (in which case there is a line break\nafter the closing parenthesis and there are no braces).",
                "example": "// OK - fits on one line.\nif (x == kFoo) { return new Foo(); }\n\n// OK - braces are optional in this case.\nif (x == kFoo) return new Foo();\n\n// OK - condition fits on one line, body fits on another.\nif (x == kBar)\n  Bar(arg1, arg2, arg3);\n"
            },
            {
                "description": "This exception does not apply to multi-keyword statements like `if...else`or `do...while`.",
                "example": "// Bad - `if ... else` statement is missing braces.\nif (x) DoThis();\nelse DoThat();\n\n// Bad - `do ... while` statement is missing braces.\ndo DoThis();\nwhile (x);\n"
            },
            {
                "description": "Use this style only when the statement is brief, and consider that loops and\nbranching statements with complex conditions or controlled statements may be\nmore readable with curly braces. Some\nprojects require curly braces always.\n`case`blocks in `switch`statements can have curly\nbraces or not, depending on your preference. If you do include curly braces,\nthey should be placed as shown below.",
                "example": "switch (var) {\n  case 0: {  // 2 space indent\n    Foo();   // 4 space indent\n    break;\n  }\n  default: {\n    Bar();\n  }\n}\n"
            },
            {
                "description": "Empty loop bodies should use either an empty pair of braces or `continue`with no braces, rather than a single semicolon.",
                "example": "while (condition) {}  // Good - `{}` indicates no logic.\nwhile (condition) {\n  // Comments are okay, too\n}\nwhile (condition) continue;  // Good - `continue` indicates no logic.\n\nwhile (condition);  // Bad - looks like part of `do-while` loop.\n"
            }
        ]
    },
    {
        "title": "Pointer and Reference Expressions",
        "belongs to": "Formatting/Pointer and Reference Expressions",
        "cases": [
            {
                "description": "No spaces around period or arrow. Pointer operators do not\nhave trailing spaces.\nThe following are examples of correctly-formatted\npointer and reference expressions:",
                "example": "x = *p;\np = &x;\nx = r.y;\nx = r->y;\n"
            },
            {
                "description": "Note that:\nThere are no spaces around the period or arrow when\naccessing a member. \nPointer operators have no space after the `*`or `&`.\nWhen referring to a pointer or reference (variable declarations or definitions, arguments,\nreturn types, template parameters, etc), you may place the space before or after the\nasterisk/ampersand. In the trailing-space style, the space is elided in some cases (template\nparameters, etc).",
                "example": "// These are fine, space preceding.\nchar *c;\nconst std::string &str;\nint *GetPointer();\nstd::vector<char *>\n\n// These are fine, space following (or elided).\nchar* c;\nconst std::string& str;\nint* GetPointer();\nstd::vector<char*>  // Note no space between '*' and '>'\n"
            },
            {
                "description": "You should do this consistently within a single\nfile.\nWhen modifying an existing file, use the style in\nthat file.\nIt is allowed (if unusual) to declare multiple variables in the same\ndeclaration, but it is disallowed if any of those have pointer or\nreference decorations. Such declarations are easily misread.",
                "example": "// Fine if helpful for readability.\nint x, y;\n\nint x, *y;  // Disallowed - no & or * in multiple declaration\nint* x, *y;  // Disallowed - no & or * in multiple declaration; inconsistent spacing\nchar * c;  // Bad - spaces on both sides of *\nconst std::string & str;  // Bad - spaces on both sides of &\n"
            }
        ]
    },
    {
        "title": "Boolean Expressions",
        "belongs to": "Formatting/Boolean Expressions",
        "cases": [
            {
                "description": "When you have a boolean expression that is longer than the standard line length , be\nconsistent in how you break up the lines.\nIn this example, the logical AND operator is always at\nthe end of the lines:",
                "example": "if (this_one_thing > this_other_thing &&\n    a_third_thing == a_fourth_thing &&\n    yet_another && last_one) {\n  ...\n}\n"
            },
            {
                "description": "Note that when the code wraps in this example, both of\nthe `&&`logical AND operators are at\nthe end of the line. This is more common in Google code,\nthough wrapping all operators at the beginning of the\nline is also allowed. Feel free to insert extra\nparentheses judiciously because they can be very helpful\nin increasing readability when used\nappropriately, but be careful about overuse. Also note that you\nshould always use the punctuation operators, such as `&&`and `~`, rather than\nthe word operators, such as `and`and `compl`."
            }
        ]
    },
    {
        "title": "Return Values",
        "belongs to": "Formatting/Return Values",
        "cases": [
            {
                "description": "Do not needlessly surround the `return`expression with parentheses.\nUse parentheses in `returnexpr;`only\nwhere you would use them in `x=expr;`.",
                "example": "return result;                  // No parentheses in the simple case.\n// Parentheses OK to make a complex expression more readable.\nreturn (some_long_condition &&\n        another_condition);\n\nreturn (value);                // You wouldn't write var = (value);\nreturn(result);                // return is not a function!\n"
            }
        ]
    },
    {
        "title": "Variable and Array Initialization",
        "belongs to": "Formatting/Variable and Array Initialization",
        "cases": [
            {
                "description": "You may choose between `=`, `()`, and `{}`; the following are\nall correct:",
                "example": "int x = 3;\nint x(3);\nint x{3};\nstd::string name = \"Some Name\";\nstd::string name(\"Some Name\");\nstd::string name{\"Some Name\"};\n"
            },
            {
                "description": "Be careful when using a braced initialization list `{...}`on a type with an `std::initializer_list`constructor.\nA nonempty braced-init-list prefers the `std::initializer_list`constructor whenever\npossible. Note that empty braces `{}`are special, and\nwill call a default constructor if available. To force the\nnon- `std::initializer_list`constructor, use parentheses\ninstead of braces.",
                "example": "std::vector<int> v(100, 1);  // A vector containing 100 items: All 1s.\nstd::vector<int> v{100, 1};  // A vector containing 2 items: 100 and 1.\n"
            },
            {
                "description": "Also, the brace form prevents narrowing of integral\ntypes. This can prevent some types of programming\nerrors.",
                "example": "int pi(3.14);  // OK -- pi == 3.\nint pi{3.14};  // Compile error: narrowing conversion.\n"
            }
        ]
    },
    {
        "title": "Preprocessor Directives",
        "belongs to": "Formatting/Preprocessor Directives",
        "cases": [
            {
                "description": "The hash mark that starts a preprocessor directive should\nalways be at the beginning of the line.\nEven when preprocessor directives are within the body\nof indented code, the directives should start at the\nbeginning of the line.",
                "example": "// Good - directives at beginning of line\n  if (lopsided_score) {\n#if DISASTER_PENDING      // Correct -- Starts at beginning of line\n    DropEverything();\n# if NOTIFY               // OK but not required -- Spaces after #\n    NotifyClient();\n# endif\n#endif\n    BackToNormal();\n  }\n\n// Bad - indented directives\n  if (lopsided_score) {\n    #if DISASTER_PENDING  // Wrong!  The \"#if\" should be at beginning of line\n    DropEverything();\n    #endif                // Wrong!  Do not indent \"#endif\"\n    BackToNormal();\n  }\n"
            }
        ]
    },
    {
        "title": "Class Format",
        "belongs to": "Formatting/Class Format",
        "cases": [
            {
                "description": "Sections in `public`, `protected`and `private`order, each indented one space.\nThe basic format for a class definition (lacking the\ncomments, see Class\nComments for a discussion of what comments are\nneeded) is:",
                "example": "class MyClass : public OtherClass {\n public:      // Note the 1 space indent!\n  MyClass();  // Regular 2 space indent.\n  explicit MyClass(int var);\n  ~MyClass() {}\n\n  void SomeFunction();\n  void SomeFunctionThatDoesNothing() {\n  }\n\n  void set_some_var(int var) { some_var_ = var; }\n  int some_var() const { return some_var_; }\n\n private:\n  bool SomeInternalFunction();\n\n  int some_var_;\n  int some_other_var_;\n};\n"
            },
            {
                "description": "Things to note:\nAny base class name should be on the same line as\nthe subclass name, subject to the 80-column limit. \nThe `public:`, `protected:`,\nand `private:`keywords should be indented\none space. \nExcept for the first instance, these keywords\nshould be preceded by a blank line. This rule is\noptional in small classes. \nDo not leave a blank line after these\nkeywords. \nThe `public`section should be first,\nfollowed by the `protected`and finally the `private`section. \nSee Declaration\nOrder for rules on ordering declarations within\neach of these sections."
            }
        ]
    },
    {
        "title": "Constructor Initializer Lists",
        "belongs to": "Formatting/Constructor Initializer Lists",
        "cases": [
            {
                "description": "Constructor initializer lists can be all on one line or\nwith subsequent lines indented four spaces.\nThe acceptable formats for initializer lists are:",
                "example": "// When everything fits on one line:\nMyClass::MyClass(int var) : some_var_(var) {\n  DoSomething();\n}\n\n// If the signature and initializer list are not all on one line,\n// you must wrap before the colon and indent 4 spaces:\nMyClass::MyClass(int var)\n    : some_var_(var), some_other_var_(var + 1) {\n  DoSomething();\n}\n\n// When the list spans multiple lines, put each member on its own line\n// and align them:\nMyClass::MyClass(int var)\n    : some_var_(var),             // 4 space indent\n      some_other_var_(var + 1) {  // lined up\n  DoSomething();\n}\n\n// As with any other code block, the close curly can be on the same\n// line as the open curly, if it fits.\nMyClass::MyClass(int var)\n    : some_var_(var) {}\n"
            }
        ]
    },
    {
        "title": "Namespace Formatting",
        "belongs to": "Formatting/Namespace Formatting",
        "cases": [
            {
                "description": "The contents of namespaces are not indented.\nNamespaces do not add an\nextra level of indentation. For example, use:",
                "example": "namespace {\n\nvoid foo() {  // Correct.  No extra indentation within namespace.\n  ...\n}\n\n}  // namespace\n"
            },
            {
                "description": "Do not indent within a namespace:",
                "example": "namespace {\n\n  // Wrong!  Indented when it should not be.\n  void foo() {\n    ...\n  }\n\n}  // namespace\n"
            }
        ]
    },
    {
        "title": "Horizontal Whitespace",
        "belongs to": "Formatting/Horizontal Whitespace",
        "cases": [
            {
                "description": "Use of horizontal whitespace depends on location. Never put\ntrailing whitespace at the end of a line."
            }
        ]
    },
    {
        "title": "General",
        "belongs to": "Formatting/Horizontal Whitespace/General",
        "cases": [
            {
                "example": "int i = 0;  // Two spaces before end-of-line comments.\n\nvoid f(bool b) {  // Open braces should always have a space before them.\n  ...\nint i = 0;  // Semicolons usually have no space before them.\n// Spaces inside braces for braced-init-list are optional.  If you use them,\n// put them on both sides!\nint x[] = { 0 };\nint x[] = {0};\n\n// Spaces around the colon in inheritance and initializer lists.\nclass Foo : public Bar {\n public:\n  // For inline function implementations, put spaces between the braces\n  // and the implementation itself.\n  Foo(int b) : Bar(), baz_(b) {}  // No spaces inside empty braces.\n  void Reset() { baz_ = 0; }  // Spaces separating braces from implementation.\n  ...\n"
            },
            {
                "description": "Adding trailing whitespace can cause extra work for\nothers editing the same file, when they merge, as can\nremoving existing trailing whitespace. So: Don't\nintroduce trailing whitespace. Remove it if you're\nalready changing that line, or do it in a separate\nclean-up\noperation (preferably when no-one\nelse is working on the file)."
            }
        ]
    },
    {
        "title": "Loops and Conditionals",
        "belongs to": "Formatting/Horizontal Whitespace/Loops and Conditionals",
        "cases": [
            {
                "example": "if (b) {          // Space after the keyword in conditions and loops.\n} else {          // Spaces around else.\n}\nwhile (test) {}   // There is usually no space inside parentheses.\nswitch (i) {\nfor (int i = 0; i < 5; ++i) {\n// Loops and conditions may have spaces inside parentheses, but this\n// is rare.  Be consistent.\nswitch ( i ) {\nif ( test ) {\nfor ( int i = 0; i < 5; ++i ) {\n// For loops always have a space after the semicolon.  They may have a space\n// before the semicolon, but this is rare.\nfor ( ; i < 5 ; ++i) {\n  ...\n\n// Range-based for loops always have a space before and after the colon.\nfor (auto x : counts) {\n  ...\n}\nswitch (i) {\n  case 1:         // No space before colon in a switch case.\n    ...\n  case 2: break;  // Use a space after a colon if there's code after it.\n"
            }
        ]
    },
    {
        "title": "Operators",
        "belongs to": "Formatting/Horizontal Whitespace/Operators",
        "cases": [
            {
                "example": "// Assignment operators always have spaces around them.\nx = 0;\n\n// Other binary operators usually have spaces around them, but it's\n// OK to remove spaces around factors.  Parentheses should have no\n// internal padding.\nv = w * x + y / z;\nv = w*x + y/z;\nv = w * (x + z);\n\n// No spaces separating unary operators and their arguments.\nx = -5;\n++x;\nif (x && !y)\n  ...\n"
            }
        ]
    },
    {
        "title": "Templates and Casts",
        "belongs to": "Formatting/Horizontal Whitespace/Templates and Casts",
        "cases": [
            {
                "example": "// No spaces inside the angle brackets (< and >), before\n// <, or between >( in a cast\nstd::vector<std::string> x;\ny = static_cast<char*>(x);\n\n// Spaces between type and pointer are OK, but be consistent.\nstd::vector<char *> x;\n"
            }
        ]
    },
    {
        "title": "Vertical Whitespace",
        "belongs to": "Formatting/Horizontal Whitespace/Vertical Whitespace",
        "cases": [
            {
                "description": "Minimize use of vertical whitespace.\nThis is more a principle than a rule: don't use blank lines when\nyou don't have to. In particular, don't put more than one or two blank\nlines between functions, resist starting functions with a blank line,\ndon't end functions with a blank line, and be sparing with your use of\nblank lines. A blank line within a block of code serves like a\nparagraph break in prose: visually separating two thoughts.\nThe basic principle is: The more code that fits on one screen, the\neasier it is to follow and understand the control flow of the\nprogram. Use whitespace purposefully to provide separation in that\nflow.\nSome rules of thumb to help when blank lines may be\nuseful:\nBlank lines at the beginning or end of a function\ndo not help readability. \nBlank lines inside a chain of if-else blocks may\nwell help readability. \nA blank line before a comment line usually helps\nreadability — the introduction of a new comment suggests\nthe start of a new thought, and the blank line makes it clear\nthat the comment goes with the following thing instead of the\npreceding. \nBlank lines immediately inside a declaration of a namespace or block of\nnamespaces may help readability by visually separating the load-bearing\ncontent from the (largely non-semantic) organizational wrapper. Especially\nwhen the first declaration inside the namespace(s) is preceded by a comment,\nthis becomes a special case of the previous rule, helping the comment to\n\"attach\" to the subsequent declaration."
            }
        ]
    },
    {
        "title": "Exceptions to the Rules",
        "belongs to": "Exceptions to the Rules",
        "cases": [
            {
                "description": "The coding conventions described above are mandatory.\nHowever, like all good rules, these sometimes have exceptions,\nwhich we discuss here.\nExisting Non-conformant Code \nYou may diverge from the rules when dealing with code that\ndoes not conform to this style guide. \nIf you find yourself modifying code that was written\nto specifications other than those presented by this\nguide, you may have to diverge from these rules in order\nto stay consistent with the local conventions in that\ncode. If you are in doubt about how to do this, ask the\noriginal author or the person currently responsible for\nthe code. Remember that consistency includes\nlocal consistency, too."
            }
        ]
    },
    {
        "title": "Windows Code",
        "belongs to": "Exceptions to the Rules/Windows Code",
        "cases": [
            {
                "description": "Windows\nprogrammers have developed their own set of coding\nconventions, mainly derived from the conventions in Windows\nheaders and other Microsoft code. We want to make it easy\nfor anyone to understand your code, so we have a single set\nof guidelines for everyone writing C++ on any platform.\nIt is worth reiterating a few of the guidelines that\nyou might forget if you are used to the prevalent Windows\nstyle:\nDo not use Hungarian notation (for example, naming\nan integer `iNum`). Use the Google naming\nconventions, including the `.cc`extension\nfor source files. \nWindows defines many of its own synonyms for\nprimitive types, such as `DWORD`, `HANDLE`, etc. It is perfectly acceptable,\nand encouraged, that you use these types when calling\nWindows API functions. Even so, keep as close as you\ncan to the underlying C++ types. For example, use `constTCHAR*`instead of `LPCTSTR`. \nWhen compiling with Microsoft Visual C++, set the\ncompiler to warning level 3 or higher, and treat all\nwarnings as errors. \nDo not use `#pragmaonce`; instead use\nthe standard Google include guards. The path in the\ninclude guards should be relative to the top of your\nproject tree. \nIn fact, do not use any nonstandard extensions,\nlike `#pragma`and `__declspec`,\nunless you absolutely must. Using `__declspec(dllimport)`and `__declspec(dllexport)`is allowed; however,\nyou must use them through macros such as `DLLIMPORT`and `DLLEXPORT`, so\nthat someone can easily disable the extensions if they\nshare the code.\nHowever, there are just a few rules that we\noccasionally need to break on Windows:\nNormally we strongly discourage\nthe use of multiple implementation inheritance ;\nhowever, it is required when using COM and some ATL/WTL\nclasses. You may use multiple implementation\ninheritance to implement COM or ATL/WTL classes and\ninterfaces. \nAlthough you should not use exceptions in your own\ncode, they are used extensively in the ATL and some\nSTLs, including the one that comes with Visual C++.\nWhen using the ATL, you should define `_ATL_NO_EXCEPTIONS`to disable exceptions.\nYou should investigate whether you can also disable\nexceptions in your STL, but if not, it is OK to turn on\nexceptions in the compiler. (Note that this is only to\nget the STL to compile. You should still not write\nexception handling code yourself.) \nThe usual way of working with precompiled headers\nis to include a header file at the top of each source\nfile, typically with a name like `StdAfx.h`or `precompile.h`. To make your code easier\nto share with other projects, avoid including this file\nexplicitly (except in `precompile.cc`), and\nuse the `/FI`compiler option to include the\nfile automatically. \nResource headers, which are usually named `resource.h`and contain only macros, do not\nneed to conform to these style guidelines."
            }
        ]
    }
]