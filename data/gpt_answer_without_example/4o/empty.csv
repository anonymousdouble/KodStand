rule_name,description,benchmark,gpt_answer,gpt_configuration
2.2 File encoding: UTF-8,Source files are encoded in UTF-8 .,,Yes,"<module name='FileTabCharacter'>
        <property name='charset' value='UTF-8'/>
    </module>"
2.3.1 Whitespace characters,"Aside from the line terminator sequence, the ASCII horizontal space character ( 0x20 ) is the only whitespace character that appears anywhere in a source file. This implies that:
 All other whitespace characters in string and character literals are escaped. 
 Tab characters are not used for indentation.","<module name=""Checker"">
  <module name=""FileTabCharacter"">
    <property name=""eachLine"" value=""true""/>
  </module>
</module>",Yes,"<module name='FileTabCharacter'>
        <property name='eachLine' value='true'/>
    </module>
    
<module name='RegexpSingleline'>
        <property name='format' value='\\t'/>
        <property name='message' value='Tab characters are not allowed'/>
    </module>"
2.3.2 Special escape sequences,"For any character that has a special escape sequence ( `\b` , `\t` , `\n` , `\f` , `\r` , `\""` , `\'` and `\\` ), that sequence is used rather than the corresponding octal (e.g. `\012` ) or Unicode (e.g. `\u000a` ) escape.","<module name=""Checker"">
	<module name=""IllegalTokenText"">
		<property name=""format"" value=""\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)""/>
		<property name=""tokens"" value=""STRING_LITERAL, CHAR_LITERAL""/>
	</module>
</module>",No
2.3.3 Non-ASCII characters,"For the remaining non-ASCII characters, either the actual Unicode character (e.g. `∞` ) or the equivalent Unicode escape (e.g. `\u221e` ) is used. The choice depends only on which makes the code easier to read and understand , although Unicode escapes outside string literals and comments are strongly discouraged.
 Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.
 Examples:
 Example 
 Discussion 
 `StringunitAbbrev=""μs"";` 
 Best: perfectly clear even without a comment. 
 `StringunitAbbrev=""\u03bcs"";//""μs""` 
 Allowed, but there's no reason to do this. 
 `StringunitAbbrev=""\u03bcs"";//Greeklettermu,""s""` 
 Allowed, but awkward and prone to mistakes. 
 `StringunitAbbrev=""\u03bcs"";` 
 Poor: the reader has no idea what this is. 
 `return'\ufeff'+content;//byteordermark` 
 Good: use escapes for non-printable characters, and comment if necessary.
 Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AvoidEscapedUnicodeCharacters"">
                        <property name=""allowByTailComment"" value=""true""/>
                        <property name=""allowEscapesForControlCharacters"" value=""true""/>
                        <property name=""allowNonPrintableEscapes"" value=""true""/>
                </module>
        </module>
</module>
",No
3 Source file structure,"A source file consists of, in order : 
 License or copyright information, if present 
 Package statement 
 Import statements 
 Exactly one top-level class
 

 Exactly one blank line separates each section that is present.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""EmptyLineSeparator"">
                        <property name=""allowNoEmptyLineBetweenFields"" value=""true""/>
 <property name=""allowMultipleEmptyLines"" value=""true""/> 
                        <property name=""tokens"" value=""PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF""/>
                </module>
        </module>
</module>
",Yes,"<module name='Header'>
        <property name='headerFile' value='path/to/header.txt'/>
    </module>
    
<module name='RegexpHeader'>
        <property name='header' value='(package|import|class)'/>
        <property name='multiLines' value='true'/>
    </module>
    
<module name='NewlineAtEndOfFile'>
        <property name='lineSeparator' value='lf'/>
    </module>
    
<module name='EmptyLineSeparator'>
        <property name='allowMultipleEmptyLines' value='false'/>
        <property name='tokens' value='PACKAGE_DEF,IMPORT,CLASS_DEF'/>
    </module>"
"3.1 License or copyright information, if present","If license or copyright information belongs in a file, it belongs here.",,Yes,"<module name='Header'>
        <property name='headerFile' value='path/to/header.txt'/>
        <property name='multiLines' value='true'/>
    </module>"
3.2 Package statement,"The package statement is not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to package statements.","<module name=""Checker"">
        <module name=""LineLength"">
                <property name=""fileExtensions"" value=""java""/>
                <property name=""ignorePattern"" value=""^package.*""/>
                <property name=""max"" value=""100""/>
        </module>
        <module name=""TreeWalker"">
                <module name=""NoLineWrap"">
                        <property name=""tokens"" value=""PACKAGE_DEF""/>
                </module>
        </module>
</module>",Yes,"<module name='PackageDeclaration'>
        <property name='id' value='packageDeclaration'/>
        <property name='lineWrapping' value='false'/>
    </module>"
3.3.1 No wildcard imports,"Wildcard imports , static or otherwise, are not used .","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""AvoidStarImport""/>
  </module>
</module>",Yes,"<module name='AvoidStarImport'>
        <property name='id' value='AvoidStarImport'/>
    </module>
    
<module name='AvoidStaticImport'>
        <property name='id' value='AvoidStaticImport'/>
    </module>"
3.3.2 No line-wrapping,"Import statements are not line-wrapped . The column limit (Section 4.4, Column limit: 100 ) does not apply to import statements.","<module name=""Checker"">
        <module name=""LineLength"">
                <property name=""fileExtensions"" value=""java""/>
                <property name=""ignorePattern"" value=""^import.*""/>
                <property name=""max"" value=""100""/>
        </module>
        <module name=""TreeWalker"">
                <module name=""NoLineWrap"">
                        <property name=""tokens"" value="" IMPORT, STATIC_IMPORT""/>
                </module>
        </module>
</module>",Yes,"<module name='LineLength'>
        <property name='ignorePattern' value='^import\\s.*;'/>
        <property name='max' value='100'/>
    </module>"
3.3.3 Ordering and spacing,"Imports are ordered as follows:
 All static imports in a single block. 
 All non-static imports in a single block.
 If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.
 Within each block the imported names appear in ASCII sort order. ( Note: this is not the same as the import statements being in ASCII sort order, since '.' sorts before ';'.)","<module name=""Checker"">
        <module name=""CustomImportOrder"">
                <property name=""sortImportsInGroupAlphabetically"" value=""true""/>
                <property name=""separateLineBetweenGroups"" value=""true""/>
                <property name=""customImportOrderRules"" value=""STATIC###THIRD_PARTY_PACKAGE""/>
                <property name=""thirdPartyPackageRegExp"" value=""*.""/>
        </module>
</module>",Yes,"<module name='ImportOrder'>
        <property name='option' value='top'/>
        <property name='groups' value='java,javax,org,com'/>
        <property name='ordered' value='true'/>
        <property name='separated' value='true'/>
        <property name='staticGroups' value='true'/>
        <property name='sortStaticImportsAlphabetically' value='true'/>
        <property name='sortImportsAlphabetically' value='true'/>
    </module>"
3.3.4 No static import for classes,Static import is not used for static nested classes. They are imported with normal imports.,,Yes,"<module name='AvoidStaticImport'>
        <property name='id' value='AvoidStaticImport'/>
        <property name='excludes' value='*.*'/>
    </module>"
3.4.1 Exactly one top-level class declaration,Each top-level class resides in a source file of its own.,"<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""OneTopLevelClass""/>
  </module>
</module>",Yes,"<module name='OneTopLevelClass'>
    <property name='id' value='oneTopLevelClass'/>
</module>"
3.4.2 Ordering of class contents,"The order you choose for the members and initializers of your class can have a great effect on learnability. However, there's no single correct recipe for how to do it; different classes may order their contents in different ways.
 What is important is that each class uses 
 some logical order , which its maintainer could explain if asked. For example, new methods are not just habitually added to the end of the class, as that would yield ""chronological by date added"" ordering, which is not a logical ordering.",,No
4 Formatting,"Terminology Note: 
 block-like construct refers to the body of a class, method or constructor. Note that, by Section 4.8.3.1 on array initializers , any array initializer may optionally be treated as if it were a block-like construct.",,Yes,"<module name='Indentation'>
        <property name='basicOffset' value='4'/>
        <property name='braceAdjustment' value='0'/>
        <property name='caseIndent' value='4'/>
        <property name='throwsIndent' value='4'/>
        <property name='lineWrappingIndentation' value='4'/>
        <property name='arrayInitIndent' value='4'/>
    </module>
    
<module name='LeftCurly'>
        <property name='option' value='eol'/>
        <property name='tokens' value='LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, STATIC_INIT, INSTANCE_INIT, CLASS_DEF, METHOD_DEF, CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF'/>
    </module>
    
<module name='RightCurly'>
        <property name='option' value='alone'/>
        <property name='tokens' value='LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, STATIC_INIT, INSTANCE_INIT, CLASS_DEF, METHOD_DEF, CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF'/>
    </module>"
4.1.1 Use of optional braces,"Braces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement.
 Other optional braces, such as those in a lambda expression, remain optional.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""NeedBraces"">
                        <property name=""allowSingleLineStatement"" value=""false""/>
                        <property name=""allowEmptyLoopBody"" value=""false""/>
                        <property name=""tokens"" value=""LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE""/>
                </module>
        </module>
</module>",Yes,"<module name='NeedBraces'>
        <property name='id' value='NeedBraces'/>
        <property name='tokens' value='LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_DO, LITERAL_WHILE'/>
    </module>"
4.1.2 Nonempty blocks: K & R style,"Braces follow the Kernighan and Ritchie style ("" Egyptian brackets "") for nonempty blocks and block-like constructs:
 No line break before the opening brace, except as detailed below. 
 Line break after the opening brace. 
 Line break before the closing brace. 
 Line break after the closing brace, only if that brace terminates a statement or terminates the body of a method, constructor, or named class. For example, there is no line break after the brace if it is followed by `else` or a comma.
 Exception: In places where these rules allow a single statement ending with a semicolon ( `;` ), a block of statements can appear, and the opening brace of this block is preceded by a line break. Blocks like these are typically introduced to limit the scope of local variables, for example inside switch statements.
 Examples:
 return () -> {
  while (condition()) {
  method();
  }
 };
 

 return new MyClass() {
  @Override public void method() {
  if (condition()) {
  try {
  something();
  } catch (ProblemException e) {
  recover();
  }
  } else if (otherCondition()) {
  somethingElse();
  } else {
  lastThing();
  }
  {
  int x = foo();
  frob(x);
  }
  }
 };
 

 A few exceptions for enum classes are given in Section 4.8.1, Enum classes .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""LeftCurly"">
                        <property name=""ignoreEnums"" value=""true""/>
                        <property name=""tokens"" value=""ANNOTATION_DEF , CLASS_DEF , CTOR_DEF , ENUM_CONSTANT_DEF , ENUM_DEF , INTERFACE_DEF , LAMBDA , LITERAL_CASE , LITERAL_CATCH , LITERAL_DEFAULT , LITERAL_DO , LITERAL_ELSE , LITERAL_FINALLY , LITERAL_FOR , LITERAL_IF , LITERAL_SWITCH , LITERAL_SYNCHRONIZED , LITERAL_TRY , LITERAL_WHILE , METHOD_DEF , OBJBLOCK , STATIC_INIT , RECORD_DEF , COMPACT_CTOR_DEF""/>
                        <property name=""option"" value=""eol""/>
                </module>
                <module name=""RightCurly"">
                        <property name=""id"" value=""RightCurlySame""/>
                        <property name=""option"" value=""same""/>
                        <property name=""tokens"" value=""LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO""/>
                </module>
                <module name=""RightCurly"">
                        <property name=""id"" value=""RightCurlyAlone""/>
                        <property name=""option"" value=""alone""/>
                        <property name=""tokens"" value=""CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF, LITERAL_SWITCH, LITERAL_CASE""/>
                </module>
        </module>
</module>",Yes,"<module name='LeftCurly'>
        <property name='option' value='eol'/>
        <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_STATIC_INIT, LITERAL_CLASS_DEF, LITERAL_METHOD_DEF, LITERAL_CONSTRUCTOR_DEF, LITERAL_ARRAY_INIT, LITERAL_ANNOTATION_DEF, LITERAL_ENUM_DEF, LITERAL_ENUM_CONSTANT_DEF'/>
    </module>
    
<module name='RightCurly'>
        <property name='option' value='alone_or_singleline'/>
        <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_STATIC_INIT, LITERAL_CLASS_DEF, LITERAL_METHOD_DEF, LITERAL_CONSTRUCTOR_DEF, LITERAL_ARRAY_INIT, LITERAL_ANNOTATION_DEF, LITERAL_ENUM_DEF, LITERAL_ENUM_CONSTANT_DEF'/>
    </module>"
4.1.3 Empty blocks: may be concise,"An empty block or block-like construct may be in K & R style (as described in Section 4.1.2 ). Alternatively, it may be closed immediately after it is opened, with no characters or line break in between ( `{}` ), unless it is part of a multi-block statement (one that directly contains multiple blocks: `if/else` or `try/catch/finally` ).
 Examples:
  // This is acceptable
  void doNothing() {}
 

  // This is equally acceptable
  void doNothingElse() {
  }
 

  // This is not acceptable: No concise empty blocks in a multi-block statement
  try {
  doSomething();
  } catch (Exception e) {}",,Yes,"<module name='EmptyBlock'>
        <property name='option' value='text'/>
        <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE'/>
    </module>
    
<module name='NeedBraces'>
        <property name='option' value='text'/>
        <property name='tokens' value='LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE'/>
    </module>"
4.2 Block indentation: +2 spaces,"Each time a new block or block-like construct is opened, the indent increases by two spaces. When the block ends, the indent returns to the previous indent level. The indent level applies to both code and comments throughout the block. (See the example in Section 4.1.2, Nonempty blocks: K & R Style .)","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""Indentation"">
                        <property name=""basicOffset"" value=""2""/>
                        <property name=""arrayInitIndent"" value=""2""/>
                </module>
        </module>
</module>",Yes,"<module name='Indentation'>
        <property name='basicOffset' value='2'/>
        <property name='braceAdjustment' value='0'/>
        <property name='caseIndent' value='2'/>
        <property name='throwsIndent' value='2'/>
        <property name='lineWrappingIndentation' value='2'/>
    </module>"
4.3 One statement per line,Each statement is followed by a line break.,"<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""OneStatementPerLine""/>
  </module>
</module>",Yes,"<module name='OneStatementPerLine'>
        <property name='id' value='one.statement.per.line'/>
    </module>"
4.4 Column limit: 100,"Java code has a column limit of 100 characters. A ""character"" means any Unicode code point. Except as noted below, any line that would exceed this limit must be line-wrapped, as explained in Section 4.5, Line-wrapping .
 Each Unicode code point counts as one character, even if its display width is greater or less. For example, if using fullwidth characters , you may choose to wrap the line earlier than where this rule strictly requires.
 Exceptions:
 Lines where obeying the column limit is not possible (for example, a long URL in Javadoc, or a long JSNI method reference). 
 `package` and `import` statements (see Sections 3.2 Package statement and 3.3 Import statements ). 
 Command lines in a comment that may be copied-and-pasted into a shell. 
 Very long identifiers, on the rare occasions they are called for, are allowed to exceed the column limit. In that case, the valid wrapping for the surrounding code is as produced by google-java-format .","<module name=""Checker"">
        <module name=""LineLength"">
                <property name=""ignorePattern"" value=""^(package|import) .*|^import.*|a href|href|http://|https://|ftp://""/>
                <property name=""max"" value=""100""/>
                <property name=""fileExtensions"" value=""java""/>
        </module>
</module>",Yes,"<module name='LineLength'>
        <property name='max' value='100'/>
        <property name='ignorePattern' value='^.*(http|https|ftp|ftps)://.*$'/>
        <property name='ignoreImportStatements' value='true'/>
    </module>"
4.5 Line-wrapping,"Terminology Note: When code that might otherwise legally occupy a single line is divided into multiple lines, this activity is called line-wrapping .
 There is no comprehensive, deterministic formula showing exactly how to line-wrap in every situation. Very often there are several valid ways to line-wrap the same piece of code.
 Note: While the typical reason for line-wrapping is to avoid overflowing the column limit, even code that would in fact fit within the column limit may be line-wrapped at the author's discretion.
 Tip: Extracting a method or local variable may solve the problem without the need to line-wrap.",,Yes,"<module name='LineLength'>
        <property name='max' value='100'/>
    </module>
    
<module name='LeftCurly'>
        <property name='option' value='nl'/>
    </module>
    
<module name='RightCurly'>
        <property name='option' value='alone'/>
    </module>
    
<module name='MethodParamPad'>
        <property name='option' value='space'/>
    </module>
    
<module name='ArrayTypeStyle'>
        <property name='option' value='atclause'/>
    </module>"
4.5.1 Where to break,"The prime directive of line-wrapping is: prefer to break at a higher syntactic level . Also:
 When a line is broken at a non-assignment operator the break comes before the symbol. (Note that this is not the same practice used in Google style for other languages, such as C++ and JavaScript.) 
 This also applies to the following ""operator-like"" symbols: 
 the dot separator ( `.` ) 
 the two colons of a method reference ( `::` ) 
 an ampersand in a type bound ( `<TextendsFoo&Bar>` ) 
 a pipe in a catch block ( `catch(FooException|BarExceptione)` ). 
 When a line is broken at an assignment operator the break typically comes after the symbol, but either way is acceptable. 
 This also applies to the ""assignment-operator-like"" colon in an enhanced `for` (""foreach"") statement. 
 A method or constructor name stays attached to the open parenthesis ( `(` ) that follows it. 
 A comma ( `,` ) stays attached to the token that precedes it. 
 A line is never broken adjacent to the arrow in a lambda, except that a break may come immediately after the arrow if the body of the lambda consists of a single unbraced expression. Examples:
 MyLambda<String, Long, Object> lambda =
  (String label, Long value, Object obj) -> {
  ...
  };
 

 Predicate<String> predicate = str ->
  longExpressionInvolving(str);
 

 Note: The primary goal for line wrapping is to have clear code, not necessarily code that fits in the smallest number of lines.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""OperatorWrap"">
                        <property name=""option"" value=""NL""/>
                        <property name=""tokens"" value=""QUESTION, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR, GE, GT, SL, LE, LT, BXOR ,BOR ,LOR ,BAND ,LAND ,LITERAL_INSTANCEOF ,TYPE_EXTENSION_AND, METHOD_REF ""/>
                </module>
                <module name=""SeparatorWrap"">
                        <property name=""id"" value=""SeparatorWrapNL""/>
                        <property name=""tokens"" value=""DOT, METHOD_REF""/>
                        <property name=""option"" value=""nl""/>
                </module>
                <module name=""SeparatorWrap"">
                        <property name=""id"" value=""SeparatorWrapEOL""/>
                        <property name=""tokens"" value=""COMMA, LPAREN""/>
                        <property name=""option"" value=""EOL""/>
                </module>
                <module name=""MethodParamPad"">
                        <property name=""allowLineBreaks"" value=""true""/>
                        <property name=""option"" value=""space""/>
                        <property name=""tokens"" value=""CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF""/>
                </module>
        </module>
</module>
",Yes,"<module name='LineLength'>
        <property name='max' value='100'/>
    </module>
    
<module name='LineWrapping'>
        <property name='wrapBeforeOperator' value='true'/>
        <property name='wrapBeforeDot' value='true'/>
        <property name='wrapBeforeDoubleColon' value='true'/>
        <property name='wrapBeforeAmpersand' value='true'/>
        <property name='wrapBeforePipe' value='true'/>
        <property name='wrapAfterAssignment' value='true'/>
        <property name='wrapAfterColonInEnhancedFor' value='true'/>
        <property name='methodNameAttachedToOpenParenthesis' value='true'/>
        <property name='commaAttachedToPreviousToken' value='true'/>
        <property name='noBreakBeforeLambdaArrow' value='true'/>
        <property name='breakAfterLambdaArrowForSingleExpression' value='true'/>
    </module>"
4.5.2 Indent continuation lines at least +4 spaces,"When line-wrapping, each line after the first (each continuation line ) is indented at least +4 from the original line.
 When there are multiple continuation lines, indentation may be varied beyond +4 as desired. In general, two continuation lines use the same indentation level if and only if they begin with syntactically parallel elements.
 Section 4.6.3 on Horizontal alignment addresses the discouraged practice of using a variable number of spaces to align certain tokens with previous lines.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""Indentation"">
                        <property name=""lineWrappingIndentation"" value=""4""/>
                        <property name=""forceStrictCondition"" value=""false""/>
                        <property name=""throwsIndent"" value=""4""/>
                </module>
        </module>
</module>",Yes,"<module name='LineLength'>
        <property name='id' value='LineLength'/>
        <property name='max' value='100'/>
    </module>
    
<module name='Indentation'>
        <property name='id' value='Indentation'/>
        <property name='basicOffset' value='4'/>
        <property name='lineWrappingIndentation' value='4'/>
    </module>"
4.6.1 Vertical Whitespace,"A single blank line always appears:
 Between consecutive members or initializers of a class: fields, constructors, methods, nested classes, static initializers, and instance initializers. 
 Exception: A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields. 
 Exception: Blank lines between enum constants are covered in Section 4.8.1 . 
 As required by other sections of this document (such as Section 3, Source file structure , and Section 3.3, Import statements ).
 A single blank line may also appear anywhere it improves readability, for example between statements to organize the code into logical subsections. A blank line before the first member or initializer, or after the last member or initializer of the class, is neither encouraged nor discouraged.
 Multiple consecutive blank lines are permitted, but never required (or encouraged).","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""EmptyLineSeparator"">
                        <property name=""tokens"" value=""CLASS_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, COMPACT_CTOR_DEF""/>
                        <property name=""allowNoEmptyLineBetweenFields"" value=""true""/>
                </module>
        </module>
</module>",Yes,"<module name='EmptyLineSeparator'>
        <property name='id' value='empty.line.separator'/>
        <property name='allowMultipleEmptyLines' value='true'/>
        <property name='tokens' value='CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, STATIC_INIT, INSTANCE_INIT'/>
    </module>
    
<module name='SeparatorWrap'>
        <property name='id' value='separator.wrap'/>
        <property name='option' value='nl'/>
        <property name='tokens' value='COMMA, SEMI, LITERAL_ELSE, LITERAL_FINALLY'/>
    </module>"
4.6.2 Horizontal whitespace,"Beyond where required by the language or other style rules, and apart from literals, comments and Javadoc, a single ASCII space also appears in the following places only .
 Separating any reserved word, such as `if` , `for` or `catch` , from an open parenthesis ( `(` ) that follows it on that line 
 Separating any reserved word, such as `else` or `catch` , from a closing curly brace ( `}` ) that precedes it on that line 
 Before any open curly brace ( `{` ), with two exceptions: 
 `@SomeAnnotation({a,b})` (no space is used) 
 `String[][]x={{""foo""}};` (no space is required between `{{` , by item 9 below) 
 On both sides of any binary or ternary operator. This also applies to the following ""operator-like"" symbols: 
 the ampersand in a conjunctive type bound: `<TextendsFoo&Bar>` 
 the pipe for a catch block that handles multiple exceptions: `catch(FooException|BarExceptione)` 
 the colon ( `:` ) in an enhanced `for` (""foreach"") statement 
 the arrow in a lambda expression: `(Stringstr)->str.length()` 
 but not 
 the two colons ( `::` ) of a method reference, which is written like `Object::toString` 
 the dot separator ( `.` ), which is written like `object.toString()` 
 After `,:;` or the closing parenthesis ( `)` ) of a cast 
 Between any content and a double slash ( `//` ) which begins a comment. Multiple spaces are allowed. 
 Between a double slash ( `//` ) which begins a comment and the comment's text. Multiple spaces are allowed. 
 Between the type and variable of a declaration: `List<String>list` 
 Optional just inside both braces of an array initializer 
 `newint[]{5,6}` and `newint[]{5,6}` are both valid 
 Between a type annotation and `[]` or `...` .
 This rule is never interpreted as requiring or forbidding additional space at the start or end of a line; it addresses only interior space.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""WhitespaceAround"">
      <property name=""allowEmptyConstructors"" value=""true""/>
      <property name=""allowEmptyLambdas"" value=""true""/>
      <property name=""allowEmptyMethods"" value=""true""/>
      <property name=""allowEmptyTypes"" value=""true""/>
      <property name=""allowEmptyLoops"" value=""true""/>
                        <property name=""ignoreEnhancedForColon"" value=""false""/>
                        <property name=""tokens"" value="" ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND""/>
                </module>
                <module name=""ParenPad"">
                        <property name=""tokens"" value=""ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA, RECORD_DEF""/>
                </module>
                <module name=""WhitespaceAfter"">
                        <property name=""tokens"" value=""COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA, LITERAL_YIELD, LITERAL_CASE""/>
                </module>
                <module name=""NoWhitespaceBefore"">
                        <property name=""tokens"" value=""COMMA, SEMI, POST_INC, POST_DEC, DOT, LABELED_STAT, METHOD_REF""/>
                        <property name=""allowLineBreaks"" value=""true""/>
                </module>
                <module name=""NoWhitespaceBeforeCaseDefaultColon""/>
        </module>
</module>",Yes,<module name='WhitespaceAround'>
4.6.3 Horizontal alignment: never required,"Terminology Note: 
 Horizontal alignment is the practice of adding a variable number of additional spaces in your code with the goal of making certain tokens appear directly below certain other tokens on previous lines.
 This practice is permitted, but is never required by Google Style. It is not even required to maintain horizontal alignment in places where it was already used.
 Here is an example without alignment, then using alignment:
 private int x; // this is fine
 private Color color; // this too
 

 private int  x; // permitted, but future edits
 private Color color; // may leave it unaligned
 

 Tip: Alignment can aid readability, but it creates problems for future maintenance. Consider a future change that needs to touch just one line. This change may leave the formerly-pleasing formatting mangled, and that is allowed . More often it prompts the coder (perhaps you) to adjust whitespace on nearby lines as well, possibly triggering a cascading series of reformattings. That one-line change now has a ""blast radius."" This can at worst result in pointless busywork, but at best it still corrupts version history information, slows down reviewers and exacerbates merge conflicts.",,No
4.7 Grouping parentheses: recommended,"Optional grouping parentheses are omitted only when author and reviewer agree that there is no reasonable chance the code will be misinterpreted without them, nor would they have made the code easier to read. It is not reasonable to assume that every reader has the entire Java operator precedence table memorized.",,Yes,"<module name='NeedBraces'>
        <property name='option' value='always'/>
    </module>
    
<module name='AvoidInlineConditionals'>
        <property name='severity' value='warning'/>
    </module>"
4.8.1 Enum classes,"After each comma that follows an enum constant, a line break is optional. Additional blank lines (usually just one) are also allowed. This is one possibility:
 private enum Answer {
  YES {
  @Override public String toString() {
  return ""yes"";
  }
  },
 

  NO,
  MAYBE
 }
 

 An enum class with no methods and no documentation on its constants may optionally be formatted as if it were an array initializer (see Section 4.8.3.1 on array initializers ).
 private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }
 

 Since enum classes are classes , all other rules for formatting classes apply.",,Yes,"<module name='EnumTrailingComma'>
        <property name='id' value='enumTrailingComma'/>
        <property name='allowTrailingComma' value='true'/>
    </module>
    
<module name='EmptyLineSeparator'>
        <property name='id' value='emptyLineSeparator'/>
        <property name='allowMultipleEmptyLines' value='true'/>
        <property name='tokens' value='ENUM_DEF, ENUM_CONSTANT_DEF'/>
    </module>
    
<module name='ArrayTypeStyle'>
        <property name='id' value='arrayTypeStyle'/>
        <property name='allowArrayInitializerStyle' value='true'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='MethodName'>
        <property name='id' value='methodName'/>
        <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>
        <property name='format' value='^[A-Z]$'/>
    </module>
    
<module name='ClassTypeParameterName'>
        <property name='id' value='classTypeParameterName'/>"
4.8.4 Switch statements,"Terminology Note: Inside the braces of a switch block are one or more statement groups . Each statement group consists of one or more switch labels (either `caseFOO:` or `default:` ), followed by one or more statements (or, for the last statement group, zero or more statements).",,Yes,"<module name='SwitchStatement'>
        <property name='id' value='switchStatement'/>
        <property name='maxSwitchLabels' value='1'/>
    </module>
    
<module name='FallThrough'>
        <property name='id' value='fallThrough'/>
        <property name='checkLastCaseGroup' value='true'/>
    </module>"
4.8.6 Comments,"This section addresses implementation comments . Javadoc is addressed separately in Section 7, Javadoc .
 Any line break may be preceded by arbitrary whitespace followed by an implementation comment. Such a comment renders the line non-blank.",,Yes,"<module name='RegexpSingleline'>
        <property name='id' value='implementationComment'/>
        <property name='format' value='^\s*//.*$'/>
        <property name='message' value='Implementation comments should be preceded by arbitrary whitespace.'/>
    </module>"
4.8.6.1 Block comment style,"lock comments are indented at the same level as the surrounding code. They may be in /* ... */ style or // ... style. For multi-line /* ... */ comments, subsequent lines must start with * aligned with the * on the previous line.

/*
 * This is          // And so           /* Or you can
 * okay.            // is this.          * even do this. */
 */
Comments are not enclosed in boxes drawn with asterisks or other characters.

Tip: When writing multi-line comments, use the /* ... */ style if you want automatic code formatters to re-wrap the lines when necessary (paragraph-style). Most formatters don't re-wrap lines in // ... style comment blocks.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""CommentsIndentation"">
                        <property name=""tokens"" value=""SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN""/>
                </module>
        </module>
</module>",Yes,"<module name='CommentsIndentation'>
        <property name='id' value='CommentsIndentation'/>
    </module>
    
<module name='RegexpMultiline'>
        <property name='format' value='^\\s*\\*'/>
        <property name='message' value='Subsequent lines in block comments must start with * aligned with the * on the previous line.'/>
        <property name='ignoreComments' value='false'/>
    </module>
    
<module name='RegexpSingleline'>
        <property name='format' value='^\\s*\\/\\*\\*?[^*]*\\*\\/\\s*$'/>
        <property name='message' value='Block comments should not be enclosed in boxes drawn with asterisks or other characters.'/>
        <property name='ignoreComments' value='false'/>
    </module>"
4.8.7 Modifiers,"Class and member modifiers, when present, appear in the order recommended by the Java Language Specification:
 public protected private abstract default static final transient volatile synchronized native strictfp","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""ModifierOrder""/>
  </module>
</module>",Yes,"<module name='ModifierOrder'>
        <property name='id' value='ModifierOrder'/>
        <property name='order' value='public protected private abstract default static final transient volatile synchronized native strictfp'/>
    </module>"
4.8.8 Numeric Literals,"`long` -valued integer literals use an uppercase `L` suffix, never lowercase (to avoid confusion with the digit `1` ). For example, `3000000000L` rather than `3000000000l` .","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""UpperEll""/>
  </module>
</module>",Yes,"<module name='UpperEll'>
        <property name='id' value='UpperEll'/>
    </module>"
5.1 Rules common to all identifiers,"Identifiers use only ASCII letters and digits, and, in a small number of cases noted below, underscores. Thus each valid identifier name is matched by the regular expression `\w+` .
 In Google Style, special prefixes or suffixes are not used. For example, these names are not Google Style: `name_` , `mName` , `s_name` and `kName` .",,Yes,"<module name='Regexp'>
        <property name='id' value='identifierNaming'/>
        <property name='format' value='\\w+'/>
        <property name='message' value='Identifiers must use only ASCII letters, digits, and underscores.'/>
    </module>
    
<module name='Regexp'>
        <property name='id' value='noSpecialPrefixesSuffixes'/>
        <property name='format' value='^(?!.*(_|m|s_|k)).*$'/>
        <property name='message' value='Identifiers must not use special prefixes or suffixes like name_, mName, s_name, or kName.'/>
    </module>"
5.2.1 Package names,"Package names use only lowercase letters and digits (no underscores). Consecutive words are simply concatenated together. For example, `com.example.deepspace` , not `com.example.deepSpace` or `com.example.deep_space` .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""PackageName"">
                        <property name=""format"" value=""^[a-z]+(\.[a-z][a-z0-9]*)*$""/>
                        <message key=""name.invalidPattern"" value=""Package name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='PackageName'>
        <property name='format' value='^[a-z]+(\.[a-z][a-z0-9]*)*$'/>
    </module>"
5.2.2 Class names,"Class names are written in UpperCamelCase .
 Class names are typically nouns or noun phrases. For example, `Character` or `ImmutableList` . Interface names may also be nouns or noun phrases (for example, `List` ), but may sometimes be adjectives or adjective phrases instead (for example, `Readable` ).
 There are no specific rules or even well-established conventions for naming annotation types.
 A test class has a name that ends with `Test` , for example, `HashIntegrationTest` . If it covers a single class, its name is the name of that class plus `Test` , for example `HashImplTest` .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""TypeName"">
                        <property name=""tokens"" value=""CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, RECORD_DEF""/>
                        <property name=""format"" value=""^[A-Z][a-zA-Z0-9]*$""/>
                        <message key=""name.invalidPattern"" value=""Type name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='Checker'>
        
<module name='TreeWalker'>
            
<module name='ClassTypeParameterName'>
                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>
            </module>
            
<module name='ClassName'>
                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>
            </module>
            
<module name='InterfaceTypeParameterName'>
                <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>
            </module>
            
<module name='TestClassName'>
                <property name='format' value='^.*Test$'/>
            </module>
        </module>
    </module>"
5.2.3 Method names,"Method names are written in lowerCamelCase .
 Method names are typically verbs or verb phrases. For example, `sendMessage` or `stop` .
 Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase , for example `transferMoney_deductsFromSource` . There is no One Correct Way to name test methods.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""MethodName"">
                        <property name=""format"" value=""^[a-z][a-z0-9]\w*$""/>
                        <message key=""name.invalidPattern"" value=""Method name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='MethodName'>
        <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>
    </module>
    
<module name='MethodName'>
        <property name='format' value='^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]*)*$'/>
        <property name='ignoreMethodNames' value='true'/>
    </module>"
5.2.4 Constant names,"Constant names use `UPPER_SNAKE_CASE` : all uppercase letters, with each word separated from the next by a single underscore. But what is a constant, exactly?
 Constants are static final fields whose contents are deeply immutable and whose methods have no detectable side effects. Examples include primitives, strings, immutable value classes, and anything set to `null` . If any of the instance's observable state can change, it is not a constant. Merely intending to never mutate the object is not enough. Examples:
 // Constants
 static final int NUMBER = 5;
 static final ImmutableList<String> NAMES = ImmutableList.of(""Ed"", ""Ann"");
 static final Map<String, Integer> AGES = ImmutableMap.of(""Ed"", 35, ""Ann"", 32);
 static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutable
 static final SomeMutableType[] EMPTY_ARRAY = {};
 

 // Not constants
 static String nonFinal = ""non-final"";
 final String nonStatic = ""non-static"";
 static final Set<String> mutableCollection = new HashSet<String>();
 static final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);
 static final ImmutableMap<String, SomeMutableType> mutableValues =
  ImmutableMap.of(""Ed"", mutableInstance, ""Ann"", mutableInstance2);
 static final Logger logger = Logger.getLogger(MyClass.getName());
 static final String[] nonEmptyArray = {""these"", ""can"", ""change""};
 

 These names are typically nouns or noun phrases.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""ConstantName"">
                        <property name=""format"" value=""^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$""/>
                </module>
        </module>
</module>",Yes,"<module name='ConstantName'>
        <property name='format' value='^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'/>
    </module>
    
<module name='ModifierOrder'>
        <property name='order' value='static, final'/>
    </module>
    
<module name='FinalClass'>
        <property name='tokens' value='CLASS_DEF'/>
    </module>"
5.2.5 Non-constant field names,"Non-constant field names (static or otherwise) are written in lowerCamelCase .
 These names are typically nouns or noun phrases. For example, `computedValues` or `index` .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""MemberName"">
                        <property name=""format"" value=""^[a-z][a-z0-9][a-zA-Z0-9]*$""/>
                        <message key=""name.invalidPattern"" value=""Member name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='RegexpSingleline'>
        <property name='id' value='nonConstantFieldName'/>
        <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>
        <property name='message' value='Non-constant field names should be in lowerCamelCase'/>
    </module>"
5.2.6 Parameter names,"Parameter names are written in lowerCamelCase .
 One-character parameter names in public methods should be avoided.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""ParameterName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Parameter name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""LambdaParameterName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Lambda parameter name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""CatchParameterName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Catch parameter name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""RecordComponentName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Record component name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='ParameterName'>
        <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>
    </module>
    
<module name='SingleCharacterName'>
        <property name='format' value='^[^a-zA-Z]$'/>
        <property name='ignoreOverriddenMethods' value='true'/>
    </module>"
5.2.7 Local variable names,"Local variable names are written in lowerCamelCase .
 Even when final and immutable, local variables are not considered to be constants, and should not be styled as constants.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""LocalVariableName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Local variable name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""LocalFinalVariableName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                </module>
                <module name=""PatternVariableName"">
                        <property name=""format"" value=""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""/>
                        <message key=""name.invalidPattern"" value=""Pattern variable name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='LocalVariableName'>
        <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>
    </module>"
5.2.8 Type variable names,"Each type variable is named in one of two styles:
 A single capital letter, optionally followed by a single numeral (such as `E` , `T` , `X` , `T2` ) 
 A name in the form used for classes (see Section 5.2.2, Class names ), followed by the capital letter `T` (examples: `RequestT` , `FooBarT` ).","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""ClassTypeParameterName"">
                        <property name=""format"" value=""(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)""/>
                        <message key=""name.invalidPattern"" value=""Class type name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""RecordTypeParameterName"">
                        <property name=""format"" value=""(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)""/>
                        <message key=""name.invalidPattern"" value=""Record type name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""MethodTypeParameterName"">
                        <property name=""format"" value=""(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)""/>
                        <message key=""name.invalidPattern"" value=""Method type name ''{0}'' must match pattern ''{1}''.""/>
                </module>
                <module name=""InterfaceTypeParameterName"">
                        <property name=""format"" value=""(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)""/>
                        <message key=""name.invalidPattern"" value=""Interface type name ''{0}'' must match pattern ''{1}''.""/>
                </module>
        </module>
</module>",Yes,"<module name='TypeName'>
        <property name='id' value='TypeName'/>
        <property name='format' value='^[A-Z][0-9]?$|^[A-Z][a-zA-Z0-9]*T$'/>
    </module>"
5.3 Camel case: defined,"Sometimes there is more than one reasonable way to convert an English phrase into camel case, such as when acronyms or unusual constructs like ""IPv6"" or ""iOS"" are present. To improve predictability, Google Style specifies the following (nearly) deterministic scheme.
 Beginning with the prose form of the name:
 Convert the phrase to plain ASCII and remove any apostrophes. For example, ""Müller's algorithm"" might become ""Muellers algorithm"". 
 Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens). 
 Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., ""AdWords"" becomes ""ad words""). Note that a word such as ""iOS"" is not really in camel case per se ; it defies any convention, so this recommendation does not apply. 
 Now lowercase everything (including acronyms), then uppercase only the first character of: 
 ... each word, to yield upper camel case , or 
 ... each word except the first, to yield lower camel case 
 Finally, join all the words into a single identifier.
 Note that the casing of the original words is almost entirely disregarded. Examples:
 Prose form 
 Correct 
 Incorrect 
 ""XML HTTP request"" 
 `XmlHttpRequest` 
 `XMLHTTPRequest` 
 ""new customer ID"" 
 `newCustomerId` 
 `newCustomerID` 
 ""inner stopwatch"" 
 `innerStopwatch` 
 `innerStopWatch` 
 ""supports IPv6 on iOS?"" 
 `supportsIpv6OnIos` 
 `supportsIPv6OnIOS` 
 ""YouTube importer"" 
 `YouTubeImporter` 
 `YoutubeImporter` *
 *Acceptable, but not recommended.
 Note: Some words are ambiguously hyphenated in the English language: for example ""nonempty"" and ""non-empty"" are both correct, so the method names `checkNonempty` and `checkNonEmpty` are likewise both correct.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AbbreviationAsWordInName"">
                        <property name=""ignoreFinal"" value=""false""/>
                        <property name=""allowedAbbreviationLength"" value=""0""/>
                        <property name=""tokens"" value=""CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF, RECORD_COMPONENT_DEF""/>
                </module>
        </module>
</module>",Yes,"<module name='Checker'>\n"" +
        ""    
<module name='TreeWalker'>\n"" +
        ""        
<module name='AbbreviationAsWordInName'>\n"" +
        ""            <property name='allowedAbbreviationLength' value='1'/>\n"" +
        ""            <property name='allowedAbbreviations' value='iOS,IPv6,XML,HTTP'/>\n"" +
        ""        </module>\n"" +
        ""        
<module name='LocalVariableName'>\n"" +
        ""            <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n"" +
        ""        </module>\n"" +
        ""        
<module name='MemberName'>\n"" +
        ""            <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n"" +
        ""        </module>\n"" +
        ""        
<module name='MethodName'>\n"" +
        ""            <property name='format' value='^[a-z][a-zA-Z0-9]*$'/>\n"" +
        ""        </module>\n"" +
        ""        
<module name='ClassName'>\n"" +
        ""            <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n"" +
        ""        </module>\n"" +
        ""        
<module name='InterfaceTypeParameterName'>\n"" +
        ""            <property name='format' value='^[A-Z][a-zA-Z0-9]*$'/>\n"" +
        ""        </module>\n"" +
        ""    </module>\n"" +
        ""</module>"
6.2 Caught exceptions: not ignored,"Except as noted below, it is very rarely correct to do nothing in response to a caught exception. (Typical responses are to log it, or if it is considered ""impossible"", rethrow it as an `AssertionError` .)
 When it truly is appropriate to take no action whatsoever in a catch block, the reason this is justified is explained in a comment.
 try {
  int i = Integer.parseInt(response);
  return handleNumericResponse(i);
 } catch (NumberFormatException ok) {
  // it's not numeric; that's fine, just continue
 }
 return handleTextResponse(response);
 

 Exception: In tests, a caught exception may be ignored without comment if its name is or begins with `expected` . The following is a very common idiom for ensuring that the code under test does throw an exception of the expected type, so a comment is unnecessary here.
 try {
  emptyStack.pop();
  fail();
 } catch (NoSuchElementException expected) {
 }","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""EmptyBlock"">
                        <property name=""option"" value=""TEXT""/>
                        <property name=""tokens"" value=""LITERAL_CATCH""/>
                </module>
        </module>
</module>",Yes,"<module name='EmptyCatchBlock'>
        <property name='exceptionVariableName' value='expected'/>
    </module>"
6.3 Static members: qualified using class,"When a reference to a static class member must be qualified, it is qualified with that class's name, not with a reference or expression of that class's type.
 Foo aFoo = ...;
 Foo.aStaticMethod(); // good
 aFoo.aStaticMethod(); // bad
 somethingThatYieldsAFoo().aStaticMethod(); // very bad",,Yes,"<module name='StaticAccess'>
        <property name='id' value='static.access'/>
        <property name='violationMessage' value='Static member should be accessed using class name.'/>
    </module>"
6.4 Finalizers: not used,"It is extremely rare to override `Object.finalize` .
 Tip: Don't do it. If you absolutely must, first read and understand Effective Java
  
  Item 8 , ""Avoid finalizers and cleaners"" very carefully, and then don't do it.","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""NoFinalizer""/>
  </module>
</module>",Yes,"<module name='NoFinalizer'>
        <property name='id' value='no.finalizer'/>
        <property name='severity' value='error'/>
    </module>"
7.1.1 General form,"The basic formatting of Javadoc blocks is as seen in this example:
 /**
  * Multiple lines of Javadoc text are written here,
  * wrapped normally...
  */
 public int method(String p1) { ... }
 

 ... or in this single-line example:
 /** An especially short bit of Javadoc. */
 

 The basic form is always acceptable. The single-line form may be substituted when the entirety of the Javadoc block (including comment markers) can fit on a single line. Note that this only applies when there are no block tags such as `@return` .","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""SingleLineJavadoc""/>
  </module>
</module>
        ",Yes,"<module name='JavadocStyle'>
        <property name='id' value='JavadocStyle'/>
        <property name='allowSingleLine' value='true'/>
        <property name='checkFirstSentence' value='false'/>
    </module>
    
<module name='SingleLineJavadoc'>
        <property name='id' value='SingleLineJavadoc'/>
        <property name='ignoreInlineTags' value='true'/>
        <property name='ignoreJavadocTags' value='true'/>
    </module>"
7.1.2 Paragraphs,"One blank line—that is, a line containing only the aligned leading asterisk ( `*` )—appears between paragraphs, and before the group of block tags if present. Each paragraph except the first has `<p>` immediately before the first word, with no space after it. HTML tags for other block-level elements, such as `<ul>` or `<table>` , are not preceded with `<p>` .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""JavadocParagraph""/>
                <module name=""RequireEmptyLineBeforeBlockTagGroup""/>
        </module>
</module>",No
7.1.3 Block tags,"Any of the standard ""block tags"" that are used appear in the order `@param` , `@return` , `@throws` , `@deprecated` , and these four types never appear with an empty description. When a block tag doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the `@` .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AtclauseOrder"">
                        <property name=""tagOrder"" value=""@param, @return, @throws, @deprecated""/>
                        <property name=""target"" value=""CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF""/>
                </module>
                <module name=""JavadocTagContinuationIndentation"">
                        <property name=""offset"" value=""4""/>
                </module>
                <module name=""NonEmptyAtclauseDescription""/>
        </module>
</module>",Yes,"<module name='JavadocTagOrder'>
        <property name='tagOrder' value='param,return,throws,deprecated'/>
    </module>
    
<module name='JavadocTagContinuationIndentation'>
        <property name='indentation' value='4'/>
    </module>
    
<module name='JavadocTagCheck'>
        <property name='param' value='nonEmpty'/>
        <property name='return' value='nonEmpty'/>
        <property name='throws' value='nonEmpty'/>
        <property name='deprecated' value='nonEmpty'/>
    </module>"
7.2 The summary fragment,"Each Javadoc block begins with a brief summary fragment . This fragment is very important: it is the only part of the text that appears in certain contexts such as class and method indexes.
 This is a fragment—a noun phrase or verb phrase, not a complete sentence. It does not begin with `A{@codeFoo}isa...` , or `Thismethodreturns...` , nor does it form a complete imperative sentence like `Savetherecord.` . However, the fragment is capitalized and punctuated as if it were a complete sentence.
 Tip: A common mistake is to write simple Javadoc in the form `/**@returnthecustomerID*/` . This is incorrect, and should be changed to `/**ReturnsthecustomerID.*/` .","<module name=""Checker"">
	<module name=""TreeWalker"">
		<module name=""SummaryJavadoc"">
			<property name=""forbiddenSummaryFragments"" value=""^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )""/>
		</module>
	</module>
</module>",Yes,"<module name='JavadocStyle'>
        <property name='id' value='JavadocStyle'/>
        <property name='checkFirstSentence' value='true'/>
    </module>
    
<module name='JavadocMethod'>
        <property name='id' value='JavadocMethod'/>
        <property name='allowMissingParamTags' value='true'/>
        <property name='allowMissingReturnTag' value='true'/>
        <property name='allowMissingThrowsTags' value='true'/>
        <property name='allowMissingDeprecatedTag' value='true'/>
    </module>
    
<module name='SummaryJavadoc'>
        <property name='id' value='SummaryJavadoc'/>
        <property name='forbiddenSummaryFragments' value='A{@code Foo} is a..., This method returns..., Save the record.'/>
        <property name='checkCapitalization' value='true'/>
        <property name='checkPunctuation' value='true'/>
    </module>"
7.3 Where Javadoc is used,"At the minimum , Javadoc is present for every `public` class, and every `public` or `protected` member of such a class, with a few exceptions noted below.
 Additional Javadoc content may also be present, as explained in Section 7.3.4, Non-required Javadoc .","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""MissingJavadocType"">
                        <property name=""scope"" value=""public""/>
                        <property name=""tokens"" value=""CLASS_DEF, INTERFACE_DEF, ENUM_DEF, RECORD_DEF, ANNOTATION_DEF""/>
                        <property name=""excludeScope"" value=""nothing""/>
                </module>
                <module name=""MissingJavadocMethod"">
                        <property name=""scope"" value=""protected""/>
                        <property name=""minLineCount"" value=""2""/>
                        <property name=""allowedAnnotations"" value=""Override, Test""/>
                        <property name=""tokens"" value=""METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF""/>
                </module>
        </module>
</module>",Yes,"<module name='JavadocType'>
        <property name='scope' value='public'/>
        <property name='severity' value='error'/>
    </module>
    
<module name='JavadocMethod'>
        <property name='scope' value='protected'/>
        <property name='severity' value='error'/>
    </module>"
7.3.1 Exception: self-explanatory members,"Javadoc is optional for ""simple, obvious"" members like `getFoo()` , in cases where there really and truly is nothing else worthwhile to say but ""Returns the foo"".
 Important: it is not appropriate to cite this exception to justify omitting relevant information that a typical reader might need to know. For example, for a method named `getCanonicalName` , don't omit its documentation (with the rationale that it would say only `/**Returnsthecanonicalname.*/` ) if a typical reader may have no idea what the term ""canonical name"" means!",,Yes,"<module name='JavadocMethod'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
        <property name='allowMissingJavadocForOverriddenMethods' value='true'/>
        <property name='excludeScope' value='private'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>
        <property name='excludeScope' value='package'/>
        <property name='excludeScope' value='public'/>
        <property name='excludeScope' value='protected'/>"
7.3.2 Exception: overrides,Javadoc is not always present on a method that overrides a supertype method.,"<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""MissingJavadocMethod"">
                        <property name=""scope"" value=""protected""/>
                        <property name=""minLineCount"" value=""2""/>
                        <property name=""allowedAnnotations"" value=""Override""/>
                        <property name=""tokens"" value=""METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF""/>
                </module>
        </module>
</module>",Yes,"<module name='JavadocMethod'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
        <property name='allowMissingJavadocOverride' value='true'/>
    </module>"
7.3.4 Non-required Javadoc,"Other classes and members have Javadoc as needed or desired .
 Whenever an implementation comment would be used to define the overall purpose or behavior of a class or member, that comment is written as Javadoc instead (using `/**` ).
 Non-required Javadoc is not strictly required to follow the formatting rules of Sections 7.1.1, 7.1.2, 7.1.3, and 7.2, though it is of course recommended.",,Yes,"<module name='JavadocStyle'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
    </module>
    
<module name='JavadocType'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
    </module>
    
<module name='JavadocMethod'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
    </module>
    
<module name='JavadocVariable'>
        <property name='scope' value='public'/>
        <property name='allowMissingJavadoc' value='true'/>
    </module>"
4.8.5.1 Type-use annotations,"Type-use annotations appear immediately before the annotated type. An annotation is a type-use annotation if it is meta-annotated with @Target(ElementType.TYPE_USE). Example:
 final @Nullable String name;
 

 public @Nullable Person getPersonByName(String name);",,No
4.8.5.2 Class annotations,"Annotations applying to a class appear immediately after the documentation block, and each annotation is listed on a line of its own (that is, one annotation per line). These line breaks do not constitute line-wrapping (Section 4.5, Line-wrapping), so the indentation level is not increased. Example:
 @Deprecated
 @CheckReturnValue
 public final class Frozzler { ... }","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AnnotationLocation"">
                        <property name=""id"" value=""AnnotationClass""/>
                        <property name=""tokens"" value=""CLASS_DEF""/>
                        <property name=""allowSamelineSingleParameterlessAnnotation"" value=""false""/>
                        <property name=""allowSamelineParameterizedAnnotation"" value=""false""/>
                        <property name=""allowSamelineMultipleAnnotations"" value=""false""/>
                </module>
        </module>
</module>",Yes,"<module name='AnnotationLocation'>
        <property name='id' value='ClassAnnotationLocation'/>
        <property name='tokens' value='CLASS_DEF'/>
        <property name='allowSamelineMultipleAnnotations' value='false'/>
    </module>
    
<module name='SingleLineJavadoc'>
        <property name='id' value='ClassAnnotationJavadoc'/>
        <property name='tokens' value='CLASS_DEF'/>
    </module>"
4.8.5.3 Method and constructor annotations,"The rules for annotations on method and constructor declarations are the same as the previous section. Example:
 @Deprecated
 @Override
 public String getNameIfPresent() { ... }
 Exception: A single parameterless annotation may instead appear together with the first line of the signature, for example:
 @Override public int hashCode() { ... }","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AnnotationLocation"">
                        <property name=""id"" value=""AnnotationLocationMethodCtor""/>
                        <property name=""tokens"" value=""METHOD_DEF, CTOR_DEF""/>
                        <property name=""allowSamelineSingleParameterlessAnnotation"" value=""true""/>
                        <property name=""allowSamelineParameterizedAnnotation"" value=""false""/>
                        <property name=""allowSamelineMultipleAnnotations"" value=""false""/>
                </module>
        </module>
</module>",Yes,"<module name='AnnotationLocation'>
        <property name='id' value='AnnotationLocation'/>
        <property name='allowSamelineSingleParameterless' value='true'/>
    </module>
    
<module name='MethodAnnotation'>
        <property name='id' value='MethodAnnotation'/>
        <property name='allowSamelineSingleParameterless' value='true'/>
    </module>"
4.8.5.4 Field annotations,"Annotations applying to a field also appear immediately after the documentation block, but in this case, multiple annotations (possibly parameterized) may be listed on the same line; for example:
 @Partial @Mock DataLoader loader;","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""AnnotationLocation"">
                        <property name=""id"" value=""AnnotationLocationVariables""/>
                        <property name=""tokens"" value=""VARIABLE_DEF""/>
            <property name=""allowSamelineMultipleAnnotations"" value=""true""/>
 <property name=""allowSamelineParameterizedAnnotation"" value=""true""/>
 <property name=""allowSamelineSingleParameterlessAnnotation"" value=""true""/> 
                </module>
        </module>
</module>",No
4.8.5.5 Parameter and local variable annotations,"There are no specific rules for formatting annotations on parameters or local variables (except, of course, when the annotation is a type-use annotation).",,No
3.4.2.1 Overloads: never split,Methods of a class that share the same name appear in a single contiguous group with no other members in between. The same applies to multiple constructors (which always have the same name). This rule applies even when modifiers such as static or private differ between the methods.,"<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""OverloadMethodsDeclarationOrder""/>
  </module>
</module>",No
4.8.2.1 One variable per declaration,"Every variable declaration (field or local) declares only one variable: declarations such as int a, b; are not used.
 Exception: Multiple variable declarations are acceptable in the header of a for loop.","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""MultipleVariableDeclarations""/>
  </module>
</module>
        ",Yes,"<module name='MultipleVariableDeclarations'>
        <property name='tokens' value='VARIABLE_DEF'/>
        <property name='ignoreForLoop' value='true'/>
    </module>"
4.8.2.2 Declared when needed,"Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""VariableDeclarationUsageDistance""/>
  </module>
</module>",No
"4.8.3.1 Array initializers: can be ""block-like""","Any array initializer may optionally be formatted as if it were a ""block-like construct."" For example, the following are all valid (not an exhaustive list):
 new int[] {  new int[] {
  0, 1, 2, 3 0,
 }  1,
  2,
 new int[] {  3,
  0, 1,  }
  2, 3
 }  new int[]
  {0, 1, 2, 3}",,No
4.8.3.2 No C-style array declarations,"The square brackets form a part of the type, not the variable: String[] args, not String args[].","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""ArrayTypeStyle"">
      <property name=""javaStyle"" value=""true""/>
    </module>
  </module>
</module>",Yes,"<module name='ArrayTypeStyle'>
        <property name='id' value='ArrayTypeStyle'/>
        <property name='tokens' value='ARRAY_DECLARATOR'/>
    </module>"
4.8.4 Switch statements,"Terminology Note: Inside the braces of a switch block are one or more statement groups . Each statement group consists of one or more switch labels (either `caseFOO:` or `default:` ), followed by one or more statements (or, for the last statement group, zero or more statements).",,Yes,"<module name='SwitchStatement'>
        <property name='id' value='switchStatement'/>
        <property name='maxSwitchLabels' value='1'/>
    </module>
    
<module name='FallThrough'>
        <property name='id' value='fallThrough'/>
        <property name='checkLastCaseGroup' value='true'/>
    </module>"
4.8.4.1 Indentation,"As with any other block, the contents of a switch block are indented +2.
 After a switch label, there is a line break, and the indentation level is increased +2, exactly as if a block were being opened. The following switch label returns to the previous indentation level, as if a block had been closed.","<module name=""Checker"">
        <module name=""TreeWalker"">
                <module name=""Indentation"">
                        <property name=""caseIndent"" value=""2""/>
                </module>
        </module>
</module>",Yes,"<module name='Indentation'>
        <property name='caseIndent' value='2'/>
        <property name='basicOffset' value='2'/>
        <property name='braceAdjustment' value='0'/>
        <property name='lineWrappingIndentation' value='2'/>
    </module>
    
<module name='LeftCurly'>
        <property name='option' value='nl'/>
    </module>
    
<module name='RightCurly'>
        <property name='option' value='nl'/>
    </module>"
4.8.4.2 Fall-through: commented,"Within a switch block, each statement group either terminates abruptly (with a break, continue, return or thrown exception), or is marked with a comment to indicate that execution will or might continue into the next statement group. Any comment that communicates the idea of fall-through is sufficient (typically // fall through). This special comment is not required in the last statement group of the switch block. Example:
 switch (input) {
  case 1:
  case 2:
  prepareOneOrTwo();
  // fall through
  case 3:
  handleOneTwoOrThree();
  break;
  default:
  handleLargeNumber(input);
 }
 Notice that no comment is needed after case 1:, only at the end of the statement group.","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""FallThrough"">
      <property name=""reliefPattern"" value="".*""/>
</module>
  </module>
</module>",Yes,"<module name='FallThrough'>
        <property name='commentFormat' value='fall[ -]?through'/>
    </module>"
4.8.4.3 Presence of the default label,"Each switch statement includes a default statement group, even if it contains no code.
 Exception: A switch statement for an enum type may omit the default statement group, if it includes explicit cases covering all possible values of that type. This enables IDEs or other static analysis tools to issue a warning if any cases were missed.","<module name=""Checker"">
  <module name=""TreeWalker"">
    <module name=""MissingSwitchDefault""/>
  </module>
</module>
        ",Yes,"<module name='MissingSwitchDefault'>
        <property name='id' value='default'/>
        <property name='ignoreEnums' value='true'/>
    </module>"
