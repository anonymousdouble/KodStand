Please generate CheckStyle configurations based on the following style convention and CheckStyle rules. Ensure that the output includes only the relevant configurations for the style convention and excludes any unrelated rules.


Style Convention:
2.2 File encoding: UTF-8
Source files are encoded in UTF-8 .

CheckStyle Rules:
[Rule]
FileTabCharacter
[Description]
Checks that there are no tab characters ('\t') in the source code.


Rationale:



Developers should not need to configure the tab width of their
text editors in order to be able to read source code.


From the Apache jakarta coding standards: In a distributed
development environment, when the commit messages get sent
to a mailing list, they are almost impossible to read if you
use tabs.
[Options]
eachLine, Control whether to report on each line containing a tab, or just the first instance.
fileExtensions, Specify the file extensions of the files to process.
[Rule]
NoCodeInFile
[Description]
Checks whether file contains code.
Java compiler is not raising errors on files with no code or all commented out.
Files which are considered to have no code:



File with no text


File with single-line comment(s)


File with a multi line comment(s).
[Options]
[Rule]
FileLength
[Description]
Checks for long source files.


Rationale: If a source file becomes very long it is hard to
understand. Therefore, long classes should usually be refactored
into several individual classes that focus on a specific task.
[Options]
fileExtensions, Specify the file extensions of the files to process.
max, Specify the maximum number of lines allowed.
[Rule]
OneTopLevelClass
[Description]
Checks that each top-level class, interface, enum
or annotation resides in a source file of its own.
Official description of a 'top-level' term:
7.6. Top Level Type Declarations.
If file doesn't contain public class, interface, enum or annotation,
top-level type is the first type in file.
[Options]
[Rule]
Translation
[Description]
Ensures the correct translation of code by checking property files for
consistency regarding their keys. Two property files
describing one and the same context are consistent if they
contain the same keys. TranslationCheck also can check an existence of required
translations which must exist in project, if requiredTranslations
option is used.


Consider the following properties file in the same directory:



#messages.properties
hello=Hello
cancel=Cancel

#messages_de.properties
hell=Hallo
ok=OK


The Translation check will find the typo in the German hello
key, the missing ok key in the default resource file and the
missing cancel key in the German resource file:



messages_de.properties: Key 'hello' missing.
messages_de.properties: Key 'cancel' missing.
messages.properties: Key 'hell' missing.
messages.properties: Key 'ok' missing.
[Options]
baseName, Specify
Base name of resource bundles which contain message resources. It helps the check to distinguish config and localization resources.
fileExtensions, Specify the file extensions of the files to process.
requiredTranslations, Specify language codes of required translations which must exist in project.
[Rule]
AvoidEscapedUnicodeCharacters
[Description]
Restricts using

Unicode escapes (such as \u221e).
It is possible to allow using escapes for

non-printable, control characters.
Also, this check can be configured to allow using escapes
if trail comment is present. By the option it is possible to
allow using escapes if literal contains only them.
[Options]
allowByTailComment, Allow use escapes if trail comment is present.
allowEscapesForControlCharacters, Allow use escapes for non-printable, control characters.
allowIfAllCharactersEscaped, Allow if all characters in literal are escaped.
allowNonPrintableEscapes, Allow use escapes for non-printable, whitespace characters.
[Rule]
OuterTypeFilename
[Description]
Checks that the outer type name and the file name match. For example,
the class Foo must be in a file named
Foo.java.
[Options]
[Rule]
UniqueProperties
[Description]
Detects duplicated keys in properties files.


Rationale: Multiple property keys usually appear after merge
or rebase of several branches. While there are no problems in
runtime, there can be a confusion due to having different values
for the duplicated properties.
[Options]
fileExtensions, Specify the file extensions of the files to process.
[Rule]
JavadocPackage
[Description]
Checks that each Java package has a Javadoc file used for
commenting. By default, it only allows a package-info.java file, but can be
configured to allow a package.html
file.


A violation will be reported if both files exist as this is not
allowed by the Javadoc tool.
[Options]
allowLegacy, Allow legacy package.html file to be used.
fileExtensions, Specify the file extensions of the files to process.
[Rule]
MultipleStringLiterals
[Description]
Checks for multiple occurrences of the same string literal within a
single file.


Rationale: Code duplication makes maintenance more difficult, so it
can be better to replace the multiple occurrences with a constant.
[Options]
allowedDuplicates, Specify the maximum number of occurrences to allow without generating a warning.
ignoreOccurrenceContext, Specify token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like annotations or static initializers from the check.
ignoreStringsRegexp, Specify RegExp for ignored strings (with quotation marks).

Response Format Should be a json object:
{
    "Answer":  Respond with either Yes or No to show whether CheckStyle configurations exist for the given style convention,
    "Configuration": If the answer is Yes, provide the configuration. There can be one or multiple CheckStyle rules for the given style convention. The configuration format should be xml format:
    "<module name='rule_name_1'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_n' value='value_n'/>
    </module>
    ...
    <module name='rule_name_x'>
        <property name='id' value='id_value_1'/>
        <property name='name_1' value='value_1'/>
        <property name='name_2' value='value_2'/>
        ...
        <property name='name_m' value='value_m'/>
    </module>"
}
