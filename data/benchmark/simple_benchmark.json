{
    "2.2 File encoding: UTF-8": [],
    "2.3.1 Whitespace characters": [
        {
            "modulename": "FileTabCharacter"
        },
        {
            "modulename": "SingleSpaceSeparator"
        }
    ],
    "2.3.2 Special escape sequences": [
        {
            "modulename": "IllegalTokenText",
            "format": "\\\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\\\(0(10|11|12|14|15|42|47)|134)",
            "tokens": "STRING_LITERAL, CHAR_LITERAL"
        }
    ],
    "2.3.3 Non-ASCII characters": [
        {
            "modulename": "AvoidEscapedUnicodeCharacters",
            "allowByTailComment": "true",
            "allowEscapesForControlCharacters": "true",
            "allowNonPrintableEscapes": "true"
        }
    ],
    "3 Source file structure": [
        {
            "modulename": "EmptyLineSeparator",
            "tokens": "PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF"
        },
        {
            "modulename": "OneTopLevelClass"
        },
        {
            "modulename": "PackageDeclaration"
        }
    ],
    "3.1 License or copyright information, if present": [],
    "3.2 Package statement": [
        {
            "modulename": "LineLength",
            "ignorePattern": "OurSetDefault",
            "max": "100"
        },
        {
            "modulename": "NoLineWrap",
            "tokens": "PACKAGE_DEF"
        }
    ],
    "3.3.1 No wildcard imports": [
        {
            "modulename": "AvoidStarImport"
        }
    ],
    "3.3.2 No line-wrapping": [
        {
            "modulename": "LineLength",
            "ignorePattern": "OurSetDefault",
            "max": "100"
        },
        {
            "modulename": "NoLineWrap",
            "tokens": " IMPORT, STATIC_IMPORT"
        }
    ],
    "3.3.3 Ordering and spacing": [
        {
            "modulename": "CustomImportOrder",
            "sortImportsInGroupAlphabetically": "true",
            "separateLineBetweenGroups": "true",
            "customImportOrderRules": "STATIC###THIRD_PARTY_PACKAGE"
        }
    ],
    "3.3.4 No static import for classes": [],
    "3.4.1 Exactly one top-level class declaration": [
        {
            "modulename": "OneTopLevelClass"
        },
        {
            "modulename": "OuterTypeFilename"
        }
    ],
    "3.4.2 Ordering of class contents": [
        {
            "modulename": "DeclarationOrder"
        }
    ],
    "4 Formatting": [],
    "4.1.1 Use of optional braces": [
        {
            "modulename": "NeedBraces",
            "allowEmptyLoopBody": "false",
            "allowSingleLineStatement": "false",
            "tokens": "LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"
        }
    ],
    "4.1.2 Nonempty blocks: K & R style": [
        {
            "modulename": "LeftCurly",
            "ignoreEnums": "true",
            "tokens": "ANNOTATION_DEF , CLASS_DEF , CTOR_DEF , ENUM_CONSTANT_DEF , ENUM_DEF , INTERFACE_DEF , LAMBDA , LITERAL_CASE , LITERAL_CATCH , LITERAL_DEFAULT , LITERAL_DO , LITERAL_ELSE , LITERAL_FINALLY , LITERAL_FOR , LITERAL_IF , LITERAL_SWITCH , LITERAL_SYNCHRONIZED , LITERAL_TRY , LITERAL_WHILE , METHOD_DEF , OBJBLOCK , STATIC_INIT , RECORD_DEF , COMPACT_CTOR_DEF",
            "option": "eol"
        },
        {
            "modulename": "RightCurly",
            "id": "RightCurlySame",
            "option": "same",
            "tokens": "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"
        },
        {
            "modulename": "RightCurly",
            "id": "RightCurlyAlone",
            "option": "alone",
            "tokens": "CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF, LITERAL_SWITCH, LITERAL_CASE"
        }
    ],
    "4.1.3 Empty blocks: may be concise": [],
    "4.2 Block indentation: +2 spaces": [
        {
            "modulename": "Indentation",
            "basicOffset": "2"
        },
        {
            "modulename": "CommentsIndentation",
            "tokens": "SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"
        }
    ],
    "4.3 One statement per line": [
        {
            "modulename": "OneStatementPerLine"
        }
    ],
    "4.4 Column limit: 100": [
        {
            "modulename": "LineLength",
            "max": "100",
            "ignorePattern": "OurSetDefault"
        }
    ],
    "4.5 Line-wrapping": [],
    "4.5.1 Where to break": [
        {
            "modulename": "OperatorWrap",
            "option": "NL",
            "tokens": "QUESTION, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR, GE, GT, SL, LE, LT, BXOR ,BOR ,LOR ,BAND ,LAND ,LITERAL_INSTANCEOF ,TYPE_EXTENSION_AND, METHOD_REF "
        },
        {
            "modulename": "SeparatorWrap",
            "id": "SeparatorWrapNL",
            "tokens": "DOT, METHOD_REF",
            "option": "nl"
        },
        {
            "modulename": "SeparatorWrap",
            "id": "SeparatorWrapEOL",
            "tokens": "COMMA, LPAREN",
            "option": "EOL"
        },
        {
            "modulename": "MethodParamPad",
            "allowLineBreaks": "true",
            "option": "space",
            "tokens": "CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF"
        }
    ],
    "4.5.2 Indent continuation lines at least +4 spaces": [
        {
            "modulename": "Indentation",
            "forceStrictCondition": "false"
        }
    ],
    "4.6.1 Vertical Whitespace": [
        {
            "modulename": "EmptyLineSeparator",
            "tokens": "CLASS_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, COMPACT_CTOR_DEF",
            "allowNoEmptyLineBetweenFields": "true"
        }
    ],
    "4.6.2 Horizontal whitespace": [
        {
            "modulename": "WhitespaceAround",
            "allowEmptyConstructors": "true",
            "allowEmptyLambdas": "true",
            "allowEmptyMethods": "true",
            "allowEmptyTypes": "true",
            "allowEmptyLoops": "true",
            "ignoreEnhancedForColon": "false",
            "tokens": " ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"
        },
        {
            "modulename": "ParenPad",
            "tokens": "ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA, RECORD_DEF"
        },
        {
            "modulename": "WhitespaceAfter",
            "tokens": "COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA, LITERAL_YIELD, LITERAL_CASE"
        },
        {
            "modulename": "NoWhitespaceBefore",
            "tokens": "COMMA, SEMI, POST_INC, POST_DEC, DOT, LABELED_STAT, METHOD_REF",
            "allowLineBreaks": "true"
        },
        {
            "modulename": "NoWhitespaceBeforeCaseDefaultColon"
        }
    ],
    "4.6.3 Horizontal alignment: never required": [],
    "4.7 Grouping parentheses: recommended": [
        {
            "modulename": "UnnecessaryParentheses"
        }
    ],
    "4.8.1 Enum classes": [],
    "4.8.4 Switch statements": [],
    "4.8.6 Comments": [],
    "4.8.6.1 Block comment style": [
        {
            "modulename": "CommentsIndentation",
            "tokens": "SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"
        }
    ],
    "4.8.7 Modifiers": [
        {
            "modulename": "ModifierOrder"
        }
    ],
    "4.8.8 Numeric Literals": [
        {
            "modulename": "UpperEll"
        }
    ],
    "5.1 Rules common to all identifiers": [
        {
            "modulename": "IllegalIdentifierName",
            "format": "^[a-zA-Z0-9_]+$"
        }
    ],
    "5.2.1 Package names": [
        {
            "modulename": "PackageName",
            "format": "^[a-z]+(\\.[a-z][a-z0-9]*)*$"
        }
    ],
    "5.2.2 Class names": [
        {
            "modulename": "TypeName",
            "tokens": "CLASS_DEF",
            "format": "^[A-Z][a-zA-Z0-9]*$"
        }
    ],
    "5.2.3 Method names": [
        {
            "modulename": "MethodName",
            "format": "^[a-z][a-z0-9]\\w*$"
        }
    ],
    "5.2.4 Constant names": [
        {
            "modulename": "ConstantName",
            "format": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"
        }
    ],
    "5.2.5 Non-constant field names": [
        {
            "modulename": "MemberName",
            "format": "^[a-z][a-z0-9][a-zA-Z0-9]*$"
        }
    ],
    "5.2.6 Parameter names": [
        {
            "modulename": "ParameterName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        },
        {
            "modulename": "LambdaParameterName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        },
        {
            "modulename": "CatchParameterName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        },
        {
            "modulename": "RecordComponentName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        }
    ],
    "5.2.7 Local variable names": [
        {
            "modulename": "LocalVariableName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        },
        {
            "modulename": "LocalFinalVariableName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        },
        {
            "modulename": "PatternVariableName",
            "format": "^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"
        }
    ],
    "5.2.8 Type variable names": [
        {
            "modulename": "ClassTypeParameterName",
            "format": "(^[A-Z][0-9]?$)|([A-Z][a-zA-Z0-9]*[T]$)"
        },
        {
            "modulename": "RecordTypeParameterName",
            "format": "(^[A-Z][0-9]?$)|([A-Z][a-zA-Z0-9]*[T]$)"
        },
        {
            "modulename": "MethodTypeParameterName",
            "format": "(^[A-Z][0-9]?$)|([A-Z][a-zA-Z0-9]*[T]$)"
        },
        {
            "modulename": "InterfaceTypeParameterName",
            "format": "(^[A-Z][0-9]?$)|([A-Z][a-zA-Z0-9]*[T]$)"
        }
    ],
    "5.3 Camel case: defined": [
        {
            "modulename": "AbbreviationAsWordInName",
            "ignoreFinal": "false",
            "allowedAbbreviationLength": "0",
            "tokens": "CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF, RECORD_COMPONENT_DEF"
        }
    ],
    "6.1 @Override: always used": [
        {
            "modulename": "MissingOverride"
        }
    ],
    "6.2 Caught exceptions: not ignored": [
        {
            "modulename": "EmptyCatchBlock",
            "commentFormat": ".*",
            "exceptionVariableName": "^expected.*"
        }
    ],
    "6.3 Static members: qualified using class": [],
    "6.4 Finalizers: not used": [
        {
            "modulename": "NoFinalizer"
        }
    ],
    "7.1.1 General form": [
        {
            "modulename": "SingleLineJavadoc"
        },
        {
            "modulename": "JavadocStyle"
        }
    ],
    "7.1.2 Paragraphs": [
        {
            "modulename": "JavadocParagraph"
        },
        {
            "modulename": "RequireEmptyLineBeforeBlockTagGroup"
        }
    ],
    "7.1.3 Block tags": [
        {
            "modulename": "AtclauseOrder",
            "tagOrder": "@param, @return, @throws, @deprecated"
        },
        {
            "modulename": "JavadocTagContinuationIndentation",
            "offset": "4"
        },
        {
            "modulename": "NonEmptyAtclauseDescription"
        }
    ],
    "7.2 The summary fragment": [
        {
            "modulename": "SummaryJavadoc",
            "forbiddenSummaryFragments": "OurSetDefault"
        },
        {
            "modulename": "JavadocStyle",
            "endOfSentenceFormat": "([.?!][ \\t\\n\\r\\f<])|([.?!]$)"
        }
    ],
    "7.3 Where Javadoc is used": [
        {
            "modulename": "MissingJavadocType",
            "scope": "public",
            "tokens": "CLASS_DEF, INTERFACE_DEF, ENUM_DEF, RECORD_DEF, ANNOTATION_DEF"
        },
        {
            "modulename": "MissingJavadocMethod",
            "scope": "protected",
            "tokens": "METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF"
        }
    ],
    "7.3.1 Exception: self-explanatory members": [],
    "7.3.2 Exception: overrides": [
        {
            "modulename": "MissingJavadocMethod",
            "allowedAnnotations": "Override",
            "tokens": "METHOD_DEF,CTOR_DEF,ANNOTATION_FIELD_DEF,COMPACT_CTOR_DEF"
        }
    ],
    "7.3.4 Non-required Javadoc": [],
    "4.8.5.1 Type-use annotations": [],
    "4.8.5.2 Class annotations": [
        {
            "modulename": "AnnotationLocation",
            "tokens": "CLASS_DEF",
            "allowSamelineMultipleAnnotations": "false"
        }
    ],
    "4.8.5.3 Method and constructor annotations": [
        {
            "modulename": "AnnotationLocation",
            "tokens": "METHOD_DEF, CTOR_DEF",
            "allowSamelineSingleParameterlessAnnotation": "true",
            "allowSamelineMultipleAnnotations": "false"
        }
    ],
    "4.8.5.4 Field annotations": [
        {
            "modulename": "AnnotationLocation",
            "tokens": "VARIABLE_DEF",
            "allowSamelineMultipleAnnotations": "true",
            "allowSamelineParameterizedAnnotation": "true",
            "allowSamelineSingleParameterlessAnnotation": "true"
        }
    ],
    "4.8.5.5 Parameter and local variable annotations": [],
    "3.4.2.1 Overloads: never split": [
        {
            "modulename": "OverloadMethodsDeclarationOrder",
            "id": "overload_methods_declaration_order"
        }
    ],
    "4.8.2.1 One variable per declaration": [
        {
            "modulename": "MultipleVariableDeclarations"
        }
    ],
    "4.8.2.2 Declared when needed": [
        {
            "modulename": "VariableDeclarationUsageDistance"
        }
    ],
    "4.8.3.1 Array initializers: can be \"block-like\"": [],
    "4.8.3.2 No C-style array declarations": [
        {
            "modulename": "ArrayTypeStyle",
            "javaStyle": "true"
        }
    ],
    "4.8.4.1 Indentation": [
        {
            "modulename": "Indentation",
            "caseIndent": "2"
        }
    ],
    "4.8.4.2 Fall-through: commented": [
        {
            "modulename": "FallThrough",
            "checkLastCaseGroup": "false",
            "reliefPattern": "OurSetDefault"
        }
    ],
    "4.8.4.3 Presence of the default label": [
        {
            "modulename": "MissingSwitchDefault"
        }
    ]
}